//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;

(function(){

///////////////////////////////////////////////////////////////////////
//                                                                   //
// packages/angularjs_angular/packages/angularjs_angular.js          //
//                                                                   //
///////////////////////////////////////////////////////////////////////
                                                                     //
(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angularjs:angular/angular.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license AngularJS v1.3.15                                                                                          // 2
 * (c) 2010-2014 Google, Inc. http://angularjs.org                                                                     // 3
 * License: MIT                                                                                                        // 4
 */                                                                                                                    // 5
(function(window, document, undefined) {'use strict';                                                                  // 6
                                                                                                                       // 7
  /**                                                                                                                  // 8
   * @description                                                                                                      // 9
   *                                                                                                                   // 10
   * This object provides a utility for producing rich Error messages within                                           // 11
   * Angular. It can be called as follows:                                                                             // 12
   *                                                                                                                   // 13
   * var exampleMinErr = minErr('example');                                                                            // 14
   * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                          // 15
   *                                                                                                                   // 16
   * The above creates an instance of minErr in the example namespace. The                                             // 17
   * resulting error will have a namespaced error code of example.one.  The                                            // 18
   * resulting error will replace {0} with the value of foo, and {1} with the                                          // 19
   * value of bar. The object is not restricted in the number of arguments it can                                      // 20
   * take.                                                                                                             // 21
   *                                                                                                                   // 22
   * If fewer arguments are specified than necessary for interpolation, the extra                                      // 23
   * interpolation markers will be preserved in the final string.                                                      // 24
   *                                                                                                                   // 25
   * Since data will be parsed statically during a build step, some restrictions                                       // 26
   * are applied with respect to how minErr instances are created and called.                                          // 27
   * Instances should have names of the form namespaceMinErr for a minErr created                                      // 28
   * using minErr('namespace') . Error codes, namespaces and template strings                                          // 29
   * should all be static strings, not variables or general expressions.                                               // 30
   *                                                                                                                   // 31
   * @param {string} module The namespace to use for the new minErr instance.                                          // 32
   * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                     // 33
   *   error from returned function, for cases when a particular type of error is useful.                              // 34
   * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                         // 35
   */                                                                                                                  // 36
                                                                                                                       // 37
  function minErr(module, ErrorConstructor) {                                                                          // 38
    ErrorConstructor = ErrorConstructor || Error;                                                                      // 39
    return function() {                                                                                                // 40
      var code = arguments[0],                                                                                         // 41
        prefix = '[' + (module ? module + ':' : '') + code + '] ',                                                     // 42
        template = arguments[1],                                                                                       // 43
        templateArgs = arguments,                                                                                      // 44
                                                                                                                       // 45
        message, i;                                                                                                    // 46
                                                                                                                       // 47
      message = prefix + template.replace(/\{\d+\}/g, function(match) {                                                // 48
        var index = +match.slice(1, -1), arg;                                                                          // 49
                                                                                                                       // 50
        if (index + 2 < templateArgs.length) {                                                                         // 51
          return toDebugString(templateArgs[index + 2]);                                                               // 52
        }                                                                                                              // 53
        return match;                                                                                                  // 54
      });                                                                                                              // 55
                                                                                                                       // 56
      message = message + '\nhttp://errors.angularjs.org/1.3.15/' +                                                    // 57
      (module ? module + '/' : '') + code;                                                                             // 58
      for (i = 2; i < arguments.length; i++) {                                                                         // 59
        message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' +                                               // 60
        encodeURIComponent(toDebugString(arguments[i]));                                                               // 61
      }                                                                                                                // 62
      return new ErrorConstructor(message);                                                                            // 63
    };                                                                                                                 // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  /* We need to tell jshint what variables are being exported */                                                       // 67
  /* global angular: true,                                                                                             // 68
   msie: true,                                                                                                         // 69
   jqLite: true,                                                                                                       // 70
   jQuery: true,                                                                                                       // 71
   slice: true,                                                                                                        // 72
   splice: true,                                                                                                       // 73
   push: true,                                                                                                         // 74
   toString: true,                                                                                                     // 75
   ngMinErr: true,                                                                                                     // 76
   angularModule: true,                                                                                                // 77
   uid: true,                                                                                                          // 78
   REGEX_STRING_REGEXP: true,                                                                                          // 79
   VALIDITY_STATE_PROPERTY: true,                                                                                      // 80
                                                                                                                       // 81
   lowercase: true,                                                                                                    // 82
   uppercase: true,                                                                                                    // 83
   manualLowercase: true,                                                                                              // 84
   manualUppercase: true,                                                                                              // 85
   nodeName_: true,                                                                                                    // 86
   isArrayLike: true,                                                                                                  // 87
   forEach: true,                                                                                                      // 88
   sortedKeys: true,                                                                                                   // 89
   forEachSorted: true,                                                                                                // 90
   reverseParams: true,                                                                                                // 91
   nextUid: true,                                                                                                      // 92
   setHashKey: true,                                                                                                   // 93
   extend: true,                                                                                                       // 94
   int: true,                                                                                                          // 95
   inherit: true,                                                                                                      // 96
   noop: true,                                                                                                         // 97
   identity: true,                                                                                                     // 98
   valueFn: true,                                                                                                      // 99
   isUndefined: true,                                                                                                  // 100
   isDefined: true,                                                                                                    // 101
   isObject: true,                                                                                                     // 102
   isString: true,                                                                                                     // 103
   isNumber: true,                                                                                                     // 104
   isDate: true,                                                                                                       // 105
   isArray: true,                                                                                                      // 106
   isFunction: true,                                                                                                   // 107
   isRegExp: true,                                                                                                     // 108
   isWindow: true,                                                                                                     // 109
   isScope: true,                                                                                                      // 110
   isFile: true,                                                                                                       // 111
   isFormData: true,                                                                                                   // 112
   isBlob: true,                                                                                                       // 113
   isBoolean: true,                                                                                                    // 114
   isPromiseLike: true,                                                                                                // 115
   trim: true,                                                                                                         // 116
   escapeForRegexp: true,                                                                                              // 117
   isElement: true,                                                                                                    // 118
   makeMap: true,                                                                                                      // 119
   includes: true,                                                                                                     // 120
   arrayRemove: true,                                                                                                  // 121
   copy: true,                                                                                                         // 122
   shallowCopy: true,                                                                                                  // 123
   equals: true,                                                                                                       // 124
   csp: true,                                                                                                          // 125
   concat: true,                                                                                                       // 126
   sliceArgs: true,                                                                                                    // 127
   bind: true,                                                                                                         // 128
   toJsonReplacer: true,                                                                                               // 129
   toJson: true,                                                                                                       // 130
   fromJson: true,                                                                                                     // 131
   startingTag: true,                                                                                                  // 132
   tryDecodeURIComponent: true,                                                                                        // 133
   parseKeyValue: true,                                                                                                // 134
   toKeyValue: true,                                                                                                   // 135
   encodeUriSegment: true,                                                                                             // 136
   encodeUriQuery: true,                                                                                               // 137
   angularInit: true,                                                                                                  // 138
   bootstrap: true,                                                                                                    // 139
   getTestability: true,                                                                                               // 140
   snake_case: true,                                                                                                   // 141
   bindJQuery: true,                                                                                                   // 142
   assertArg: true,                                                                                                    // 143
   assertArgFn: true,                                                                                                  // 144
   assertNotHasOwnProperty: true,                                                                                      // 145
   getter: true,                                                                                                       // 146
   getBlockNodes: true,                                                                                                // 147
   hasOwnProperty: true,                                                                                               // 148
   createMap: true,                                                                                                    // 149
                                                                                                                       // 150
   NODE_TYPE_ELEMENT: true,                                                                                            // 151
   NODE_TYPE_TEXT: true,                                                                                               // 152
   NODE_TYPE_COMMENT: true,                                                                                            // 153
   NODE_TYPE_DOCUMENT: true,                                                                                           // 154
   NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                  // 155
   */                                                                                                                  // 156
                                                                                                                       // 157
////////////////////////////////////                                                                                   // 158
                                                                                                                       // 159
  /**                                                                                                                  // 160
   * @ngdoc module                                                                                                     // 161
   * @name ng                                                                                                          // 162
   * @module ng                                                                                                        // 163
   * @description                                                                                                      // 164
   *                                                                                                                   // 165
   * # ng (core module)                                                                                                // 166
   * The ng module is loaded by default when an AngularJS application is started. The module itself                    // 167
   * contains the essential components for an AngularJS application to function. The table below                       // 168
   * lists a high level breakdown of each of the services/factories, filters, directives and testing                   // 169
   * components available within this core module.                                                                     // 170
   *                                                                                                                   // 171
   * <div doc-module-components="ng"></div>                                                                            // 172
   */                                                                                                                  // 173
                                                                                                                       // 174
  var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;                                                                      // 175
                                                                                                                       // 176
// The name of a form control's ValidityState property.                                                                // 177
// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 178
  var VALIDITY_STATE_PROPERTY = 'validity';                                                                            // 179
                                                                                                                       // 180
  /**                                                                                                                  // 181
   * @ngdoc function                                                                                                   // 182
   * @name angular.lowercase                                                                                           // 183
   * @module ng                                                                                                        // 184
   * @kind function                                                                                                    // 185
   *                                                                                                                   // 186
   * @description Converts the specified string to lowercase.                                                          // 187
   * @param {string} string String to be converted to lowercase.                                                       // 188
   * @returns {string} Lowercased string.                                                                              // 189
   */                                                                                                                  // 190
  var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                         // 191
  var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                // 192
                                                                                                                       // 193
  /**                                                                                                                  // 194
   * @ngdoc function                                                                                                   // 195
   * @name angular.uppercase                                                                                           // 196
   * @module ng                                                                                                        // 197
   * @kind function                                                                                                    // 198
   *                                                                                                                   // 199
   * @description Converts the specified string to uppercase.                                                          // 200
   * @param {string} string String to be converted to uppercase.                                                       // 201
   * @returns {string} Uppercased string.                                                                              // 202
   */                                                                                                                  // 203
  var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                         // 204
                                                                                                                       // 205
                                                                                                                       // 206
  var manualLowercase = function(s) {                                                                                  // 207
    /* jshint bitwise: false */                                                                                        // 208
    return isString(s)                                                                                                 // 209
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 210
      : s;                                                                                                             // 211
  };                                                                                                                   // 212
  var manualUppercase = function(s) {                                                                                  // 213
    /* jshint bitwise: false */                                                                                        // 214
    return isString(s)                                                                                                 // 215
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 216
      : s;                                                                                                             // 217
  };                                                                                                                   // 218
                                                                                                                       // 219
                                                                                                                       // 220
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 221
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 222
// with correct but slower alternatives.                                                                               // 223
  if ('i' !== 'I'.toLowerCase()) {                                                                                     // 224
    lowercase = manualLowercase;                                                                                       // 225
    uppercase = manualUppercase;                                                                                       // 226
  }                                                                                                                    // 227
                                                                                                                       // 228
                                                                                                                       // 229
  var                                                                                                                  // 230
    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 231
    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 232
    jQuery,           // delay binding                                                                                 // 233
    slice             = [].slice,                                                                                      // 234
    splice            = [].splice,                                                                                     // 235
    push              = [].push,                                                                                       // 236
    toString          = Object.prototype.toString,                                                                     // 237
    ngMinErr          = minErr('ng'),                                                                                  // 238
                                                                                                                       // 239
    /** @name angular */                                                                                               // 240
    angular           = window.angular || (window.angular = {}),                                                       // 241
    angularModule,                                                                                                     // 242
    uid               = 0;                                                                                             // 243
                                                                                                                       // 244
  /**                                                                                                                  // 245
   * documentMode is an IE-only property                                                                               // 246
   * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                 // 247
   */                                                                                                                  // 248
  msie = document.documentMode;                                                                                        // 249
                                                                                                                       // 250
                                                                                                                       // 251
  /**                                                                                                                  // 252
   * @private                                                                                                          // 253
   * @param {*} obj                                                                                                    // 254
   * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                    // 255
   *                   String ...)                                                                                     // 256
   */                                                                                                                  // 257
  function isArrayLike(obj) {                                                                                          // 258
    if (obj == null || isWindow(obj)) {                                                                                // 259
      return false;                                                                                                    // 260
    }                                                                                                                  // 261
                                                                                                                       // 262
    var length = obj.length;                                                                                           // 263
                                                                                                                       // 264
    if (obj.nodeType === NODE_TYPE_ELEMENT && length) {                                                                // 265
      return true;                                                                                                     // 266
    }                                                                                                                  // 267
                                                                                                                       // 268
    return isString(obj) || isArray(obj) || length === 0 ||                                                            // 269
      typeof length === 'number' && length > 0 && (length - 1) in obj;                                                 // 270
  }                                                                                                                    // 271
                                                                                                                       // 272
  /**                                                                                                                  // 273
   * @ngdoc function                                                                                                   // 274
   * @name angular.forEach                                                                                             // 275
   * @module ng                                                                                                        // 276
   * @kind function                                                                                                    // 277
   *                                                                                                                   // 278
   * @description                                                                                                      // 279
   * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                    // 280
   * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`            // 281
   * is the value of an object property or an array element, `key` is the object property key or                       // 282
   * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.             // 283
   *                                                                                                                   // 284
   * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                  // 285
   * using the `hasOwnProperty` method.                                                                                // 286
   *                                                                                                                   // 287
   * Unlike ES262's                                                                                                    // 288
   * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                         // 289
   * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                      // 290
   * return the value provided.                                                                                        // 291
   *                                                                                                                   // 292
   ```js                                                                                                               // 293
   var values = {name: 'misko', gender: 'male'};                                                                       // 294
   var log = [];                                                                                                       // 295
   angular.forEach(values, function(value, key) {                                                                      // 296
       this.push(key + ': ' + value);                                                                                  // 297
     }, log);                                                                                                          // 298
   expect(log).toEqual(['name: misko', 'gender: male']);                                                               // 299
   ```                                                                                                                 // 300
   *                                                                                                                   // 301
   * @param {Object|Array} obj Object to iterate over.                                                                 // 302
   * @param {Function} iterator Iterator function.                                                                     // 303
   * @param {Object=} context Object to become context (`this`) for the iterator function.                             // 304
   * @returns {Object|Array} Reference to `obj`.                                                                       // 305
   */                                                                                                                  // 306
                                                                                                                       // 307
  function forEach(obj, iterator, context) {                                                                           // 308
    var key, length;                                                                                                   // 309
    if (obj) {                                                                                                         // 310
      if (isFunction(obj)) {                                                                                           // 311
        for (key in obj) {                                                                                             // 312
          // Need to check if hasOwnProperty exists,                                                                   // 313
          // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                   // 314
          if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
            iterator.call(context, obj[key], key, obj);                                                                // 316
          }                                                                                                            // 317
        }                                                                                                              // 318
      } else if (isArray(obj) || isArrayLike(obj)) {                                                                   // 319
        var isPrimitive = typeof obj !== 'object';                                                                     // 320
        for (key = 0, length = obj.length; key < length; key++) {                                                      // 321
          if (isPrimitive || key in obj) {                                                                             // 322
            iterator.call(context, obj[key], key, obj);                                                                // 323
          }                                                                                                            // 324
        }                                                                                                              // 325
      } else if (obj.forEach && obj.forEach !== forEach) {                                                             // 326
        obj.forEach(iterator, context, obj);                                                                           // 327
      } else {                                                                                                         // 328
        for (key in obj) {                                                                                             // 329
          if (obj.hasOwnProperty(key)) {                                                                               // 330
            iterator.call(context, obj[key], key, obj);                                                                // 331
          }                                                                                                            // 332
        }                                                                                                              // 333
      }                                                                                                                // 334
    }                                                                                                                  // 335
    return obj;                                                                                                        // 336
  }                                                                                                                    // 337
                                                                                                                       // 338
  function sortedKeys(obj) {                                                                                           // 339
    return Object.keys(obj).sort();                                                                                    // 340
  }                                                                                                                    // 341
                                                                                                                       // 342
  function forEachSorted(obj, iterator, context) {                                                                     // 343
    var keys = sortedKeys(obj);                                                                                        // 344
    for (var i = 0; i < keys.length; i++) {                                                                            // 345
      iterator.call(context, obj[keys[i]], keys[i]);                                                                   // 346
    }                                                                                                                  // 347
    return keys;                                                                                                       // 348
  }                                                                                                                    // 349
                                                                                                                       // 350
                                                                                                                       // 351
  /**                                                                                                                  // 352
   * when using forEach the params are value, key, but it is often useful to have key, value.                          // 353
   * @param {function(string, *)} iteratorFn                                                                           // 354
   * @returns {function(*, string)}                                                                                    // 355
   */                                                                                                                  // 356
  function reverseParams(iteratorFn) {                                                                                 // 357
    return function(value, key) { iteratorFn(key, value); };                                                           // 358
  }                                                                                                                    // 359
                                                                                                                       // 360
  /**                                                                                                                  // 361
   * A consistent way of creating unique IDs in angular.                                                               // 362
   *                                                                                                                   // 363
   * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                 // 364
   * we hit number precision issues in JavaScript.                                                                     // 365
   *                                                                                                                   // 366
   * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                  // 367
   *                                                                                                                   // 368
   * @returns {number} an unique alpha-numeric string                                                                  // 369
   */                                                                                                                  // 370
  function nextUid() {                                                                                                 // 371
    return ++uid;                                                                                                      // 372
  }                                                                                                                    // 373
                                                                                                                       // 374
                                                                                                                       // 375
  /**                                                                                                                  // 376
   * Set or clear the hashkey for an object.                                                                           // 377
   * @param obj object                                                                                                 // 378
   * @param h the hashkey (!truthy to delete the hashkey)                                                              // 379
   */                                                                                                                  // 380
  function setHashKey(obj, h) {                                                                                        // 381
    if (h) {                                                                                                           // 382
      obj.$$hashKey = h;                                                                                               // 383
    } else {                                                                                                           // 384
      delete obj.$$hashKey;                                                                                            // 385
    }                                                                                                                  // 386
  }                                                                                                                    // 387
                                                                                                                       // 388
  /**                                                                                                                  // 389
   * @ngdoc function                                                                                                   // 390
   * @name angular.extend                                                                                              // 391
   * @module ng                                                                                                        // 392
   * @kind function                                                                                                    // 393
   *                                                                                                                   // 394
   * @description                                                                                                      // 395
   * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                // 396
   * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so         // 397
   * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                    // 398
   * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).                            // 399
   *                                                                                                                   // 400
   * @param {Object} dst Destination object.                                                                           // 401
   * @param {...Object} src Source object(s).                                                                          // 402
   * @returns {Object} Reference to `dst`.                                                                             // 403
   */                                                                                                                  // 404
  function extend(dst) {                                                                                               // 405
    var h = dst.$$hashKey;                                                                                             // 406
                                                                                                                       // 407
    for (var i = 1, ii = arguments.length; i < ii; i++) {                                                              // 408
      var obj = arguments[i];                                                                                          // 409
      if (obj) {                                                                                                       // 410
        var keys = Object.keys(obj);                                                                                   // 411
        for (var j = 0, jj = keys.length; j < jj; j++) {                                                               // 412
          var key = keys[j];                                                                                           // 413
          dst[key] = obj[key];                                                                                         // 414
        }                                                                                                              // 415
      }                                                                                                                // 416
    }                                                                                                                  // 417
                                                                                                                       // 418
    setHashKey(dst, h);                                                                                                // 419
    return dst;                                                                                                        // 420
  }                                                                                                                    // 421
                                                                                                                       // 422
  function int(str) {                                                                                                  // 423
    return parseInt(str, 10);                                                                                          // 424
  }                                                                                                                    // 425
                                                                                                                       // 426
                                                                                                                       // 427
  function inherit(parent, extra) {                                                                                    // 428
    return extend(Object.create(parent), extra);                                                                       // 429
  }                                                                                                                    // 430
                                                                                                                       // 431
  /**                                                                                                                  // 432
   * @ngdoc function                                                                                                   // 433
   * @name angular.noop                                                                                                // 434
   * @module ng                                                                                                        // 435
   * @kind function                                                                                                    // 436
   *                                                                                                                   // 437
   * @description                                                                                                      // 438
   * A function that performs no operations. This function can be useful when writing code in the                      // 439
   * functional style.                                                                                                 // 440
   ```js                                                                                                               // 441
   function foo(callback) {                                                                                            // 442
       var result = calculateResult();                                                                                 // 443
       (callback || angular.noop)(result);                                                                             // 444
     }                                                                                                                 // 445
   ```                                                                                                                 // 446
   */                                                                                                                  // 447
  function noop() {}                                                                                                   // 448
  noop.$inject = [];                                                                                                   // 449
                                                                                                                       // 450
                                                                                                                       // 451
  /**                                                                                                                  // 452
   * @ngdoc function                                                                                                   // 453
   * @name angular.identity                                                                                            // 454
   * @module ng                                                                                                        // 455
   * @kind function                                                                                                    // 456
   *                                                                                                                   // 457
   * @description                                                                                                      // 458
   * A function that returns its first argument. This function is useful when writing code in the                      // 459
   * functional style.                                                                                                 // 460
   *                                                                                                                   // 461
   ```js                                                                                                               // 462
   function transformer(transformationFn, value) {                                                                     // 463
       return (transformationFn || angular.identity)(value);                                                           // 464
     };                                                                                                                // 465
   ```                                                                                                                 // 466
   * @param {*} value to be returned.                                                                                  // 467
   * @returns {*} the value passed in.                                                                                 // 468
   */                                                                                                                  // 469
  function identity($) {return $;}                                                                                     // 470
  identity.$inject = [];                                                                                               // 471
                                                                                                                       // 472
                                                                                                                       // 473
  function valueFn(value) {return function() {return value;};}                                                         // 474
                                                                                                                       // 475
  /**                                                                                                                  // 476
   * @ngdoc function                                                                                                   // 477
   * @name angular.isUndefined                                                                                         // 478
   * @module ng                                                                                                        // 479
   * @kind function                                                                                                    // 480
   *                                                                                                                   // 481
   * @description                                                                                                      // 482
   * Determines if a reference is undefined.                                                                           // 483
   *                                                                                                                   // 484
   * @param {*} value Reference to check.                                                                              // 485
   * @returns {boolean} True if `value` is undefined.                                                                  // 486
   */                                                                                                                  // 487
  function isUndefined(value) {return typeof value === 'undefined';}                                                   // 488
                                                                                                                       // 489
                                                                                                                       // 490
  /**                                                                                                                  // 491
   * @ngdoc function                                                                                                   // 492
   * @name angular.isDefined                                                                                           // 493
   * @module ng                                                                                                        // 494
   * @kind function                                                                                                    // 495
   *                                                                                                                   // 496
   * @description                                                                                                      // 497
   * Determines if a reference is defined.                                                                             // 498
   *                                                                                                                   // 499
   * @param {*} value Reference to check.                                                                              // 500
   * @returns {boolean} True if `value` is defined.                                                                    // 501
   */                                                                                                                  // 502
  function isDefined(value) {return typeof value !== 'undefined';}                                                     // 503
                                                                                                                       // 504
                                                                                                                       // 505
  /**                                                                                                                  // 506
   * @ngdoc function                                                                                                   // 507
   * @name angular.isObject                                                                                            // 508
   * @module ng                                                                                                        // 509
   * @kind function                                                                                                    // 510
   *                                                                                                                   // 511
   * @description                                                                                                      // 512
   * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                          // 513
   * considered to be objects. Note that JavaScript arrays are objects.                                                // 514
   *                                                                                                                   // 515
   * @param {*} value Reference to check.                                                                              // 516
   * @returns {boolean} True if `value` is an `Object` but not `null`.                                                 // 517
   */                                                                                                                  // 518
  function isObject(value) {                                                                                           // 519
    // http://jsperf.com/isobject4                                                                                     // 520
    return value !== null && typeof value === 'object';                                                                // 521
  }                                                                                                                    // 522
                                                                                                                       // 523
                                                                                                                       // 524
  /**                                                                                                                  // 525
   * @ngdoc function                                                                                                   // 526
   * @name angular.isString                                                                                            // 527
   * @module ng                                                                                                        // 528
   * @kind function                                                                                                    // 529
   *                                                                                                                   // 530
   * @description                                                                                                      // 531
   * Determines if a reference is a `String`.                                                                          // 532
   *                                                                                                                   // 533
   * @param {*} value Reference to check.                                                                              // 534
   * @returns {boolean} True if `value` is a `String`.                                                                 // 535
   */                                                                                                                  // 536
  function isString(value) {return typeof value === 'string';}                                                         // 537
                                                                                                                       // 538
                                                                                                                       // 539
  /**                                                                                                                  // 540
   * @ngdoc function                                                                                                   // 541
   * @name angular.isNumber                                                                                            // 542
   * @module ng                                                                                                        // 543
   * @kind function                                                                                                    // 544
   *                                                                                                                   // 545
   * @description                                                                                                      // 546
   * Determines if a reference is a `Number`.                                                                          // 547
   *                                                                                                                   // 548
   * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.                                           // 549
   *                                                                                                                   // 550
   * If you wish to exclude these then you can use the native                                                          // 551
   * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)           // 552
   * method.                                                                                                           // 553
   *                                                                                                                   // 554
   * @param {*} value Reference to check.                                                                              // 555
   * @returns {boolean} True if `value` is a `Number`.                                                                 // 556
   */                                                                                                                  // 557
  function isNumber(value) {return typeof value === 'number';}                                                         // 558
                                                                                                                       // 559
                                                                                                                       // 560
  /**                                                                                                                  // 561
   * @ngdoc function                                                                                                   // 562
   * @name angular.isDate                                                                                              // 563
   * @module ng                                                                                                        // 564
   * @kind function                                                                                                    // 565
   *                                                                                                                   // 566
   * @description                                                                                                      // 567
   * Determines if a value is a date.                                                                                  // 568
   *                                                                                                                   // 569
   * @param {*} value Reference to check.                                                                              // 570
   * @returns {boolean} True if `value` is a `Date`.                                                                   // 571
   */                                                                                                                  // 572
  function isDate(value) {                                                                                             // 573
    return toString.call(value) === '[object Date]';                                                                   // 574
  }                                                                                                                    // 575
                                                                                                                       // 576
                                                                                                                       // 577
  /**                                                                                                                  // 578
   * @ngdoc function                                                                                                   // 579
   * @name angular.isArray                                                                                             // 580
   * @module ng                                                                                                        // 581
   * @kind function                                                                                                    // 582
   *                                                                                                                   // 583
   * @description                                                                                                      // 584
   * Determines if a reference is an `Array`.                                                                          // 585
   *                                                                                                                   // 586
   * @param {*} value Reference to check.                                                                              // 587
   * @returns {boolean} True if `value` is an `Array`.                                                                 // 588
   */                                                                                                                  // 589
  var isArray = Array.isArray;                                                                                         // 590
                                                                                                                       // 591
  /**                                                                                                                  // 592
   * @ngdoc function                                                                                                   // 593
   * @name angular.isFunction                                                                                          // 594
   * @module ng                                                                                                        // 595
   * @kind function                                                                                                    // 596
   *                                                                                                                   // 597
   * @description                                                                                                      // 598
   * Determines if a reference is a `Function`.                                                                        // 599
   *                                                                                                                   // 600
   * @param {*} value Reference to check.                                                                              // 601
   * @returns {boolean} True if `value` is a `Function`.                                                               // 602
   */                                                                                                                  // 603
  function isFunction(value) {return typeof value === 'function';}                                                     // 604
                                                                                                                       // 605
                                                                                                                       // 606
  /**                                                                                                                  // 607
   * Determines if a value is a regular expression object.                                                             // 608
   *                                                                                                                   // 609
   * @private                                                                                                          // 610
   * @param {*} value Reference to check.                                                                              // 611
   * @returns {boolean} True if `value` is a `RegExp`.                                                                 // 612
   */                                                                                                                  // 613
  function isRegExp(value) {                                                                                           // 614
    return toString.call(value) === '[object RegExp]';                                                                 // 615
  }                                                                                                                    // 616
                                                                                                                       // 617
                                                                                                                       // 618
  /**                                                                                                                  // 619
   * Checks if `obj` is a window object.                                                                               // 620
   *                                                                                                                   // 621
   * @private                                                                                                          // 622
   * @param {*} obj Object to check                                                                                    // 623
   * @returns {boolean} True if `obj` is a window obj.                                                                 // 624
   */                                                                                                                  // 625
  function isWindow(obj) {                                                                                             // 626
    return obj && obj.window === obj;                                                                                  // 627
  }                                                                                                                    // 628
                                                                                                                       // 629
                                                                                                                       // 630
  function isScope(obj) {                                                                                              // 631
    return obj && obj.$evalAsync && obj.$watch;                                                                        // 632
  }                                                                                                                    // 633
                                                                                                                       // 634
                                                                                                                       // 635
  function isFile(obj) {                                                                                               // 636
    return toString.call(obj) === '[object File]';                                                                     // 637
  }                                                                                                                    // 638
                                                                                                                       // 639
                                                                                                                       // 640
  function isFormData(obj) {                                                                                           // 641
    return toString.call(obj) === '[object FormData]';                                                                 // 642
  }                                                                                                                    // 643
                                                                                                                       // 644
                                                                                                                       // 645
  function isBlob(obj) {                                                                                               // 646
    return toString.call(obj) === '[object Blob]';                                                                     // 647
  }                                                                                                                    // 648
                                                                                                                       // 649
                                                                                                                       // 650
  function isBoolean(value) {                                                                                          // 651
    return typeof value === 'boolean';                                                                                 // 652
  }                                                                                                                    // 653
                                                                                                                       // 654
                                                                                                                       // 655
  function isPromiseLike(obj) {                                                                                        // 656
    return obj && isFunction(obj.then);                                                                                // 657
  }                                                                                                                    // 658
                                                                                                                       // 659
                                                                                                                       // 660
  var trim = function(value) {                                                                                         // 661
    return isString(value) ? value.trim() : value;                                                                     // 662
  };                                                                                                                   // 663
                                                                                                                       // 664
// Copied from:                                                                                                        // 665
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 666
// Prereq: s is a string.                                                                                              // 667
  var escapeForRegexp = function(s) {                                                                                  // 668
    return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').                                                         // 669
      replace(/\x08/g, '\\x08');                                                                                       // 670
  };                                                                                                                   // 671
                                                                                                                       // 672
                                                                                                                       // 673
  /**                                                                                                                  // 674
   * @ngdoc function                                                                                                   // 675
   * @name angular.isElement                                                                                           // 676
   * @module ng                                                                                                        // 677
   * @kind function                                                                                                    // 678
   *                                                                                                                   // 679
   * @description                                                                                                      // 680
   * Determines if a reference is a DOM element (or wrapped jQuery element).                                           // 681
   *                                                                                                                   // 682
   * @param {*} value Reference to check.                                                                              // 683
   * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                  // 684
   */                                                                                                                  // 685
  function isElement(node) {                                                                                           // 686
    return !!(node &&                                                                                                  // 687
    (node.nodeName  // we are a direct element                                                                         // 688
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 689
  }                                                                                                                    // 690
                                                                                                                       // 691
  /**                                                                                                                  // 692
   * @param str 'key1,key2,...'                                                                                        // 693
   * @returns {object} in the form of {key1:true, key2:true, ...}                                                      // 694
   */                                                                                                                  // 695
  function makeMap(str) {                                                                                              // 696
    var obj = {}, items = str.split(","), i;                                                                           // 697
    for (i = 0; i < items.length; i++)                                                                                 // 698
      obj[items[i]] = true;                                                                                            // 699
    return obj;                                                                                                        // 700
  }                                                                                                                    // 701
                                                                                                                       // 702
                                                                                                                       // 703
  function nodeName_(element) {                                                                                        // 704
    return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                         // 705
  }                                                                                                                    // 706
                                                                                                                       // 707
  function includes(array, obj) {                                                                                      // 708
    return Array.prototype.indexOf.call(array, obj) != -1;                                                             // 709
  }                                                                                                                    // 710
                                                                                                                       // 711
  function arrayRemove(array, value) {                                                                                 // 712
    var index = array.indexOf(value);                                                                                  // 713
    if (index >= 0)                                                                                                    // 714
      array.splice(index, 1);                                                                                          // 715
    return value;                                                                                                      // 716
  }                                                                                                                    // 717
                                                                                                                       // 718
  /**                                                                                                                  // 719
   * @ngdoc function                                                                                                   // 720
   * @name angular.copy                                                                                                // 721
   * @module ng                                                                                                        // 722
   * @kind function                                                                                                    // 723
   *                                                                                                                   // 724
   * @description                                                                                                      // 725
   * Creates a deep copy of `source`, which should be an object or an array.                                           // 726
   *                                                                                                                   // 727
   * * If no destination is supplied, a copy of the object or array is created.                                        // 728
   * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                      // 729
   *   are deleted and then all elements/properties from the source are copied to it.                                  // 730
   * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                      // 731
   * * If `source` is identical to 'destination' an exception will be thrown.                                          // 732
   *                                                                                                                   // 733
   * @param {*} source The source that will be used to make a copy.                                                    // 734
   *                   Can be any type, including primitives, `null`, and `undefined`.                                 // 735
   * @param {(Object|Array)=} destination Destination into which the source is copied. If                              // 736
   *     provided, must be of the same type as `source`.                                                               // 737
   * @returns {*} The copy or updated `destination`, if `destination` was specified.                                   // 738
   *                                                                                                                   // 739
   * @example                                                                                                          // 740
   <example module="copyExample">                                                                                      // 741
   <file name="index.html">                                                                                            // 742
   <div ng-controller="ExampleController">                                                                             // 743
   <form novalidate class="simple-form">                                                                               // 744
   Name: <input type="text" ng-model="user.name" /><br />                                                              // 745
   E-mail: <input type="email" ng-model="user.email" /><br />                                                          // 746
   Gender: <input type="radio" ng-model="user.gender" value="male" />male                                              // 747
   <input type="radio" ng-model="user.gender" value="female" />female<br />                                            // 748
   <button ng-click="reset()">RESET</button>                                                                           // 749
   <button ng-click="update(user)">SAVE</button>                                                                       // 750
   </form>                                                                                                             // 751
   <pre>form = {{user | json}}</pre>                                                                                   // 752
   <pre>master = {{master | json}}</pre>                                                                               // 753
   </div>                                                                                                              // 754
                                                                                                                       // 755
   <script>                                                                                                            // 756
   angular.module('copyExample', [])                                                                                   // 757
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 758
      $scope.master= {};                                                                                               // 759
                                                                                                                       // 760
      $scope.update = function(user) {                                                                                 // 761
        // Example with 1 argument                                                                                     // 762
        $scope.master= angular.copy(user);                                                                             // 763
      };                                                                                                               // 764
                                                                                                                       // 765
      $scope.reset = function() {                                                                                      // 766
        // Example with 2 arguments                                                                                    // 767
        angular.copy($scope.master, $scope.user);                                                                      // 768
      };                                                                                                               // 769
                                                                                                                       // 770
      $scope.reset();                                                                                                  // 771
    }]);                                                                                                               // 772
   </script>                                                                                                           // 773
   </file>                                                                                                             // 774
   </example>                                                                                                          // 775
   */                                                                                                                  // 776
  function copy(source, destination, stackSource, stackDest) {                                                         // 777
    if (isWindow(source) || isScope(source)) {                                                                         // 778
      throw ngMinErr('cpws',                                                                                           // 779
        "Can't copy! Making copies of Window or Scope instances is not supported.");                                   // 780
    }                                                                                                                  // 781
                                                                                                                       // 782
    if (!destination) {                                                                                                // 783
      destination = source;                                                                                            // 784
      if (source) {                                                                                                    // 785
        if (isArray(source)) {                                                                                         // 786
          destination = copy(source, [], stackSource, stackDest);                                                      // 787
        } else if (isDate(source)) {                                                                                   // 788
          destination = new Date(source.getTime());                                                                    // 789
        } else if (isRegExp(source)) {                                                                                 // 790
          destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);                              // 791
          destination.lastIndex = source.lastIndex;                                                                    // 792
        } else if (isObject(source)) {                                                                                 // 793
          var emptyObject = Object.create(Object.getPrototypeOf(source));                                              // 794
          destination = copy(source, emptyObject, stackSource, stackDest);                                             // 795
        }                                                                                                              // 796
      }                                                                                                                // 797
    } else {                                                                                                           // 798
      if (source === destination) throw ngMinErr('cpi',                                                                // 799
        "Can't copy! Source and destination are identical.");                                                          // 800
                                                                                                                       // 801
      stackSource = stackSource || [];                                                                                 // 802
      stackDest = stackDest || [];                                                                                     // 803
                                                                                                                       // 804
      if (isObject(source)) {                                                                                          // 805
        var index = stackSource.indexOf(source);                                                                       // 806
        if (index !== -1) return stackDest[index];                                                                     // 807
                                                                                                                       // 808
        stackSource.push(source);                                                                                      // 809
        stackDest.push(destination);                                                                                   // 810
      }                                                                                                                // 811
                                                                                                                       // 812
      var result;                                                                                                      // 813
      if (isArray(source)) {                                                                                           // 814
        destination.length = 0;                                                                                        // 815
        for (var i = 0; i < source.length; i++) {                                                                      // 816
          result = copy(source[i], null, stackSource, stackDest);                                                      // 817
          if (isObject(source[i])) {                                                                                   // 818
            stackSource.push(source[i]);                                                                               // 819
            stackDest.push(result);                                                                                    // 820
          }                                                                                                            // 821
          destination.push(result);                                                                                    // 822
        }                                                                                                              // 823
      } else {                                                                                                         // 824
        var h = destination.$$hashKey;                                                                                 // 825
        if (isArray(destination)) {                                                                                    // 826
          destination.length = 0;                                                                                      // 827
        } else {                                                                                                       // 828
          forEach(destination, function(value, key) {                                                                  // 829
            delete destination[key];                                                                                   // 830
          });                                                                                                          // 831
        }                                                                                                              // 832
        for (var key in source) {                                                                                      // 833
          if (source.hasOwnProperty(key)) {                                                                            // 834
            result = copy(source[key], null, stackSource, stackDest);                                                  // 835
            if (isObject(source[key])) {                                                                               // 836
              stackSource.push(source[key]);                                                                           // 837
              stackDest.push(result);                                                                                  // 838
            }                                                                                                          // 839
            destination[key] = result;                                                                                 // 840
          }                                                                                                            // 841
        }                                                                                                              // 842
        setHashKey(destination,h);                                                                                     // 843
      }                                                                                                                // 844
                                                                                                                       // 845
    }                                                                                                                  // 846
    return destination;                                                                                                // 847
  }                                                                                                                    // 848
                                                                                                                       // 849
  /**                                                                                                                  // 850
   * Creates a shallow copy of an object, an array or a primitive.                                                     // 851
   *                                                                                                                   // 852
   * Assumes that there are no proto properties for objects.                                                           // 853
   */                                                                                                                  // 854
  function shallowCopy(src, dst) {                                                                                     // 855
    if (isArray(src)) {                                                                                                // 856
      dst = dst || [];                                                                                                 // 857
                                                                                                                       // 858
      for (var i = 0, ii = src.length; i < ii; i++) {                                                                  // 859
        dst[i] = src[i];                                                                                               // 860
      }                                                                                                                // 861
    } else if (isObject(src)) {                                                                                        // 862
      dst = dst || {};                                                                                                 // 863
                                                                                                                       // 864
      for (var key in src) {                                                                                           // 865
        if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                       // 866
          dst[key] = src[key];                                                                                         // 867
        }                                                                                                              // 868
      }                                                                                                                // 869
    }                                                                                                                  // 870
                                                                                                                       // 871
    return dst || src;                                                                                                 // 872
  }                                                                                                                    // 873
                                                                                                                       // 874
                                                                                                                       // 875
  /**                                                                                                                  // 876
   * @ngdoc function                                                                                                   // 877
   * @name angular.equals                                                                                              // 878
   * @module ng                                                                                                        // 879
   * @kind function                                                                                                    // 880
   *                                                                                                                   // 881
   * @description                                                                                                      // 882
   * Determines if two objects or two values are equivalent. Supports value types, regular                             // 883
   * expressions, arrays and objects.                                                                                  // 884
   *                                                                                                                   // 885
   * Two objects or values are considered equivalent if at least one of the following is true:                         // 886
   *                                                                                                                   // 887
   * * Both objects or values pass `===` comparison.                                                                   // 888
   * * Both objects or values are of the same type and all of their properties are equal by                            // 889
   *   comparing them with `angular.equals`.                                                                           // 890
   * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                     // 891
   * * Both values represent the same regular expression (In JavaScript,                                               // 892
   *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                    // 893
   *   representation matches).                                                                                        // 894
   *                                                                                                                   // 895
   * During a property comparison, properties of `function` type and properties with names                             // 896
   * that begin with `$` are ignored.                                                                                  // 897
   *                                                                                                                   // 898
   * Scope and DOMWindow objects are being compared only by identify (`===`).                                          // 899
   *                                                                                                                   // 900
   * @param {*} o1 Object or value to compare.                                                                         // 901
   * @param {*} o2 Object or value to compare.                                                                         // 902
   * @returns {boolean} True if arguments are equal.                                                                   // 903
   */                                                                                                                  // 904
  function equals(o1, o2) {                                                                                            // 905
    if (o1 === o2) return true;                                                                                        // 906
    if (o1 === null || o2 === null) return false;                                                                      // 907
    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                            // 908
    var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                           // 909
    if (t1 == t2) {                                                                                                    // 910
      if (t1 == 'object') {                                                                                            // 911
        if (isArray(o1)) {                                                                                             // 912
          if (!isArray(o2)) return false;                                                                              // 913
          if ((length = o1.length) == o2.length) {                                                                     // 914
            for (key = 0; key < length; key++) {                                                                       // 915
              if (!equals(o1[key], o2[key])) return false;                                                             // 916
            }                                                                                                          // 917
            return true;                                                                                               // 918
          }                                                                                                            // 919
        } else if (isDate(o1)) {                                                                                       // 920
          if (!isDate(o2)) return false;                                                                               // 921
          return equals(o1.getTime(), o2.getTime());                                                                   // 922
        } else if (isRegExp(o1)) {                                                                                     // 923
          return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                // 924
        } else {                                                                                                       // 925
          if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                            // 926
            isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                   // 927
          keySet = {};                                                                                                 // 928
          for (key in o1) {                                                                                            // 929
            if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                // 930
            if (!equals(o1[key], o2[key])) return false;                                                               // 931
            keySet[key] = true;                                                                                        // 932
          }                                                                                                            // 933
          for (key in o2) {                                                                                            // 934
            if (!keySet.hasOwnProperty(key) &&                                                                         // 935
              key.charAt(0) !== '$' &&                                                                                 // 936
              o2[key] !== undefined &&                                                                                 // 937
              !isFunction(o2[key])) return false;                                                                      // 938
          }                                                                                                            // 939
          return true;                                                                                                 // 940
        }                                                                                                              // 941
      }                                                                                                                // 942
    }                                                                                                                  // 943
    return false;                                                                                                      // 944
  }                                                                                                                    // 945
                                                                                                                       // 946
  var csp = function() {                                                                                               // 947
    if (isDefined(csp.isActive_)) return csp.isActive_;                                                                // 948
                                                                                                                       // 949
    var active = !!(document.querySelector('[ng-csp]') ||                                                              // 950
    document.querySelector('[data-ng-csp]'));                                                                          // 951
                                                                                                                       // 952
    if (!active) {                                                                                                     // 953
      try {                                                                                                            // 954
        /* jshint -W031, -W054 */                                                                                      // 955
        new Function('');                                                                                              // 956
        /* jshint +W031, +W054 */                                                                                      // 957
      } catch (e) {                                                                                                    // 958
        active = true;                                                                                                 // 959
      }                                                                                                                // 960
    }                                                                                                                  // 961
                                                                                                                       // 962
    return (csp.isActive_ = active);                                                                                   // 963
  };                                                                                                                   // 964
                                                                                                                       // 965
                                                                                                                       // 966
                                                                                                                       // 967
  function concat(array1, array2, index) {                                                                             // 968
    return array1.concat(slice.call(array2, index));                                                                   // 969
  }                                                                                                                    // 970
                                                                                                                       // 971
  function sliceArgs(args, startIndex) {                                                                               // 972
    return slice.call(args, startIndex || 0);                                                                          // 973
  }                                                                                                                    // 974
                                                                                                                       // 975
                                                                                                                       // 976
  /* jshint -W101 */                                                                                                   // 977
  /**                                                                                                                  // 978
   * @ngdoc function                                                                                                   // 979
   * @name angular.bind                                                                                                // 980
   * @module ng                                                                                                        // 981
   * @kind function                                                                                                    // 982
   *                                                                                                                   // 983
   * @description                                                                                                      // 984
   * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                       // 985
   * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                     // 986
   * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                              // 987
   * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
   *                                                                                                                   // 989
   * @param {Object} self Context which `fn` should be evaluated in.                                                   // 990
   * @param {function()} fn Function to be bound.                                                                      // 991
   * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                   // 992
   * @returns {function()} Function that wraps the `fn` with all the specified bindings.                               // 993
   */                                                                                                                  // 994
  /* jshint +W101 */                                                                                                   // 995
  function bind(self, fn) {                                                                                            // 996
    var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                               // 997
    if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                   // 998
      return curryArgs.length                                                                                          // 999
        ? function() {                                                                                                 // 1000
        return arguments.length                                                                                        // 1001
          ? fn.apply(self, concat(curryArgs, arguments, 0))                                                            // 1002
          : fn.apply(self, curryArgs);                                                                                 // 1003
      }                                                                                                                // 1004
        : function() {                                                                                                 // 1005
        return arguments.length                                                                                        // 1006
          ? fn.apply(self, arguments)                                                                                  // 1007
          : fn.call(self);                                                                                             // 1008
      };                                                                                                               // 1009
    } else {                                                                                                           // 1010
      // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                 // 1011
      return fn;                                                                                                       // 1012
    }                                                                                                                  // 1013
  }                                                                                                                    // 1014
                                                                                                                       // 1015
                                                                                                                       // 1016
  function toJsonReplacer(key, value) {                                                                                // 1017
    var val = value;                                                                                                   // 1018
                                                                                                                       // 1019
    if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                   // 1020
      val = undefined;                                                                                                 // 1021
    } else if (isWindow(value)) {                                                                                      // 1022
      val = '$WINDOW';                                                                                                 // 1023
    } else if (value &&  document === value) {                                                                         // 1024
      val = '$DOCUMENT';                                                                                               // 1025
    } else if (isScope(value)) {                                                                                       // 1026
      val = '$SCOPE';                                                                                                  // 1027
    }                                                                                                                  // 1028
                                                                                                                       // 1029
    return val;                                                                                                        // 1030
  }                                                                                                                    // 1031
                                                                                                                       // 1032
                                                                                                                       // 1033
  /**                                                                                                                  // 1034
   * @ngdoc function                                                                                                   // 1035
   * @name angular.toJson                                                                                              // 1036
   * @module ng                                                                                                        // 1037
   * @kind function                                                                                                    // 1038
   *                                                                                                                   // 1039
   * @description                                                                                                      // 1040
   * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                      // 1041
   * stripped since angular uses this notation internally.                                                             // 1042
   *                                                                                                                   // 1043
   * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                    // 1044
   * @param {boolean|number=} pretty If set to true, the JSON output will contain newlines and whitespace.             // 1045
   *    If set to an integer, the JSON output will contain that many spaces per indentation (the default is 2).        // 1046
   * @returns {string|undefined} JSON-ified string representing `obj`.                                                 // 1047
   */                                                                                                                  // 1048
  function toJson(obj, pretty) {                                                                                       // 1049
    if (typeof obj === 'undefined') return undefined;                                                                  // 1050
    if (!isNumber(pretty)) {                                                                                           // 1051
      pretty = pretty ? 2 : null;                                                                                      // 1052
    }                                                                                                                  // 1053
    return JSON.stringify(obj, toJsonReplacer, pretty);                                                                // 1054
  }                                                                                                                    // 1055
                                                                                                                       // 1056
                                                                                                                       // 1057
  /**                                                                                                                  // 1058
   * @ngdoc function                                                                                                   // 1059
   * @name angular.fromJson                                                                                            // 1060
   * @module ng                                                                                                        // 1061
   * @kind function                                                                                                    // 1062
   *                                                                                                                   // 1063
   * @description                                                                                                      // 1064
   * Deserializes a JSON string.                                                                                       // 1065
   *                                                                                                                   // 1066
   * @param {string} json JSON string to deserialize.                                                                  // 1067
   * @returns {Object|Array|string|number} Deserialized JSON string.                                                   // 1068
   */                                                                                                                  // 1069
  function fromJson(json) {                                                                                            // 1070
    return isString(json)                                                                                              // 1071
      ? JSON.parse(json)                                                                                               // 1072
      : json;                                                                                                          // 1073
  }                                                                                                                    // 1074
                                                                                                                       // 1075
                                                                                                                       // 1076
  /**                                                                                                                  // 1077
   * @returns {string} Returns the string representation of the element.                                               // 1078
   */                                                                                                                  // 1079
  function startingTag(element) {                                                                                      // 1080
    element = jqLite(element).clone();                                                                                 // 1081
    try {                                                                                                              // 1082
      // turns out IE does not let you set .html() on elements which                                                   // 1083
      // are not allowed to have children. So we just ignore it.                                                       // 1084
      element.empty();                                                                                                 // 1085
    } catch (e) {}                                                                                                     // 1086
    var elemHtml = jqLite('<div>').append(element).html();                                                             // 1087
    try {                                                                                                              // 1088
      return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                            // 1089
        elemHtml.                                                                                                      // 1090
          match(/^(<[^>]+>)/)[1].                                                                                      // 1091
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1092
    } catch (e) {                                                                                                      // 1093
      return lowercase(elemHtml);                                                                                      // 1094
    }                                                                                                                  // 1095
                                                                                                                       // 1096
  }                                                                                                                    // 1097
                                                                                                                       // 1098
                                                                                                                       // 1099
/////////////////////////////////////////////////                                                                      // 1100
                                                                                                                       // 1101
  /**                                                                                                                  // 1102
   * Tries to decode the URI component without throwing an exception.                                                  // 1103
   *                                                                                                                   // 1104
   * @private                                                                                                          // 1105
   * @param str value potential URI component to check.                                                                // 1106
   * @returns {boolean} True if `value` can be decoded                                                                 // 1107
   * with the decodeURIComponent function.                                                                             // 1108
   */                                                                                                                  // 1109
  function tryDecodeURIComponent(value) {                                                                              // 1110
    try {                                                                                                              // 1111
      return decodeURIComponent(value);                                                                                // 1112
    } catch (e) {                                                                                                      // 1113
      // Ignore any invalid uri component                                                                              // 1114
    }                                                                                                                  // 1115
  }                                                                                                                    // 1116
                                                                                                                       // 1117
                                                                                                                       // 1118
  /**                                                                                                                  // 1119
   * Parses an escaped url query string into key-value pairs.                                                          // 1120
   * @returns {Object.<string,boolean|Array>}                                                                          // 1121
   */                                                                                                                  // 1122
  function parseKeyValue(/**string*/keyValue) {                                                                        // 1123
    var obj = {}, key_value, key;                                                                                      // 1124
    forEach((keyValue || "").split('&'), function(keyValue) {                                                          // 1125
      if (keyValue) {                                                                                                  // 1126
        key_value = keyValue.replace(/\+/g,'%20').split('=');                                                          // 1127
        key = tryDecodeURIComponent(key_value[0]);                                                                     // 1128
        if (isDefined(key)) {                                                                                          // 1129
          var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;                              // 1130
          if (!hasOwnProperty.call(obj, key)) {                                                                        // 1131
            obj[key] = val;                                                                                            // 1132
          } else if (isArray(obj[key])) {                                                                              // 1133
            obj[key].push(val);                                                                                        // 1134
          } else {                                                                                                     // 1135
            obj[key] = [obj[key],val];                                                                                 // 1136
          }                                                                                                            // 1137
        }                                                                                                              // 1138
      }                                                                                                                // 1139
    });                                                                                                                // 1140
    return obj;                                                                                                        // 1141
  }                                                                                                                    // 1142
                                                                                                                       // 1143
  function toKeyValue(obj) {                                                                                           // 1144
    var parts = [];                                                                                                    // 1145
    forEach(obj, function(value, key) {                                                                                // 1146
      if (isArray(value)) {                                                                                            // 1147
        forEach(value, function(arrayValue) {                                                                          // 1148
          parts.push(encodeUriQuery(key, true) +                                                                       // 1149
          (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                                        // 1150
        });                                                                                                            // 1151
      } else {                                                                                                         // 1152
        parts.push(encodeUriQuery(key, true) +                                                                         // 1153
        (value === true ? '' : '=' + encodeUriQuery(value, true)));                                                    // 1154
      }                                                                                                                // 1155
    });                                                                                                                // 1156
    return parts.length ? parts.join('&') : '';                                                                        // 1157
  }                                                                                                                    // 1158
                                                                                                                       // 1159
                                                                                                                       // 1160
  /**                                                                                                                  // 1161
   * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                         // 1162
   * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                     // 1163
   * segments:                                                                                                         // 1164
   *    segment       = *pchar                                                                                         // 1165
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                              // 1166
   *    pct-encoded   = "%" HEXDIG HEXDIG                                                                              // 1167
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                          // 1168
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                              // 1169
   *                     / "*" / "+" / "," / ";" / "="                                                                 // 1170
   */                                                                                                                  // 1171
  function encodeUriSegment(val) {                                                                                     // 1172
    return encodeUriQuery(val, true).                                                                                  // 1173
      replace(/%26/gi, '&').                                                                                           // 1174
      replace(/%3D/gi, '=').                                                                                           // 1175
      replace(/%2B/gi, '+');                                                                                           // 1176
  }                                                                                                                    // 1177
                                                                                                                       // 1178
                                                                                                                       // 1179
  /**                                                                                                                  // 1180
   * This method is intended for encoding *key* or *value* parts of query component. We need a custom                  // 1181
   * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                     // 1182
   * encoded per http://tools.ietf.org/html/rfc3986:                                                                   // 1183
   *    query       = *( pchar / "/" / "?" )                                                                           // 1184
   *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                              // 1185
   *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                          // 1186
   *    pct-encoded   = "%" HEXDIG HEXDIG                                                                              // 1187
   *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                              // 1188
   *                     / "*" / "+" / "," / ";" / "="                                                                 // 1189
   */                                                                                                                  // 1190
  function encodeUriQuery(val, pctEncodeSpaces) {                                                                      // 1191
    return encodeURIComponent(val).                                                                                    // 1192
      replace(/%40/gi, '@').                                                                                           // 1193
      replace(/%3A/gi, ':').                                                                                           // 1194
      replace(/%24/g, '$').                                                                                            // 1195
      replace(/%2C/gi, ',').                                                                                           // 1196
      replace(/%3B/gi, ';').                                                                                           // 1197
      replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                                // 1198
  }                                                                                                                    // 1199
                                                                                                                       // 1200
  var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                            // 1201
                                                                                                                       // 1202
  function getNgAttribute(element, ngAttr) {                                                                           // 1203
    var attr, i, ii = ngAttrPrefixes.length;                                                                           // 1204
    element = jqLite(element);                                                                                         // 1205
    for (i = 0; i < ii; ++i) {                                                                                         // 1206
      attr = ngAttrPrefixes[i] + ngAttr;                                                                               // 1207
      if (isString(attr = element.attr(attr))) {                                                                       // 1208
        return attr;                                                                                                   // 1209
      }                                                                                                                // 1210
    }                                                                                                                  // 1211
    return null;                                                                                                       // 1212
  }                                                                                                                    // 1213
                                                                                                                       // 1214
  /**                                                                                                                  // 1215
   * @ngdoc directive                                                                                                  // 1216
   * @name ngApp                                                                                                       // 1217
   * @module ng                                                                                                        // 1218
   *                                                                                                                   // 1219
   * @element ANY                                                                                                      // 1220
   * @param {angular.Module} ngApp an optional application                                                             // 1221
   *   {@link angular.module module} name to load.                                                                     // 1222
   * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                // 1223
   *   created in "strict-di" mode. This means that the application will fail to invoke functions which                // 1224
   *   do not use explicit function annotation (and are thus unsuitable for minification), as described                // 1225
   *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                    // 1226
   *   tracking down the root of these bugs.                                                                           // 1227
   *                                                                                                                   // 1228
   * @description                                                                                                      // 1229
   *                                                                                                                   // 1230
   * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                          // 1231
   * designates the **root element** of the application and is typically placed near the root element                  // 1232
   * of the page - e.g. on the `<body>` or `<html>` tags.                                                              // 1233
   *                                                                                                                   // 1234
   * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                      // 1235
   * found in the document will be used to define the root element to auto-bootstrap as an                             // 1236
   * application. To run multiple applications in an HTML document you must manually bootstrap them using              // 1237
   * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                     // 1238
   *                                                                                                                   // 1239
   * You can specify an **AngularJS module** to be used as the root module for the application.  This                  // 1240
   * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                    // 1241
   * should contain the application code needed or have dependencies on other modules that will                        // 1242
   * contain the code. See {@link angular.module} for more information.                                                // 1243
   *                                                                                                                   // 1244
   * In the example below if the `ngApp` directive were not placed on the `html` element then the                      // 1245
   * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                 // 1246
   * would not be resolved to `3`.                                                                                     // 1247
   *                                                                                                                   // 1248
   * `ngApp` is the easiest, and most common way to bootstrap an application.                                          // 1249
   *                                                                                                                   // 1250
   <example module="ngAppDemo">                                                                                        // 1251
   <file name="index.html">                                                                                            // 1252
   <div ng-controller="ngAppDemoController">                                                                           // 1253
   I can add: {{a}} + {{b}} =  {{ a+b }}                                                                               // 1254
   </div>                                                                                                              // 1255
   </file>                                                                                                             // 1256
   <file name="script.js">                                                                                             // 1257
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1258
     $scope.a = 1;                                                                                                     // 1259
     $scope.b = 2;                                                                                                     // 1260
   });                                                                                                                 // 1261
   </file>                                                                                                             // 1262
   </example>                                                                                                          // 1263
   *                                                                                                                   // 1264
   * Using `ngStrictDi`, you would see something like this:                                                            // 1265
   *                                                                                                                   // 1266
   <example ng-app-included="true">                                                                                    // 1267
   <file name="index.html">                                                                                            // 1268
   <div ng-app="ngAppStrictDemo" ng-strict-di>                                                                         // 1269
   <div ng-controller="GoodController1">                                                                               // 1270
   I can add: {{a}} + {{b}} =  {{ a+b }}                                                                               // 1271
                                                                                                                       // 1272
   <p>This renders because the controller does not fail to                                                             // 1273
   instantiate, by using explicit annotation style (see                                                                // 1274
   script.js for details)                                                                                              // 1275
   </p>                                                                                                                // 1276
   </div>                                                                                                              // 1277
                                                                                                                       // 1278
   <div ng-controller="GoodController2">                                                                               // 1279
   Name: <input ng-model="name"><br />                                                                                 // 1280
   Hello, {{name}}!                                                                                                    // 1281
                                                                                                                       // 1282
   <p>This renders because the controller does not fail to                                                             // 1283
   instantiate, by using explicit annotation style                                                                     // 1284
   (see script.js for details)                                                                                         // 1285
   </p>                                                                                                                // 1286
   </div>                                                                                                              // 1287
                                                                                                                       // 1288
   <div ng-controller="BadController">                                                                                 // 1289
   I can add: {{a}} + {{b}} =  {{ a+b }}                                                                               // 1290
                                                                                                                       // 1291
   <p>The controller could not be instantiated, due to relying                                                         // 1292
   on automatic function annotations (which are disabled in                                                            // 1293
   strict mode). As such, the content of this section is not                                                           // 1294
   interpolated, and there should be an error in your web console.                                                     // 1295
   </p>                                                                                                                // 1296
   </div>                                                                                                              // 1297
   </div>                                                                                                              // 1298
   </file>                                                                                                             // 1299
   <file name="script.js">                                                                                             // 1300
   angular.module('ngAppStrictDemo', [])                                                                               // 1301
   // BadController will fail to instantiate, due to relying on automatic function annotation,                         // 1302
   // rather than an explicit annotation                                                                               // 1303
   .controller('BadController', function($scope) {                                                                     // 1304
       $scope.a = 1;                                                                                                   // 1305
       $scope.b = 2;                                                                                                   // 1306
     })                                                                                                                // 1307
   // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                      // 1308
   // due to using explicit annotations using the array style and $inject property, respectively.                      // 1309
   .controller('GoodController1', ['$scope', function($scope) {                                                        // 1310
       $scope.a = 1;                                                                                                   // 1311
       $scope.b = 2;                                                                                                   // 1312
     }])                                                                                                               // 1313
   .controller('GoodController2', GoodController2);                                                                    // 1314
   function GoodController2($scope) {                                                                                  // 1315
       $scope.name = "World";                                                                                          // 1316
     }                                                                                                                 // 1317
   GoodController2.$inject = ['$scope'];                                                                               // 1318
   </file>                                                                                                             // 1319
   <file name="style.css">                                                                                             // 1320
   div[ng-controller] {                                                                                                // 1321
       margin-bottom: 1em;                                                                                             // 1322
       -webkit-border-radius: 4px;                                                                                     // 1323
       border-radius: 4px;                                                                                             // 1324
       border: 1px solid;                                                                                              // 1325
       padding: .5em;                                                                                                  // 1326
   }                                                                                                                   // 1327
   div[ng-controller^=Good] {                                                                                          // 1328
       border-color: #d6e9c6;                                                                                          // 1329
       background-color: #dff0d8;                                                                                      // 1330
       color: #3c763d;                                                                                                 // 1331
   }                                                                                                                   // 1332
   div[ng-controller^=Bad] {                                                                                           // 1333
       border-color: #ebccd1;                                                                                          // 1334
       background-color: #f2dede;                                                                                      // 1335
       color: #a94442;                                                                                                 // 1336
       margin-bottom: 0;                                                                                               // 1337
   }                                                                                                                   // 1338
   </file>                                                                                                             // 1339
   </example>                                                                                                          // 1340
   */                                                                                                                  // 1341
  function angularInit(element, bootstrap) {                                                                           // 1342
    var appElement,                                                                                                    // 1343
      module,                                                                                                          // 1344
      config = {};                                                                                                     // 1345
                                                                                                                       // 1346
    // The element `element` has priority over any other element                                                       // 1347
    forEach(ngAttrPrefixes, function(prefix) {                                                                         // 1348
      var name = prefix + 'app';                                                                                       // 1349
                                                                                                                       // 1350
      if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                         // 1351
        appElement = element;                                                                                          // 1352
        module = element.getAttribute(name);                                                                           // 1353
      }                                                                                                                // 1354
    });                                                                                                                // 1355
    forEach(ngAttrPrefixes, function(prefix) {                                                                         // 1356
      var name = prefix + 'app';                                                                                       // 1357
      var candidate;                                                                                                   // 1358
                                                                                                                       // 1359
      if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {                  // 1360
        appElement = candidate;                                                                                        // 1361
        module = candidate.getAttribute(name);                                                                         // 1362
      }                                                                                                                // 1363
    });                                                                                                                // 1364
    if (appElement) {                                                                                                  // 1365
      config.strictDi = getNgAttribute(appElement, "strict-di") !== null;                                              // 1366
      bootstrap(appElement, module ? [module] : [], config);                                                           // 1367
    }                                                                                                                  // 1368
  }                                                                                                                    // 1369
                                                                                                                       // 1370
  /**                                                                                                                  // 1371
   * @ngdoc function                                                                                                   // 1372
   * @name angular.bootstrap                                                                                           // 1373
   * @module ng                                                                                                        // 1374
   * @description                                                                                                      // 1375
   * Use this function to manually start up angular application.                                                       // 1376
   *                                                                                                                   // 1377
   * See: {@link guide/bootstrap Bootstrap}                                                                            // 1378
   *                                                                                                                   // 1379
   * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                       // 1380
   * They must use {@link ng.directive:ngApp ngApp}.                                                                   // 1381
   *                                                                                                                   // 1382
   * Angular will detect if it has been loaded into the browser more than once and only allow the                      // 1383
   * first loaded script to be bootstrapped and will report a warning to the browser console for                       // 1384
   * each of the subsequent scripts. This prevents strange results in applications, where otherwise                    // 1385
   * multiple instances of Angular try to work on the DOM.                                                             // 1386
   *                                                                                                                   // 1387
   * ```html                                                                                                           // 1388
   * <!doctype html>                                                                                                   // 1389
   * <html>                                                                                                            // 1390
   * <body>                                                                                                            // 1391
   * <div ng-controller="WelcomeController">                                                                           // 1392
   *   {{greeting}}                                                                                                    // 1393
   * </div>                                                                                                            // 1394
   *                                                                                                                   // 1395
   * <script src="angular.js"></script>                                                                                // 1396
   * <script>                                                                                                          // 1397
   *   var app = angular.module('demo', [])                                                                            // 1398
   *   .controller('WelcomeController', function($scope) {                                                             // 1399
 *       $scope.greeting = 'Welcome!';                                                                                 // 1400
 *   });                                                                                                               // 1401
   *   angular.bootstrap(document, ['demo']);                                                                          // 1402
   * </script>                                                                                                         // 1403
   * </body>                                                                                                           // 1404
   * </html>                                                                                                           // 1405
   * ```                                                                                                               // 1406
   *                                                                                                                   // 1407
   * @param {DOMElement} element DOM element which is the root of angular application.                                 // 1408
   * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                  // 1409
   *     Each item in the array should be the name of a predefined module or a (DI annotated)                          // 1410
   *     function that will be invoked by the injector as a `config` block.                                            // 1411
   *     See: {@link angular.module modules}                                                                           // 1412
   * @param {Object=} config an object for defining configuration options for the application. The                     // 1413
   *     following keys are supported:                                                                                 // 1414
   *                                                                                                                   // 1415
   * * `strictDi` - disable automatic function annotation for the application. This is meant to                        // 1416
   *   assist in finding bugs which break minified code. Defaults to `false`.                                          // 1417
   *                                                                                                                   // 1418
   * @returns {auto.$injector} Returns the newly created injector for this app.                                        // 1419
   */                                                                                                                  // 1420
  function bootstrap(element, modules, config) {                                                                       // 1421
    if (!isObject(config)) config = {};                                                                                // 1422
    var defaultConfig = {                                                                                              // 1423
      strictDi: false                                                                                                  // 1424
    };                                                                                                                 // 1425
    config = extend(defaultConfig, config);                                                                            // 1426
    var doBootstrap = function() {                                                                                     // 1427
      element = jqLite(element);                                                                                       // 1428
                                                                                                                       // 1429
      if (element.injector()) {                                                                                        // 1430
        var tag = (element[0] === document) ? 'document' : startingTag(element);                                       // 1431
        //Encode angle brackets to prevent input from being sanitized to empty string #8683                            // 1432
        throw ngMinErr(                                                                                                // 1433
          'btstrpd',                                                                                                   // 1434
          "App Already Bootstrapped with this Element '{0}'",                                                          // 1435
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1436
      }                                                                                                                // 1437
                                                                                                                       // 1438
      modules = modules || [];                                                                                         // 1439
      modules.unshift(['$provide', function($provide) {                                                                // 1440
        $provide.value('$rootElement', element);                                                                       // 1441
      }]);                                                                                                             // 1442
                                                                                                                       // 1443
      if (config.debugInfoEnabled) {                                                                                   // 1444
        // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                      // 1445
        modules.push(['$compileProvider', function($compileProvider) {                                                 // 1446
          $compileProvider.debugInfoEnabled(true);                                                                     // 1447
        }]);                                                                                                           // 1448
      }                                                                                                                // 1449
                                                                                                                       // 1450
      modules.unshift('ng');                                                                                           // 1451
      var injector = createInjector(modules, config.strictDi);                                                         // 1452
      injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                          // 1453
          function bootstrapApply(scope, element, compile, injector) {                                                 // 1454
            scope.$apply(function() {                                                                                  // 1455
              element.data('$injector', injector);                                                                     // 1456
              compile(element)(scope);                                                                                 // 1457
            });                                                                                                        // 1458
          }]                                                                                                           // 1459
      );                                                                                                               // 1460
      return injector;                                                                                                 // 1461
    };                                                                                                                 // 1462
                                                                                                                       // 1463
    var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                               // 1464
    var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                   // 1465
                                                                                                                       // 1466
    if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                            // 1467
      config.debugInfoEnabled = true;                                                                                  // 1468
      window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                     // 1469
    }                                                                                                                  // 1470
                                                                                                                       // 1471
    if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                             // 1472
      return doBootstrap();                                                                                            // 1473
    }                                                                                                                  // 1474
                                                                                                                       // 1475
    window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                         // 1476
    angular.resumeBootstrap = function(extraModules) {                                                                 // 1477
      forEach(extraModules, function(module) {                                                                         // 1478
        modules.push(module);                                                                                          // 1479
      });                                                                                                              // 1480
      return doBootstrap();                                                                                            // 1481
    };                                                                                                                 // 1482
                                                                                                                       // 1483
    if (isFunction(angular.resumeDeferredBootstrap)) {                                                                 // 1484
      angular.resumeDeferredBootstrap();                                                                               // 1485
    }                                                                                                                  // 1486
  }                                                                                                                    // 1487
                                                                                                                       // 1488
  /**                                                                                                                  // 1489
   * @ngdoc function                                                                                                   // 1490
   * @name angular.reloadWithDebugInfo                                                                                 // 1491
   * @module ng                                                                                                        // 1492
   * @description                                                                                                      // 1493
   * Use this function to reload the current application with debug information turned on.                             // 1494
   * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                  // 1495
   *                                                                                                                   // 1496
   * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                        // 1497
   */                                                                                                                  // 1498
  function reloadWithDebugInfo() {                                                                                     // 1499
    window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                               // 1500
    window.location.reload();                                                                                          // 1501
  }                                                                                                                    // 1502
                                                                                                                       // 1503
  /**                                                                                                                  // 1504
   * @name angular.getTestability                                                                                      // 1505
   * @module ng                                                                                                        // 1506
   * @description                                                                                                      // 1507
   * Get the testability service for the instance of Angular on the given                                              // 1508
   * element.                                                                                                          // 1509
   * @param {DOMElement} element DOM element which is the root of angular application.                                 // 1510
   */                                                                                                                  // 1511
  function getTestability(rootElement) {                                                                               // 1512
    var injector = angular.element(rootElement).injector();                                                            // 1513
    if (!injector) {                                                                                                   // 1514
      throw ngMinErr('test',                                                                                           // 1515
        'no injector found for element argument to getTestability');                                                   // 1516
    }                                                                                                                  // 1517
    return injector.get('$$testability');                                                                              // 1518
  }                                                                                                                    // 1519
                                                                                                                       // 1520
  var SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                    // 1521
  function snake_case(name, separator) {                                                                               // 1522
    separator = separator || '_';                                                                                      // 1523
    return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                     // 1524
      return (pos ? separator : '') + letter.toLowerCase();                                                            // 1525
    });                                                                                                                // 1526
  }                                                                                                                    // 1527
                                                                                                                       // 1528
  var bindJQueryFired = false;                                                                                         // 1529
  var skipDestroyOnNextJQueryCleanData;                                                                                // 1530
  function bindJQuery() {                                                                                              // 1531
    var originalCleanData;                                                                                             // 1532
                                                                                                                       // 1533
    if (bindJQueryFired) {                                                                                             // 1534
      return;                                                                                                          // 1535
    }                                                                                                                  // 1536
                                                                                                                       // 1537
    // bind to jQuery if present;                                                                                      // 1538
    jQuery = window.jQuery;                                                                                            // 1539
    // Use jQuery if it exists with proper functionality, otherwise default to us.                                     // 1540
    // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                       // 1541
    // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                               // 1542
    // versions. It will not work for sure with jQuery <1.7, though.                                                   // 1543
    if (jQuery && jQuery.fn.on) {                                                                                      // 1544
      jqLite = jQuery;                                                                                                 // 1545
      extend(jQuery.fn, {                                                                                              // 1546
        scope: JQLitePrototype.scope,                                                                                  // 1547
        isolateScope: JQLitePrototype.isolateScope,                                                                    // 1548
        controller: JQLitePrototype.controller,                                                                        // 1549
        injector: JQLitePrototype.injector,                                                                            // 1550
        inheritedData: JQLitePrototype.inheritedData                                                                   // 1551
      });                                                                                                              // 1552
                                                                                                                       // 1553
      // All nodes removed from the DOM via various jQuery APIs like .remove()                                         // 1554
      // are passed through jQuery.cleanData. Monkey-patch this method to fire                                         // 1555
      // the $destroy event on all removed nodes.                                                                      // 1556
      originalCleanData = jQuery.cleanData;                                                                            // 1557
      jQuery.cleanData = function(elems) {                                                                             // 1558
        var events;                                                                                                    // 1559
        if (!skipDestroyOnNextJQueryCleanData) {                                                                       // 1560
          for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                      // 1561
            events = jQuery._data(elem, "events");                                                                     // 1562
            if (events && events.$destroy) {                                                                           // 1563
              jQuery(elem).triggerHandler('$destroy');                                                                 // 1564
            }                                                                                                          // 1565
          }                                                                                                            // 1566
        } else {                                                                                                       // 1567
          skipDestroyOnNextJQueryCleanData = false;                                                                    // 1568
        }                                                                                                              // 1569
        originalCleanData(elems);                                                                                      // 1570
      };                                                                                                               // 1571
    } else {                                                                                                           // 1572
      jqLite = JQLite;                                                                                                 // 1573
    }                                                                                                                  // 1574
                                                                                                                       // 1575
    angular.element = jqLite;                                                                                          // 1576
                                                                                                                       // 1577
    // Prevent double-proxying.                                                                                        // 1578
    bindJQueryFired = true;                                                                                            // 1579
  }                                                                                                                    // 1580
                                                                                                                       // 1581
  /**                                                                                                                  // 1582
   * throw error if the argument is falsy.                                                                             // 1583
   */                                                                                                                  // 1584
  function assertArg(arg, name, reason) {                                                                              // 1585
    if (!arg) {                                                                                                        // 1586
      throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));                          // 1587
    }                                                                                                                  // 1588
    return arg;                                                                                                        // 1589
  }                                                                                                                    // 1590
                                                                                                                       // 1591
  function assertArgFn(arg, name, acceptArrayAnnotation) {                                                             // 1592
    if (acceptArrayAnnotation && isArray(arg)) {                                                                       // 1593
      arg = arg[arg.length - 1];                                                                                       // 1594
    }                                                                                                                  // 1595
                                                                                                                       // 1596
    assertArg(isFunction(arg), name, 'not a function, got ' +                                                          // 1597
    (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                                 // 1598
    return arg;                                                                                                        // 1599
  }                                                                                                                    // 1600
                                                                                                                       // 1601
  /**                                                                                                                  // 1602
   * throw error if the name given is hasOwnProperty                                                                   // 1603
   * @param  {String} name    the name to test                                                                         // 1604
   * @param  {String} context the context in which the name is used, such as module or directive                       // 1605
   */                                                                                                                  // 1606
  function assertNotHasOwnProperty(name, context) {                                                                    // 1607
    if (name === 'hasOwnProperty') {                                                                                   // 1608
      throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);                                    // 1609
    }                                                                                                                  // 1610
  }                                                                                                                    // 1611
                                                                                                                       // 1612
  /**                                                                                                                  // 1613
   * Return the value accessible from the object by path. Any undefined traversals are ignored                         // 1614
   * @param {Object} obj starting object                                                                               // 1615
   * @param {String} path path to traverse                                                                             // 1616
   * @param {boolean} [bindFnToScope=true]                                                                             // 1617
   * @returns {Object} value as accessible by path                                                                     // 1618
   */                                                                                                                  // 1619
//TODO(misko): this function needs to be removed                                                                       // 1620
  function getter(obj, path, bindFnToScope) {                                                                          // 1621
    if (!path) return obj;                                                                                             // 1622
    var keys = path.split('.');                                                                                        // 1623
    var key;                                                                                                           // 1624
    var lastInstance = obj;                                                                                            // 1625
    var len = keys.length;                                                                                             // 1626
                                                                                                                       // 1627
    for (var i = 0; i < len; i++) {                                                                                    // 1628
      key = keys[i];                                                                                                   // 1629
      if (obj) {                                                                                                       // 1630
        obj = (lastInstance = obj)[key];                                                                               // 1631
      }                                                                                                                // 1632
    }                                                                                                                  // 1633
    if (!bindFnToScope && isFunction(obj)) {                                                                           // 1634
      return bind(lastInstance, obj);                                                                                  // 1635
    }                                                                                                                  // 1636
    return obj;                                                                                                        // 1637
  }                                                                                                                    // 1638
                                                                                                                       // 1639
  /**                                                                                                                  // 1640
   * Return the DOM siblings between the first and last node in the given array.                                       // 1641
   * @param {Array} array like object                                                                                  // 1642
   * @returns {jqLite} jqLite collection containing the nodes                                                          // 1643
   */                                                                                                                  // 1644
  function getBlockNodes(nodes) {                                                                                      // 1645
    // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original                 // 1646
    //             collection, otherwise update the original collection.                                               // 1647
    var node = nodes[0];                                                                                               // 1648
    var endNode = nodes[nodes.length - 1];                                                                             // 1649
    var blockNodes = [node];                                                                                           // 1650
                                                                                                                       // 1651
    do {                                                                                                               // 1652
      node = node.nextSibling;                                                                                         // 1653
      if (!node) break;                                                                                                // 1654
      blockNodes.push(node);                                                                                           // 1655
    } while (node !== endNode);                                                                                        // 1656
                                                                                                                       // 1657
    return jqLite(blockNodes);                                                                                         // 1658
  }                                                                                                                    // 1659
                                                                                                                       // 1660
                                                                                                                       // 1661
  /**                                                                                                                  // 1662
   * Creates a new object without a prototype. This object is useful for lookup without having to                      // 1663
   * guard against prototypically inherited properties via hasOwnProperty.                                             // 1664
   *                                                                                                                   // 1665
   * Related micro-benchmarks:                                                                                         // 1666
   * - http://jsperf.com/object-create2                                                                                // 1667
   * - http://jsperf.com/proto-map-lookup/2                                                                            // 1668
   * - http://jsperf.com/for-in-vs-object-keys2                                                                        // 1669
   *                                                                                                                   // 1670
   * @returns {Object}                                                                                                 // 1671
   */                                                                                                                  // 1672
  function createMap() {                                                                                               // 1673
    return Object.create(null);                                                                                        // 1674
  }                                                                                                                    // 1675
                                                                                                                       // 1676
  var NODE_TYPE_ELEMENT = 1;                                                                                           // 1677
  var NODE_TYPE_TEXT = 3;                                                                                              // 1678
  var NODE_TYPE_COMMENT = 8;                                                                                           // 1679
  var NODE_TYPE_DOCUMENT = 9;                                                                                          // 1680
  var NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                // 1681
                                                                                                                       // 1682
  /**                                                                                                                  // 1683
   * @ngdoc type                                                                                                       // 1684
   * @name angular.Module                                                                                              // 1685
   * @module ng                                                                                                        // 1686
   * @description                                                                                                      // 1687
   *                                                                                                                   // 1688
   * Interface for configuring angular {@link angular.module modules}.                                                 // 1689
   */                                                                                                                  // 1690
                                                                                                                       // 1691
  function setupModuleLoader(window) {                                                                                 // 1692
                                                                                                                       // 1693
    var $injectorMinErr = minErr('$injector');                                                                         // 1694
    var ngMinErr = minErr('ng');                                                                                       // 1695
                                                                                                                       // 1696
    function ensure(obj, name, factory) {                                                                              // 1697
      return obj[name] || (obj[name] = factory());                                                                     // 1698
    }                                                                                                                  // 1699
                                                                                                                       // 1700
    var angular = ensure(window, 'angular', Object);                                                                   // 1701
                                                                                                                       // 1702
    // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap         // 1703
    angular.$$minErr = angular.$$minErr || minErr;                                                                     // 1704
                                                                                                                       // 1705
    return ensure(angular, 'module', function() {                                                                      // 1706
      /** @type {Object.<string, angular.Module>} */                                                                   // 1707
      var modules = {};                                                                                                // 1708
                                                                                                                       // 1709
      /**                                                                                                              // 1710
       * @ngdoc function                                                                                               // 1711
       * @name angular.module                                                                                          // 1712
       * @module ng                                                                                                    // 1713
       * @description                                                                                                  // 1714
       *                                                                                                               // 1715
       * The `angular.module` is a global place for creating, registering and retrieving Angular                       // 1716
       * modules.                                                                                                      // 1717
       * All modules (angular core or 3rd party) that should be available to an application must be                    // 1718
       * registered using this mechanism.                                                                              // 1719
       *                                                                                                               // 1720
       * When passed two or more arguments, a new module is created.  If passed only one argument, an                  // 1721
       * existing module (the name passed as the first argument to `module`) is retrieved.                             // 1722
       *                                                                                                               // 1723
       *                                                                                                               // 1724
       * # Module                                                                                                      // 1725
       *                                                                                                               // 1726
       * A module is a collection of services, directives, controllers, filters, and configuration information.        // 1727
       * `angular.module` is used to configure the {@link auto.$injector $injector}.                                   // 1728
       *                                                                                                               // 1729
       * ```js                                                                                                         // 1730
       * // Create a new module                                                                                        // 1731
       * var myModule = angular.module('myModule', []);                                                                // 1732
       *                                                                                                               // 1733
       * // register a new service                                                                                     // 1734
       * myModule.value('appName', 'MyCoolApp');                                                                       // 1735
       *                                                                                                               // 1736
       * // configure existing services inside initialization blocks.                                                  // 1737
       * myModule.config(['$locationProvider', function($locationProvider) {                                           // 1738
     *   // Configure existing providers                                                                               // 1739
     *   $locationProvider.hashPrefix('!');                                                                            // 1740
     * }]);                                                                                                            // 1741
       * ```                                                                                                           // 1742
       *                                                                                                               // 1743
       * Then you can create an injector and load your modules like this:                                              // 1744
       *                                                                                                               // 1745
       * ```js                                                                                                         // 1746
       * var injector = angular.injector(['ng', 'myModule'])                                                           // 1747
       * ```                                                                                                           // 1748
       *                                                                                                               // 1749
       * However it's more likely that you'll just use                                                                 // 1750
       * {@link ng.directive:ngApp ngApp} or                                                                           // 1751
       * {@link angular.bootstrap} to simplify this process for you.                                                   // 1752
       *                                                                                                               // 1753
       * @param {!string} name The name of the module to create or retrieve.                                           // 1754
       * @param {!Array.<string>=} requires If specified then new module is being created. If                          // 1755
       *        unspecified then the module is being retrieved for further configuration.                              // 1756
       * @param {Function=} configFn Optional configuration function for the module. Same as                           // 1757
       *        {@link angular.Module#config Module#config()}.                                                         // 1758
       * @returns {module} new module with the {@link angular.Module} api.                                             // 1759
       */                                                                                                              // 1760
      return function module(name, requires, configFn) {                                                               // 1761
        var assertNotHasOwnProperty = function(name, context) {                                                        // 1762
          if (name === 'hasOwnProperty') {                                                                             // 1763
            throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                              // 1764
          }                                                                                                            // 1765
        };                                                                                                             // 1766
                                                                                                                       // 1767
        assertNotHasOwnProperty(name, 'module');                                                                       // 1768
        if (requires && modules.hasOwnProperty(name)) {                                                                // 1769
          modules[name] = null;                                                                                        // 1770
        }                                                                                                              // 1771
        return ensure(modules, name, function() {                                                                      // 1772
          if (!requires) {                                                                                             // 1773
            throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +                   // 1774
            "the module name or forgot to load it. If registering a module ensure that you " +                         // 1775
            "specify the dependencies as the second argument.", name);                                                 // 1776
          }                                                                                                            // 1777
                                                                                                                       // 1778
          /** @type {!Array.<Array.<*>>} */                                                                            // 1779
          var invokeQueue = [];                                                                                        // 1780
                                                                                                                       // 1781
          /** @type {!Array.<Function>} */                                                                             // 1782
          var configBlocks = [];                                                                                       // 1783
                                                                                                                       // 1784
          /** @type {!Array.<Function>} */                                                                             // 1785
          var runBlocks = [];                                                                                          // 1786
                                                                                                                       // 1787
          var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                       // 1788
                                                                                                                       // 1789
          /** @type {angular.Module} */                                                                                // 1790
          var moduleInstance = {                                                                                       // 1791
            // Private state                                                                                           // 1792
            _invokeQueue: invokeQueue,                                                                                 // 1793
            _configBlocks: configBlocks,                                                                               // 1794
            _runBlocks: runBlocks,                                                                                     // 1795
                                                                                                                       // 1796
            /**                                                                                                        // 1797
             * @ngdoc property                                                                                         // 1798
             * @name angular.Module#requires                                                                           // 1799
             * @module ng                                                                                              // 1800
             *                                                                                                         // 1801
             * @description                                                                                            // 1802
             * Holds the list of modules which the injector will load before the current module is                     // 1803
             * loaded.                                                                                                 // 1804
             */                                                                                                        // 1805
            requires: requires,                                                                                        // 1806
                                                                                                                       // 1807
            /**                                                                                                        // 1808
             * @ngdoc property                                                                                         // 1809
             * @name angular.Module#name                                                                               // 1810
             * @module ng                                                                                              // 1811
             *                                                                                                         // 1812
             * @description                                                                                            // 1813
             * Name of the module.                                                                                     // 1814
             */                                                                                                        // 1815
            name: name,                                                                                                // 1816
                                                                                                                       // 1817
                                                                                                                       // 1818
            /**                                                                                                        // 1819
             * @ngdoc method                                                                                           // 1820
             * @name angular.Module#provider                                                                           // 1821
             * @module ng                                                                                              // 1822
             * @param {string} name service name                                                                       // 1823
             * @param {Function} providerType Construction function for creating new instance of the                   // 1824
             *                                service.                                                                 // 1825
             * @description                                                                                            // 1826
             * See {@link auto.$provide#provider $provide.provider()}.                                                 // 1827
             */                                                                                                        // 1828
            provider: invokeLater('$provide', 'provider'),                                                             // 1829
                                                                                                                       // 1830
            /**                                                                                                        // 1831
             * @ngdoc method                                                                                           // 1832
             * @name angular.Module#factory                                                                            // 1833
             * @module ng                                                                                              // 1834
             * @param {string} name service name                                                                       // 1835
             * @param {Function} providerFunction Function for creating new instance of the service.                   // 1836
             * @description                                                                                            // 1837
             * See {@link auto.$provide#factory $provide.factory()}.                                                   // 1838
             */                                                                                                        // 1839
            factory: invokeLater('$provide', 'factory'),                                                               // 1840
                                                                                                                       // 1841
            /**                                                                                                        // 1842
             * @ngdoc method                                                                                           // 1843
             * @name angular.Module#service                                                                            // 1844
             * @module ng                                                                                              // 1845
             * @param {string} name service name                                                                       // 1846
             * @param {Function} constructor A constructor function that will be instantiated.                         // 1847
             * @description                                                                                            // 1848
             * See {@link auto.$provide#service $provide.service()}.                                                   // 1849
             */                                                                                                        // 1850
            service: invokeLater('$provide', 'service'),                                                               // 1851
                                                                                                                       // 1852
            /**                                                                                                        // 1853
             * @ngdoc method                                                                                           // 1854
             * @name angular.Module#value                                                                              // 1855
             * @module ng                                                                                              // 1856
             * @param {string} name service name                                                                       // 1857
             * @param {*} object Service instance object.                                                              // 1858
             * @description                                                                                            // 1859
             * See {@link auto.$provide#value $provide.value()}.                                                       // 1860
             */                                                                                                        // 1861
            value: invokeLater('$provide', 'value'),                                                                   // 1862
                                                                                                                       // 1863
            /**                                                                                                        // 1864
             * @ngdoc method                                                                                           // 1865
             * @name angular.Module#constant                                                                           // 1866
             * @module ng                                                                                              // 1867
             * @param {string} name constant name                                                                      // 1868
             * @param {*} object Constant value.                                                                       // 1869
             * @description                                                                                            // 1870
             * Because the constant are fixed, they get applied before other provide methods.                          // 1871
             * See {@link auto.$provide#constant $provide.constant()}.                                                 // 1872
             */                                                                                                        // 1873
            constant: invokeLater('$provide', 'constant', 'unshift'),                                                  // 1874
                                                                                                                       // 1875
            /**                                                                                                        // 1876
             * @ngdoc method                                                                                           // 1877
             * @name angular.Module#animation                                                                          // 1878
             * @module ng                                                                                              // 1879
             * @param {string} name animation name                                                                     // 1880
             * @param {Function} animationFactory Factory function for creating new instance of an                     // 1881
             *                                    animation.                                                           // 1882
             * @description                                                                                            // 1883
             *                                                                                                         // 1884
             * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                            // 1885
             *                                                                                                         // 1886
             *                                                                                                         // 1887
             * Defines an animation hook that can be later used with                                                   // 1888
             * {@link ngAnimate.$animate $animate} service and directives that use this service.                       // 1889
             *                                                                                                         // 1890
             * ```js                                                                                                   // 1891
             * module.animation('.animation-name', function($inject1, $inject2) {                                      // 1892
           *   return {                                                                                                // 1893
           *     eventName : function(element, done) {                                                                 // 1894
           *       //code to run the animation                                                                         // 1895
           *       //once complete, then run done()                                                                    // 1896
           *       return function cancellationFunction(element) {                                                     // 1897
           *         //code to cancel the animation                                                                    // 1898
           *       }                                                                                                   // 1899
           *     }                                                                                                     // 1900
           *   }                                                                                                       // 1901
           * })                                                                                                        // 1902
             * ```                                                                                                     // 1903
             *                                                                                                         // 1904
             * See {@link ng.$animateProvider#register $animateProvider.register()} and                                // 1905
             * {@link ngAnimate ngAnimate module} for more information.                                                // 1906
             */                                                                                                        // 1907
            animation: invokeLater('$animateProvider', 'register'),                                                    // 1908
                                                                                                                       // 1909
            /**                                                                                                        // 1910
             * @ngdoc method                                                                                           // 1911
             * @name angular.Module#filter                                                                             // 1912
             * @module ng                                                                                              // 1913
             * @param {string} name Filter name.                                                                       // 1914
             * @param {Function} filterFactory Factory function for creating new instance of filter.                   // 1915
             * @description                                                                                            // 1916
             * See {@link ng.$filterProvider#register $filterProvider.register()}.                                     // 1917
             */                                                                                                        // 1918
            filter: invokeLater('$filterProvider', 'register'),                                                        // 1919
                                                                                                                       // 1920
            /**                                                                                                        // 1921
             * @ngdoc method                                                                                           // 1922
             * @name angular.Module#controller                                                                         // 1923
             * @module ng                                                                                              // 1924
             * @param {string|Object} name Controller name, or an object map of controllers where the                  // 1925
             *    keys are the names and the values are the constructors.                                              // 1926
             * @param {Function} constructor Controller constructor function.                                          // 1927
             * @description                                                                                            // 1928
             * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                             // 1929
             */                                                                                                        // 1930
            controller: invokeLater('$controllerProvider', 'register'),                                                // 1931
                                                                                                                       // 1932
            /**                                                                                                        // 1933
             * @ngdoc method                                                                                           // 1934
             * @name angular.Module#directive                                                                          // 1935
             * @module ng                                                                                              // 1936
             * @param {string|Object} name Directive name, or an object map of directives where the                    // 1937
             *    keys are the names and the values are the factories.                                                 // 1938
             * @param {Function} directiveFactory Factory function for creating new instance of                        // 1939
             * directives.                                                                                             // 1940
             * @description                                                                                            // 1941
             * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                 // 1942
             */                                                                                                        // 1943
            directive: invokeLater('$compileProvider', 'directive'),                                                   // 1944
                                                                                                                       // 1945
            /**                                                                                                        // 1946
             * @ngdoc method                                                                                           // 1947
             * @name angular.Module#config                                                                             // 1948
             * @module ng                                                                                              // 1949
             * @param {Function} configFn Execute this function on module load. Useful for service                     // 1950
             *    configuration.                                                                                       // 1951
             * @description                                                                                            // 1952
             * Use this method to register work which needs to be performed on module loading.                         // 1953
             * For more about how to configure services, see                                                           // 1954
             * {@link providers#provider-recipe Provider Recipe}.                                                      // 1955
             */                                                                                                        // 1956
            config: config,                                                                                            // 1957
                                                                                                                       // 1958
            /**                                                                                                        // 1959
             * @ngdoc method                                                                                           // 1960
             * @name angular.Module#run                                                                                // 1961
             * @module ng                                                                                              // 1962
             * @param {Function} initializationFn Execute this function after injector creation.                       // 1963
             *    Useful for application initialization.                                                               // 1964
             * @description                                                                                            // 1965
             * Use this method to register work which should be performed when the injector is done                    // 1966
             * loading all modules.                                                                                    // 1967
             */                                                                                                        // 1968
            run: function(block) {                                                                                     // 1969
              runBlocks.push(block);                                                                                   // 1970
              return this;                                                                                             // 1971
            }                                                                                                          // 1972
          };                                                                                                           // 1973
                                                                                                                       // 1974
          if (configFn) {                                                                                              // 1975
            config(configFn);                                                                                          // 1976
          }                                                                                                            // 1977
                                                                                                                       // 1978
          return moduleInstance;                                                                                       // 1979
                                                                                                                       // 1980
          /**                                                                                                          // 1981
           * @param {string} provider                                                                                  // 1982
           * @param {string} method                                                                                    // 1983
           * @param {String=} insertMethod                                                                             // 1984
           * @returns {angular.Module}                                                                                 // 1985
           */                                                                                                          // 1986
          function invokeLater(provider, method, insertMethod, queue) {                                                // 1987
            if (!queue) queue = invokeQueue;                                                                           // 1988
            return function() {                                                                                        // 1989
              queue[insertMethod || 'push']([provider, method, arguments]);                                            // 1990
              return moduleInstance;                                                                                   // 1991
            };                                                                                                         // 1992
          }                                                                                                            // 1993
        });                                                                                                            // 1994
      };                                                                                                               // 1995
    });                                                                                                                // 1996
                                                                                                                       // 1997
  }                                                                                                                    // 1998
                                                                                                                       // 1999
  /* global: toDebugString: true */                                                                                    // 2000
                                                                                                                       // 2001
  function serializeObject(obj) {                                                                                      // 2002
    var seen = [];                                                                                                     // 2003
                                                                                                                       // 2004
    return JSON.stringify(obj, function(key, val) {                                                                    // 2005
      val = toJsonReplacer(key, val);                                                                                  // 2006
      if (isObject(val)) {                                                                                             // 2007
                                                                                                                       // 2008
        if (seen.indexOf(val) >= 0) return '<<already seen>>';                                                         // 2009
                                                                                                                       // 2010
        seen.push(val);                                                                                                // 2011
      }                                                                                                                // 2012
      return val;                                                                                                      // 2013
    });                                                                                                                // 2014
  }                                                                                                                    // 2015
                                                                                                                       // 2016
  function toDebugString(obj) {                                                                                        // 2017
    if (typeof obj === 'function') {                                                                                   // 2018
      return obj.toString().replace(/ \{[\s\S]*$/, '');                                                                // 2019
    } else if (typeof obj === 'undefined') {                                                                           // 2020
      return 'undefined';                                                                                              // 2021
    } else if (typeof obj !== 'string') {                                                                              // 2022
      return serializeObject(obj);                                                                                     // 2023
    }                                                                                                                  // 2024
    return obj;                                                                                                        // 2025
  }                                                                                                                    // 2026
                                                                                                                       // 2027
  /* global angularModule: true,                                                                                       // 2028
   version: true,                                                                                                      // 2029
                                                                                                                       // 2030
   $LocaleProvider,                                                                                                    // 2031
   $CompileProvider,                                                                                                   // 2032
                                                                                                                       // 2033
   htmlAnchorDirective,                                                                                                // 2034
   inputDirective,                                                                                                     // 2035
   inputDirective,                                                                                                     // 2036
   formDirective,                                                                                                      // 2037
   scriptDirective,                                                                                                    // 2038
   selectDirective,                                                                                                    // 2039
   styleDirective,                                                                                                     // 2040
   optionDirective,                                                                                                    // 2041
   ngBindDirective,                                                                                                    // 2042
   ngBindHtmlDirective,                                                                                                // 2043
   ngBindTemplateDirective,                                                                                            // 2044
   ngClassDirective,                                                                                                   // 2045
   ngClassEvenDirective,                                                                                               // 2046
   ngClassOddDirective,                                                                                                // 2047
   ngCspDirective,                                                                                                     // 2048
   ngCloakDirective,                                                                                                   // 2049
   ngControllerDirective,                                                                                              // 2050
   ngFormDirective,                                                                                                    // 2051
   ngHideDirective,                                                                                                    // 2052
   ngIfDirective,                                                                                                      // 2053
   ngIncludeDirective,                                                                                                 // 2054
   ngIncludeFillContentDirective,                                                                                      // 2055
   ngInitDirective,                                                                                                    // 2056
   ngNonBindableDirective,                                                                                             // 2057
   ngPluralizeDirective,                                                                                               // 2058
   ngRepeatDirective,                                                                                                  // 2059
   ngShowDirective,                                                                                                    // 2060
   ngStyleDirective,                                                                                                   // 2061
   ngSwitchDirective,                                                                                                  // 2062
   ngSwitchWhenDirective,                                                                                              // 2063
   ngSwitchDefaultDirective,                                                                                           // 2064
   ngOptionsDirective,                                                                                                 // 2065
   ngTranscludeDirective,                                                                                              // 2066
   ngModelDirective,                                                                                                   // 2067
   ngListDirective,                                                                                                    // 2068
   ngChangeDirective,                                                                                                  // 2069
   patternDirective,                                                                                                   // 2070
   patternDirective,                                                                                                   // 2071
   requiredDirective,                                                                                                  // 2072
   requiredDirective,                                                                                                  // 2073
   minlengthDirective,                                                                                                 // 2074
   minlengthDirective,                                                                                                 // 2075
   maxlengthDirective,                                                                                                 // 2076
   maxlengthDirective,                                                                                                 // 2077
   ngValueDirective,                                                                                                   // 2078
   ngModelOptionsDirective,                                                                                            // 2079
   ngAttributeAliasDirectives,                                                                                         // 2080
   ngEventDirectives,                                                                                                  // 2081
                                                                                                                       // 2082
   $AnchorScrollProvider,                                                                                              // 2083
   $AnimateProvider,                                                                                                   // 2084
   $BrowserProvider,                                                                                                   // 2085
   $CacheFactoryProvider,                                                                                              // 2086
   $ControllerProvider,                                                                                                // 2087
   $DocumentProvider,                                                                                                  // 2088
   $ExceptionHandlerProvider,                                                                                          // 2089
   $FilterProvider,                                                                                                    // 2090
   $InterpolateProvider,                                                                                               // 2091
   $IntervalProvider,                                                                                                  // 2092
   $HttpProvider,                                                                                                      // 2093
   $HttpBackendProvider,                                                                                               // 2094
   $LocationProvider,                                                                                                  // 2095
   $LogProvider,                                                                                                       // 2096
   $ParseProvider,                                                                                                     // 2097
   $RootScopeProvider,                                                                                                 // 2098
   $QProvider,                                                                                                         // 2099
   $$QProvider,                                                                                                        // 2100
   $$SanitizeUriProvider,                                                                                              // 2101
   $SceProvider,                                                                                                       // 2102
   $SceDelegateProvider,                                                                                               // 2103
   $SnifferProvider,                                                                                                   // 2104
   $TemplateCacheProvider,                                                                                             // 2105
   $TemplateRequestProvider,                                                                                           // 2106
   $$TestabilityProvider,                                                                                              // 2107
   $TimeoutProvider,                                                                                                   // 2108
   $$RAFProvider,                                                                                                      // 2109
   $$AsyncCallbackProvider,                                                                                            // 2110
   $WindowProvider,                                                                                                    // 2111
   $$jqLiteProvider                                                                                                    // 2112
   */                                                                                                                  // 2113
                                                                                                                       // 2114
                                                                                                                       // 2115
  /**                                                                                                                  // 2116
   * @ngdoc object                                                                                                     // 2117
   * @name angular.version                                                                                             // 2118
   * @module ng                                                                                                        // 2119
   * @description                                                                                                      // 2120
   * An object that contains information about the current AngularJS version. This object has the                      // 2121
   * following properties:                                                                                             // 2122
   *                                                                                                                   // 2123
   * - `full` ג€“ `{string}` ג€“ Full version string, such as "0.9.18".                                                // 2124
   * - `major` ג€“ `{number}` ג€“ Major version number, such as "0".                                                   // 2125
   * - `minor` ג€“ `{number}` ג€“ Minor version number, such as "9".                                                   // 2126
   * - `dot` ג€“ `{number}` ג€“ Dot version number, such as "18".                                                      // 2127
   * - `codeName` ג€“ `{string}` ג€“ Code name of the release, such as "jiggling-armfat".                              // 2128
   */                                                                                                                  // 2129
  var version = {                                                                                                      // 2130
    full: '1.3.15',    // all of these placeholder strings will be replaced by grunt's                                 // 2131
    major: 1,    // package task                                                                                       // 2132
    minor: 3,                                                                                                          // 2133
    dot: 15,                                                                                                           // 2134
    codeName: 'locality-filtration'                                                                                    // 2135
  };                                                                                                                   // 2136
                                                                                                                       // 2137
                                                                                                                       // 2138
  function publishExternalAPI(angular) {                                                                               // 2139
    extend(angular, {                                                                                                  // 2140
      'bootstrap': bootstrap,                                                                                          // 2141
      'copy': copy,                                                                                                    // 2142
      'extend': extend,                                                                                                // 2143
      'equals': equals,                                                                                                // 2144
      'element': jqLite,                                                                                               // 2145
      'forEach': forEach,                                                                                              // 2146
      'injector': createInjector,                                                                                      // 2147
      'noop': noop,                                                                                                    // 2148
      'bind': bind,                                                                                                    // 2149
      'toJson': toJson,                                                                                                // 2150
      'fromJson': fromJson,                                                                                            // 2151
      'identity': identity,                                                                                            // 2152
      'isUndefined': isUndefined,                                                                                      // 2153
      'isDefined': isDefined,                                                                                          // 2154
      'isString': isString,                                                                                            // 2155
      'isFunction': isFunction,                                                                                        // 2156
      'isObject': isObject,                                                                                            // 2157
      'isNumber': isNumber,                                                                                            // 2158
      'isElement': isElement,                                                                                          // 2159
      'isArray': isArray,                                                                                              // 2160
      'version': version,                                                                                              // 2161
      'isDate': isDate,                                                                                                // 2162
      'lowercase': lowercase,                                                                                          // 2163
      'uppercase': uppercase,                                                                                          // 2164
      'callbacks': {counter: 0},                                                                                       // 2165
      'getTestability': getTestability,                                                                                // 2166
      '$$minErr': minErr,                                                                                              // 2167
      '$$csp': csp,                                                                                                    // 2168
      'reloadWithDebugInfo': reloadWithDebugInfo                                                                       // 2169
    });                                                                                                                // 2170
                                                                                                                       // 2171
    angularModule = setupModuleLoader(window);                                                                         // 2172
    try {                                                                                                              // 2173
      angularModule('ngLocale');                                                                                       // 2174
    } catch (e) {                                                                                                      // 2175
      angularModule('ngLocale', []).provider('$locale', $LocaleProvider);                                              // 2176
    }                                                                                                                  // 2177
                                                                                                                       // 2178
    angularModule('ng', ['ngLocale'], ['$provide',                                                                     // 2179
      function ngModule($provide) {                                                                                    // 2180
        // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                              // 2181
        $provide.provider({                                                                                            // 2182
          $$sanitizeUri: $$SanitizeUriProvider                                                                         // 2183
        });                                                                                                            // 2184
        $provide.provider('$compile', $CompileProvider).                                                               // 2185
          directive({                                                                                                  // 2186
            a: htmlAnchorDirective,                                                                                    // 2187
            input: inputDirective,                                                                                     // 2188
            textarea: inputDirective,                                                                                  // 2189
            form: formDirective,                                                                                       // 2190
            script: scriptDirective,                                                                                   // 2191
            select: selectDirective,                                                                                   // 2192
            style: styleDirective,                                                                                     // 2193
            option: optionDirective,                                                                                   // 2194
            ngBind: ngBindDirective,                                                                                   // 2195
            ngBindHtml: ngBindHtmlDirective,                                                                           // 2196
            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2197
            ngClass: ngClassDirective,                                                                                 // 2198
            ngClassEven: ngClassEvenDirective,                                                                         // 2199
            ngClassOdd: ngClassOddDirective,                                                                           // 2200
            ngCloak: ngCloakDirective,                                                                                 // 2201
            ngController: ngControllerDirective,                                                                       // 2202
            ngForm: ngFormDirective,                                                                                   // 2203
            ngHide: ngHideDirective,                                                                                   // 2204
            ngIf: ngIfDirective,                                                                                       // 2205
            ngInclude: ngIncludeDirective,                                                                             // 2206
            ngInit: ngInitDirective,                                                                                   // 2207
            ngNonBindable: ngNonBindableDirective,                                                                     // 2208
            ngPluralize: ngPluralizeDirective,                                                                         // 2209
            ngRepeat: ngRepeatDirective,                                                                               // 2210
            ngShow: ngShowDirective,                                                                                   // 2211
            ngStyle: ngStyleDirective,                                                                                 // 2212
            ngSwitch: ngSwitchDirective,                                                                               // 2213
            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2214
            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2215
            ngOptions: ngOptionsDirective,                                                                             // 2216
            ngTransclude: ngTranscludeDirective,                                                                       // 2217
            ngModel: ngModelDirective,                                                                                 // 2218
            ngList: ngListDirective,                                                                                   // 2219
            ngChange: ngChangeDirective,                                                                               // 2220
            pattern: patternDirective,                                                                                 // 2221
            ngPattern: patternDirective,                                                                               // 2222
            required: requiredDirective,                                                                               // 2223
            ngRequired: requiredDirective,                                                                             // 2224
            minlength: minlengthDirective,                                                                             // 2225
            ngMinlength: minlengthDirective,                                                                           // 2226
            maxlength: maxlengthDirective,                                                                             // 2227
            ngMaxlength: maxlengthDirective,                                                                           // 2228
            ngValue: ngValueDirective,                                                                                 // 2229
            ngModelOptions: ngModelOptionsDirective                                                                    // 2230
          }).                                                                                                          // 2231
          directive({                                                                                                  // 2232
            ngInclude: ngIncludeFillContentDirective                                                                   // 2233
          }).                                                                                                          // 2234
          directive(ngAttributeAliasDirectives).                                                                       // 2235
          directive(ngEventDirectives);                                                                                // 2236
        $provide.provider({                                                                                            // 2237
          $anchorScroll: $AnchorScrollProvider,                                                                        // 2238
          $animate: $AnimateProvider,                                                                                  // 2239
          $browser: $BrowserProvider,                                                                                  // 2240
          $cacheFactory: $CacheFactoryProvider,                                                                        // 2241
          $controller: $ControllerProvider,                                                                            // 2242
          $document: $DocumentProvider,                                                                                // 2243
          $exceptionHandler: $ExceptionHandlerProvider,                                                                // 2244
          $filter: $FilterProvider,                                                                                    // 2245
          $interpolate: $InterpolateProvider,                                                                          // 2246
          $interval: $IntervalProvider,                                                                                // 2247
          $http: $HttpProvider,                                                                                        // 2248
          $httpBackend: $HttpBackendProvider,                                                                          // 2249
          $location: $LocationProvider,                                                                                // 2250
          $log: $LogProvider,                                                                                          // 2251
          $parse: $ParseProvider,                                                                                      // 2252
          $rootScope: $RootScopeProvider,                                                                              // 2253
          $q: $QProvider,                                                                                              // 2254
          $$q: $$QProvider,                                                                                            // 2255
          $sce: $SceProvider,                                                                                          // 2256
          $sceDelegate: $SceDelegateProvider,                                                                          // 2257
          $sniffer: $SnifferProvider,                                                                                  // 2258
          $templateCache: $TemplateCacheProvider,                                                                      // 2259
          $templateRequest: $TemplateRequestProvider,                                                                  // 2260
          $$testability: $$TestabilityProvider,                                                                        // 2261
          $timeout: $TimeoutProvider,                                                                                  // 2262
          $window: $WindowProvider,                                                                                    // 2263
          $$rAF: $$RAFProvider,                                                                                        // 2264
          $$asyncCallback: $$AsyncCallbackProvider,                                                                    // 2265
          $$jqLite: $$jqLiteProvider                                                                                   // 2266
        });                                                                                                            // 2267
      }                                                                                                                // 2268
    ]);                                                                                                                // 2269
  }                                                                                                                    // 2270
                                                                                                                       // 2271
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                         // 2272
   *     Any commits to this file should be reviewed with security in mind.  *                                         // 2273
   *   Changes to this file can potentially create security vulnerabilities. *                                         // 2274
   *          An approval from 2 Core members with history of modifying      *                                         // 2275
   *                         this file is required.                          *                                         // 2276
   *                                                                         *                                         // 2277
   *  Does the change somehow allow for arbitrary javascript to be executed? *                                         // 2278
   *    Or allows for someone to change the prototype of built-in objects?   *                                         // 2279
   *     Or gives undesired access to variables likes document or window?    *                                         // 2280
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                        // 2281
                                                                                                                       // 2282
  /* global JQLitePrototype: true,                                                                                     // 2283
   addEventListenerFn: true,                                                                                           // 2284
   removeEventListenerFn: true,                                                                                        // 2285
   BOOLEAN_ATTR: true,                                                                                                 // 2286
   ALIASED_ATTR: true,                                                                                                 // 2287
   */                                                                                                                  // 2288
                                                                                                                       // 2289
//////////////////////////////////                                                                                     // 2290
//JQLite                                                                                                               // 2291
//////////////////////////////////                                                                                     // 2292
                                                                                                                       // 2293
  /**                                                                                                                  // 2294
   * @ngdoc function                                                                                                   // 2295
   * @name angular.element                                                                                             // 2296
   * @module ng                                                                                                        // 2297
   * @kind function                                                                                                    // 2298
   *                                                                                                                   // 2299
   * @description                                                                                                      // 2300
   * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                  // 2301
   *                                                                                                                   // 2302
   * If jQuery is available, `angular.element` is an alias for the                                                     // 2303
   * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                   // 2304
   * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."                               // 2305
   *                                                                                                                   // 2306
   * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows                    // 2307
   * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most              // 2308
   * commonly needed functionality with the goal of having a very small footprint.</div>                               // 2309
   *                                                                                                                   // 2310
   * To use jQuery, simply load it before `DOMContentLoaded` event fired.                                              // 2311
   *                                                                                                                   // 2312
   * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or                  // 2313
   * jqLite; they are never raw DOM references.</div>                                                                  // 2314
   *                                                                                                                   // 2315
   * ## Angular's jqLite                                                                                               // 2316
   * jqLite provides only the following jQuery methods:                                                                // 2317
   *                                                                                                                   // 2318
   * - [`addClass()`](http://api.jquery.com/addClass/)                                                                 // 2319
   * - [`after()`](http://api.jquery.com/after/)                                                                       // 2320
   * - [`append()`](http://api.jquery.com/append/)                                                                     // 2321
   * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                              // 2322
   * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                   // 2323
   * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                    // 2324
   * - [`clone()`](http://api.jquery.com/clone/)                                                                       // 2325
   * - [`contents()`](http://api.jquery.com/contents/)                                                                 // 2326
   * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`        // 2327
   * - [`data()`](http://api.jquery.com/data/)                                                                         // 2328
   * - [`detach()`](http://api.jquery.com/detach/)                                                                     // 2329
   * - [`empty()`](http://api.jquery.com/empty/)                                                                       // 2330
   * - [`eq()`](http://api.jquery.com/eq/)                                                                             // 2331
   * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                        // 2332
   * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                 // 2333
   * - [`html()`](http://api.jquery.com/html/)                                                                         // 2334
   * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                            // 2335
   * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                       // 2336
   * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors                                // 2337
   * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                // 2338
   * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                        // 2339
   * - [`prepend()`](http://api.jquery.com/prepend/)                                                                   // 2340
   * - [`prop()`](http://api.jquery.com/prop/)                                                                         // 2341
   * - [`ready()`](http://api.jquery.com/ready/)                                                                       // 2342
   * - [`remove()`](http://api.jquery.com/remove/)                                                                     // 2343
   * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                             // 2344
   * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                           // 2345
   * - [`removeData()`](http://api.jquery.com/removeData/)                                                             // 2346
   * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                           // 2347
   * - [`text()`](http://api.jquery.com/text/)                                                                         // 2348
   * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                           // 2349
   * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.          // 2350
   * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces                                       // 2351
   * - [`val()`](http://api.jquery.com/val/)                                                                           // 2352
   * - [`wrap()`](http://api.jquery.com/wrap/)                                                                         // 2353
   *                                                                                                                   // 2354
   * ## jQuery/jqLite Extras                                                                                           // 2355
   * Angular also provides the following additional methods and events to both jQuery and jqLite:                      // 2356
   *                                                                                                                   // 2357
   * ### Events                                                                                                        // 2358
   * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                 // 2359
   *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                // 2360
   *    element before it is removed.                                                                                  // 2361
   *                                                                                                                   // 2362
   * ### Methods                                                                                                       // 2363
   * - `controller(name)` - retrieves the controller of the current element or its parent. By default                  // 2364
   *   retrieves controller associated with the `ngController` directive. If `name` is provided as                     // 2365
   *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                        // 2366
   *   `'ngModel'`).                                                                                                   // 2367
   * - `injector()` - retrieves the injector of the current element or its parent.                                     // 2368
   * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                      // 2369
   *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                     // 2370
   *   be enabled.                                                                                                     // 2371
   * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the    // 2372
   *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
   *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                         // 2374
   *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                // 2375
   * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                    // 2376
   *   parent element is reached.                                                                                      // 2377
   *                                                                                                                   // 2378
   * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                           // 2379
   * @returns {Object} jQuery object.                                                                                  // 2380
   */                                                                                                                  // 2381
                                                                                                                       // 2382
  JQLite.expando = 'ng339';                                                                                            // 2383
                                                                                                                       // 2384
  var jqCache = JQLite.cache = {},                                                                                     // 2385
    jqId = 1,                                                                                                          // 2386
    addEventListenerFn = function(element, type, fn) {                                                                 // 2387
      element.addEventListener(type, fn, false);                                                                       // 2388
    },                                                                                                                 // 2389
    removeEventListenerFn = function(element, type, fn) {                                                              // 2390
      element.removeEventListener(type, fn, false);                                                                    // 2391
    };                                                                                                                 // 2392
                                                                                                                       // 2393
  /*                                                                                                                   // 2394
   * !!! This is an undocumented "private" function !!!                                                                // 2395
   */                                                                                                                  // 2396
  JQLite._data = function(node) {                                                                                      // 2397
    //jQuery always returns an object on cache miss                                                                    // 2398
    return this.cache[node[this.expando]] || {};                                                                       // 2399
  };                                                                                                                   // 2400
                                                                                                                       // 2401
  function jqNextId() { return ++jqId; }                                                                               // 2402
                                                                                                                       // 2403
                                                                                                                       // 2404
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                        // 2405
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                 // 2406
  var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};                                             // 2407
  var jqLiteMinErr = minErr('jqLite');                                                                                 // 2408
                                                                                                                       // 2409
  /**                                                                                                                  // 2410
   * Converts snake_case to camelCase.                                                                                 // 2411
   * Also there is special case for Moz prefix starting with upper case letter.                                        // 2412
   * @param name Name to normalize                                                                                     // 2413
   */                                                                                                                  // 2414
  function camelCase(name) {                                                                                           // 2415
    return name.                                                                                                       // 2416
      replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                           // 2417
        return offset ? letter.toUpperCase() : letter;                                                                 // 2418
      }).                                                                                                              // 2419
      replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                               // 2420
  }                                                                                                                    // 2421
                                                                                                                       // 2422
  var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;                                                                // 2423
  var HTML_REGEXP = /<|&#?\w+;/;                                                                                       // 2424
  var TAG_NAME_REGEXP = /<([\w:]+)/;                                                                                   // 2425
  var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;                    // 2426
                                                                                                                       // 2427
  var wrapMap = {                                                                                                      // 2428
    'option': [1, '<select multiple="multiple">', '</select>'],                                                        // 2429
                                                                                                                       // 2430
    'thead': [1, '<table>', '</table>'],                                                                               // 2431
    'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                            // 2432
    'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                   // 2433
    'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                          // 2434
    '_default': [0, "", ""]                                                                                            // 2435
  };                                                                                                                   // 2436
                                                                                                                       // 2437
  wrapMap.optgroup = wrapMap.option;                                                                                   // 2438
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                  // 2439
  wrapMap.th = wrapMap.td;                                                                                             // 2440
                                                                                                                       // 2441
                                                                                                                       // 2442
  function jqLiteIsTextNode(html) {                                                                                    // 2443
    return !HTML_REGEXP.test(html);                                                                                    // 2444
  }                                                                                                                    // 2445
                                                                                                                       // 2446
  function jqLiteAcceptsData(node) {                                                                                   // 2447
    // The window object can accept data but has no nodeType                                                           // 2448
    // Otherwise we are only interested in elements (1) and documents (9)                                              // 2449
    var nodeType = node.nodeType;                                                                                      // 2450
    return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                             // 2451
  }                                                                                                                    // 2452
                                                                                                                       // 2453
  function jqLiteBuildFragment(html, context) {                                                                        // 2454
    var tmp, tag, wrap,                                                                                                // 2455
      fragment = context.createDocumentFragment(),                                                                     // 2456
      nodes = [], i;                                                                                                   // 2457
                                                                                                                       // 2458
    if (jqLiteIsTextNode(html)) {                                                                                      // 2459
      // Convert non-html into a text node                                                                             // 2460
      nodes.push(context.createTextNode(html));                                                                        // 2461
    } else {                                                                                                           // 2462
      // Convert html into DOM nodes                                                                                   // 2463
      tmp = tmp || fragment.appendChild(context.createElement("div"));                                                 // 2464
      tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();                                                 // 2465
      wrap = wrapMap[tag] || wrapMap._default;                                                                         // 2466
      tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];                                 // 2467
                                                                                                                       // 2468
      // Descend through wrappers to the right content                                                                 // 2469
      i = wrap[0];                                                                                                     // 2470
      while (i--) {                                                                                                    // 2471
        tmp = tmp.lastChild;                                                                                           // 2472
      }                                                                                                                // 2473
                                                                                                                       // 2474
      nodes = concat(nodes, tmp.childNodes);                                                                           // 2475
                                                                                                                       // 2476
      tmp = fragment.firstChild;                                                                                       // 2477
      tmp.textContent = "";                                                                                            // 2478
    }                                                                                                                  // 2479
                                                                                                                       // 2480
    // Remove wrapper from fragment                                                                                    // 2481
    fragment.textContent = "";                                                                                         // 2482
    fragment.innerHTML = ""; // Clear inner HTML                                                                       // 2483
    forEach(nodes, function(node) {                                                                                    // 2484
      fragment.appendChild(node);                                                                                      // 2485
    });                                                                                                                // 2486
                                                                                                                       // 2487
    return fragment;                                                                                                   // 2488
  }                                                                                                                    // 2489
                                                                                                                       // 2490
  function jqLiteParseHTML(html, context) {                                                                            // 2491
    context = context || document;                                                                                     // 2492
    var parsed;                                                                                                        // 2493
                                                                                                                       // 2494
    if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                     // 2495
      return [context.createElement(parsed[1])];                                                                       // 2496
    }                                                                                                                  // 2497
                                                                                                                       // 2498
    if ((parsed = jqLiteBuildFragment(html, context))) {                                                               // 2499
      return parsed.childNodes;                                                                                        // 2500
    }                                                                                                                  // 2501
                                                                                                                       // 2502
    return [];                                                                                                         // 2503
  }                                                                                                                    // 2504
                                                                                                                       // 2505
/////////////////////////////////////////////                                                                          // 2506
  function JQLite(element) {                                                                                           // 2507
    if (element instanceof JQLite) {                                                                                   // 2508
      return element;                                                                                                  // 2509
    }                                                                                                                  // 2510
                                                                                                                       // 2511
    var argIsString;                                                                                                   // 2512
                                                                                                                       // 2513
    if (isString(element)) {                                                                                           // 2514
      element = trim(element);                                                                                         // 2515
      argIsString = true;                                                                                              // 2516
    }                                                                                                                  // 2517
    if (!(this instanceof JQLite)) {                                                                                   // 2518
      if (argIsString && element.charAt(0) != '<') {                                                                   // 2519
        throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
      }                                                                                                                // 2521
      return new JQLite(element);                                                                                      // 2522
    }                                                                                                                  // 2523
                                                                                                                       // 2524
    if (argIsString) {                                                                                                 // 2525
      jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                  // 2526
    } else {                                                                                                           // 2527
      jqLiteAddNodes(this, element);                                                                                   // 2528
    }                                                                                                                  // 2529
  }                                                                                                                    // 2530
                                                                                                                       // 2531
  function jqLiteClone(element) {                                                                                      // 2532
    return element.cloneNode(true);                                                                                    // 2533
  }                                                                                                                    // 2534
                                                                                                                       // 2535
  function jqLiteDealoc(element, onlyDescendants) {                                                                    // 2536
    if (!onlyDescendants) jqLiteRemoveData(element);                                                                   // 2537
                                                                                                                       // 2538
    if (element.querySelectorAll) {                                                                                    // 2539
      var descendants = element.querySelectorAll('*');                                                                 // 2540
      for (var i = 0, l = descendants.length; i < l; i++) {                                                            // 2541
        jqLiteRemoveData(descendants[i]);                                                                              // 2542
      }                                                                                                                // 2543
    }                                                                                                                  // 2544
  }                                                                                                                    // 2545
                                                                                                                       // 2546
  function jqLiteOff(element, type, fn, unsupported) {                                                                 // 2547
    if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
                                                                                                                       // 2549
    var expandoStore = jqLiteExpandoStore(element);                                                                    // 2550
    var events = expandoStore && expandoStore.events;                                                                  // 2551
    var handle = expandoStore && expandoStore.handle;                                                                  // 2552
                                                                                                                       // 2553
    if (!handle) return; //no listeners registered                                                                     // 2554
                                                                                                                       // 2555
    if (!type) {                                                                                                       // 2556
      for (type in events) {                                                                                           // 2557
        if (type !== '$destroy') {                                                                                     // 2558
          removeEventListenerFn(element, type, handle);                                                                // 2559
        }                                                                                                              // 2560
        delete events[type];                                                                                           // 2561
      }                                                                                                                // 2562
    } else {                                                                                                           // 2563
      forEach(type.split(' '), function(type) {                                                                        // 2564
        if (isDefined(fn)) {                                                                                           // 2565
          var listenerFns = events[type];                                                                              // 2566
          arrayRemove(listenerFns || [], fn);                                                                          // 2567
          if (listenerFns && listenerFns.length > 0) {                                                                 // 2568
            return;                                                                                                    // 2569
          }                                                                                                            // 2570
        }                                                                                                              // 2571
                                                                                                                       // 2572
        removeEventListenerFn(element, type, handle);                                                                  // 2573
        delete events[type];                                                                                           // 2574
      });                                                                                                              // 2575
    }                                                                                                                  // 2576
  }                                                                                                                    // 2577
                                                                                                                       // 2578
  function jqLiteRemoveData(element, name) {                                                                           // 2579
    var expandoId = element.ng339;                                                                                     // 2580
    var expandoStore = expandoId && jqCache[expandoId];                                                                // 2581
                                                                                                                       // 2582
    if (expandoStore) {                                                                                                // 2583
      if (name) {                                                                                                      // 2584
        delete expandoStore.data[name];                                                                                // 2585
        return;                                                                                                        // 2586
      }                                                                                                                // 2587
                                                                                                                       // 2588
      if (expandoStore.handle) {                                                                                       // 2589
        if (expandoStore.events.$destroy) {                                                                            // 2590
          expandoStore.handle({}, '$destroy');                                                                         // 2591
        }                                                                                                              // 2592
        jqLiteOff(element);                                                                                            // 2593
      }                                                                                                                // 2594
      delete jqCache[expandoId];                                                                                       // 2595
      element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                             // 2596
    }                                                                                                                  // 2597
  }                                                                                                                    // 2598
                                                                                                                       // 2599
                                                                                                                       // 2600
  function jqLiteExpandoStore(element, createIfNecessary) {                                                            // 2601
    var expandoId = element.ng339,                                                                                     // 2602
      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2603
                                                                                                                       // 2604
    if (createIfNecessary && !expandoStore) {                                                                          // 2605
      element.ng339 = expandoId = jqNextId();                                                                          // 2606
      expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                   // 2607
    }                                                                                                                  // 2608
                                                                                                                       // 2609
    return expandoStore;                                                                                               // 2610
  }                                                                                                                    // 2611
                                                                                                                       // 2612
                                                                                                                       // 2613
  function jqLiteData(element, key, value) {                                                                           // 2614
    if (jqLiteAcceptsData(element)) {                                                                                  // 2615
                                                                                                                       // 2616
      var isSimpleSetter = isDefined(value);                                                                           // 2617
      var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                   // 2618
      var massGetter = !key;                                                                                           // 2619
      var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                 // 2620
      var data = expandoStore && expandoStore.data;                                                                    // 2621
                                                                                                                       // 2622
      if (isSimpleSetter) { // data('key', value)                                                                      // 2623
        data[key] = value;                                                                                             // 2624
      } else {                                                                                                         // 2625
        if (massGetter) {  // data()                                                                                   // 2626
          return data;                                                                                                 // 2627
        } else {                                                                                                       // 2628
          if (isSimpleGetter) { // data('key')                                                                         // 2629
            // don't force creation of expandoStore if it doesn't exist yet                                            // 2630
            return data && data[key];                                                                                  // 2631
          } else { // mass-setter: data({key1: val1, key2: val2})                                                      // 2632
            extend(data, key);                                                                                         // 2633
          }                                                                                                            // 2634
        }                                                                                                              // 2635
      }                                                                                                                // 2636
    }                                                                                                                  // 2637
  }                                                                                                                    // 2638
                                                                                                                       // 2639
  function jqLiteHasClass(element, selector) {                                                                         // 2640
    if (!element.getAttribute) return false;                                                                           // 2641
    return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").                               // 2642
      indexOf(" " + selector + " ") > -1);                                                                             // 2643
  }                                                                                                                    // 2644
                                                                                                                       // 2645
  function jqLiteRemoveClass(element, cssClasses) {                                                                    // 2646
    if (cssClasses && element.setAttribute) {                                                                          // 2647
      forEach(cssClasses.split(' '), function(cssClass) {                                                              // 2648
        element.setAttribute('class', trim(                                                                            // 2649
            (" " + (element.getAttribute('class') || '') + " ")                                                        // 2650
              .replace(/[\n\t]/g, " ")                                                                                 // 2651
              .replace(" " + trim(cssClass) + " ", " "))                                                               // 2652
        );                                                                                                             // 2653
      });                                                                                                              // 2654
    }                                                                                                                  // 2655
  }                                                                                                                    // 2656
                                                                                                                       // 2657
  function jqLiteAddClass(element, cssClasses) {                                                                       // 2658
    if (cssClasses && element.setAttribute) {                                                                          // 2659
      var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                        // 2660
        .replace(/[\n\t]/g, " ");                                                                                      // 2661
                                                                                                                       // 2662
      forEach(cssClasses.split(' '), function(cssClass) {                                                              // 2663
        cssClass = trim(cssClass);                                                                                     // 2664
        if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                    // 2665
          existingClasses += cssClass + ' ';                                                                           // 2666
        }                                                                                                              // 2667
      });                                                                                                              // 2668
                                                                                                                       // 2669
      element.setAttribute('class', trim(existingClasses));                                                            // 2670
    }                                                                                                                  // 2671
  }                                                                                                                    // 2672
                                                                                                                       // 2673
                                                                                                                       // 2674
  function jqLiteAddNodes(root, elements) {                                                                            // 2675
    // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                 // 2676
                                                                                                                       // 2677
    if (elements) {                                                                                                    // 2678
                                                                                                                       // 2679
      // if a Node (the most common case)                                                                              // 2680
      if (elements.nodeType) {                                                                                         // 2681
        root[root.length++] = elements;                                                                                // 2682
      } else {                                                                                                         // 2683
        var length = elements.length;                                                                                  // 2684
                                                                                                                       // 2685
        // if an Array or NodeList and not a Window                                                                    // 2686
        if (typeof length === 'number' && elements.window !== elements) {                                              // 2687
          if (length) {                                                                                                // 2688
            for (var i = 0; i < length; i++) {                                                                         // 2689
              root[root.length++] = elements[i];                                                                       // 2690
            }                                                                                                          // 2691
          }                                                                                                            // 2692
        } else {                                                                                                       // 2693
          root[root.length++] = elements;                                                                              // 2694
        }                                                                                                              // 2695
      }                                                                                                                // 2696
    }                                                                                                                  // 2697
  }                                                                                                                    // 2698
                                                                                                                       // 2699
                                                                                                                       // 2700
  function jqLiteController(element, name) {                                                                           // 2701
    return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                // 2702
  }                                                                                                                    // 2703
                                                                                                                       // 2704
  function jqLiteInheritedData(element, name, value) {                                                                 // 2705
    // if element is the document object work with the html element instead                                            // 2706
    // this makes $(document).scope() possible                                                                         // 2707
    if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                      // 2708
      element = element.documentElement;                                                                               // 2709
    }                                                                                                                  // 2710
    var names = isArray(name) ? name : [name];                                                                         // 2711
                                                                                                                       // 2712
    while (element) {                                                                                                  // 2713
      for (var i = 0, ii = names.length; i < ii; i++) {                                                                // 2714
        if ((value = jqLite.data(element, names[i])) !== undefined) return value;                                      // 2715
      }                                                                                                                // 2716
                                                                                                                       // 2717
      // If dealing with a document fragment node with a host element, and no parent, use the host                     // 2718
      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                   // 2719
      // to lookup parent controllers.                                                                                 // 2720
      element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);              // 2721
    }                                                                                                                  // 2722
  }                                                                                                                    // 2723
                                                                                                                       // 2724
  function jqLiteEmpty(element) {                                                                                      // 2725
    jqLiteDealoc(element, true);                                                                                       // 2726
    while (element.firstChild) {                                                                                       // 2727
      element.removeChild(element.firstChild);                                                                         // 2728
    }                                                                                                                  // 2729
  }                                                                                                                    // 2730
                                                                                                                       // 2731
  function jqLiteRemove(element, keepData) {                                                                           // 2732
    if (!keepData) jqLiteDealoc(element);                                                                              // 2733
    var parent = element.parentNode;                                                                                   // 2734
    if (parent) parent.removeChild(element);                                                                           // 2735
  }                                                                                                                    // 2736
                                                                                                                       // 2737
                                                                                                                       // 2738
  function jqLiteDocumentLoaded(action, win) {                                                                         // 2739
    win = win || window;                                                                                               // 2740
    if (win.document.readyState === 'complete') {                                                                      // 2741
      // Force the action to be run async for consistent behaviour                                                     // 2742
      // from the action's point of view                                                                               // 2743
      // i.e. it will definitely not be in a $apply                                                                    // 2744
      win.setTimeout(action);                                                                                          // 2745
    } else {                                                                                                           // 2746
      // No need to unbind this handler as load is only ever called once                                               // 2747
      jqLite(win).on('load', action);                                                                                  // 2748
    }                                                                                                                  // 2749
  }                                                                                                                    // 2750
                                                                                                                       // 2751
//////////////////////////////////////////                                                                             // 2752
// Functions which are declared directly.                                                                              // 2753
//////////////////////////////////////////                                                                             // 2754
  var JQLitePrototype = JQLite.prototype = {                                                                           // 2755
    ready: function(fn) {                                                                                              // 2756
      var fired = false;                                                                                               // 2757
                                                                                                                       // 2758
      function trigger() {                                                                                             // 2759
        if (fired) return;                                                                                             // 2760
        fired = true;                                                                                                  // 2761
        fn();                                                                                                          // 2762
      }                                                                                                                // 2763
                                                                                                                       // 2764
      // check if document is already loaded                                                                           // 2765
      if (document.readyState === 'complete') {                                                                        // 2766
        setTimeout(trigger);                                                                                           // 2767
      } else {                                                                                                         // 2768
        this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                     // 2769
        // we can not use jqLite since we are not done loading and jQuery could be loaded later.                       // 2770
        // jshint -W064                                                                                                // 2771
        JQLite(window).on('load', trigger); // fallback to window.onload for others                                    // 2772
        // jshint +W064                                                                                                // 2773
      }                                                                                                                // 2774
    },                                                                                                                 // 2775
    toString: function() {                                                                                             // 2776
      var value = [];                                                                                                  // 2777
      forEach(this, function(e) { value.push('' + e);});                                                               // 2778
      return '[' + value.join(', ') + ']';                                                                             // 2779
    },                                                                                                                 // 2780
                                                                                                                       // 2781
    eq: function(index) {                                                                                              // 2782
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 2783
    },                                                                                                                 // 2784
                                                                                                                       // 2785
    length: 0,                                                                                                         // 2786
    push: push,                                                                                                        // 2787
    sort: [].sort,                                                                                                     // 2788
    splice: [].splice                                                                                                  // 2789
  };                                                                                                                   // 2790
                                                                                                                       // 2791
//////////////////////////////////////////                                                                             // 2792
// Functions iterating getter/setters.                                                                                 // 2793
// these functions return self on setter and                                                                           // 2794
// value on get.                                                                                                       // 2795
//////////////////////////////////////////                                                                             // 2796
  var BOOLEAN_ATTR = {};                                                                                               // 2797
  forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                    // 2798
    BOOLEAN_ATTR[lowercase(value)] = value;                                                                            // 2799
  });                                                                                                                  // 2800
  var BOOLEAN_ELEMENTS = {};                                                                                           // 2801
  forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                             // 2802
    BOOLEAN_ELEMENTS[value] = true;                                                                                    // 2803
  });                                                                                                                  // 2804
  var ALIASED_ATTR = {                                                                                                 // 2805
    'ngMinlength': 'minlength',                                                                                        // 2806
    'ngMaxlength': 'maxlength',                                                                                        // 2807
    'ngMin': 'min',                                                                                                    // 2808
    'ngMax': 'max',                                                                                                    // 2809
    'ngPattern': 'pattern'                                                                                             // 2810
  };                                                                                                                   // 2811
                                                                                                                       // 2812
  function getBooleanAttrName(element, name) {                                                                         // 2813
    // check dom last since we will most likely fail on name                                                           // 2814
    var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                // 2815
                                                                                                                       // 2816
    // booleanAttr is here twice to minimize DOM access                                                                // 2817
    return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                         // 2818
  }                                                                                                                    // 2819
                                                                                                                       // 2820
  function getAliasedAttrName(element, name) {                                                                         // 2821
    var nodeName = element.nodeName;                                                                                   // 2822
    return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];                                    // 2823
  }                                                                                                                    // 2824
                                                                                                                       // 2825
  forEach({                                                                                                            // 2826
    data: jqLiteData,                                                                                                  // 2827
    removeData: jqLiteRemoveData                                                                                       // 2828
  }, function(fn, name) {                                                                                              // 2829
    JQLite[name] = fn;                                                                                                 // 2830
  });                                                                                                                  // 2831
                                                                                                                       // 2832
  forEach({                                                                                                            // 2833
    data: jqLiteData,                                                                                                  // 2834
    inheritedData: jqLiteInheritedData,                                                                                // 2835
                                                                                                                       // 2836
    scope: function(element) {                                                                                         // 2837
      // Can't use jqLiteData here directly so we stay compatible with jQuery!                                         // 2838
      return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
    },                                                                                                                 // 2840
                                                                                                                       // 2841
    isolateScope: function(element) {                                                                                  // 2842
      // Can't use jqLiteData here directly so we stay compatible with jQuery!                                         // 2843
      return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                 // 2844
    },                                                                                                                 // 2845
                                                                                                                       // 2846
    controller: jqLiteController,                                                                                      // 2847
                                                                                                                       // 2848
    injector: function(element) {                                                                                      // 2849
      return jqLiteInheritedData(element, '$injector');                                                                // 2850
    },                                                                                                                 // 2851
                                                                                                                       // 2852
    removeAttr: function(element, name) {                                                                              // 2853
      element.removeAttribute(name);                                                                                   // 2854
    },                                                                                                                 // 2855
                                                                                                                       // 2856
    hasClass: jqLiteHasClass,                                                                                          // 2857
                                                                                                                       // 2858
    css: function(element, name, value) {                                                                              // 2859
      name = camelCase(name);                                                                                          // 2860
                                                                                                                       // 2861
      if (isDefined(value)) {                                                                                          // 2862
        element.style[name] = value;                                                                                   // 2863
      } else {                                                                                                         // 2864
        return element.style[name];                                                                                    // 2865
      }                                                                                                                // 2866
    },                                                                                                                 // 2867
                                                                                                                       // 2868
    attr: function(element, name, value) {                                                                             // 2869
      var lowercasedName = lowercase(name);                                                                            // 2870
      if (BOOLEAN_ATTR[lowercasedName]) {                                                                              // 2871
        if (isDefined(value)) {                                                                                        // 2872
          if (!!value) {                                                                                               // 2873
            element[name] = true;                                                                                      // 2874
            element.setAttribute(name, lowercasedName);                                                                // 2875
          } else {                                                                                                     // 2876
            element[name] = false;                                                                                     // 2877
            element.removeAttribute(lowercasedName);                                                                   // 2878
          }                                                                                                            // 2879
        } else {                                                                                                       // 2880
          return (element[name] ||                                                                                     // 2881
          (element.attributes.getNamedItem(name) || noop).specified)                                                   // 2882
            ? lowercasedName                                                                                           // 2883
            : undefined;                                                                                               // 2884
        }                                                                                                              // 2885
      } else if (isDefined(value)) {                                                                                   // 2886
        element.setAttribute(name, value);                                                                             // 2887
      } else if (element.getAttribute) {                                                                               // 2888
        // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code                          // 2889
        // some elements (e.g. Document) don't have get attribute, so return undefined                                 // 2890
        var ret = element.getAttribute(name, 2);                                                                       // 2891
        // normalize non-existing attributes to undefined (as jQuery)                                                  // 2892
        return ret === null ? undefined : ret;                                                                         // 2893
      }                                                                                                                // 2894
    },                                                                                                                 // 2895
                                                                                                                       // 2896
    prop: function(element, name, value) {                                                                             // 2897
      if (isDefined(value)) {                                                                                          // 2898
        element[name] = value;                                                                                         // 2899
      } else {                                                                                                         // 2900
        return element[name];                                                                                          // 2901
      }                                                                                                                // 2902
    },                                                                                                                 // 2903
                                                                                                                       // 2904
    text: (function() {                                                                                                // 2905
      getText.$dv = '';                                                                                                // 2906
      return getText;                                                                                                  // 2907
                                                                                                                       // 2908
      function getText(element, value) {                                                                               // 2909
        if (isUndefined(value)) {                                                                                      // 2910
          var nodeType = element.nodeType;                                                                             // 2911
          return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';           // 2912
        }                                                                                                              // 2913
        element.textContent = value;                                                                                   // 2914
      }                                                                                                                // 2915
    })(),                                                                                                              // 2916
                                                                                                                       // 2917
    val: function(element, value) {                                                                                    // 2918
      if (isUndefined(value)) {                                                                                        // 2919
        if (element.multiple && nodeName_(element) === 'select') {                                                     // 2920
          var result = [];                                                                                             // 2921
          forEach(element.options, function(option) {                                                                  // 2922
            if (option.selected) {                                                                                     // 2923
              result.push(option.value || option.text);                                                                // 2924
            }                                                                                                          // 2925
          });                                                                                                          // 2926
          return result.length === 0 ? null : result;                                                                  // 2927
        }                                                                                                              // 2928
        return element.value;                                                                                          // 2929
      }                                                                                                                // 2930
      element.value = value;                                                                                           // 2931
    },                                                                                                                 // 2932
                                                                                                                       // 2933
    html: function(element, value) {                                                                                   // 2934
      if (isUndefined(value)) {                                                                                        // 2935
        return element.innerHTML;                                                                                      // 2936
      }                                                                                                                // 2937
      jqLiteDealoc(element, true);                                                                                     // 2938
      element.innerHTML = value;                                                                                       // 2939
    },                                                                                                                 // 2940
                                                                                                                       // 2941
    empty: jqLiteEmpty                                                                                                 // 2942
  }, function(fn, name) {                                                                                              // 2943
    /**                                                                                                                // 2944
     * Properties: writes return selection, reads return first value                                                   // 2945
     */                                                                                                                // 2946
    JQLite.prototype[name] = function(arg1, arg2) {                                                                    // 2947
      var i, key;                                                                                                      // 2948
      var nodeCount = this.length;                                                                                     // 2949
                                                                                                                       // 2950
      // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                 // 2951
      // in a way that survives minification.                                                                          // 2952
      // jqLiteEmpty takes no arguments but is a setter.                                                               // 2953
      if (fn !== jqLiteEmpty &&                                                                                        // 2954
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {      // 2955
        if (isObject(arg1)) {                                                                                          // 2956
                                                                                                                       // 2957
          // we are a write, but the object properties are the key/values                                              // 2958
          for (i = 0; i < nodeCount; i++) {                                                                            // 2959
            if (fn === jqLiteData) {                                                                                   // 2960
              // data() takes the whole object in jQuery                                                               // 2961
              fn(this[i], arg1);                                                                                       // 2962
            } else {                                                                                                   // 2963
              for (key in arg1) {                                                                                      // 2964
                fn(this[i], key, arg1[key]);                                                                           // 2965
              }                                                                                                        // 2966
            }                                                                                                          // 2967
          }                                                                                                            // 2968
          // return self for chaining                                                                                  // 2969
          return this;                                                                                                 // 2970
        } else {                                                                                                       // 2971
          // we are a read, so read the first child.                                                                   // 2972
          // TODO: do we still need this?                                                                              // 2973
          var value = fn.$dv;                                                                                          // 2974
          // Only if we have $dv do we iterate over all, otherwise it is just the first element.                       // 2975
          var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;                                         // 2976
          for (var j = 0; j < jj; j++) {                                                                               // 2977
            var nodeValue = fn(this[j], arg1, arg2);                                                                   // 2978
            value = value ? value + nodeValue : nodeValue;                                                             // 2979
          }                                                                                                            // 2980
          return value;                                                                                                // 2981
        }                                                                                                              // 2982
      } else {                                                                                                         // 2983
        // we are a write, so apply to all children                                                                    // 2984
        for (i = 0; i < nodeCount; i++) {                                                                              // 2985
          fn(this[i], arg1, arg2);                                                                                     // 2986
        }                                                                                                              // 2987
        // return self for chaining                                                                                    // 2988
        return this;                                                                                                   // 2989
      }                                                                                                                // 2990
    };                                                                                                                 // 2991
  });                                                                                                                  // 2992
                                                                                                                       // 2993
  function createEventHandler(element, events) {                                                                       // 2994
    var eventHandler = function(event, type) {                                                                         // 2995
      // jQuery specific api                                                                                           // 2996
      event.isDefaultPrevented = function() {                                                                          // 2997
        return event.defaultPrevented;                                                                                 // 2998
      };                                                                                                               // 2999
                                                                                                                       // 3000
      var eventFns = events[type || event.type];                                                                       // 3001
      var eventFnsLength = eventFns ? eventFns.length : 0;                                                             // 3002
                                                                                                                       // 3003
      if (!eventFnsLength) return;                                                                                     // 3004
                                                                                                                       // 3005
      if (isUndefined(event.immediatePropagationStopped)) {                                                            // 3006
        var originalStopImmediatePropagation = event.stopImmediatePropagation;                                         // 3007
        event.stopImmediatePropagation = function() {                                                                  // 3008
          event.immediatePropagationStopped = true;                                                                    // 3009
                                                                                                                       // 3010
          if (event.stopPropagation) {                                                                                 // 3011
            event.stopPropagation();                                                                                   // 3012
          }                                                                                                            // 3013
                                                                                                                       // 3014
          if (originalStopImmediatePropagation) {                                                                      // 3015
            originalStopImmediatePropagation.call(event);                                                              // 3016
          }                                                                                                            // 3017
        };                                                                                                             // 3018
      }                                                                                                                // 3019
                                                                                                                       // 3020
      event.isImmediatePropagationStopped = function() {                                                               // 3021
        return event.immediatePropagationStopped === true;                                                             // 3022
      };                                                                                                               // 3023
                                                                                                                       // 3024
      // Copy event handlers in case event handlers array is modified during execution.                                // 3025
      if ((eventFnsLength > 1)) {                                                                                      // 3026
        eventFns = shallowCopy(eventFns);                                                                              // 3027
      }                                                                                                                // 3028
                                                                                                                       // 3029
      for (var i = 0; i < eventFnsLength; i++) {                                                                       // 3030
        if (!event.isImmediatePropagationStopped()) {                                                                  // 3031
          eventFns[i].call(element, event);                                                                            // 3032
        }                                                                                                              // 3033
      }                                                                                                                // 3034
    };                                                                                                                 // 3035
                                                                                                                       // 3036
    // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                   // 3037
    //       events on `element`                                                                                       // 3038
    eventHandler.elem = element;                                                                                       // 3039
    return eventHandler;                                                                                               // 3040
  }                                                                                                                    // 3041
                                                                                                                       // 3042
//////////////////////////////////////////                                                                             // 3043
// Functions iterating traversal.                                                                                      // 3044
// These functions chain results into a single                                                                         // 3045
// selector.                                                                                                           // 3046
//////////////////////////////////////////                                                                             // 3047
  forEach({                                                                                                            // 3048
    removeData: jqLiteRemoveData,                                                                                      // 3049
                                                                                                                       // 3050
    on: function jqLiteOn(element, type, fn, unsupported) {                                                            // 3051
      if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
                                                                                                                       // 3053
      // Do not add event handlers to non-elements because they will not be cleaned up.                                // 3054
      if (!jqLiteAcceptsData(element)) {                                                                               // 3055
        return;                                                                                                        // 3056
      }                                                                                                                // 3057
                                                                                                                       // 3058
      var expandoStore = jqLiteExpandoStore(element, true);                                                            // 3059
      var events = expandoStore.events;                                                                                // 3060
      var handle = expandoStore.handle;                                                                                // 3061
                                                                                                                       // 3062
      if (!handle) {                                                                                                   // 3063
        handle = expandoStore.handle = createEventHandler(element, events);                                            // 3064
      }                                                                                                                // 3065
                                                                                                                       // 3066
      // http://jsperf.com/string-indexof-vs-split                                                                     // 3067
      var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                   // 3068
      var i = types.length;                                                                                            // 3069
                                                                                                                       // 3070
      while (i--) {                                                                                                    // 3071
        type = types[i];                                                                                               // 3072
        var eventFns = events[type];                                                                                   // 3073
                                                                                                                       // 3074
        if (!eventFns) {                                                                                               // 3075
          events[type] = [];                                                                                           // 3076
                                                                                                                       // 3077
          if (type === 'mouseenter' || type === 'mouseleave') {                                                        // 3078
            // Refer to jQuery's implementation of mouseenter & mouseleave                                             // 3079
            // Read about mouseenter and mouseleave:                                                                   // 3080
            // http://www.quirksmode.org/js/events_mouse.html#link8                                                    // 3081
                                                                                                                       // 3082
            jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {                                                 // 3083
              var target = this, related = event.relatedTarget;                                                        // 3084
              // For mousenter/leave call the handler if related is outside the target.                                // 3085
              // NB: No relatedTarget if the mouse left/entered the browser window                                     // 3086
              if (!related || (related !== target && !target.contains(related))) {                                     // 3087
                handle(event, type);                                                                                   // 3088
              }                                                                                                        // 3089
            });                                                                                                        // 3090
                                                                                                                       // 3091
          } else {                                                                                                     // 3092
            if (type !== '$destroy') {                                                                                 // 3093
              addEventListenerFn(element, type, handle);                                                               // 3094
            }                                                                                                          // 3095
          }                                                                                                            // 3096
          eventFns = events[type];                                                                                     // 3097
        }                                                                                                              // 3098
        eventFns.push(fn);                                                                                             // 3099
      }                                                                                                                // 3100
    },                                                                                                                 // 3101
                                                                                                                       // 3102
    off: jqLiteOff,                                                                                                    // 3103
                                                                                                                       // 3104
    one: function(element, type, fn) {                                                                                 // 3105
      element = jqLite(element);                                                                                       // 3106
                                                                                                                       // 3107
      //add the listener twice so that when it is called                                                               // 3108
      //you can remove the original function and still be                                                              // 3109
      //able to call element.off(ev, fn) normally                                                                      // 3110
      element.on(type, function onFn() {                                                                               // 3111
        element.off(type, fn);                                                                                         // 3112
        element.off(type, onFn);                                                                                       // 3113
      });                                                                                                              // 3114
      element.on(type, fn);                                                                                            // 3115
    },                                                                                                                 // 3116
                                                                                                                       // 3117
    replaceWith: function(element, replaceNode) {                                                                      // 3118
      var index, parent = element.parentNode;                                                                          // 3119
      jqLiteDealoc(element);                                                                                           // 3120
      forEach(new JQLite(replaceNode), function(node) {                                                                // 3121
        if (index) {                                                                                                   // 3122
          parent.insertBefore(node, index.nextSibling);                                                                // 3123
        } else {                                                                                                       // 3124
          parent.replaceChild(node, element);                                                                          // 3125
        }                                                                                                              // 3126
        index = node;                                                                                                  // 3127
      });                                                                                                              // 3128
    },                                                                                                                 // 3129
                                                                                                                       // 3130
    children: function(element) {                                                                                      // 3131
      var children = [];                                                                                               // 3132
      forEach(element.childNodes, function(element) {                                                                  // 3133
        if (element.nodeType === NODE_TYPE_ELEMENT)                                                                    // 3134
          children.push(element);                                                                                      // 3135
      });                                                                                                              // 3136
      return children;                                                                                                 // 3137
    },                                                                                                                 // 3138
                                                                                                                       // 3139
    contents: function(element) {                                                                                      // 3140
      return element.contentDocument || element.childNodes || [];                                                      // 3141
    },                                                                                                                 // 3142
                                                                                                                       // 3143
    append: function(element, node) {                                                                                  // 3144
      var nodeType = element.nodeType;                                                                                 // 3145
      if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                          // 3146
                                                                                                                       // 3147
      node = new JQLite(node);                                                                                         // 3148
                                                                                                                       // 3149
      for (var i = 0, ii = node.length; i < ii; i++) {                                                                 // 3150
        var child = node[i];                                                                                           // 3151
        element.appendChild(child);                                                                                    // 3152
      }                                                                                                                // 3153
    },                                                                                                                 // 3154
                                                                                                                       // 3155
    prepend: function(element, node) {                                                                                 // 3156
      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3157
        var index = element.firstChild;                                                                                // 3158
        forEach(new JQLite(node), function(child) {                                                                    // 3159
          element.insertBefore(child, index);                                                                          // 3160
        });                                                                                                            // 3161
      }                                                                                                                // 3162
    },                                                                                                                 // 3163
                                                                                                                       // 3164
    wrap: function(element, wrapNode) {                                                                                // 3165
      wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                    // 3166
      var parent = element.parentNode;                                                                                 // 3167
      if (parent) {                                                                                                    // 3168
        parent.replaceChild(wrapNode, element);                                                                        // 3169
      }                                                                                                                // 3170
      wrapNode.appendChild(element);                                                                                   // 3171
    },                                                                                                                 // 3172
                                                                                                                       // 3173
    remove: jqLiteRemove,                                                                                              // 3174
                                                                                                                       // 3175
    detach: function(element) {                                                                                        // 3176
      jqLiteRemove(element, true);                                                                                     // 3177
    },                                                                                                                 // 3178
                                                                                                                       // 3179
    after: function(element, newElement) {                                                                             // 3180
      var index = element, parent = element.parentNode;                                                                // 3181
      newElement = new JQLite(newElement);                                                                             // 3182
                                                                                                                       // 3183
      for (var i = 0, ii = newElement.length; i < ii; i++) {                                                           // 3184
        var node = newElement[i];                                                                                      // 3185
        parent.insertBefore(node, index.nextSibling);                                                                  // 3186
        index = node;                                                                                                  // 3187
      }                                                                                                                // 3188
    },                                                                                                                 // 3189
                                                                                                                       // 3190
    addClass: jqLiteAddClass,                                                                                          // 3191
    removeClass: jqLiteRemoveClass,                                                                                    // 3192
                                                                                                                       // 3193
    toggleClass: function(element, selector, condition) {                                                              // 3194
      if (selector) {                                                                                                  // 3195
        forEach(selector.split(' '), function(className) {                                                             // 3196
          var classCondition = condition;                                                                              // 3197
          if (isUndefined(classCondition)) {                                                                           // 3198
            classCondition = !jqLiteHasClass(element, className);                                                      // 3199
          }                                                                                                            // 3200
          (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                   // 3201
        });                                                                                                            // 3202
      }                                                                                                                // 3203
    },                                                                                                                 // 3204
                                                                                                                       // 3205
    parent: function(element) {                                                                                        // 3206
      var parent = element.parentNode;                                                                                 // 3207
      return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                // 3208
    },                                                                                                                 // 3209
                                                                                                                       // 3210
    next: function(element) {                                                                                          // 3211
      return element.nextElementSibling;                                                                               // 3212
    },                                                                                                                 // 3213
                                                                                                                       // 3214
    find: function(element, selector) {                                                                                // 3215
      if (element.getElementsByTagName) {                                                                              // 3216
        return element.getElementsByTagName(selector);                                                                 // 3217
      } else {                                                                                                         // 3218
        return [];                                                                                                     // 3219
      }                                                                                                                // 3220
    },                                                                                                                 // 3221
                                                                                                                       // 3222
    clone: jqLiteClone,                                                                                                // 3223
                                                                                                                       // 3224
    triggerHandler: function(element, event, extraParameters) {                                                        // 3225
                                                                                                                       // 3226
      var dummyEvent, eventFnsCopy, handlerArgs;                                                                       // 3227
      var eventName = event.type || event;                                                                             // 3228
      var expandoStore = jqLiteExpandoStore(element);                                                                  // 3229
      var events = expandoStore && expandoStore.events;                                                                // 3230
      var eventFns = events && events[eventName];                                                                      // 3231
                                                                                                                       // 3232
      if (eventFns) {                                                                                                  // 3233
        // Create a dummy event to pass to the handlers                                                                // 3234
        dummyEvent = {                                                                                                 // 3235
          preventDefault: function() { this.defaultPrevented = true; },                                                // 3236
          isDefaultPrevented: function() { return this.defaultPrevented === true; },                                   // 3237
          stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                           // 3238
          isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },             // 3239
          stopPropagation: noop,                                                                                       // 3240
          type: eventName,                                                                                             // 3241
          target: element                                                                                              // 3242
        };                                                                                                             // 3243
                                                                                                                       // 3244
        // If a custom event was provided then extend our dummy event with it                                          // 3245
        if (event.type) {                                                                                              // 3246
          dummyEvent = extend(dummyEvent, event);                                                                      // 3247
        }                                                                                                              // 3248
                                                                                                                       // 3249
        // Copy event handlers in case event handlers array is modified during execution.                              // 3250
        eventFnsCopy = shallowCopy(eventFns);                                                                          // 3251
        handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                           // 3252
                                                                                                                       // 3253
        forEach(eventFnsCopy, function(fn) {                                                                           // 3254
          if (!dummyEvent.isImmediatePropagationStopped()) {                                                           // 3255
            fn.apply(element, handlerArgs);                                                                            // 3256
          }                                                                                                            // 3257
        });                                                                                                            // 3258
      }                                                                                                                // 3259
    }                                                                                                                  // 3260
  }, function(fn, name) {                                                                                              // 3261
    /**                                                                                                                // 3262
     * chaining functions                                                                                              // 3263
     */                                                                                                                // 3264
    JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                              // 3265
      var value;                                                                                                       // 3266
                                                                                                                       // 3267
      for (var i = 0, ii = this.length; i < ii; i++) {                                                                 // 3268
        if (isUndefined(value)) {                                                                                      // 3269
          value = fn(this[i], arg1, arg2, arg3);                                                                       // 3270
          if (isDefined(value)) {                                                                                      // 3271
            // any function which returns a value needs to be wrapped                                                  // 3272
            value = jqLite(value);                                                                                     // 3273
          }                                                                                                            // 3274
        } else {                                                                                                       // 3275
          jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                        // 3276
        }                                                                                                              // 3277
      }                                                                                                                // 3278
      return isDefined(value) ? value : this;                                                                          // 3279
    };                                                                                                                 // 3280
                                                                                                                       // 3281
    // bind legacy bind/unbind to on/off                                                                               // 3282
    JQLite.prototype.bind = JQLite.prototype.on;                                                                       // 3283
    JQLite.prototype.unbind = JQLite.prototype.off;                                                                    // 3284
  });                                                                                                                  // 3285
                                                                                                                       // 3286
                                                                                                                       // 3287
// Provider for private $$jqLite service                                                                               // 3288
  function $$jqLiteProvider() {                                                                                        // 3289
    this.$get = function $$jqLite() {                                                                                  // 3290
      return extend(JQLite, {                                                                                          // 3291
        hasClass: function(node, classes) {                                                                            // 3292
          if (node.attr) node = node[0];                                                                               // 3293
          return jqLiteHasClass(node, classes);                                                                        // 3294
        },                                                                                                             // 3295
        addClass: function(node, classes) {                                                                            // 3296
          if (node.attr) node = node[0];                                                                               // 3297
          return jqLiteAddClass(node, classes);                                                                        // 3298
        },                                                                                                             // 3299
        removeClass: function(node, classes) {                                                                         // 3300
          if (node.attr) node = node[0];                                                                               // 3301
          return jqLiteRemoveClass(node, classes);                                                                     // 3302
        }                                                                                                              // 3303
      });                                                                                                              // 3304
    };                                                                                                                 // 3305
  }                                                                                                                    // 3306
                                                                                                                       // 3307
  /**                                                                                                                  // 3308
   * Computes a hash of an 'obj'.                                                                                      // 3309
   * Hash of a:                                                                                                        // 3310
   *  string is string                                                                                                 // 3311
   *  number is number as string                                                                                       // 3312
   *  object is either result of calling $$hashKey function on the object or uniquely generated id,                    // 3313
   *         that is also assigned to the $$hashKey property of the object.                                            // 3314
   *                                                                                                                   // 3315
   * @param obj                                                                                                        // 3316
   * @returns {string} hash string such that the same input will have the same hash string.                            // 3317
   *         The resulting string key is in 'type:hashKey' format.                                                     // 3318
   */                                                                                                                  // 3319
  function hashKey(obj, nextUidFn) {                                                                                   // 3320
    var key = obj && obj.$$hashKey;                                                                                    // 3321
                                                                                                                       // 3322
    if (key) {                                                                                                         // 3323
      if (typeof key === 'function') {                                                                                 // 3324
        key = obj.$$hashKey();                                                                                         // 3325
      }                                                                                                                // 3326
      return key;                                                                                                      // 3327
    }                                                                                                                  // 3328
                                                                                                                       // 3329
    var objType = typeof obj;                                                                                          // 3330
    if (objType == 'function' || (objType == 'object' && obj !== null)) {                                              // 3331
      key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                  // 3332
    } else {                                                                                                           // 3333
      key = objType + ':' + obj;                                                                                       // 3334
    }                                                                                                                  // 3335
                                                                                                                       // 3336
    return key;                                                                                                        // 3337
  }                                                                                                                    // 3338
                                                                                                                       // 3339
  /**                                                                                                                  // 3340
   * HashMap which can use objects as keys                                                                             // 3341
   */                                                                                                                  // 3342
  function HashMap(array, isolatedUid) {                                                                               // 3343
    if (isolatedUid) {                                                                                                 // 3344
      var uid = 0;                                                                                                     // 3345
      this.nextUid = function() {                                                                                      // 3346
        return ++uid;                                                                                                  // 3347
      };                                                                                                               // 3348
    }                                                                                                                  // 3349
    forEach(array, this.put, this);                                                                                    // 3350
  }                                                                                                                    // 3351
  HashMap.prototype = {                                                                                                // 3352
    /**                                                                                                                // 3353
     * Store key value pair                                                                                            // 3354
     * @param key key to store can be any type                                                                         // 3355
     * @param value value to store can be any type                                                                     // 3356
     */                                                                                                                // 3357
    put: function(key, value) {                                                                                        // 3358
      this[hashKey(key, this.nextUid)] = value;                                                                        // 3359
    },                                                                                                                 // 3360
                                                                                                                       // 3361
    /**                                                                                                                // 3362
     * @param key                                                                                                      // 3363
     * @returns {Object} the value for the key                                                                         // 3364
     */                                                                                                                // 3365
    get: function(key) {                                                                                               // 3366
      return this[hashKey(key, this.nextUid)];                                                                         // 3367
    },                                                                                                                 // 3368
                                                                                                                       // 3369
    /**                                                                                                                // 3370
     * Remove the key/value pair                                                                                       // 3371
     * @param key                                                                                                      // 3372
     */                                                                                                                // 3373
    remove: function(key) {                                                                                            // 3374
      var value = this[key = hashKey(key, this.nextUid)];                                                              // 3375
      delete this[key];                                                                                                // 3376
      return value;                                                                                                    // 3377
    }                                                                                                                  // 3378
  };                                                                                                                   // 3379
                                                                                                                       // 3380
  /**                                                                                                                  // 3381
   * @ngdoc function                                                                                                   // 3382
   * @module ng                                                                                                        // 3383
   * @name angular.injector                                                                                            // 3384
   * @kind function                                                                                                    // 3385
   *                                                                                                                   // 3386
   * @description                                                                                                      // 3387
   * Creates an injector object that can be used for retrieving services as well as for                                // 3388
   * dependency injection (see {@link guide/di dependency injection}).                                                 // 3389
   *                                                                                                                   // 3390
   * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                         // 3391
   *     {@link angular.module}. The `ng` module must be explicitly added.                                             // 3392
   * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                           // 3393
   *     disallows argument name annotation inference.                                                                 // 3394
   * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                        // 3395
   *                                                                                                                   // 3396
   * @example                                                                                                          // 3397
   * Typical usage                                                                                                     // 3398
   * ```js                                                                                                             // 3399
   *   // create an injector                                                                                           // 3400
   *   var $injector = angular.injector(['ng']);                                                                       // 3401
   *                                                                                                                   // 3402
   *   // use the injector to kick off your application                                                                // 3403
   *   // use the type inference to auto inject arguments, or use implicit injection                                   // 3404
   *   $injector.invoke(function($rootScope, $compile, $document) {                                                    // 3405
 *     $compile($document)($rootScope);                                                                                // 3406
 *     $rootScope.$digest();                                                                                           // 3407
 *   });                                                                                                               // 3408
   * ```                                                                                                               // 3409
   *                                                                                                                   // 3410
   * Sometimes you want to get access to the injector of a currently running Angular app                               // 3411
   * from outside Angular. Perhaps, you want to inject and compile some markup after the                               // 3412
   * application has been bootstrapped. You can do this using the extra `injector()` added                             // 3413
   * to JQuery/jqLite elements. See {@link angular.element}.                                                           // 3414
   *                                                                                                                   // 3415
   * *This is fairly rare but could be the case if a third party library is injecting the                              // 3416
   * markup.*                                                                                                          // 3417
   *                                                                                                                   // 3418
   * In the following example a new block of HTML containing a `ng-controller`                                         // 3419
   * directive is added to the end of the document body by JQuery. We then compile and link                            // 3420
   * it into the current AngularJS scope.                                                                              // 3421
   *                                                                                                                   // 3422
   * ```js                                                                                                             // 3423
   * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');                                              // 3424
   * $(document.body).append($div);                                                                                    // 3425
   *                                                                                                                   // 3426
   * angular.element(document).injector().invoke(function($compile) {                                                  // 3427
 *   var scope = angular.element($div).scope();                                                                        // 3428
 *   $compile($div)(scope);                                                                                            // 3429
 * });                                                                                                                 // 3430
   * ```                                                                                                               // 3431
   */                                                                                                                  // 3432
                                                                                                                       // 3433
                                                                                                                       // 3434
  /**                                                                                                                  // 3435
   * @ngdoc module                                                                                                     // 3436
   * @name auto                                                                                                        // 3437
   * @description                                                                                                      // 3438
   *                                                                                                                   // 3439
   * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                          // 3440
   */                                                                                                                  // 3441
                                                                                                                       // 3442
  var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;                                                                  // 3443
  var FN_ARG_SPLIT = /,/;                                                                                              // 3444
  var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;                                                                                 // 3445
  var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                             // 3446
  var $injectorMinErr = minErr('$injector');                                                                           // 3447
                                                                                                                       // 3448
  function anonFn(fn) {                                                                                                // 3449
    // For anonymous functions, showing at the very least the function signature can help in                           // 3450
    // debugging.                                                                                                      // 3451
    var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                            // 3452
      args = fnText.match(FN_ARGS);                                                                                    // 3453
    if (args) {                                                                                                        // 3454
      return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';                                            // 3455
    }                                                                                                                  // 3456
    return 'fn';                                                                                                       // 3457
  }                                                                                                                    // 3458
                                                                                                                       // 3459
  function annotate(fn, strictDi, name) {                                                                              // 3460
    var $inject,                                                                                                       // 3461
      fnText,                                                                                                          // 3462
      argDecl,                                                                                                         // 3463
      last;                                                                                                            // 3464
                                                                                                                       // 3465
    if (typeof fn === 'function') {                                                                                    // 3466
      if (!($inject = fn.$inject)) {                                                                                   // 3467
        $inject = [];                                                                                                  // 3468
        if (fn.length) {                                                                                               // 3469
          if (strictDi) {                                                                                              // 3470
            if (!isString(name) || !name) {                                                                            // 3471
              name = fn.name || anonFn(fn);                                                                            // 3472
            }                                                                                                          // 3473
            throw $injectorMinErr('strictdi',                                                                          // 3474
              '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                      // 3475
          }                                                                                                            // 3476
          fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                          // 3477
          argDecl = fnText.match(FN_ARGS);                                                                             // 3478
          forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                      // 3479
            arg.replace(FN_ARG, function(all, underscore, name) {                                                      // 3480
              $inject.push(name);                                                                                      // 3481
            });                                                                                                        // 3482
          });                                                                                                          // 3483
        }                                                                                                              // 3484
        fn.$inject = $inject;                                                                                          // 3485
      }                                                                                                                // 3486
    } else if (isArray(fn)) {                                                                                          // 3487
      last = fn.length - 1;                                                                                            // 3488
      assertArgFn(fn[last], 'fn');                                                                                     // 3489
      $inject = fn.slice(0, last);                                                                                     // 3490
    } else {                                                                                                           // 3491
      assertArgFn(fn, 'fn', true);                                                                                     // 3492
    }                                                                                                                  // 3493
    return $inject;                                                                                                    // 3494
  }                                                                                                                    // 3495
                                                                                                                       // 3496
///////////////////////////////////////                                                                                // 3497
                                                                                                                       // 3498
  /**                                                                                                                  // 3499
   * @ngdoc service                                                                                                    // 3500
   * @name $injector                                                                                                   // 3501
   *                                                                                                                   // 3502
   * @description                                                                                                      // 3503
   *                                                                                                                   // 3504
   * `$injector` is used to retrieve object instances as defined by                                                    // 3505
   * {@link auto.$provide provider}, instantiate types, invoke methods,                                                // 3506
   * and load modules.                                                                                                 // 3507
   *                                                                                                                   // 3508
   * The following always holds true:                                                                                  // 3509
   *                                                                                                                   // 3510
   * ```js                                                                                                             // 3511
   *   var $injector = angular.injector();                                                                             // 3512
   *   expect($injector.get('$injector')).toBe($injector);                                                             // 3513
   *   expect($injector.invoke(function($injector) {                                                                   // 3514
 *     return $injector;                                                                                               // 3515
 *   })).toBe($injector);                                                                                              // 3516
   * ```                                                                                                               // 3517
   *                                                                                                                   // 3518
   * # Injection Function Annotation                                                                                   // 3519
   *                                                                                                                   // 3520
   * JavaScript does not have annotations, and annotations are needed for dependency injection. The                    // 3521
   * following are all valid ways of annotating function with injection arguments and are equivalent.                  // 3522
   *                                                                                                                   // 3523
   * ```js                                                                                                             // 3524
   *   // inferred (only works if code not minified/obfuscated)                                                        // 3525
   *   $injector.invoke(function(serviceA){});                                                                         // 3526
   *                                                                                                                   // 3527
   *   // annotated                                                                                                    // 3528
   *   function explicit(serviceA) {};                                                                                 // 3529
   *   explicit.$inject = ['serviceA'];                                                                                // 3530
   *   $injector.invoke(explicit);                                                                                     // 3531
   *                                                                                                                   // 3532
   *   // inline                                                                                                       // 3533
   *   $injector.invoke(['serviceA', function(serviceA){}]);                                                           // 3534
   * ```                                                                                                               // 3535
   *                                                                                                                   // 3536
   * ## Inference                                                                                                      // 3537
   *                                                                                                                   // 3538
   * In JavaScript calling `toString()` on a function returns the function definition. The definition                  // 3539
   * can then be parsed and the function arguments can be extracted. This method of discovering                        // 3540
   * annotations is disallowed when the injector is in strict mode.                                                    // 3541
   * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                  // 3542
   * argument names.                                                                                                   // 3543
   *                                                                                                                   // 3544
   * ## `$inject` Annotation                                                                                           // 3545
   * By adding an `$inject` property onto a function the injection parameters can be specified.                        // 3546
   *                                                                                                                   // 3547
   * ## Inline                                                                                                         // 3548
   * As an array of injection names, where the last item in the array is the function to call.                         // 3549
   */                                                                                                                  // 3550
                                                                                                                       // 3551
  /**                                                                                                                  // 3552
   * @ngdoc method                                                                                                     // 3553
   * @name $injector#get                                                                                               // 3554
   *                                                                                                                   // 3555
   * @description                                                                                                      // 3556
   * Return an instance of the service.                                                                                // 3557
   *                                                                                                                   // 3558
   * @param {string} name The name of the instance to retrieve.                                                        // 3559
   * @param {string} caller An optional string to provide the origin of the function call for error messages.          // 3560
   * @return {*} The instance.                                                                                         // 3561
   */                                                                                                                  // 3562
                                                                                                                       // 3563
  /**                                                                                                                  // 3564
   * @ngdoc method                                                                                                     // 3565
   * @name $injector#invoke                                                                                            // 3566
   *                                                                                                                   // 3567
   * @description                                                                                                      // 3568
   * Invoke the method and supply the method arguments from the `$injector`.                                           // 3569
   *                                                                                                                   // 3570
   * @param {!Function} fn The function to invoke. Function parameters are injected according to the                   // 3571
   *   {@link guide/di $inject Annotation} rules.                                                                      // 3572
   * @param {Object=} self The `this` for the invoked method.                                                          // 3573
   * @param {Object=} locals Optional object. If preset then any argument names are read from this                     // 3574
   *                         object first, before the `$injector` is consulted.                                        // 3575
   * @returns {*} the value returned by the invoked `fn` function.                                                     // 3576
   */                                                                                                                  // 3577
                                                                                                                       // 3578
  /**                                                                                                                  // 3579
   * @ngdoc method                                                                                                     // 3580
   * @name $injector#has                                                                                               // 3581
   *                                                                                                                   // 3582
   * @description                                                                                                      // 3583
   * Allows the user to query if the particular service exists.                                                        // 3584
   *                                                                                                                   // 3585
   * @param {string} name Name of the service to query.                                                                // 3586
   * @returns {boolean} `true` if injector has given service.                                                          // 3587
   */                                                                                                                  // 3588
                                                                                                                       // 3589
  /**                                                                                                                  // 3590
   * @ngdoc method                                                                                                     // 3591
   * @name $injector#instantiate                                                                                       // 3592
   * @description                                                                                                      // 3593
   * Create a new instance of JS type. The method takes a constructor function, invokes the new                        // 3594
   * operator, and supplies all of the arguments to the constructor function as specified by the                       // 3595
   * constructor annotation.                                                                                           // 3596
   *                                                                                                                   // 3597
   * @param {Function} Type Annotated constructor function.                                                            // 3598
   * @param {Object=} locals Optional object. If preset then any argument names are read from this                     // 3599
   * object first, before the `$injector` is consulted.                                                                // 3600
   * @returns {Object} new instance of `Type`.                                                                         // 3601
   */                                                                                                                  // 3602
                                                                                                                       // 3603
  /**                                                                                                                  // 3604
   * @ngdoc method                                                                                                     // 3605
   * @name $injector#annotate                                                                                          // 3606
   *                                                                                                                   // 3607
   * @description                                                                                                      // 3608
   * Returns an array of service names which the function is requesting for injection. This API is                     // 3609
   * used by the injector to determine which services need to be injected into the function when the                   // 3610
   * function is invoked. There are three ways in which the function can be annotated with the needed                  // 3611
   * dependencies.                                                                                                     // 3612
   *                                                                                                                   // 3613
   * # Argument names                                                                                                  // 3614
   *                                                                                                                   // 3615
   * The simplest form is to extract the dependencies from the arguments of the function. This is done                 // 3616
   * by converting the function into a string using `toString()` method and extracting the argument                    // 3617
   * names.                                                                                                            // 3618
   * ```js                                                                                                             // 3619
   *   // Given                                                                                                        // 3620
   *   function MyController($scope, $route) {                                                                         // 3621
 *     // ...                                                                                                          // 3622
 *   }                                                                                                                 // 3623
   *                                                                                                                   // 3624
   *   // Then                                                                                                         // 3625
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                          // 3626
   * ```                                                                                                               // 3627
   *                                                                                                                   // 3628
   * You can disallow this method by using strict injection mode.                                                      // 3629
   *                                                                                                                   // 3630
   * This method does not work with code minification / obfuscation. For this reason the following                     // 3631
   * annotation strategies are supported.                                                                              // 3632
   *                                                                                                                   // 3633
   * # The `$inject` property                                                                                          // 3634
   *                                                                                                                   // 3635
   * If a function has an `$inject` property and its value is an array of strings, then the strings                    // 3636
   * represent names of services to be injected into the function.                                                     // 3637
   * ```js                                                                                                             // 3638
   *   // Given                                                                                                        // 3639
   *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                 // 3640
 *     // ...                                                                                                          // 3641
 *   }                                                                                                                 // 3642
   *   // Define function dependencies                                                                                 // 3643
   *   MyController['$inject'] = ['$scope', '$route'];                                                                 // 3644
   *                                                                                                                   // 3645
   *   // Then                                                                                                         // 3646
   *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                          // 3647
   * ```                                                                                                               // 3648
   *                                                                                                                   // 3649
   * # The array notation                                                                                              // 3650
   *                                                                                                                   // 3651
   * It is often desirable to inline Injected functions and that's when setting the `$inject` property                 // 3652
   * is very inconvenient. In these situations using the array notation to specify the dependencies in                 // 3653
   * a way that survives minification is a better choice:                                                              // 3654
   *                                                                                                                   // 3655
   * ```js                                                                                                             // 3656
   *   // We wish to write this (not minification / obfuscation safe)                                                  // 3657
   *   injector.invoke(function($compile, $rootScope) {                                                                // 3658
 *     // ...                                                                                                          // 3659
 *   });                                                                                                               // 3660
   *                                                                                                                   // 3661
   *   // We are forced to write break inlining                                                                        // 3662
   *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                  // 3663
 *     // ...                                                                                                          // 3664
 *   };                                                                                                                // 3665
   *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                     // 3666
   *   injector.invoke(tmpFn);                                                                                         // 3667
   *                                                                                                                   // 3668
   *   // To better support inline function the inline annotation is supported                                         // 3669
   *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                 // 3670
 *     // ...                                                                                                          // 3671
 *   }]);                                                                                                              // 3672
   *                                                                                                                   // 3673
   *   // Therefore                                                                                                    // 3674
   *   expect(injector.annotate(                                                                                       // 3675
   *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                   // 3676
   *    ).toEqual(['$compile', '$rootScope']);                                                                         // 3677
   * ```                                                                                                               // 3678
   *                                                                                                                   // 3679
   * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                   // 3680
   * be retrieved as described above.                                                                                  // 3681
   *                                                                                                                   // 3682
   * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                   // 3683
   *                                                                                                                   // 3684
   * @returns {Array.<string>} The names of the services which the function requires.                                  // 3685
   */                                                                                                                  // 3686
                                                                                                                       // 3687
                                                                                                                       // 3688
                                                                                                                       // 3689
                                                                                                                       // 3690
  /**                                                                                                                  // 3691
   * @ngdoc service                                                                                                    // 3692
   * @name $provide                                                                                                    // 3693
   *                                                                                                                   // 3694
   * @description                                                                                                      // 3695
   *                                                                                                                   // 3696
   * The {@link auto.$provide $provide} service has a number of methods for registering components                     // 3697
   * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                            // 3698
   * {@link angular.Module}.                                                                                           // 3699
   *                                                                                                                   // 3700
   * An Angular **service** is a singleton object created by a **service factory**.  These **service                   // 3701
   * factories** are functions which, in turn, are created by a **service provider**.                                  // 3702
   * The **service providers** are constructor functions. When instantiated they must contain a                        // 3703
   * property called `$get`, which holds the **service factory** function.                                             // 3704
   *                                                                                                                   // 3705
   * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                   // 3706
   * correct **service provider**, instantiating it and then calling its `$get` **service factory**                    // 3707
   * function to get the instance of the **service**.                                                                  // 3708
   *                                                                                                                   // 3709
   * Often services have no configuration options and there is no need to add methods to the service                   // 3710
   * provider.  The provider will be no more than a constructor function with a `$get` property. For                   // 3711
   * these cases the {@link auto.$provide $provide} service has additional helper methods to register                  // 3712
   * services without specifying a provider.                                                                           // 3713
   *                                                                                                                   // 3714
   * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                   // 3715
   *     {@link auto.$injector $injector}                                                                              // 3716
   * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                 // 3717
   *     providers and services.                                                                                       // 3718
   * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                  // 3719
   *     services, not providers.                                                                                      // 3720
   * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                     // 3721
   *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                 // 3722
   *     given factory function.                                                                                       // 3723
   * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                    // 3724
   *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                 // 3725
   *      a new object using the given constructor function.                                                           // 3726
   *                                                                                                                   // 3727
   * See the individual methods for more information and examples.                                                     // 3728
   */                                                                                                                  // 3729
                                                                                                                       // 3730
  /**                                                                                                                  // 3731
   * @ngdoc method                                                                                                     // 3732
   * @name $provide#provider                                                                                           // 3733
   * @description                                                                                                      // 3734
   *                                                                                                                   // 3735
   * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                    // 3736
   * are constructor functions, whose instances are responsible for "providing" a factory for a                        // 3737
   * service.                                                                                                          // 3738
   *                                                                                                                   // 3739
   * Service provider names start with the name of the service they provide followed by `Provider`.                    // 3740
   * For example, the {@link ng.$log $log} service has a provider called                                               // 3741
   * {@link ng.$logProvider $logProvider}.                                                                             // 3742
   *                                                                                                                   // 3743
   * Service provider objects can have additional methods which allow configuration of the provider                    // 3744
   * and its service. Importantly, you can configure what kind of service is created by the `$get`                     // 3745
   * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                 // 3746
   * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                          // 3747
   * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                    // 3748
   * console or not.                                                                                                   // 3749
   *                                                                                                                   // 3750
   * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                 // 3751
   'Provider'` key.                                                                                                    // 3752
   * @param {(Object|function())} provider If the provider is:                                                         // 3753
   *                                                                                                                   // 3754
   *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                        // 3755
   *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                        // 3756
   *   - `Constructor`: a new instance of the provider will be created using                                           // 3757
   *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                         // 3758
   *                                                                                                                   // 3759
   * @returns {Object} registered provider instance                                                                    // 3760
                                                                                                                       // 3761
   * @example                                                                                                          // 3762
   *                                                                                                                   // 3763
   * The following example shows how to create a simple event tracking service and register it using                   // 3764
   * {@link auto.$provide#provider $provide.provider()}.                                                               // 3765
   *                                                                                                                   // 3766
   * ```js                                                                                                             // 3767
   *  // Define the eventTracker provider                                                                              // 3768
   *  function EventTrackerProvider() {                                                                                // 3769
 *    var trackingUrl = '/track';                                                                                      // 3770
 *                                                                                                                     // 3771
 *    // A provider method for configuring where the tracked events should been saved                                  // 3772
 *    this.setTrackingUrl = function(url) {                                                                            // 3773
 *      trackingUrl = url;                                                                                             // 3774
 *    };                                                                                                               // 3775
 *                                                                                                                     // 3776
 *    // The service factory function                                                                                  // 3777
 *    this.$get = ['$http', function($http) {                                                                          // 3778
 *      var trackedEvents = {};                                                                                        // 3779
 *      return {                                                                                                       // 3780
 *        // Call this to track an event                                                                               // 3781
 *        event: function(event) {                                                                                     // 3782
 *          var count = trackedEvents[event] || 0;                                                                     // 3783
 *          count += 1;                                                                                                // 3784
 *          trackedEvents[event] = count;                                                                              // 3785
 *          return count;                                                                                              // 3786
 *        },                                                                                                           // 3787
 *        // Call this to save the tracked events to the trackingUrl                                                   // 3788
 *        save: function() {                                                                                           // 3789
 *          $http.post(trackingUrl, trackedEvents);                                                                    // 3790
 *        }                                                                                                            // 3791
 *      };                                                                                                             // 3792
 *    }];                                                                                                              // 3793
 *  }                                                                                                                  // 3794
   *                                                                                                                   // 3795
   *  describe('eventTracker', function() {                                                                            // 3796
 *    var postSpy;                                                                                                     // 3797
 *                                                                                                                     // 3798
 *    beforeEach(module(function($provide) {                                                                           // 3799
 *      // Register the eventTracker provider                                                                          // 3800
 *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 3801
 *    }));                                                                                                             // 3802
 *                                                                                                                     // 3803
 *    beforeEach(module(function(eventTrackerProvider) {                                                               // 3804
 *      // Configure eventTracker provider                                                                             // 3805
 *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 3806
 *    }));                                                                                                             // 3807
 *                                                                                                                     // 3808
 *    it('tracks events', inject(function(eventTracker) {                                                              // 3809
 *      expect(eventTracker.event('login')).toEqual(1);                                                                // 3810
 *      expect(eventTracker.event('login')).toEqual(2);                                                                // 3811
 *    }));                                                                                                             // 3812
 *                                                                                                                     // 3813
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 3814
 *      postSpy = spyOn($http, 'post');                                                                                // 3815
 *      eventTracker.event('login');                                                                                   // 3816
 *      eventTracker.save();                                                                                           // 3817
 *      expect(postSpy).toHaveBeenCalled();                                                                            // 3818
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 3819
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 3820
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 3821
 *    }));                                                                                                             // 3822
 *  });                                                                                                                // 3823
   * ```                                                                                                               // 3824
   */                                                                                                                  // 3825
                                                                                                                       // 3826
  /**                                                                                                                  // 3827
   * @ngdoc method                                                                                                     // 3828
   * @name $provide#factory                                                                                            // 3829
   * @description                                                                                                      // 3830
   *                                                                                                                   // 3831
   * Register a **service factory**, which will be called to return the service instance.                              // 3832
   * This is short for registering a service where its provider consists of only a `$get` property,                    // 3833
   * which is the given service factory function.                                                                      // 3834
   * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                        // 3835
   * configure your service in a provider.                                                                             // 3836
   *                                                                                                                   // 3837
   * @param {string} name The name of the instance.                                                                    // 3838
   * @param {function()} $getFn The $getFn for the instance creation. Internally this is a short hand                  // 3839
   *                            for `$provide.provider(name, {$get: $getFn})`.                                         // 3840
   * @returns {Object} registered provider instance                                                                    // 3841
   *                                                                                                                   // 3842
   * @example                                                                                                          // 3843
   * Here is an example of registering a service                                                                       // 3844
   * ```js                                                                                                             // 3845
   *   $provide.factory('ping', ['$http', function($http) {                                                            // 3846
 *     return function ping() {                                                                                        // 3847
 *       return $http.send('/ping');                                                                                   // 3848
 *     };                                                                                                              // 3849
 *   }]);                                                                                                              // 3850
   * ```                                                                                                               // 3851
   * You would then inject and use this service like this:                                                             // 3852
   * ```js                                                                                                             // 3853
   *   someModule.controller('Ctrl', ['ping', function(ping) {                                                         // 3854
 *     ping();                                                                                                         // 3855
 *   }]);                                                                                                              // 3856
   * ```                                                                                                               // 3857
   */                                                                                                                  // 3858
                                                                                                                       // 3859
                                                                                                                       // 3860
  /**                                                                                                                  // 3861
   * @ngdoc method                                                                                                     // 3862
   * @name $provide#service                                                                                            // 3863
   * @description                                                                                                      // 3864
   *                                                                                                                   // 3865
   * Register a **service constructor**, which will be invoked with `new` to create the service                        // 3866
   * instance.                                                                                                         // 3867
   * This is short for registering a service where its provider's `$get` property is the service                       // 3868
   * constructor function that will be used to instantiate the service instance.                                       // 3869
   *                                                                                                                   // 3870
   * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                   // 3871
   * as a type/class.                                                                                                  // 3872
   *                                                                                                                   // 3873
   * @param {string} name The name of the instance.                                                                    // 3874
   * @param {Function} constructor A class (constructor function) that will be instantiated.                           // 3875
   * @returns {Object} registered provider instance                                                                    // 3876
   *                                                                                                                   // 3877
   * @example                                                                                                          // 3878
   * Here is an example of registering a service using                                                                 // 3879
   * {@link auto.$provide#service $provide.service(class)}.                                                            // 3880
   * ```js                                                                                                             // 3881
   *   var Ping = function($http) {                                                                                    // 3882
 *     this.$http = $http;                                                                                             // 3883
 *   };                                                                                                                // 3884
   *                                                                                                                   // 3885
   *   Ping.$inject = ['$http'];                                                                                       // 3886
   *                                                                                                                   // 3887
   *   Ping.prototype.send = function() {                                                                              // 3888
 *     return this.$http.get('/ping');                                                                                 // 3889
 *   };                                                                                                                // 3890
   *   $provide.service('ping', Ping);                                                                                 // 3891
   * ```                                                                                                               // 3892
   * You would then inject and use this service like this:                                                             // 3893
   * ```js                                                                                                             // 3894
   *   someModule.controller('Ctrl', ['ping', function(ping) {                                                         // 3895
 *     ping.send();                                                                                                    // 3896
 *   }]);                                                                                                              // 3897
   * ```                                                                                                               // 3898
   */                                                                                                                  // 3899
                                                                                                                       // 3900
                                                                                                                       // 3901
  /**                                                                                                                  // 3902
   * @ngdoc method                                                                                                     // 3903
   * @name $provide#value                                                                                              // 3904
   * @description                                                                                                      // 3905
   *                                                                                                                   // 3906
   * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                       // 3907
   * number, an array, an object or a function.  This is short for registering a service where its                     // 3908
   * provider's `$get` property is a factory function that takes no arguments and returns the **value                  // 3909
   * service**.                                                                                                        // 3910
   *                                                                                                                   // 3911
   * Value services are similar to constant services, except that they cannot be injected into a                       // 3912
   * module configuration function (see {@link angular.Module#config}) but they can be overridden by                   // 3913
   * an Angular                                                                                                        // 3914
   * {@link auto.$provide#decorator decorator}.                                                                        // 3915
   *                                                                                                                   // 3916
   * @param {string} name The name of the instance.                                                                    // 3917
   * @param {*} value The value.                                                                                       // 3918
   * @returns {Object} registered provider instance                                                                    // 3919
   *                                                                                                                   // 3920
   * @example                                                                                                          // 3921
   * Here are some examples of creating value services.                                                                // 3922
   * ```js                                                                                                             // 3923
   *   $provide.value('ADMIN_USER', 'admin');                                                                          // 3924
   *                                                                                                                   // 3925
   *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                               // 3926
   *                                                                                                                   // 3927
   *   $provide.value('halfOf', function(value) {                                                                      // 3928
 *     return value / 2;                                                                                               // 3929
 *   });                                                                                                               // 3930
   * ```                                                                                                               // 3931
   */                                                                                                                  // 3932
                                                                                                                       // 3933
                                                                                                                       // 3934
  /**                                                                                                                  // 3935
   * @ngdoc method                                                                                                     // 3936
   * @name $provide#constant                                                                                           // 3937
   * @description                                                                                                      // 3938
   *                                                                                                                   // 3939
   * Register a **constant service**, such as a string, a number, an array, an object or a function,                   // 3940
   * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                     // 3941
   * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                   // 3942
   * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                            // 3943
   *                                                                                                                   // 3944
   * @param {string} name The name of the constant.                                                                    // 3945
   * @param {*} value The constant value.                                                                              // 3946
   * @returns {Object} registered instance                                                                             // 3947
   *                                                                                                                   // 3948
   * @example                                                                                                          // 3949
   * Here a some examples of creating constants:                                                                       // 3950
   * ```js                                                                                                             // 3951
   *   $provide.constant('SHARD_HEIGHT', 306);                                                                         // 3952
   *                                                                                                                   // 3953
   *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                       // 3954
   *                                                                                                                   // 3955
   *   $provide.constant('double', function(value) {                                                                   // 3956
 *     return value * 2;                                                                                               // 3957
 *   });                                                                                                               // 3958
   * ```                                                                                                               // 3959
   */                                                                                                                  // 3960
                                                                                                                       // 3961
                                                                                                                       // 3962
  /**                                                                                                                  // 3963
   * @ngdoc method                                                                                                     // 3964
   * @name $provide#decorator                                                                                          // 3965
   * @description                                                                                                      // 3966
   *                                                                                                                   // 3967
   * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                   // 3968
   * intercepts the creation of a service, allowing it to override or modify the behaviour of the                      // 3969
   * service. The object returned by the decorator may be the original service, or a new service                       // 3970
   * object which replaces or wraps and delegates to the original service.                                             // 3971
   *                                                                                                                   // 3972
   * @param {string} name The name of the service to decorate.                                                         // 3973
   * @param {function()} decorator This function will be invoked when the service needs to be                          // 3974
   *    instantiated and should return the decorated service instance. The function is called using                    // 3975
   *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                    // 3976
   *    Local injection arguments:                                                                                     // 3977
   *                                                                                                                   // 3978
   *    * `$delegate` - The original service instance, which can be monkey patched, configured,                        // 3979
   *      decorated or delegated to.                                                                                   // 3980
   *                                                                                                                   // 3981
   * @example                                                                                                          // 3982
   * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                   // 3983
   * calls to {@link ng.$log#error $log.warn()}.                                                                       // 3984
   * ```js                                                                                                             // 3985
   *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                  // 3986
 *     $delegate.warn = $delegate.error;                                                                               // 3987
 *     return $delegate;                                                                                               // 3988
 *   }]);                                                                                                              // 3989
   * ```                                                                                                               // 3990
   */                                                                                                                  // 3991
                                                                                                                       // 3992
                                                                                                                       // 3993
  function createInjector(modulesToLoad, strictDi) {                                                                   // 3994
    strictDi = (strictDi === true);                                                                                    // 3995
    var INSTANTIATING = {},                                                                                            // 3996
      providerSuffix = 'Provider',                                                                                     // 3997
      path = [],                                                                                                       // 3998
      loadedModules = new HashMap([], true),                                                                           // 3999
      providerCache = {                                                                                                // 4000
        $provide: {                                                                                                    // 4001
          provider: supportObject(provider),                                                                           // 4002
          factory: supportObject(factory),                                                                             // 4003
          service: supportObject(service),                                                                             // 4004
          value: supportObject(value),                                                                                 // 4005
          constant: supportObject(constant),                                                                           // 4006
          decorator: decorator                                                                                         // 4007
        }                                                                                                              // 4008
      },                                                                                                               // 4009
      providerInjector = (providerCache.$injector =                                                                    // 4010
        createInternalInjector(providerCache, function(serviceName, caller) {                                          // 4011
          if (angular.isString(caller)) {                                                                              // 4012
            path.push(caller);                                                                                         // 4013
          }                                                                                                            // 4014
          throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));                                   // 4015
        })),                                                                                                           // 4016
      instanceCache = {},                                                                                              // 4017
      instanceInjector = (instanceCache.$injector =                                                                    // 4018
        createInternalInjector(instanceCache, function(serviceName, caller) {                                          // 4019
          var provider = providerInjector.get(serviceName + providerSuffix, caller);                                   // 4020
          return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                             // 4021
        }));                                                                                                           // 4022
                                                                                                                       // 4023
                                                                                                                       // 4024
    forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });                        // 4025
                                                                                                                       // 4026
    return instanceInjector;                                                                                           // 4027
                                                                                                                       // 4028
    ////////////////////////////////////                                                                               // 4029
    // $provider                                                                                                       // 4030
    ////////////////////////////////////                                                                               // 4031
                                                                                                                       // 4032
    function supportObject(delegate) {                                                                                 // 4033
      return function(key, value) {                                                                                    // 4034
        if (isObject(key)) {                                                                                           // 4035
          forEach(key, reverseParams(delegate));                                                                       // 4036
        } else {                                                                                                       // 4037
          return delegate(key, value);                                                                                 // 4038
        }                                                                                                              // 4039
      };                                                                                                               // 4040
    }                                                                                                                  // 4041
                                                                                                                       // 4042
    function provider(name, provider_) {                                                                               // 4043
      assertNotHasOwnProperty(name, 'service');                                                                        // 4044
      if (isFunction(provider_) || isArray(provider_)) {                                                               // 4045
        provider_ = providerInjector.instantiate(provider_);                                                           // 4046
      }                                                                                                                // 4047
      if (!provider_.$get) {                                                                                           // 4048
        throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);                        // 4049
      }                                                                                                                // 4050
      return providerCache[name + providerSuffix] = provider_;                                                         // 4051
    }                                                                                                                  // 4052
                                                                                                                       // 4053
    function enforceReturnValue(name, factory) {                                                                       // 4054
      return function enforcedReturnValue() {                                                                          // 4055
        var result = instanceInjector.invoke(factory, this);                                                           // 4056
        if (isUndefined(result)) {                                                                                     // 4057
          throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);        // 4058
        }                                                                                                              // 4059
        return result;                                                                                                 // 4060
      };                                                                                                               // 4061
    }                                                                                                                  // 4062
                                                                                                                       // 4063
    function factory(name, factoryFn, enforce) {                                                                       // 4064
      return provider(name, {                                                                                          // 4065
        $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                      // 4066
      });                                                                                                              // 4067
    }                                                                                                                  // 4068
                                                                                                                       // 4069
    function service(name, constructor) {                                                                              // 4070
      return factory(name, ['$injector', function($injector) {                                                         // 4071
        return $injector.instantiate(constructor);                                                                     // 4072
      }]);                                                                                                             // 4073
    }                                                                                                                  // 4074
                                                                                                                       // 4075
    function value(name, val) { return factory(name, valueFn(val), false); }                                           // 4076
                                                                                                                       // 4077
    function constant(name, value) {                                                                                   // 4078
      assertNotHasOwnProperty(name, 'constant');                                                                       // 4079
      providerCache[name] = value;                                                                                     // 4080
      instanceCache[name] = value;                                                                                     // 4081
    }                                                                                                                  // 4082
                                                                                                                       // 4083
    function decorator(serviceName, decorFn) {                                                                         // 4084
      var origProvider = providerInjector.get(serviceName + providerSuffix),                                           // 4085
        orig$get = origProvider.$get;                                                                                  // 4086
                                                                                                                       // 4087
      origProvider.$get = function() {                                                                                 // 4088
        var origInstance = instanceInjector.invoke(orig$get, origProvider);                                            // 4089
        return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                      // 4090
      };                                                                                                               // 4091
    }                                                                                                                  // 4092
                                                                                                                       // 4093
    ////////////////////////////////////                                                                               // 4094
    // Module Loading                                                                                                  // 4095
    ////////////////////////////////////                                                                               // 4096
    function loadModules(modulesToLoad) {                                                                              // 4097
      var runBlocks = [], moduleFn;                                                                                    // 4098
      forEach(modulesToLoad, function(module) {                                                                        // 4099
        if (loadedModules.get(module)) return;                                                                         // 4100
        loadedModules.put(module, true);                                                                               // 4101
                                                                                                                       // 4102
        function runInvokeQueue(queue) {                                                                               // 4103
          var i, ii;                                                                                                   // 4104
          for (i = 0, ii = queue.length; i < ii; i++) {                                                                // 4105
            var invokeArgs = queue[i],                                                                                 // 4106
              provider = providerInjector.get(invokeArgs[0]);                                                          // 4107
                                                                                                                       // 4108
            provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                    // 4109
          }                                                                                                            // 4110
        }                                                                                                              // 4111
                                                                                                                       // 4112
        try {                                                                                                          // 4113
          if (isString(module)) {                                                                                      // 4114
            moduleFn = angularModule(module);                                                                          // 4115
            runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                  // 4116
            runInvokeQueue(moduleFn._invokeQueue);                                                                     // 4117
            runInvokeQueue(moduleFn._configBlocks);                                                                    // 4118
          } else if (isFunction(module)) {                                                                             // 4119
            runBlocks.push(providerInjector.invoke(module));                                                           // 4120
          } else if (isArray(module)) {                                                                                // 4121
            runBlocks.push(providerInjector.invoke(module));                                                           // 4122
          } else {                                                                                                     // 4123
            assertArgFn(module, 'module');                                                                             // 4124
          }                                                                                                            // 4125
        } catch (e) {                                                                                                  // 4126
          if (isArray(module)) {                                                                                       // 4127
            module = module[module.length - 1];                                                                        // 4128
          }                                                                                                            // 4129
          if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                              // 4130
            // Safari & FF's stack traces don't contain error.message content                                          // 4131
            // unlike those of Chrome and IE                                                                           // 4132
            // So if stack doesn't contain message, we create a new string that contains both.                         // 4133
            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                        // 4134
            /* jshint -W022 */                                                                                         // 4135
            e = e.message + '\n' + e.stack;                                                                            // 4136
          }                                                                                                            // 4137
          throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",                           // 4138
            module, e.stack || e.message || e);                                                                        // 4139
        }                                                                                                              // 4140
      });                                                                                                              // 4141
      return runBlocks;                                                                                                // 4142
    }                                                                                                                  // 4143
                                                                                                                       // 4144
    ////////////////////////////////////                                                                               // 4145
    // internal Injector                                                                                               // 4146
    ////////////////////////////////////                                                                               // 4147
                                                                                                                       // 4148
    function createInternalInjector(cache, factory) {                                                                  // 4149
                                                                                                                       // 4150
      function getService(serviceName, caller) {                                                                       // 4151
        if (cache.hasOwnProperty(serviceName)) {                                                                       // 4152
          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4153
            throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                            // 4154
              serviceName + ' <- ' + path.join(' <- '));                                                               // 4155
          }                                                                                                            // 4156
          return cache[serviceName];                                                                                   // 4157
        } else {                                                                                                       // 4158
          try {                                                                                                        // 4159
            path.unshift(serviceName);                                                                                 // 4160
            cache[serviceName] = INSTANTIATING;                                                                        // 4161
            return cache[serviceName] = factory(serviceName, caller);                                                  // 4162
          } catch (err) {                                                                                              // 4163
            if (cache[serviceName] === INSTANTIATING) {                                                                // 4164
              delete cache[serviceName];                                                                               // 4165
            }                                                                                                          // 4166
            throw err;                                                                                                 // 4167
          } finally {                                                                                                  // 4168
            path.shift();                                                                                              // 4169
          }                                                                                                            // 4170
        }                                                                                                              // 4171
      }                                                                                                                // 4172
                                                                                                                       // 4173
      function invoke(fn, self, locals, serviceName) {                                                                 // 4174
        if (typeof locals === 'string') {                                                                              // 4175
          serviceName = locals;                                                                                        // 4176
          locals = null;                                                                                               // 4177
        }                                                                                                              // 4178
                                                                                                                       // 4179
        var args = [],                                                                                                 // 4180
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4181
          length, i,                                                                                                   // 4182
          key;                                                                                                         // 4183
                                                                                                                       // 4184
        for (i = 0, length = $inject.length; i < length; i++) {                                                        // 4185
          key = $inject[i];                                                                                            // 4186
          if (typeof key !== 'string') {                                                                               // 4187
            throw $injectorMinErr('itkn',                                                                              // 4188
              'Incorrect injection token! Expected service name as string, got {0}', key);                             // 4189
          }                                                                                                            // 4190
          args.push(                                                                                                   // 4191
            locals && locals.hasOwnProperty(key)                                                                       // 4192
              ? locals[key]                                                                                            // 4193
              : getService(key, serviceName)                                                                           // 4194
          );                                                                                                           // 4195
        }                                                                                                              // 4196
        if (isArray(fn)) {                                                                                             // 4197
          fn = fn[length];                                                                                             // 4198
        }                                                                                                              // 4199
                                                                                                                       // 4200
        // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                          // 4201
        // #5388                                                                                                       // 4202
        return fn.apply(self, args);                                                                                   // 4203
      }                                                                                                                // 4204
                                                                                                                       // 4205
      function instantiate(Type, locals, serviceName) {                                                                // 4206
        // Check if Type is annotated and use just the given function at n-1 as parameter                              // 4207
        // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                               // 4208
        // Object creation: http://jsperf.com/create-constructor/2                                                     // 4209
        var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                // 4210
        var returnedValue = invoke(Type, instance, locals, serviceName);                                               // 4211
                                                                                                                       // 4212
        return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                        // 4213
      }                                                                                                                // 4214
                                                                                                                       // 4215
      return {                                                                                                         // 4216
        invoke: invoke,                                                                                                // 4217
        instantiate: instantiate,                                                                                      // 4218
        get: getService,                                                                                               // 4219
        annotate: createInjector.$$annotate,                                                                           // 4220
        has: function(name) {                                                                                          // 4221
          return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                    // 4222
        }                                                                                                              // 4223
      };                                                                                                               // 4224
    }                                                                                                                  // 4225
  }                                                                                                                    // 4226
                                                                                                                       // 4227
  createInjector.$$annotate = annotate;                                                                                // 4228
                                                                                                                       // 4229
  /**                                                                                                                  // 4230
   * @ngdoc provider                                                                                                   // 4231
   * @name $anchorScrollProvider                                                                                       // 4232
   *                                                                                                                   // 4233
   * @description                                                                                                      // 4234
   * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                               // 4235
   * {@link ng.$location#hash $location.hash()} changes.                                                               // 4236
   */                                                                                                                  // 4237
  function $AnchorScrollProvider() {                                                                                   // 4238
                                                                                                                       // 4239
    var autoScrollingEnabled = true;                                                                                   // 4240
                                                                                                                       // 4241
    /**                                                                                                                // 4242
     * @ngdoc method                                                                                                   // 4243
     * @name $anchorScrollProvider#disableAutoScrolling                                                                // 4244
     *                                                                                                                 // 4245
     * @description                                                                                                    // 4246
     * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                       // 4247
     * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />               // 4248
     * Use this method to disable automatic scrolling.                                                                 // 4249
     *                                                                                                                 // 4250
     * If automatic scrolling is disabled, one must explicitly call                                                    // 4251
     * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                       // 4252
     * current hash.                                                                                                   // 4253
     */                                                                                                                // 4254
    this.disableAutoScrolling = function() {                                                                           // 4255
      autoScrollingEnabled = false;                                                                                    // 4256
    };                                                                                                                 // 4257
                                                                                                                       // 4258
    /**                                                                                                                // 4259
     * @ngdoc service                                                                                                  // 4260
     * @name $anchorScroll                                                                                             // 4261
     * @kind function                                                                                                  // 4262
     * @requires $window                                                                                               // 4263
     * @requires $location                                                                                             // 4264
     * @requires $rootScope                                                                                            // 4265
     *                                                                                                                 // 4266
     * @description                                                                                                    // 4267
     * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and                      // 4268
     * scrolls to the related element, according to the rules specified in the                                         // 4269
     * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).                    // 4270
     *                                                                                                                 // 4271
     * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                     // 4272
     * match any anchor whenever it changes. This can be disabled by calling                                           // 4273
     * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.             // 4274
     *                                                                                                                 // 4275
     * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                    // 4276
     * vertical scroll-offset (either fixed or dynamic).                                                               // 4277
     *                                                                                                                 // 4278
     * @property {(number|function|jqLite)} yOffset                                                                    // 4279
     * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                           // 4280
     * positioned elements at the top of the page, such as navbars, headers etc.                                       // 4281
     *                                                                                                                 // 4282
     * `yOffset` can be specified in various ways:                                                                     // 4283
     * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                        // 4284
     * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                   // 4285
     *   a number representing the offset (in pixels).<br /><br />                                                     // 4286
     * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                   // 4287
     *   the top of the page to the element's bottom will be used as offset.<br />                                     // 4288
     *   **Note**: The element will be taken into account only as long as its `position` is set to                     // 4289
     *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                      // 4290
     *   their height and/or positioning according to the viewport's size.                                             // 4291
     *                                                                                                                 // 4292
     * <br />                                                                                                          // 4293
     * <div class="alert alert-warning">                                                                               // 4294
     * In order for `yOffset` to work properly, scrolling should take place on the document's root and                 // 4295
     * not some child element.                                                                                         // 4296
     * </div>                                                                                                          // 4297
     *                                                                                                                 // 4298
     * @example                                                                                                        // 4299
     <example module="anchorScrollExample">                                                                            // 4300
     <file name="index.html">                                                                                          // 4301
     <div id="scrollArea" ng-controller="ScrollController">                                                            // 4302
     <a ng-click="gotoBottom()">Go to bottom</a>                                                                       // 4303
     <a id="bottom"></a> You're at the bottom!                                                                         // 4304
     </div>                                                                                                            // 4305
     </file>                                                                                                           // 4306
     <file name="script.js">                                                                                           // 4307
     angular.module('anchorScrollExample', [])                                                                         // 4308
     .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                          // 4309
     function ($scope, $location, $anchorScroll) {                                                                     // 4310
               $scope.gotoBottom = function() {                                                                        // 4311
                 // set the location.hash to the id of                                                                 // 4312
                 // the element you wish to scroll to.                                                                 // 4313
                 $location.hash('bottom');                                                                             // 4314
                                                                                                                       // 4315
                 // call $anchorScroll()                                                                               // 4316
                 $anchorScroll();                                                                                      // 4317
               };                                                                                                      // 4318
             }]);                                                                                                      // 4319
     </file>                                                                                                           // 4320
     <file name="style.css">                                                                                           // 4321
     #scrollArea {                                                                                                     // 4322
           height: 280px;                                                                                              // 4323
           overflow: auto;                                                                                             // 4324
         }                                                                                                             // 4325
                                                                                                                       // 4326
     #bottom {                                                                                                         // 4327
           display: block;                                                                                             // 4328
           margin-top: 2000px;                                                                                         // 4329
         }                                                                                                             // 4330
     </file>                                                                                                           // 4331
     </example>                                                                                                        // 4332
     *                                                                                                                 // 4333
     * <hr />                                                                                                          // 4334
     * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                 // 4335
     * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                    // 4336
     *                                                                                                                 // 4337
     * @example                                                                                                        // 4338
     <example module="anchorScrollOffsetExample">                                                                      // 4339
     <file name="index.html">                                                                                          // 4340
     <div class="fixed-header" ng-controller="headerCtrl">                                                             // 4341
     <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">                                                 // 4342
     Go to anchor {{x}}                                                                                                // 4343
     </a>                                                                                                              // 4344
     </div>                                                                                                            // 4345
     <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">                                                // 4346
     Anchor {{x}} of 5                                                                                                 // 4347
     </div>                                                                                                            // 4348
     </file>                                                                                                           // 4349
     <file name="script.js">                                                                                           // 4350
     angular.module('anchorScrollOffsetExample', [])                                                                   // 4351
     .run(['$anchorScroll', function($anchorScroll) {                                                                  // 4352
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4353
           }])                                                                                                         // 4354
     .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                                // 4355
     function ($anchorScroll, $location, $scope) {                                                                     // 4356
               $scope.gotoAnchor = function(x) {                                                                       // 4357
                 var newHash = 'anchor' + x;                                                                           // 4358
                 if ($location.hash() !== newHash) {                                                                   // 4359
                   // set the $location.hash to `newHash` and                                                          // 4360
                   // $anchorScroll will automatically scroll to it                                                    // 4361
                   $location.hash('anchor' + x);                                                                       // 4362
                 } else {                                                                                              // 4363
                   // call $anchorScroll() explicitly,                                                                 // 4364
                   // since $location.hash hasn't changed                                                              // 4365
                   $anchorScroll();                                                                                    // 4366
                 }                                                                                                     // 4367
               };                                                                                                      // 4368
             }                                                                                                         // 4369
     ]);                                                                                                               // 4370
     </file>                                                                                                           // 4371
     <file name="style.css">                                                                                           // 4372
     body {                                                                                                            // 4373
           padding-top: 50px;                                                                                          // 4374
         }                                                                                                             // 4375
                                                                                                                       // 4376
     .anchor {                                                                                                         // 4377
           border: 2px dashed DarkOrchid;                                                                              // 4378
           padding: 10px 10px 200px 10px;                                                                              // 4379
         }                                                                                                             // 4380
                                                                                                                       // 4381
     .fixed-header {                                                                                                   // 4382
           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4383
           height: 50px;                                                                                               // 4384
           position: fixed;                                                                                            // 4385
           top: 0; left: 0; right: 0;                                                                                  // 4386
         }                                                                                                             // 4387
                                                                                                                       // 4388
     .fixed-header > a {                                                                                               // 4389
           display: inline-block;                                                                                      // 4390
           margin: 5px 15px;                                                                                           // 4391
         }                                                                                                             // 4392
     </file>                                                                                                           // 4393
     </example>                                                                                                        // 4394
     */                                                                                                                // 4395
    this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                      // 4396
      var document = $window.document;                                                                                 // 4397
                                                                                                                       // 4398
      // Helper function to get first anchor from a NodeList                                                           // 4399
      // (using `Array#some()` instead of `angular#forEach()` since it's more performant                               // 4400
      //  and working in all supported browsers.)                                                                      // 4401
      function getFirstAnchor(list) {                                                                                  // 4402
        var result = null;                                                                                             // 4403
        Array.prototype.some.call(list, function(element) {                                                            // 4404
          if (nodeName_(element) === 'a') {                                                                            // 4405
            result = element;                                                                                          // 4406
            return true;                                                                                               // 4407
          }                                                                                                            // 4408
        });                                                                                                            // 4409
        return result;                                                                                                 // 4410
      }                                                                                                                // 4411
                                                                                                                       // 4412
      function getYOffset() {                                                                                          // 4413
                                                                                                                       // 4414
        var offset = scroll.yOffset;                                                                                   // 4415
                                                                                                                       // 4416
        if (isFunction(offset)) {                                                                                      // 4417
          offset = offset();                                                                                           // 4418
        } else if (isElement(offset)) {                                                                                // 4419
          var elem = offset[0];                                                                                        // 4420
          var style = $window.getComputedStyle(elem);                                                                  // 4421
          if (style.position !== 'fixed') {                                                                            // 4422
            offset = 0;                                                                                                // 4423
          } else {                                                                                                     // 4424
            offset = elem.getBoundingClientRect().bottom;                                                              // 4425
          }                                                                                                            // 4426
        } else if (!isNumber(offset)) {                                                                                // 4427
          offset = 0;                                                                                                  // 4428
        }                                                                                                              // 4429
                                                                                                                       // 4430
        return offset;                                                                                                 // 4431
      }                                                                                                                // 4432
                                                                                                                       // 4433
      function scrollTo(elem) {                                                                                        // 4434
        if (elem) {                                                                                                    // 4435
          elem.scrollIntoView();                                                                                       // 4436
                                                                                                                       // 4437
          var offset = getYOffset();                                                                                   // 4438
                                                                                                                       // 4439
          if (offset) {                                                                                                // 4440
            // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                 // 4441
            // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                 // 4442
            // top of the viewport.                                                                                    // 4443
            //                                                                                                         // 4444
            // IF the number of pixels from the top of `elem` to the end of the page's content is less                 // 4445
            // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                // 4446
            // way down the page.                                                                                      // 4447
            //                                                                                                         // 4448
            // This is often the case for elements near the bottom of the page.                                        // 4449
            //                                                                                                         // 4450
            // In such cases we do not need to scroll the whole `offset` up, just the difference between               // 4451
            // the top of the element and the offset, which is enough to align the top of `elem` at the                // 4452
            // desired position.                                                                                       // 4453
            var elemTop = elem.getBoundingClientRect().top;                                                            // 4454
            $window.scrollBy(0, elemTop - offset);                                                                     // 4455
          }                                                                                                            // 4456
        } else {                                                                                                       // 4457
          $window.scrollTo(0, 0);                                                                                      // 4458
        }                                                                                                              // 4459
      }                                                                                                                // 4460
                                                                                                                       // 4461
      function scroll() {                                                                                              // 4462
        var hash = $location.hash(), elm;                                                                              // 4463
                                                                                                                       // 4464
        // empty hash, scroll to the top of the page                                                                   // 4465
        if (!hash) scrollTo(null);                                                                                     // 4466
                                                                                                                       // 4467
        // element with given id                                                                                       // 4468
        else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                 // 4469
                                                                                                                       // 4470
        // first anchor with given name :-D                                                                            // 4471
        else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                              // 4472
                                                                                                                       // 4473
        // no element and hash == 'top', scroll to the top of the page                                                 // 4474
        else if (hash === 'top') scrollTo(null);                                                                       // 4475
      }                                                                                                                // 4476
                                                                                                                       // 4477
      // does not scroll when user clicks on anchor link that is currently on                                          // 4478
      // (no url change, no $location.hash() change), browser native does scroll                                       // 4479
      if (autoScrollingEnabled) {                                                                                      // 4480
        $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                       // 4481
          function autoScrollWatchAction(newVal, oldVal) {                                                             // 4482
            // skip the initial scroll if $location.hash is empty                                                      // 4483
            if (newVal === oldVal && newVal === '') return;                                                            // 4484
                                                                                                                       // 4485
            jqLiteDocumentLoaded(function() {                                                                          // 4486
              $rootScope.$evalAsync(scroll);                                                                           // 4487
            });                                                                                                        // 4488
          });                                                                                                          // 4489
      }                                                                                                                // 4490
                                                                                                                       // 4491
      return scroll;                                                                                                   // 4492
    }];                                                                                                                // 4493
  }                                                                                                                    // 4494
                                                                                                                       // 4495
  var $animateMinErr = minErr('$animate');                                                                             // 4496
                                                                                                                       // 4497
  /**                                                                                                                  // 4498
   * @ngdoc provider                                                                                                   // 4499
   * @name $animateProvider                                                                                            // 4500
   *                                                                                                                   // 4501
   * @description                                                                                                      // 4502
   * Default implementation of $animate that doesn't perform any animations, instead just                              // 4503
   * synchronously performs DOM                                                                                        // 4504
   * updates and calls done() callbacks.                                                                               // 4505
   *                                                                                                                   // 4506
   * In order to enable animations the ngAnimate module has to be loaded.                                              // 4507
   *                                                                                                                   // 4508
   * To see the functional implementation check out src/ngAnimate/animate.js                                           // 4509
   */                                                                                                                  // 4510
  var $AnimateProvider = ['$provide', function($provide) {                                                             // 4511
                                                                                                                       // 4512
                                                                                                                       // 4513
    this.$$selectors = {};                                                                                             // 4514
                                                                                                                       // 4515
                                                                                                                       // 4516
    /**                                                                                                                // 4517
     * @ngdoc method                                                                                                   // 4518
     * @name $animateProvider#register                                                                                 // 4519
     *                                                                                                                 // 4520
     * @description                                                                                                    // 4521
     * Registers a new injectable animation factory function. The factory function produces the                        // 4522
     * animation object which contains callback functions for each event that is expected to be                        // 4523
     * animated.                                                                                                       // 4524
     *                                                                                                                 // 4525
     *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`                     // 4526
     *   must be called once the element animation is complete. If a function is returned then the                     // 4527
     *   animation service will use this function to cancel the animation whenever a cancel event is                   // 4528
     *   triggered.                                                                                                    // 4529
     *                                                                                                                 // 4530
     *                                                                                                                 // 4531
     * ```js                                                                                                           // 4532
     *   return {                                                                                                      // 4533
     *     eventFn : function(element, done) {                                                                         // 4534
     *       //code to run the animation                                                                               // 4535
     *       //once complete, then run done()                                                                          // 4536
     *       return function cancellationFunction() {                                                                  // 4537
     *         //code to cancel the animation                                                                          // 4538
     *       }                                                                                                         // 4539
     *     }                                                                                                           // 4540
     *   }                                                                                                             // 4541
     * ```                                                                                                             // 4542
     *                                                                                                                 // 4543
     * @param {string} name The name of the animation.                                                                 // 4544
     * @param {Function} factory The factory function that will be executed to return the animation                    // 4545
     *                           object.                                                                               // 4546
     */                                                                                                                // 4547
    this.register = function(name, factory) {                                                                          // 4548
      var key = name + '-animation';                                                                                   // 4549
      if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',                                               // 4550
        "Expecting class selector starting with '.' got '{0}'.", name);                                                // 4551
      this.$$selectors[name.substr(1)] = key;                                                                          // 4552
      $provide.factory(key, factory);                                                                                  // 4553
    };                                                                                                                 // 4554
                                                                                                                       // 4555
    /**                                                                                                                // 4556
     * @ngdoc method                                                                                                   // 4557
     * @name $animateProvider#classNameFilter                                                                          // 4558
     *                                                                                                                 // 4559
     * @description                                                                                                    // 4560
     * Sets and/or returns the CSS class regular expression that is checked when performing                            // 4561
     * an animation. Upon bootstrap the classNameFilter value is not set at all and will                               // 4562
     * therefore enable $animate to attempt to perform an animation on any element.                                    // 4563
     * When setting the classNameFilter value, animations will only be performed on elements                           // 4564
     * that successfully match the filter expression. This in turn can boost performance                               // 4565
     * for low-powered devices as well as applications containing a lot of structural operations.                      // 4566
     * @param {RegExp=} expression The className expression which will be checked against all animations               // 4567
     * @return {RegExp} The current CSS className expression value. If null then there is no expression value          // 4568
     */                                                                                                                // 4569
    this.classNameFilter = function(expression) {                                                                      // 4570
      if (arguments.length === 1) {                                                                                    // 4571
        this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                   // 4572
      }                                                                                                                // 4573
      return this.$$classNameFilter;                                                                                   // 4574
    };                                                                                                                 // 4575
                                                                                                                       // 4576
    this.$get = ['$$q', '$$asyncCallback', '$rootScope', function($$q, $$asyncCallback, $rootScope) {                  // 4577
                                                                                                                       // 4578
      var currentDefer;                                                                                                // 4579
                                                                                                                       // 4580
      function runAnimationPostDigest(fn) {                                                                            // 4581
        var cancelFn, defer = $$q.defer();                                                                             // 4582
        defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {                                                   // 4583
          cancelFn && cancelFn();                                                                                      // 4584
        };                                                                                                             // 4585
                                                                                                                       // 4586
        $rootScope.$$postDigest(function ngAnimatePostDigest() {                                                       // 4587
          cancelFn = fn(function ngAnimateNotifyComplete() {                                                           // 4588
            defer.resolve();                                                                                           // 4589
          });                                                                                                          // 4590
        });                                                                                                            // 4591
                                                                                                                       // 4592
        return defer.promise;                                                                                          // 4593
      }                                                                                                                // 4594
                                                                                                                       // 4595
      function resolveElementClasses(element, classes) {                                                               // 4596
        var toAdd = [], toRemove = [];                                                                                 // 4597
                                                                                                                       // 4598
        var hasClasses = createMap();                                                                                  // 4599
        forEach((element.attr('class') || '').split(/\s+/), function(className) {                                      // 4600
          hasClasses[className] = true;                                                                                // 4601
        });                                                                                                            // 4602
                                                                                                                       // 4603
        forEach(classes, function(status, className) {                                                                 // 4604
          var hasClass = hasClasses[className];                                                                        // 4605
                                                                                                                       // 4606
          // If the most recent class manipulation (via $animate) was to remove the class, and the                     // 4607
          // element currently has the class, the class is scheduled for removal. Otherwise, if                        // 4608
          // the most recent class manipulation (via $animate) was to add the class, and the                           // 4609
          // element does not currently have the class, the class is scheduled to be added.                            // 4610
          if (status === false && hasClass) {                                                                          // 4611
            toRemove.push(className);                                                                                  // 4612
          } else if (status === true && !hasClass) {                                                                   // 4613
            toAdd.push(className);                                                                                     // 4614
          }                                                                                                            // 4615
        });                                                                                                            // 4616
                                                                                                                       // 4617
        return (toAdd.length + toRemove.length) > 0 &&                                                                 // 4618
          [toAdd.length ? toAdd : null, toRemove.length ? toRemove : null];                                            // 4619
      }                                                                                                                // 4620
                                                                                                                       // 4621
      function cachedClassManipulation(cache, classes, op) {                                                           // 4622
        for (var i=0, ii = classes.length; i < ii; ++i) {                                                              // 4623
          var className = classes[i];                                                                                  // 4624
          cache[className] = op;                                                                                       // 4625
        }                                                                                                              // 4626
      }                                                                                                                // 4627
                                                                                                                       // 4628
      function asyncPromise() {                                                                                        // 4629
        // only serve one instance of a promise in order to save CPU cycles                                            // 4630
        if (!currentDefer) {                                                                                           // 4631
          currentDefer = $$q.defer();                                                                                  // 4632
          $$asyncCallback(function() {                                                                                 // 4633
            currentDefer.resolve();                                                                                    // 4634
            currentDefer = null;                                                                                       // 4635
          });                                                                                                          // 4636
        }                                                                                                              // 4637
        return currentDefer.promise;                                                                                   // 4638
      }                                                                                                                // 4639
                                                                                                                       // 4640
      function applyStyles(element, options) {                                                                         // 4641
        if (angular.isObject(options)) {                                                                               // 4642
          var styles = extend(options.from || {}, options.to || {});                                                   // 4643
          element.css(styles);                                                                                         // 4644
        }                                                                                                              // 4645
      }                                                                                                                // 4646
                                                                                                                       // 4647
      /**                                                                                                              // 4648
       *                                                                                                               // 4649
       * @ngdoc service                                                                                                // 4650
       * @name $animate                                                                                                // 4651
       * @description The $animate service provides rudimentary DOM manipulation functions to                          // 4652
       * insert, remove and move elements within the DOM, as well as adding and removing classes.                      // 4653
       * This service is the core service used by the ngAnimate $animator service which provides                       // 4654
       * high-level animation hooks for CSS and JavaScript.                                                            // 4655
       *                                                                                                               // 4656
       * $animate is available in the AngularJS core, however, the ngAnimate module must be included                   // 4657
       * to enable full out animation support. Otherwise, $animate will only perform simple DOM                        // 4658
       * manipulation operations.                                                                                      // 4659
       *                                                                                                               // 4660
       * To learn more about enabling animation support, click here to visit the {@link ngAnimate                      // 4661
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service                      // 4662
     * page}.                                                                                                          // 4663
       */                                                                                                              // 4664
      return {                                                                                                         // 4665
        animate: function(element, from, to) {                                                                         // 4666
          applyStyles(element, { from: from, to: to });                                                                // 4667
          return asyncPromise();                                                                                       // 4668
        },                                                                                                             // 4669
                                                                                                                       // 4670
        /**                                                                                                            // 4671
         *                                                                                                             // 4672
         * @ngdoc method                                                                                               // 4673
         * @name $animate#enter                                                                                        // 4674
         * @kind function                                                                                              // 4675
         * @description Inserts the element into the DOM either after the `after` element or                           // 4676
         * as the first child within the `parent` element. When the function is called a promise                       // 4677
         * is returned that will be resolved at a later time.                                                          // 4678
         * @param {DOMElement} element the element which will be inserted into the DOM                                 // 4679
         * @param {DOMElement} parent the parent element which will append the element as                              // 4680
         *   a child (if the after element is not present)                                                             // 4681
         * @param {DOMElement} after the sibling element which will append the element                                 // 4682
         *   after itself                                                                                              // 4683
         * @param {object=} options an optional collection of styles that will be applied to the element.              // 4684
         * @return {Promise} the animation callback promise                                                            // 4685
         */                                                                                                            // 4686
        enter: function(element, parent, after, options) {                                                             // 4687
          applyStyles(element, options);                                                                               // 4688
          after ? after.after(element)                                                                                 // 4689
            : parent.prepend(element);                                                                                 // 4690
          return asyncPromise();                                                                                       // 4691
        },                                                                                                             // 4692
                                                                                                                       // 4693
        /**                                                                                                            // 4694
         *                                                                                                             // 4695
         * @ngdoc method                                                                                               // 4696
         * @name $animate#leave                                                                                        // 4697
         * @kind function                                                                                              // 4698
         * @description Removes the element from the DOM. When the function is called a promise                        // 4699
         * is returned that will be resolved at a later time.                                                          // 4700
         * @param {DOMElement} element the element which will be removed from the DOM                                  // 4701
         * @param {object=} options an optional collection of options that will be applied to the element.             // 4702
         * @return {Promise} the animation callback promise                                                            // 4703
         */                                                                                                            // 4704
        leave: function(element, options) {                                                                            // 4705
          applyStyles(element, options);                                                                               // 4706
          element.remove();                                                                                            // 4707
          return asyncPromise();                                                                                       // 4708
        },                                                                                                             // 4709
                                                                                                                       // 4710
        /**                                                                                                            // 4711
         *                                                                                                             // 4712
         * @ngdoc method                                                                                               // 4713
         * @name $animate#move                                                                                         // 4714
         * @kind function                                                                                              // 4715
         * @description Moves the position of the provided element within the DOM to be placed                         // 4716
         * either after the `after` element or inside of the `parent` element. When the function                       // 4717
         * is called a promise is returned that will be resolved at a later time.                                      // 4718
         *                                                                                                             // 4719
         * @param {DOMElement} element the element which will be moved around within the                               // 4720
         *   DOM                                                                                                       // 4721
         * @param {DOMElement} parent the parent element where the element will be                                     // 4722
         *   inserted into (if the after element is not present)                                                       // 4723
         * @param {DOMElement} after the sibling element where the element will be                                     // 4724
         *   positioned next to                                                                                        // 4725
         * @param {object=} options an optional collection of options that will be applied to the element.             // 4726
         * @return {Promise} the animation callback promise                                                            // 4727
         */                                                                                                            // 4728
        move: function(element, parent, after, options) {                                                              // 4729
          // Do not remove element before insert. Removing will cause data associated with the                         // 4730
          // element to be dropped. Insert will implicitly do the remove.                                              // 4731
          return this.enter(element, parent, after, options);                                                          // 4732
        },                                                                                                             // 4733
                                                                                                                       // 4734
        /**                                                                                                            // 4735
         *                                                                                                             // 4736
         * @ngdoc method                                                                                               // 4737
         * @name $animate#addClass                                                                                     // 4738
         * @kind function                                                                                              // 4739
         * @description Adds the provided className CSS class value to the provided element.                           // 4740
         * When the function is called a promise is returned that will be resolved at a later time.                    // 4741
         * @param {DOMElement} element the element which will have the className value                                 // 4742
         *   added to it                                                                                               // 4743
         * @param {string} className the CSS class which will be added to the element                                  // 4744
         * @param {object=} options an optional collection of options that will be applied to the element.             // 4745
         * @return {Promise} the animation callback promise                                                            // 4746
         */                                                                                                            // 4747
        addClass: function(element, className, options) {                                                              // 4748
          return this.setClass(element, className, [], options);                                                       // 4749
        },                                                                                                             // 4750
                                                                                                                       // 4751
        $$addClassImmediately: function(element, className, options) {                                                 // 4752
          element = jqLite(element);                                                                                   // 4753
          className = !isString(className)                                                                             // 4754
            ? (isArray(className) ? className.join(' ') : '')                                                          // 4755
            : className;                                                                                               // 4756
          forEach(element, function(element) {                                                                         // 4757
            jqLiteAddClass(element, className);                                                                        // 4758
          });                                                                                                          // 4759
          applyStyles(element, options);                                                                               // 4760
          return asyncPromise();                                                                                       // 4761
        },                                                                                                             // 4762
                                                                                                                       // 4763
        /**                                                                                                            // 4764
         *                                                                                                             // 4765
         * @ngdoc method                                                                                               // 4766
         * @name $animate#removeClass                                                                                  // 4767
         * @kind function                                                                                              // 4768
         * @description Removes the provided className CSS class value from the provided element.                      // 4769
         * When the function is called a promise is returned that will be resolved at a later time.                    // 4770
         * @param {DOMElement} element the element which will have the className value                                 // 4771
         *   removed from it                                                                                           // 4772
         * @param {string} className the CSS class which will be removed from the element                              // 4773
         * @param {object=} options an optional collection of options that will be applied to the element.             // 4774
         * @return {Promise} the animation callback promise                                                            // 4775
         */                                                                                                            // 4776
        removeClass: function(element, className, options) {                                                           // 4777
          return this.setClass(element, [], className, options);                                                       // 4778
        },                                                                                                             // 4779
                                                                                                                       // 4780
        $$removeClassImmediately: function(element, className, options) {                                              // 4781
          element = jqLite(element);                                                                                   // 4782
          className = !isString(className)                                                                             // 4783
            ? (isArray(className) ? className.join(' ') : '')                                                          // 4784
            : className;                                                                                               // 4785
          forEach(element, function(element) {                                                                         // 4786
            jqLiteRemoveClass(element, className);                                                                     // 4787
          });                                                                                                          // 4788
          applyStyles(element, options);                                                                               // 4789
          return asyncPromise();                                                                                       // 4790
        },                                                                                                             // 4791
                                                                                                                       // 4792
        /**                                                                                                            // 4793
         *                                                                                                             // 4794
         * @ngdoc method                                                                                               // 4795
         * @name $animate#setClass                                                                                     // 4796
         * @kind function                                                                                              // 4797
         * @description Adds and/or removes the given CSS classes to and from the element.                             // 4798
         * When the function is called a promise is returned that will be resolved at a later time.                    // 4799
         * @param {DOMElement} element the element which will have its CSS classes changed                             // 4800
         *   removed from it                                                                                           // 4801
         * @param {string} add the CSS classes which will be added to the element                                      // 4802
         * @param {string} remove the CSS class which will be removed from the element                                 // 4803
         * @param {object=} options an optional collection of options that will be applied to the element.             // 4804
         * @return {Promise} the animation callback promise                                                            // 4805
         */                                                                                                            // 4806
        setClass: function(element, add, remove, options) {                                                            // 4807
          var self = this;                                                                                             // 4808
          var STORAGE_KEY = '$$animateClasses';                                                                        // 4809
          var createdCache = false;                                                                                    // 4810
          element = jqLite(element);                                                                                   // 4811
                                                                                                                       // 4812
          var cache = element.data(STORAGE_KEY);                                                                       // 4813
          if (!cache) {                                                                                                // 4814
            cache = {                                                                                                  // 4815
              classes: {},                                                                                             // 4816
              options: options                                                                                         // 4817
            };                                                                                                         // 4818
            createdCache = true;                                                                                       // 4819
          } else if (options && cache.options) {                                                                       // 4820
            cache.options = angular.extend(cache.options || {}, options);                                              // 4821
          }                                                                                                            // 4822
                                                                                                                       // 4823
          var classes = cache.classes;                                                                                 // 4824
                                                                                                                       // 4825
          add = isArray(add) ? add : add.split(' ');                                                                   // 4826
          remove = isArray(remove) ? remove : remove.split(' ');                                                       // 4827
          cachedClassManipulation(classes, add, true);                                                                 // 4828
          cachedClassManipulation(classes, remove, false);                                                             // 4829
                                                                                                                       // 4830
          if (createdCache) {                                                                                          // 4831
            cache.promise = runAnimationPostDigest(function(done) {                                                    // 4832
              var cache = element.data(STORAGE_KEY);                                                                   // 4833
              element.removeData(STORAGE_KEY);                                                                         // 4834
                                                                                                                       // 4835
              // in the event that the element is removed before postDigest                                            // 4836
              // is run then the cache will be undefined and there will be                                             // 4837
              // no need anymore to add or remove and of the element classes                                           // 4838
              if (cache) {                                                                                             // 4839
                var classes = resolveElementClasses(element, cache.classes);                                           // 4840
                if (classes) {                                                                                         // 4841
                  self.$$setClassImmediately(element, classes[0], classes[1], cache.options);                          // 4842
                }                                                                                                      // 4843
              }                                                                                                        // 4844
                                                                                                                       // 4845
              done();                                                                                                  // 4846
            });                                                                                                        // 4847
            element.data(STORAGE_KEY, cache);                                                                          // 4848
          }                                                                                                            // 4849
                                                                                                                       // 4850
          return cache.promise;                                                                                        // 4851
        },                                                                                                             // 4852
                                                                                                                       // 4853
        $$setClassImmediately: function(element, add, remove, options) {                                               // 4854
          add && this.$$addClassImmediately(element, add);                                                             // 4855
          remove && this.$$removeClassImmediately(element, remove);                                                    // 4856
          applyStyles(element, options);                                                                               // 4857
          return asyncPromise();                                                                                       // 4858
        },                                                                                                             // 4859
                                                                                                                       // 4860
        enabled: noop,                                                                                                 // 4861
        cancel: noop                                                                                                   // 4862
      };                                                                                                               // 4863
    }];                                                                                                                // 4864
  }];                                                                                                                  // 4865
                                                                                                                       // 4866
  function $$AsyncCallbackProvider() {                                                                                 // 4867
    this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {                                                      // 4868
      return $$rAF.supported                                                                                           // 4869
        ? function(fn) { return $$rAF(fn); }                                                                           // 4870
        : function(fn) {                                                                                               // 4871
        return $timeout(fn, 0, false);                                                                                 // 4872
      };                                                                                                               // 4873
    }];                                                                                                                // 4874
  }                                                                                                                    // 4875
                                                                                                                       // 4876
  /* global stripHash: true */                                                                                         // 4877
                                                                                                                       // 4878
  /**                                                                                                                  // 4879
   * ! This is a private undocumented service !                                                                        // 4880
   *                                                                                                                   // 4881
   * @name $browser                                                                                                    // 4882
   * @requires $log                                                                                                    // 4883
   * @description                                                                                                      // 4884
   * This object has two goals:                                                                                        // 4885
   *                                                                                                                   // 4886
   * - hide all the global state in the browser caused by the window object                                            // 4887
   * - abstract away all the browser specific features and inconsistencies                                             // 4888
   *                                                                                                                   // 4889
   * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                // 4890
   * service, which can be used for convenient testing of the application without the interaction with                 // 4891
   * the real browser apis.                                                                                            // 4892
   */                                                                                                                  // 4893
  /**                                                                                                                  // 4894
   * @param {object} window The global window object.                                                                  // 4895
   * @param {object} document jQuery wrapped document.                                                                 // 4896
   * @param {object} $log window.console or an object with the same interface.                                         // 4897
   * @param {object} $sniffer $sniffer service                                                                         // 4898
   */                                                                                                                  // 4899
  function Browser(window, document, $log, $sniffer) {                                                                 // 4900
    var self = this,                                                                                                   // 4901
      rawDocument = document[0],                                                                                       // 4902
      location = window.location,                                                                                      // 4903
      history = window.history,                                                                                        // 4904
      setTimeout = window.setTimeout,                                                                                  // 4905
      clearTimeout = window.clearTimeout,                                                                              // 4906
      pendingDeferIds = {};                                                                                            // 4907
                                                                                                                       // 4908
    self.isMock = false;                                                                                               // 4909
                                                                                                                       // 4910
    var outstandingRequestCount = 0;                                                                                   // 4911
    var outstandingRequestCallbacks = [];                                                                              // 4912
                                                                                                                       // 4913
    // TODO(vojta): remove this temporary api                                                                          // 4914
    self.$$completeOutstandingRequest = completeOutstandingRequest;                                                    // 4915
    self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                     // 4916
                                                                                                                       // 4917
    /**                                                                                                                // 4918
     * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                  // 4919
     * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                          // 4920
     */                                                                                                                // 4921
    function completeOutstandingRequest(fn) {                                                                          // 4922
      try {                                                                                                            // 4923
        fn.apply(null, sliceArgs(arguments, 1));                                                                       // 4924
      } finally {                                                                                                      // 4925
        outstandingRequestCount--;                                                                                     // 4926
        if (outstandingRequestCount === 0) {                                                                           // 4927
          while (outstandingRequestCallbacks.length) {                                                                 // 4928
            try {                                                                                                      // 4929
              outstandingRequestCallbacks.pop()();                                                                     // 4930
            } catch (e) {                                                                                              // 4931
              $log.error(e);                                                                                           // 4932
            }                                                                                                          // 4933
          }                                                                                                            // 4934
        }                                                                                                              // 4935
      }                                                                                                                // 4936
    }                                                                                                                  // 4937
                                                                                                                       // 4938
    function getHash(url) {                                                                                            // 4939
      var index = url.indexOf('#');                                                                                    // 4940
      return index === -1 ? '' : url.substr(index + 1);                                                                // 4941
    }                                                                                                                  // 4942
                                                                                                                       // 4943
    /**                                                                                                                // 4944
     * @private                                                                                                        // 4945
     * Note: this method is used only by scenario runner                                                               // 4946
     * TODO(vojta): prefix this method with $$ ?                                                                       // 4947
     * @param {function()} callback Function that will be called when no outstanding request                           // 4948
     */                                                                                                                // 4949
    self.notifyWhenNoOutstandingRequests = function(callback) {                                                        // 4950
      // force browser to execute all pollFns - this is needed so that cookies and other pollers fire                  // 4951
      // at some deterministic time in respect to the test runner's actions. Leaving things up to the                  // 4952
      // regular poller would result in flaky tests.                                                                   // 4953
      forEach(pollFns, function(pollFn) { pollFn(); });                                                                // 4954
                                                                                                                       // 4955
      if (outstandingRequestCount === 0) {                                                                             // 4956
        callback();                                                                                                    // 4957
      } else {                                                                                                         // 4958
        outstandingRequestCallbacks.push(callback);                                                                    // 4959
      }                                                                                                                // 4960
    };                                                                                                                 // 4961
                                                                                                                       // 4962
    //////////////////////////////////////////////////////////////                                                     // 4963
    // Poll Watcher API                                                                                                // 4964
    //////////////////////////////////////////////////////////////                                                     // 4965
    var pollFns = [],                                                                                                  // 4966
      pollTimeout;                                                                                                     // 4967
                                                                                                                       // 4968
    /**                                                                                                                // 4969
     * @name $browser#addPollFn                                                                                        // 4970
     *                                                                                                                 // 4971
     * @param {function()} fn Poll function to add                                                                     // 4972
     *                                                                                                                 // 4973
     * @description                                                                                                    // 4974
     * Adds a function to the list of functions that poller periodically executes,                                     // 4975
     * and starts polling if not started yet.                                                                          // 4976
     *                                                                                                                 // 4977
     * @returns {function()} the added function                                                                        // 4978
     */                                                                                                                // 4979
    self.addPollFn = function(fn) {                                                                                    // 4980
      if (isUndefined(pollTimeout)) startPoller(100, setTimeout);                                                      // 4981
      pollFns.push(fn);                                                                                                // 4982
      return fn;                                                                                                       // 4983
    };                                                                                                                 // 4984
                                                                                                                       // 4985
    /**                                                                                                                // 4986
     * @param {number} interval How often should browser call poll functions (ms)                                      // 4987
     * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.                               // 4988
     *                                                                                                                 // 4989
     * @description                                                                                                    // 4990
     * Configures the poller to run in the specified intervals, using the specified                                    // 4991
     * setTimeout fn and kicks it off.                                                                                 // 4992
     */                                                                                                                // 4993
    function startPoller(interval, setTimeout) {                                                                       // 4994
      (function check() {                                                                                              // 4995
        forEach(pollFns, function(pollFn) { pollFn(); });                                                              // 4996
        pollTimeout = setTimeout(check, interval);                                                                     // 4997
      })();                                                                                                            // 4998
    }                                                                                                                  // 4999
                                                                                                                       // 5000
    //////////////////////////////////////////////////////////////                                                     // 5001
    // URL API                                                                                                         // 5002
    //////////////////////////////////////////////////////////////                                                     // 5003
                                                                                                                       // 5004
    var cachedState, lastHistoryState,                                                                                 // 5005
      lastBrowserUrl = location.href,                                                                                  // 5006
      baseElement = document.find('base'),                                                                             // 5007
      reloadLocation = null;                                                                                           // 5008
                                                                                                                       // 5009
    cacheState();                                                                                                      // 5010
    lastHistoryState = cachedState;                                                                                    // 5011
                                                                                                                       // 5012
    /**                                                                                                                // 5013
     * @name $browser#url                                                                                              // 5014
     *                                                                                                                 // 5015
     * @description                                                                                                    // 5016
     * GETTER:                                                                                                         // 5017
     * Without any argument, this method just returns current value of location.href.                                  // 5018
     *                                                                                                                 // 5019
     * SETTER:                                                                                                         // 5020
     * With at least one argument, this method sets url to new value.                                                  // 5021
     * If html5 history api supported, pushState/replaceState is used, otherwise                                       // 5022
     * location.href/location.replace is used.                                                                         // 5023
     * Returns its own instance to allow chaining                                                                      // 5024
     *                                                                                                                 // 5025
     * NOTE: this api is intended for use only by the $location service. Please use the                                // 5026
     * {@link ng.$location $location service} to change url.                                                           // 5027
     *                                                                                                                 // 5028
     * @param {string} url New url (when used as setter)                                                               // 5029
     * @param {boolean=} replace Should new url replace current history record?                                        // 5030
     * @param {object=} state object to use with pushState/replaceState                                                // 5031
     */                                                                                                                // 5032
    self.url = function(url, replace, state) {                                                                         // 5033
      // In modern browsers `history.state` is `null` by default; treating it separately                               // 5034
      // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                 // 5035
      // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                               // 5036
      if (isUndefined(state)) {                                                                                        // 5037
        state = null;                                                                                                  // 5038
      }                                                                                                                // 5039
                                                                                                                       // 5040
      // Android Browser BFCache causes location, history reference to become stale.                                   // 5041
      if (location !== window.location) location = window.location;                                                    // 5042
      if (history !== window.history) history = window.history;                                                        // 5043
                                                                                                                       // 5044
      // setter                                                                                                        // 5045
      if (url) {                                                                                                       // 5046
        var sameState = lastHistoryState === state;                                                                    // 5047
                                                                                                                       // 5048
        // Don't change anything if previous and current URLs and states match. This also prevents                     // 5049
        // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                              // 5050
        // See https://github.com/angular/angular.js/commit/ffb2701                                                    // 5051
        if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                              // 5052
          return self;                                                                                                 // 5053
        }                                                                                                              // 5054
        var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                 // 5055
        lastBrowserUrl = url;                                                                                          // 5056
        lastHistoryState = state;                                                                                      // 5057
        // Don't use history API if only the hash changed                                                              // 5058
        // due to a bug in IE10/IE11 which leads                                                                       // 5059
        // to not firing a `hashchange` nor `popstate` event                                                           // 5060
        // in some cases (see #9143).                                                                                  // 5061
        if ($sniffer.history && (!sameBase || !sameState)) {                                                           // 5062
          history[replace ? 'replaceState' : 'pushState'](state, '', url);                                             // 5063
          cacheState();                                                                                                // 5064
          // Do the assignment again so that those two variables are referentially identical.                          // 5065
          lastHistoryState = cachedState;                                                                              // 5066
        } else {                                                                                                       // 5067
          if (!sameBase) {                                                                                             // 5068
            reloadLocation = url;                                                                                      // 5069
          }                                                                                                            // 5070
          if (replace) {                                                                                               // 5071
            location.replace(url);                                                                                     // 5072
          } else if (!sameBase) {                                                                                      // 5073
            location.href = url;                                                                                       // 5074
          } else {                                                                                                     // 5075
            location.hash = getHash(url);                                                                              // 5076
          }                                                                                                            // 5077
        }                                                                                                              // 5078
        return self;                                                                                                   // 5079
        // getter                                                                                                      // 5080
      } else {                                                                                                         // 5081
        // - reloadLocation is needed as browsers don't allow to read out                                              // 5082
        //   the new location.href if a reload happened.                                                               // 5083
        // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                   // 5084
        return reloadLocation || location.href.replace(/%27/g,"'");                                                    // 5085
      }                                                                                                                // 5086
    };                                                                                                                 // 5087
                                                                                                                       // 5088
    /**                                                                                                                // 5089
     * @name $browser#state                                                                                            // 5090
     *                                                                                                                 // 5091
     * @description                                                                                                    // 5092
     * This method is a getter.                                                                                        // 5093
     *                                                                                                                 // 5094
     * Return history.state or null if history.state is undefined.                                                     // 5095
     *                                                                                                                 // 5096
     * @returns {object} state                                                                                         // 5097
     */                                                                                                                // 5098
    self.state = function() {                                                                                          // 5099
      return cachedState;                                                                                              // 5100
    };                                                                                                                 // 5101
                                                                                                                       // 5102
    var urlChangeListeners = [],                                                                                       // 5103
      urlChangeInit = false;                                                                                           // 5104
                                                                                                                       // 5105
    function cacheStateAndFireUrlChange() {                                                                            // 5106
      cacheState();                                                                                                    // 5107
      fireUrlChange();                                                                                                 // 5108
    }                                                                                                                  // 5109
                                                                                                                       // 5110
    function getCurrentState() {                                                                                       // 5111
      try {                                                                                                            // 5112
        return history.state;                                                                                          // 5113
      } catch (e) {                                                                                                    // 5114
        // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                             // 5115
      }                                                                                                                // 5116
    }                                                                                                                  // 5117
                                                                                                                       // 5118
    // This variable should be used *only* inside the cacheState function.                                             // 5119
    var lastCachedState = null;                                                                                        // 5120
    function cacheState() {                                                                                            // 5121
      // This should be the only place in $browser where `history.state` is read.                                      // 5122
      cachedState = getCurrentState();                                                                                 // 5123
      cachedState = isUndefined(cachedState) ? null : cachedState;                                                     // 5124
                                                                                                                       // 5125
      // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                     // 5126
      if (equals(cachedState, lastCachedState)) {                                                                      // 5127
        cachedState = lastCachedState;                                                                                 // 5128
      }                                                                                                                // 5129
      lastCachedState = cachedState;                                                                                   // 5130
    }                                                                                                                  // 5131
                                                                                                                       // 5132
    function fireUrlChange() {                                                                                         // 5133
      if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                         // 5134
        return;                                                                                                        // 5135
      }                                                                                                                // 5136
                                                                                                                       // 5137
      lastBrowserUrl = self.url();                                                                                     // 5138
      lastHistoryState = cachedState;                                                                                  // 5139
      forEach(urlChangeListeners, function(listener) {                                                                 // 5140
        listener(self.url(), cachedState);                                                                             // 5141
      });                                                                                                              // 5142
    }                                                                                                                  // 5143
                                                                                                                       // 5144
    /**                                                                                                                // 5145
     * @name $browser#onUrlChange                                                                                      // 5146
     *                                                                                                                 // 5147
     * @description                                                                                                    // 5148
     * Register callback function that will be called, when url changes.                                               // 5149
     *                                                                                                                 // 5150
     * It's only called when the url is changed from outside of angular:                                               // 5151
     * - user types different url into address bar                                                                     // 5152
     * - user clicks on history (forward/back) button                                                                  // 5153
     * - user clicks on a link                                                                                         // 5154
     *                                                                                                                 // 5155
     * It's not called when url is changed by $browser.url() method                                                    // 5156
     *                                                                                                                 // 5157
     * The listener gets called with new url as parameter.                                                             // 5158
     *                                                                                                                 // 5159
     * NOTE: this api is intended for use only by the $location service. Please use the                                // 5160
     * {@link ng.$location $location service} to monitor url changes in angular apps.                                  // 5161
     *                                                                                                                 // 5162
     * @param {function(string)} listener Listener function to be called when url changes.                             // 5163
     * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                   // 5164
     */                                                                                                                // 5165
    self.onUrlChange = function(callback) {                                                                            // 5166
      // TODO(vojta): refactor to use node's syntax for events                                                         // 5167
      if (!urlChangeInit) {                                                                                            // 5168
        // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                       // 5169
        // don't fire popstate when user change the address bar and don't fire hashchange when url                     // 5170
        // changed by push/replaceState                                                                                // 5171
                                                                                                                       // 5172
        // html5 history api - popstate event                                                                          // 5173
        if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                               // 5174
        // hashchange event                                                                                            // 5175
        jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                   // 5176
                                                                                                                       // 5177
        urlChangeInit = true;                                                                                          // 5178
      }                                                                                                                // 5179
                                                                                                                       // 5180
      urlChangeListeners.push(callback);                                                                               // 5181
      return callback;                                                                                                 // 5182
    };                                                                                                                 // 5183
                                                                                                                       // 5184
    /**                                                                                                                // 5185
     * Checks whether the url has changed outside of Angular.                                                          // 5186
     * Needs to be exported to be able to check for changes that have been done in sync,                               // 5187
     * as hashchange/popstate events fire in async.                                                                    // 5188
     */                                                                                                                // 5189
    self.$$checkUrlChange = fireUrlChange;                                                                             // 5190
                                                                                                                       // 5191
    //////////////////////////////////////////////////////////////                                                     // 5192
    // Misc API                                                                                                        // 5193
    //////////////////////////////////////////////////////////////                                                     // 5194
                                                                                                                       // 5195
    /**                                                                                                                // 5196
     * @name $browser#baseHref                                                                                         // 5197
     *                                                                                                                 // 5198
     * @description                                                                                                    // 5199
     * Returns current <base href>                                                                                     // 5200
     * (always relative - without domain)                                                                              // 5201
     *                                                                                                                 // 5202
     * @returns {string} The current base href                                                                         // 5203
     */                                                                                                                // 5204
    self.baseHref = function() {                                                                                       // 5205
      var href = baseElement.attr('href');                                                                             // 5206
      return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';                                                   // 5207
    };                                                                                                                 // 5208
                                                                                                                       // 5209
    //////////////////////////////////////////////////////////////                                                     // 5210
    // Cookies API                                                                                                     // 5211
    //////////////////////////////////////////////////////////////                                                     // 5212
    var lastCookies = {};                                                                                              // 5213
    var lastCookieString = '';                                                                                         // 5214
    var cookiePath = self.baseHref();                                                                                  // 5215
                                                                                                                       // 5216
    function safeDecodeURIComponent(str) {                                                                             // 5217
      try {                                                                                                            // 5218
        return decodeURIComponent(str);                                                                                // 5219
      } catch (e) {                                                                                                    // 5220
        return str;                                                                                                    // 5221
      }                                                                                                                // 5222
    }                                                                                                                  // 5223
                                                                                                                       // 5224
    /**                                                                                                                // 5225
     * @name $browser#cookies                                                                                          // 5226
     *                                                                                                                 // 5227
     * @param {string=} name Cookie name                                                                               // 5228
     * @param {string=} value Cookie value                                                                             // 5229
     *                                                                                                                 // 5230
     * @description                                                                                                    // 5231
     * The cookies method provides a 'private' low level access to browser cookies.                                    // 5232
     * It is not meant to be used directly, use the $cookie service instead.                                           // 5233
     *                                                                                                                 // 5234
     * The return values vary depending on the arguments that the method was called with as follows:                   // 5235
     *                                                                                                                 // 5236
     * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify                  // 5237
     *   it                                                                                                            // 5238
     * - cookies(name, value) -> set name to value, if value is undefined delete the cookie                            // 5239
     * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that                     // 5240
     *   way)                                                                                                          // 5241
     *                                                                                                                 // 5242
     * @returns {Object} Hash of all cookies (if called without any parameter)                                         // 5243
     */                                                                                                                // 5244
    self.cookies = function(name, value) {                                                                             // 5245
      var cookieLength, cookieArray, cookie, i, index;                                                                 // 5246
                                                                                                                       // 5247
      if (name) {                                                                                                      // 5248
        if (value === undefined) {                                                                                     // 5249
          rawDocument.cookie = encodeURIComponent(name) + "=;path=" + cookiePath +                                     // 5250
          ";expires=Thu, 01 Jan 1970 00:00:00 GMT";                                                                    // 5251
        } else {                                                                                                       // 5252
          if (isString(value)) {                                                                                       // 5253
            cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) +          // 5254
            ';path=' + cookiePath).length + 1;                                                                         // 5255
                                                                                                                       // 5256
            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:                                  // 5257
            // - 300 cookies                                                                                           // 5258
            // - 20 cookies per unique domain                                                                          // 5259
            // - 4096 bytes per cookie                                                                                 // 5260
            if (cookieLength > 4096) {                                                                                 // 5261
              $log.warn("Cookie '" + name +                                                                            // 5262
              "' possibly not set or overflowed because it was too large (" +                                          // 5263
              cookieLength + " > 4096 bytes)!");                                                                       // 5264
            }                                                                                                          // 5265
          }                                                                                                            // 5266
        }                                                                                                              // 5267
      } else {                                                                                                         // 5268
        if (rawDocument.cookie !== lastCookieString) {                                                                 // 5269
          lastCookieString = rawDocument.cookie;                                                                       // 5270
          cookieArray = lastCookieString.split("; ");                                                                  // 5271
          lastCookies = {};                                                                                            // 5272
                                                                                                                       // 5273
          for (i = 0; i < cookieArray.length; i++) {                                                                   // 5274
            cookie = cookieArray[i];                                                                                   // 5275
            index = cookie.indexOf('=');                                                                               // 5276
            if (index > 0) { //ignore nameless cookies                                                                 // 5277
              name = safeDecodeURIComponent(cookie.substring(0, index));                                               // 5278
              // the first value that is seen for a cookie is the most                                                 // 5279
              // specific one.  values for the same cookie name that                                                   // 5280
              // follow are for less specific paths.                                                                   // 5281
              if (lastCookies[name] === undefined) {                                                                   // 5282
                lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                               // 5283
              }                                                                                                        // 5284
            }                                                                                                          // 5285
          }                                                                                                            // 5286
        }                                                                                                              // 5287
        return lastCookies;                                                                                            // 5288
      }                                                                                                                // 5289
    };                                                                                                                 // 5290
                                                                                                                       // 5291
                                                                                                                       // 5292
    /**                                                                                                                // 5293
     * @name $browser#defer                                                                                            // 5294
     * @param {function()} fn A function, who's execution should be deferred.                                          // 5295
     * @param {number=} [delay=0] of milliseconds to defer the function execution.                                     // 5296
     * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                         // 5297
     *                                                                                                                 // 5298
     * @description                                                                                                    // 5299
     * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                       // 5300
     *                                                                                                                 // 5301
     * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                 // 5302
     * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                    // 5303
     * via `$browser.defer.flush()`.                                                                                   // 5304
     *                                                                                                                 // 5305
     */                                                                                                                // 5306
    self.defer = function(fn, delay) {                                                                                 // 5307
      var timeoutId;                                                                                                   // 5308
      outstandingRequestCount++;                                                                                       // 5309
      timeoutId = setTimeout(function() {                                                                              // 5310
        delete pendingDeferIds[timeoutId];                                                                             // 5311
        completeOutstandingRequest(fn);                                                                                // 5312
      }, delay || 0);                                                                                                  // 5313
      pendingDeferIds[timeoutId] = true;                                                                               // 5314
      return timeoutId;                                                                                                // 5315
    };                                                                                                                 // 5316
                                                                                                                       // 5317
                                                                                                                       // 5318
    /**                                                                                                                // 5319
     * @name $browser#defer.cancel                                                                                     // 5320
     *                                                                                                                 // 5321
     * @description                                                                                                    // 5322
     * Cancels a deferred task identified with `deferId`.                                                              // 5323
     *                                                                                                                 // 5324
     * @param {*} deferId Token returned by the `$browser.defer` function.                                             // 5325
     * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                          // 5326
     *                    canceled.                                                                                    // 5327
     */                                                                                                                // 5328
    self.defer.cancel = function(deferId) {                                                                            // 5329
      if (pendingDeferIds[deferId]) {                                                                                  // 5330
        delete pendingDeferIds[deferId];                                                                               // 5331
        clearTimeout(deferId);                                                                                         // 5332
        completeOutstandingRequest(noop);                                                                              // 5333
        return true;                                                                                                   // 5334
      }                                                                                                                // 5335
      return false;                                                                                                    // 5336
    };                                                                                                                 // 5337
                                                                                                                       // 5338
  }                                                                                                                    // 5339
                                                                                                                       // 5340
  function $BrowserProvider() {                                                                                        // 5341
    this.$get = ['$window', '$log', '$sniffer', '$document',                                                           // 5342
      function($window, $log, $sniffer, $document) {                                                                   // 5343
        return new Browser($window, $document, $log, $sniffer);                                                        // 5344
      }];                                                                                                              // 5345
  }                                                                                                                    // 5346
                                                                                                                       // 5347
  /**                                                                                                                  // 5348
   * @ngdoc service                                                                                                    // 5349
   * @name $cacheFactory                                                                                               // 5350
   *                                                                                                                   // 5351
   * @description                                                                                                      // 5352
   * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                             // 5353
   * them.                                                                                                             // 5354
   *                                                                                                                   // 5355
   * ```js                                                                                                             // 5356
   *                                                                                                                   // 5357
   *  var cache = $cacheFactory('cacheId');                                                                            // 5358
   *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                // 5359
   *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                    // 5360
   *                                                                                                                   // 5361
   *  cache.put("key", "value");                                                                                       // 5362
   *  cache.put("another key", "another value");                                                                       // 5363
   *                                                                                                                   // 5364
   *  // We've specified no options on creation                                                                        // 5365
   *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                          // 5366
   *                                                                                                                   // 5367
   * ```                                                                                                               // 5368
   *                                                                                                                   // 5369
   *                                                                                                                   // 5370
   * @param {string} cacheId Name or id of the newly created cache.                                                    // 5371
   * @param {object=} options Options object that specifies the cache behavior. Properties:                            // 5372
   *                                                                                                                   // 5373
   *   - `{number=}` `capacity` ג€” turns the cache into LRU cache.                                                    // 5374
   *                                                                                                                   // 5375
   * @returns {object} Newly created cache object with the following set of methods:                                   // 5376
   *                                                                                                                   // 5377
   * - `{object}` `info()` ג€” Returns id, size, and options of cache.                                                 // 5378
   * - `{{*}}` `put({string} key, {*} value)` ג€” Puts a new key-value pair into the cache and returns                 // 5379
   *   it.                                                                                                             // 5380
   * - `{{*}}` `get({string} key)` ג€” Returns cached value for `key` or undefined for cache miss.                     // 5381
   * - `{void}` `remove({string} key)` ג€” Removes a key-value pair from the cache.                                    // 5382
   * - `{void}` `removeAll()` ג€” Removes all cached values.                                                           // 5383
   * - `{void}` `destroy()` ג€” Removes references to this cache from $cacheFactory.                                   // 5384
   *                                                                                                                   // 5385
   * @example                                                                                                          // 5386
   <example module="cacheExampleApp">                                                                                  // 5387
   <file name="index.html">                                                                                            // 5388
   <div ng-controller="CacheController">                                                                               // 5389
   <input ng-model="newCacheKey" placeholder="Key">                                                                    // 5390
   <input ng-model="newCacheValue" placeholder="Value">                                                                // 5391
   <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>                                                   // 5392
                                                                                                                       // 5393
   <p ng-if="keys.length">Cached Values</p>                                                                            // 5394
   <div ng-repeat="key in keys">                                                                                       // 5395
   <span ng-bind="key"></span>                                                                                         // 5396
   <span>: </span>                                                                                                     // 5397
   <b ng-bind="cache.get(key)"></b>                                                                                    // 5398
   </div>                                                                                                              // 5399
                                                                                                                       // 5400
   <p>Cache Info</p>                                                                                                   // 5401
   <div ng-repeat="(key, value) in cache.info()">                                                                      // 5402
   <span ng-bind="key"></span>                                                                                         // 5403
   <span>: </span>                                                                                                     // 5404
   <b ng-bind="value"></b>                                                                                             // 5405
   </div>                                                                                                              // 5406
   </div>                                                                                                              // 5407
   </file>                                                                                                             // 5408
   <file name="script.js">                                                                                             // 5409
   angular.module('cacheExampleApp', []).                                                                              // 5410
   controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                         // 5411
           $scope.keys = [];                                                                                           // 5412
           $scope.cache = $cacheFactory('cacheId');                                                                    // 5413
           $scope.put = function(key, value) {                                                                         // 5414
             if ($scope.cache.get(key) === undefined) {                                                                // 5415
               $scope.keys.push(key);                                                                                  // 5416
             }                                                                                                         // 5417
             $scope.cache.put(key, value === undefined ? null : value);                                                // 5418
           };                                                                                                          // 5419
         }]);                                                                                                          // 5420
   </file>                                                                                                             // 5421
   <file name="style.css">                                                                                             // 5422
   p {                                                                                                                 // 5423
         margin: 10px 0 3px;                                                                                           // 5424
       }                                                                                                               // 5425
   </file>                                                                                                             // 5426
   </example>                                                                                                          // 5427
   */                                                                                                                  // 5428
  function $CacheFactoryProvider() {                                                                                   // 5429
                                                                                                                       // 5430
    this.$get = function() {                                                                                           // 5431
      var caches = {};                                                                                                 // 5432
                                                                                                                       // 5433
      function cacheFactory(cacheId, options) {                                                                        // 5434
        if (cacheId in caches) {                                                                                       // 5435
          throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);                            // 5436
        }                                                                                                              // 5437
                                                                                                                       // 5438
        var size = 0,                                                                                                  // 5439
          stats = extend({}, options, {id: cacheId}),                                                                  // 5440
          data = {},                                                                                                   // 5441
          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5442
          lruHash = {},                                                                                                // 5443
          freshEnd = null,                                                                                             // 5444
          staleEnd = null;                                                                                             // 5445
                                                                                                                       // 5446
        /**                                                                                                            // 5447
         * @ngdoc type                                                                                                 // 5448
         * @name $cacheFactory.Cache                                                                                   // 5449
         *                                                                                                             // 5450
         * @description                                                                                                // 5451
         * A cache object used to store and retrieve data, primarily used by                                           // 5452
         * {@link $http $http} and the {@link ng.directive:script script} directive to cache                           // 5453
         * templates and other data.                                                                                   // 5454
         *                                                                                                             // 5455
         * ```js                                                                                                       // 5456
         *  angular.module('superCache')                                                                               // 5457
         *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                       // 5458
       *      return $cacheFactory('super-cache');                                                                     // 5459
       *    }]);                                                                                                       // 5460
         * ```                                                                                                         // 5461
         *                                                                                                             // 5462
         * Example test:                                                                                               // 5463
         *                                                                                                             // 5464
         * ```js                                                                                                       // 5465
         *  it('should behave like a cache', inject(function(superCache) {                                             // 5466
       *    superCache.put('key', 'value');                                                                            // 5467
       *    superCache.put('another key', 'another value');                                                            // 5468
       *                                                                                                               // 5469
       *    expect(superCache.info()).toEqual({                                                                        // 5470
       *      id: 'super-cache',                                                                                       // 5471
       *      size: 2                                                                                                  // 5472
       *    });                                                                                                        // 5473
       *                                                                                                               // 5474
       *    superCache.remove('another key');                                                                          // 5475
       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5476
       *                                                                                                               // 5477
       *    superCache.removeAll();                                                                                    // 5478
       *    expect(superCache.info()).toEqual({                                                                        // 5479
       *      id: 'super-cache',                                                                                       // 5480
       *      size: 0                                                                                                  // 5481
       *    });                                                                                                        // 5482
       *  }));                                                                                                         // 5483
         * ```                                                                                                         // 5484
         */                                                                                                            // 5485
        return caches[cacheId] = {                                                                                     // 5486
                                                                                                                       // 5487
          /**                                                                                                          // 5488
           * @ngdoc method                                                                                             // 5489
           * @name $cacheFactory.Cache#put                                                                             // 5490
           * @kind function                                                                                            // 5491
           *                                                                                                           // 5492
           * @description                                                                                              // 5493
           * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                             // 5494
           * retrieved later, and incrementing the size of the cache if the key was not already                        // 5495
           * present in the cache. If behaving like an LRU cache, it will also remove stale                            // 5496
           * entries from the set.                                                                                     // 5497
           *                                                                                                           // 5498
           * It will not insert undefined values into the cache.                                                       // 5499
           *                                                                                                           // 5500
           * @param {string} key the key under which the cached data is stored.                                        // 5501
           * @param {*} value the value to store alongside the key. If it is undefined, the key                        // 5502
           *    will not be stored.                                                                                    // 5503
           * @returns {*} the value stored.                                                                            // 5504
           */                                                                                                          // 5505
          put: function(key, value) {                                                                                  // 5506
            if (capacity < Number.MAX_VALUE) {                                                                         // 5507
              var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                              // 5508
                                                                                                                       // 5509
              refresh(lruEntry);                                                                                       // 5510
            }                                                                                                          // 5511
                                                                                                                       // 5512
            if (isUndefined(value)) return;                                                                            // 5513
            if (!(key in data)) size++;                                                                                // 5514
            data[key] = value;                                                                                         // 5515
                                                                                                                       // 5516
            if (size > capacity) {                                                                                     // 5517
              this.remove(staleEnd.key);                                                                               // 5518
            }                                                                                                          // 5519
                                                                                                                       // 5520
            return value;                                                                                              // 5521
          },                                                                                                           // 5522
                                                                                                                       // 5523
          /**                                                                                                          // 5524
           * @ngdoc method                                                                                             // 5525
           * @name $cacheFactory.Cache#get                                                                             // 5526
           * @kind function                                                                                            // 5527
           *                                                                                                           // 5528
           * @description                                                                                              // 5529
           * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                              // 5530
           *                                                                                                           // 5531
           * @param {string} key the key of the data to be retrieved                                                   // 5532
           * @returns {*} the value stored.                                                                            // 5533
           */                                                                                                          // 5534
          get: function(key) {                                                                                         // 5535
            if (capacity < Number.MAX_VALUE) {                                                                         // 5536
              var lruEntry = lruHash[key];                                                                             // 5537
                                                                                                                       // 5538
              if (!lruEntry) return;                                                                                   // 5539
                                                                                                                       // 5540
              refresh(lruEntry);                                                                                       // 5541
            }                                                                                                          // 5542
                                                                                                                       // 5543
            return data[key];                                                                                          // 5544
          },                                                                                                           // 5545
                                                                                                                       // 5546
                                                                                                                       // 5547
          /**                                                                                                          // 5548
           * @ngdoc method                                                                                             // 5549
           * @name $cacheFactory.Cache#remove                                                                          // 5550
           * @kind function                                                                                            // 5551
           *                                                                                                           // 5552
           * @description                                                                                              // 5553
           * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                       // 5554
           *                                                                                                           // 5555
           * @param {string} key the key of the entry to be removed                                                    // 5556
           */                                                                                                          // 5557
          remove: function(key) {                                                                                      // 5558
            if (capacity < Number.MAX_VALUE) {                                                                         // 5559
              var lruEntry = lruHash[key];                                                                             // 5560
                                                                                                                       // 5561
              if (!lruEntry) return;                                                                                   // 5562
                                                                                                                       // 5563
              if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                         // 5564
              if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                         // 5565
              link(lruEntry.n,lruEntry.p);                                                                             // 5566
                                                                                                                       // 5567
              delete lruHash[key];                                                                                     // 5568
            }                                                                                                          // 5569
                                                                                                                       // 5570
            delete data[key];                                                                                          // 5571
            size--;                                                                                                    // 5572
          },                                                                                                           // 5573
                                                                                                                       // 5574
                                                                                                                       // 5575
          /**                                                                                                          // 5576
           * @ngdoc method                                                                                             // 5577
           * @name $cacheFactory.Cache#removeAll                                                                       // 5578
           * @kind function                                                                                            // 5579
           *                                                                                                           // 5580
           * @description                                                                                              // 5581
           * Clears the cache object of any entries.                                                                   // 5582
           */                                                                                                          // 5583
          removeAll: function() {                                                                                      // 5584
            data = {};                                                                                                 // 5585
            size = 0;                                                                                                  // 5586
            lruHash = {};                                                                                              // 5587
            freshEnd = staleEnd = null;                                                                                // 5588
          },                                                                                                           // 5589
                                                                                                                       // 5590
                                                                                                                       // 5591
          /**                                                                                                          // 5592
           * @ngdoc method                                                                                             // 5593
           * @name $cacheFactory.Cache#destroy                                                                         // 5594
           * @kind function                                                                                            // 5595
           *                                                                                                           // 5596
           * @description                                                                                              // 5597
           * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                           // 5598
           * removing it from the {@link $cacheFactory $cacheFactory} set.                                             // 5599
           */                                                                                                          // 5600
          destroy: function() {                                                                                        // 5601
            data = null;                                                                                               // 5602
            stats = null;                                                                                              // 5603
            lruHash = null;                                                                                            // 5604
            delete caches[cacheId];                                                                                    // 5605
          },                                                                                                           // 5606
                                                                                                                       // 5607
                                                                                                                       // 5608
          /**                                                                                                          // 5609
           * @ngdoc method                                                                                             // 5610
           * @name $cacheFactory.Cache#info                                                                            // 5611
           * @kind function                                                                                            // 5612
           *                                                                                                           // 5613
           * @description                                                                                              // 5614
           * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                            // 5615
           *                                                                                                           // 5616
           * @returns {object} an object with the following properties:                                                // 5617
           *   <ul>                                                                                                    // 5618
           *     <li>**id**: the id of the cache instance</li>                                                         // 5619
           *     <li>**size**: the number of entries kept in the cache instance</li>                                   // 5620
           *     <li>**...**: any additional properties from the options object when creating the                      // 5621
           *       cache.</li>                                                                                         // 5622
           *   </ul>                                                                                                   // 5623
           */                                                                                                          // 5624
          info: function() {                                                                                           // 5625
            return extend({}, stats, {size: size});                                                                    // 5626
          }                                                                                                            // 5627
        };                                                                                                             // 5628
                                                                                                                       // 5629
                                                                                                                       // 5630
        /**                                                                                                            // 5631
         * makes the `entry` the freshEnd of the LRU linked list                                                       // 5632
         */                                                                                                            // 5633
        function refresh(entry) {                                                                                      // 5634
          if (entry != freshEnd) {                                                                                     // 5635
            if (!staleEnd) {                                                                                           // 5636
              staleEnd = entry;                                                                                        // 5637
            } else if (staleEnd == entry) {                                                                            // 5638
              staleEnd = entry.n;                                                                                      // 5639
            }                                                                                                          // 5640
                                                                                                                       // 5641
            link(entry.n, entry.p);                                                                                    // 5642
            link(entry, freshEnd);                                                                                     // 5643
            freshEnd = entry;                                                                                          // 5644
            freshEnd.n = null;                                                                                         // 5645
          }                                                                                                            // 5646
        }                                                                                                              // 5647
                                                                                                                       // 5648
                                                                                                                       // 5649
        /**                                                                                                            // 5650
         * bidirectionally links two entries of the LRU linked list                                                    // 5651
         */                                                                                                            // 5652
        function link(nextEntry, prevEntry) {                                                                          // 5653
          if (nextEntry != prevEntry) {                                                                                // 5654
            if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                      // 5655
            if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                          // 5656
          }                                                                                                            // 5657
        }                                                                                                              // 5658
      }                                                                                                                // 5659
                                                                                                                       // 5660
                                                                                                                       // 5661
      /**                                                                                                              // 5662
       * @ngdoc method                                                                                                 // 5663
       * @name $cacheFactory#info                                                                                      // 5664
       *                                                                                                               // 5665
       * @description                                                                                                  // 5666
       * Get information about all the caches that have been created                                                   // 5667
       *                                                                                                               // 5668
       * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                          // 5669
       */                                                                                                              // 5670
      cacheFactory.info = function() {                                                                                 // 5671
        var info = {};                                                                                                 // 5672
        forEach(caches, function(cache, cacheId) {                                                                     // 5673
          info[cacheId] = cache.info();                                                                                // 5674
        });                                                                                                            // 5675
        return info;                                                                                                   // 5676
      };                                                                                                               // 5677
                                                                                                                       // 5678
                                                                                                                       // 5679
      /**                                                                                                              // 5680
       * @ngdoc method                                                                                                 // 5681
       * @name $cacheFactory#get                                                                                       // 5682
       *                                                                                                               // 5683
       * @description                                                                                                  // 5684
       * Get access to a cache object by the `cacheId` used when it was created.                                       // 5685
       *                                                                                                               // 5686
       * @param {string} cacheId Name or id of a cache to access.                                                      // 5687
       * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                       // 5688
       */                                                                                                              // 5689
      cacheFactory.get = function(cacheId) {                                                                           // 5690
        return caches[cacheId];                                                                                        // 5691
      };                                                                                                               // 5692
                                                                                                                       // 5693
                                                                                                                       // 5694
      return cacheFactory;                                                                                             // 5695
    };                                                                                                                 // 5696
  }                                                                                                                    // 5697
                                                                                                                       // 5698
  /**                                                                                                                  // 5699
   * @ngdoc service                                                                                                    // 5700
   * @name $templateCache                                                                                              // 5701
   *                                                                                                                   // 5702
   * @description                                                                                                      // 5703
   * The first time a template is used, it is loaded in the template cache for quick retrieval. You                    // 5704
   * can load templates directly into the cache in a `script` tag, or by consuming the                                 // 5705
   * `$templateCache` service directly.                                                                                // 5706
   *                                                                                                                   // 5707
   * Adding via the `script` tag:                                                                                      // 5708
   *                                                                                                                   // 5709
   * ```html                                                                                                           // 5710
   *   <script type="text/ng-template" id="templateId.html">                                                           // 5711
   *     <p>This is the content of the template</p>                                                                    // 5712
   *   </script>                                                                                                       // 5713
   * ```                                                                                                               // 5714
   *                                                                                                                   // 5715
   * **Note:** the `script` tag containing the template does not need to be included in the `head` of                  // 5716
   * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                        // 5717
   * element with ng-app attribute), otherwise the template will be ignored.                                           // 5718
   *                                                                                                                   // 5719
   * Adding via the `$templateCache` service:                                                                          // 5720
   *                                                                                                                   // 5721
   * ```js                                                                                                             // 5722
   * var myApp = angular.module('myApp', []);                                                                          // 5723
   * myApp.run(function($templateCache) {                                                                              // 5724
 *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 5725
 * });                                                                                                                 // 5726
   * ```                                                                                                               // 5727
   *                                                                                                                   // 5728
   * To retrieve the template later, simply use it in your HTML:                                                       // 5729
   * ```html                                                                                                           // 5730
   * <div ng-include=" 'templateId.html' "></div>                                                                      // 5731
   * ```                                                                                                               // 5732
   *                                                                                                                   // 5733
   * or get it via Javascript:                                                                                         // 5734
   * ```js                                                                                                             // 5735
   * $templateCache.get('templateId.html')                                                                             // 5736
   * ```                                                                                                               // 5737
   *                                                                                                                   // 5738
   * See {@link ng.$cacheFactory $cacheFactory}.                                                                       // 5739
   *                                                                                                                   // 5740
   */                                                                                                                  // 5741
  function $TemplateCacheProvider() {                                                                                  // 5742
    this.$get = ['$cacheFactory', function($cacheFactory) {                                                            // 5743
      return $cacheFactory('templates');                                                                               // 5744
    }];                                                                                                                // 5745
  }                                                                                                                    // 5746
                                                                                                                       // 5747
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                         // 5748
   *     Any commits to this file should be reviewed with security in mind.  *                                         // 5749
   *   Changes to this file can potentially create security vulnerabilities. *                                         // 5750
   *          An approval from 2 Core members with history of modifying      *                                         // 5751
   *                         this file is required.                          *                                         // 5752
   *                                                                         *                                         // 5753
   *  Does the change somehow allow for arbitrary javascript to be executed? *                                         // 5754
   *    Or allows for someone to change the prototype of built-in objects?   *                                         // 5755
   *     Or gives undesired access to variables likes document or window?    *                                         // 5756
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                        // 5757
                                                                                                                       // 5758
  /* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                   // 5759
   *                                                                                                                   // 5760
   * DOM-related variables:                                                                                            // 5761
   *                                                                                                                   // 5762
   * - "node" - DOM Node                                                                                               // 5763
   * - "element" - DOM Element or Node                                                                                 // 5764
   * - "$node" or "$element" - jqLite-wrapped node or element                                                          // 5765
   *                                                                                                                   // 5766
   *                                                                                                                   // 5767
   * Compiler related stuff:                                                                                           // 5768
   *                                                                                                                   // 5769
   * - "linkFn" - linking fn of a single directive                                                                     // 5770
   * - "nodeLinkFn" - function that aggregates all linking fns for a particular node                                   // 5771
   * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node                  // 5772
   * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)                  // 5773
   */                                                                                                                  // 5774
                                                                                                                       // 5775
                                                                                                                       // 5776
  /**                                                                                                                  // 5777
   * @ngdoc service                                                                                                    // 5778
   * @name $compile                                                                                                    // 5779
   * @kind function                                                                                                    // 5780
   *                                                                                                                   // 5781
   * @description                                                                                                      // 5782
   * Compiles an HTML string or DOM into a template and produces a template function, which                            // 5783
   * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                           // 5784
   *                                                                                                                   // 5785
   * The compilation is a process of walking the DOM tree and matching DOM elements to                                 // 5786
   * {@link ng.$compileProvider#directive directives}.                                                                 // 5787
   *                                                                                                                   // 5788
   * <div class="alert alert-warning">                                                                                 // 5789
   * **Note:** This document is an in-depth reference of all directive options.                                        // 5790
   * For a gentle introduction to directives with examples of common use cases,                                        // 5791
   * see the {@link guide/directive directive guide}.                                                                  // 5792
   * </div>                                                                                                            // 5793
   *                                                                                                                   // 5794
   * ## Comprehensive Directive API                                                                                    // 5795
   *                                                                                                                   // 5796
   * There are many different options for a directive.                                                                 // 5797
   *                                                                                                                   // 5798
   * The difference resides in the return value of the factory function.                                               // 5799
   * You can either return a "Directive Definition Object" (see below) that defines the directive properties,          // 5800
   * or just the `postLink` function (all other properties will have the default values).                              // 5801
   *                                                                                                                   // 5802
   * <div class="alert alert-success">                                                                                 // 5803
   * **Best Practice:** It's recommended to use the "directive definition object" form.                                // 5804
   * </div>                                                                                                            // 5805
   *                                                                                                                   // 5806
   * Here's an example directive declared with a Directive Definition Object:                                          // 5807
   *                                                                                                                   // 5808
   * ```js                                                                                                             // 5809
   *   var myModule = angular.module(...);                                                                             // 5810
   *                                                                                                                   // 5811
   *   myModule.directive('directiveName', function factory(injectables) {                                             // 5812
 *     var directiveDefinitionObject = {                                                                               // 5813
 *       priority: 0,                                                                                                  // 5814
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 5815
 *       // or                                                                                                         // 5816
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 5817
 *       transclude: false,                                                                                            // 5818
 *       restrict: 'A',                                                                                                // 5819
 *       templateNamespace: 'html',                                                                                    // 5820
 *       scope: false,                                                                                                 // 5821
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 5822
 *       controllerAs: 'stringAlias',                                                                                  // 5823
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 5825
 *         return {                                                                                                    // 5826
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 5827
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 5828
 *         }                                                                                                           // 5829
 *         // or                                                                                                       // 5830
 *         // return function postLink( ... ) { ... }                                                                  // 5831
 *       },                                                                                                            // 5832
 *       // or                                                                                                         // 5833
 *       // link: {                                                                                                    // 5834
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 5835
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 5836
 *       // }                                                                                                          // 5837
 *       // or                                                                                                         // 5838
 *       // link: function postLink( ... ) { ... }                                                                     // 5839
 *     };                                                                                                              // 5840
 *     return directiveDefinitionObject;                                                                               // 5841
 *   });                                                                                                               // 5842
   * ```                                                                                                               // 5843
   *                                                                                                                   // 5844
   * <div class="alert alert-warning">                                                                                 // 5845
   * **Note:** Any unspecified options will use the default value. You can see the default values below.               // 5846
   * </div>                                                                                                            // 5847
   *                                                                                                                   // 5848
   * Therefore the above can be simplified as:                                                                         // 5849
   *                                                                                                                   // 5850
   * ```js                                                                                                             // 5851
   *   var myModule = angular.module(...);                                                                             // 5852
   *                                                                                                                   // 5853
   *   myModule.directive('directiveName', function factory(injectables) {                                             // 5854
 *     var directiveDefinitionObject = {                                                                               // 5855
 *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 5856
 *     };                                                                                                              // 5857
 *     return directiveDefinitionObject;                                                                               // 5858
 *     // or                                                                                                           // 5859
 *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 5860
 *   });                                                                                                               // 5861
   * ```                                                                                                               // 5862
   *                                                                                                                   // 5863
   *                                                                                                                   // 5864
   *                                                                                                                   // 5865
   * ### Directive Definition Object                                                                                   // 5866
   *                                                                                                                   // 5867
   * The directive definition object provides instructions to the {@link ng.$compile                                   // 5868
 * compiler}. The attributes are:                                                                                      // 5869
   *                                                                                                                   // 5870
   * #### `multiElement`                                                                                               // 5871
   * When this property is set to true, the HTML compiler will collect DOM nodes between                               // 5872
   * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                         // 5873
   * together as the directive elements. It is recommended that this feature be used on directives                     // 5874
   * which are not strictly behavioural (such as {@link ngClick}), and which                                           // 5875
   * do not manipulate or replace child nodes (such as {@link ngInclude}).                                             // 5876
   *                                                                                                                   // 5877
   * #### `priority`                                                                                                   // 5878
   * When there are multiple directives defined on a single DOM element, sometimes it                                  // 5879
   * is necessary to specify the order in which the directives are applied. The `priority` is used                     // 5880
   * to sort the directives before their `compile` functions get called. Priority is defined as a                      // 5881
   * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                       // 5882
   * are also run in priority order, but post-link functions are run in reverse order. The order                       // 5883
   * of directives with the same priority is undefined. The default priority is `0`.                                   // 5884
   *                                                                                                                   // 5885
   * #### `terminal`                                                                                                   // 5886
   * If set to true then the current `priority` will be the last set of directives                                     // 5887
   * which will execute (any directives at the current priority will still execute                                     // 5888
   * as the order of execution on same `priority` is undefined). Note that expressions                                 // 5889
   * and other directives used in the directive's template will also be excluded from execution.                       // 5890
   *                                                                                                                   // 5891
   * #### `scope`                                                                                                      // 5892
   * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the          // 5893
   * same element request a new scope, only one new scope is created. The new scope rule does not                      // 5894
   * apply for the root of the template since the root of the template always gets a new scope.                        // 5895
   *                                                                                                                   // 5896
   * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from         // 5897
   * normal scope in that it does not prototypically inherit from the parent scope. This is useful                     // 5898
   * when creating reusable components, which should not accidentally read or modify data in the                       // 5899
   * parent scope.                                                                                                     // 5900
   *                                                                                                                   // 5901
   * The 'isolate' scope takes an object hash which defines a set of local scope properties                            // 5902
   * derived from the parent scope. These local properties are useful for aliasing values for                          // 5903
   * templates. Locals definition is a hash of local scope property to its source:                                     // 5904
   *                                                                                                                   // 5905
   * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                       // 5906
   *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                      // 5907
   *   attribute name is assumed to be the same as the local name.                                                     // 5908
   *   Given `<widget my-attr="hello {{name}}">` and widget definition                                                 // 5909
   *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                        // 5910
   *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                         // 5911
   *   `localName` property on the widget scope. The `name` is read from the parent scope (not                         // 5912
   *   component scope).                                                                                               // 5913
   *                                                                                                                   // 5914
   * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                           // 5915
   *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                       // 5916
   *   name is specified then the attribute name is assumed to be the same as the local name.                          // 5917
   *   Given `<widget my-attr="parentModel">` and widget definition of                                                 // 5918
   *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                     // 5919
   *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                      // 5920
   *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                    // 5921
   *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                    // 5922
   *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                    // 5923
   *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                     // 5924
   *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                              // 5925
   *                                                                                                                   // 5926
   * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                    // 5927
   *   If no `attr` name is specified then the attribute name is assumed to be the same as the                         // 5928
   *   local name. Given `<widget my-attr="count = count + value">` and widget definition of                           // 5929
   *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                             // 5930
   *   a function wrapper for the `count = count + value` expression. Often it's desirable to                          // 5931
   *   pass data from the isolated scope via an expression to the parent scope, this can be                            // 5932
   *   done by passing a map of local variable names and values into the expression wrapper fn.                        // 5933
   *   For example, if the expression is `increment(amount)` then we can specify the amount value                      // 5934
   *   by calling the `localFn` as `localFn({amount: 22})`.                                                            // 5935
   *                                                                                                                   // 5936
   *                                                                                                                   // 5937
   * #### `bindToController`                                                                                           // 5938
   * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
   * allow a component to have its properties bound to the controller, rather than to scope. When the controller       // 5940
   * is instantiated, the initial values of the isolate scope bindings are already available.                          // 5941
   *                                                                                                                   // 5942
   * #### `controller`                                                                                                 // 5943
   * Controller constructor function. The controller is instantiated before the                                        // 5944
   * pre-linking phase and it is shared with other directives (see                                                     // 5945
   * `require` attribute). This allows the directives to communicate with each other and augment                       // 5946
   * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:    // 5947
   *                                                                                                                   // 5948
   * * `$scope` - Current scope associated with the element                                                            // 5949
   * * `$element` - Current element                                                                                    // 5950
   * * `$attrs` - Current attributes object for the element                                                            // 5951
   * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                      // 5952
   *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 5953
   *    * `scope`: optional argument to override the scope.                                                            // 5954
   *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                    // 5955
   *    * `futureParentElement`:                                                                                       // 5956
   *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                           // 5957
   *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.        // 5958
   *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)            // 5959
   *          and when the `cloneLinkinFn` is passed,                                                                  // 5960
   *          as those elements need to created and cloned in a special way when they are defined outside their        // 5961
   *          usual containers (e.g. like `<svg>`).                                                                    // 5962
   *        * See also the `directive.templateNamespace` property.                                                     // 5963
   *                                                                                                                   // 5964
   *                                                                                                                   // 5965
   * #### `require`                                                                                                    // 5966
   * Require another directive and inject its controller as the fourth argument to the linking function. The           // 5967
   * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the      // 5968
   * injected argument will be an array in corresponding order. If no such directive can be                            // 5969
   * found, or if the directive does not have a controller, then an error is raised (unless no link function           // 5970
   * is specified, in which case error checking is skipped). The name can be prefixed with:                            // 5971
   *                                                                                                                   // 5972
   * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.               // 5973
   * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                   // 5974
   * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.     // 5975
   * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.          // 5976
   * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass               // 5977
   *   `null` to the `link` fn if not found.                                                                           // 5978
   * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                   // 5979
   *   `null` to the `link` fn if not found.                                                                           // 5980
   *                                                                                                                   // 5981
   *                                                                                                                   // 5982
   * #### `controllerAs`                                                                                               // 5983
   * Controller alias at the directive scope. An alias for the controller so it                                        // 5984
   * can be referenced at the directive template. The directive needs to define a scope for this                       // 5985
   * configuration to be used. Useful in the case when directive is used as component.                                 // 5986
   *                                                                                                                   // 5987
   *                                                                                                                   // 5988
   * #### `restrict`                                                                                                   // 5989
   * String of subset of `EACM` which restricts the directive to a specific directive                                  // 5990
   * declaration style. If omitted, the defaults (elements and attributes) are used.                                   // 5991
   *                                                                                                                   // 5992
   * * `E` - Element name (default): `<my-directive></my-directive>`                                                   // 5993
   * * `A` - Attribute (default): `<div my-directive="exp"></div>`                                                     // 5994
   * * `C` - Class: `<div class="my-directive: exp;"></div>`                                                           // 5995
   * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                           // 5996
   *                                                                                                                   // 5997
   *                                                                                                                   // 5998
   * #### `templateNamespace`                                                                                          // 5999
   * String representing the document type used by the markup in the template.                                         // 6000
   * AngularJS needs this information as those elements need to be created and cloned                                  // 6001
   * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                  // 6002
   *                                                                                                                   // 6003
   * * `html` - All root nodes in the template are HTML. Root nodes may also be                                        // 6004
   *   top-level elements such as `<svg>` or `<math>`.                                                                 // 6005
   * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                   // 6006
   * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                // 6007
   *                                                                                                                   // 6008
   * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                            // 6009
   *                                                                                                                   // 6010
   * #### `template`                                                                                                   // 6011
   * HTML markup that may:                                                                                             // 6012
   * * Replace the contents of the directive's element (default).                                                      // 6013
   * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                     // 6014
   * * Wrap the contents of the directive's element (if `transclude` is true).                                         // 6015
   *                                                                                                                   // 6016
   * Value may be:                                                                                                     // 6017
   *                                                                                                                   // 6018
   * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                 // 6019
   * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                        // 6020
   *   function api below) and returns a string value.                                                                 // 6021
   *                                                                                                                   // 6022
   *                                                                                                                   // 6023
   * #### `templateUrl`                                                                                                // 6024
   * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                  // 6025
   *                                                                                                                   // 6026
   * Because template loading is asynchronous the compiler will suspend compilation of directives on that element      // 6027
   * for later when the template has been resolved.  In the meantime it will continue to compile and link              // 6028
   * sibling and parent elements as though this element had not contained any directives.                              // 6029
   *                                                                                                                   // 6030
   * The compiler does not suspend the entire compilation to wait for templates to be loaded because this              // 6031
   * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the              // 6032
   * case when only one deeply nested directive has `templateUrl`.                                                     // 6033
   *                                                                                                                   // 6034
   * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}          // 6035
   *                                                                                                                   // 6036
   * You can specify `templateUrl` as a string representing the URL or as a function which takes two                   // 6037
   * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                     // 6038
   * a string value representing the url.  In either case, the template URL is passed through {@link                   // 6039
    * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                          // 6040
   *                                                                                                                   // 6041
   *                                                                                                                   // 6042
   * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                               // 6043
   * specify what the template should replace. Defaults to `false`.                                                    // 6044
   *                                                                                                                   // 6045
   * * `true` - the template will replace the directive's element.                                                     // 6046
   * * `false` - the template will replace the contents of the directive's element.                                    // 6047
   *                                                                                                                   // 6048
   * The replacement process migrates all of the attributes / classes from the old element to the new                  // 6049
   * one. See the {@link guide/directive#template-expanding-directive                                                  // 6050
 * Directives Guide} for an example.                                                                                   // 6051
   *                                                                                                                   // 6052
   * There are very few scenarios where element replacement is required for the application function,                  // 6053
   * the main one being reusable custom components that are used within SVG contexts                                   // 6054
   * (because SVG doesn't work with custom elements in the DOM tree).                                                  // 6055
   *                                                                                                                   // 6056
   * #### `transclude`                                                                                                 // 6057
   * Extract the contents of the element where the directive appears and make it available to the directive.           // 6058
   * The contents are compiled and provided to the directive as a **transclusion function**. See the                   // 6059
   * {@link $compile#transclusion Transclusion} section below.                                                         // 6060
   *                                                                                                                   // 6061
   * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the        // 6062
   * directive's element or the entire element:                                                                        // 6063
   *                                                                                                                   // 6064
   * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                              // 6065
   * * `'element'` - transclude the whole of the directive's element including any directives on this                  // 6066
   *   element that defined at a lower priority than this directive. When used, the `template`                         // 6067
   *   property is ignored.                                                                                            // 6068
   *                                                                                                                   // 6069
   *                                                                                                                   // 6070
   * #### `compile`                                                                                                    // 6071
   *                                                                                                                   // 6072
   * ```js                                                                                                             // 6073
   *   function compile(tElement, tAttrs, transclude) { ... }                                                          // 6074
   * ```                                                                                                               // 6075
   *                                                                                                                   // 6076
   * The compile function deals with transforming the template DOM. Since most directives do not do                    // 6077
   * template transformation, it is not used often. The compile function takes the following arguments:                // 6078
   *                                                                                                                   // 6079
   *   * `tElement` - template element - The element where the directive has been declared. It is                      // 6080
   *     safe to do template transformation on the element and child elements only.                                    // 6081
   *                                                                                                                   // 6082
   *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                // 6083
   *     between all directive compile functions.                                                                      // 6084
   *                                                                                                                   // 6085
   *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`              // 6086
   *                                                                                                                   // 6087
   * <div class="alert alert-warning">                                                                                 // 6088
   * **Note:** The template instance and the link instance may be different objects if the template has                // 6089
   * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                // 6090
   * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                // 6091
   * should be done in a linking function rather than in a compile function.                                           // 6092
   * </div>                                                                                                            // 6093
                                                                                                                       // 6094
   * <div class="alert alert-warning">                                                                                 // 6095
   * **Note:** The compile function cannot handle directives that recursively use themselves in their                  // 6096
   * own templates or compile functions. Compiling these directives results in an infinite loop and a                  // 6097
   * stack overflow errors.                                                                                            // 6098
   *                                                                                                                   // 6099
   * This can be avoided by manually using $compile in the postLink function to imperatively compile                   // 6100
   * a directive's template instead of relying on automatic template compilation via `template` or                     // 6101
   * `templateUrl` declaration or manual compilation inside the compile function.                                      // 6102
   * </div>                                                                                                            // 6103
   *                                                                                                                   // 6104
   * <div class="alert alert-error">                                                                                   // 6105
   * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                   // 6106
   *   e.g. does not know about the right outer scope. Please use the transclude function that is passed               // 6107
   *   to the link function instead.                                                                                   // 6108
   * </div>                                                                                                            // 6109
                                                                                                                       // 6110
   * A compile function can have a return value which can be either a function or an object.                           // 6111
   *                                                                                                                   // 6112
   * * returning a (post-link) function - is equivalent to registering the linking function via the                    // 6113
   *   `link` property of the config object when the compile function is empty.                                        // 6114
   *                                                                                                                   // 6115
   * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                 // 6116
   *   control when a linking function should be called during the linking phase. See info about                       // 6117
   *   pre-linking and post-linking functions below.                                                                   // 6118
   *                                                                                                                   // 6119
   *                                                                                                                   // 6120
   * #### `link`                                                                                                       // 6121
   * This property is used only if the `compile` property is not defined.                                              // 6122
   *                                                                                                                   // 6123
   * ```js                                                                                                             // 6124
   *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                        // 6125
   * ```                                                                                                               // 6126
   *                                                                                                                   // 6127
   * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                 // 6128
   * executed after the template has been cloned. This is where most of the directive logic will be                    // 6129
   * put.                                                                                                              // 6130
   *                                                                                                                   // 6131
   *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                     // 6132
   *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                         // 6133
   *                                                                                                                   // 6134
   *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                  // 6135
   *     manipulate the children of the element only in `postLink` function since the children have                    // 6136
   *     already been linked.                                                                                          // 6137
   *                                                                                                                   // 6138
   *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                // 6139
   *     between all directive linking functions.                                                                      // 6140
   *                                                                                                                   // 6141
   *   * `controller` - a controller instance - A controller instance if at least one directive on the                 // 6142
   *     element defines a controller. The controller is shared among all the directives, which allows                 // 6143
   *     the directives to use the controllers as a communication channel.                                             // 6144
   *                                                                                                                   // 6145
   *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                   // 6146
   *     This is the same as the `$transclude`                                                                         // 6147
   *     parameter of directive controllers, see there for details.                                                    // 6148
   *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                     // 6149
   *                                                                                                                   // 6150
   * #### Pre-linking function                                                                                         // 6151
   *                                                                                                                   // 6152
   * Executed before the child elements are linked. Not safe to do DOM transformation since the                        // 6153
   * compiler linking function will fail to locate the correct elements for linking.                                   // 6154
   *                                                                                                                   // 6155
   * #### Post-linking function                                                                                        // 6156
   *                                                                                                                   // 6157
   * Executed after the child elements are linked.                                                                     // 6158
   *                                                                                                                   // 6159
   * Note that child elements that contain `templateUrl` directives will not have been compiled                        // 6160
   * and linked since they are waiting for their template to load asynchronously and their own                         // 6161
   * compilation and linking has been suspended until that occurs.                                                     // 6162
   *                                                                                                                   // 6163
   * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                 // 6164
   * for their async templates to be resolved.                                                                         // 6165
   *                                                                                                                   // 6166
   *                                                                                                                   // 6167
   * ### Transclusion                                                                                                  // 6168
   *                                                                                                                   // 6169
   * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and                // 6170
   * copying them to another part of the DOM, while maintaining their connection to the original AngularJS             // 6171
   * scope from where they were taken.                                                                                 // 6172
   *                                                                                                                   // 6173
   * Transclusion is used (often with {@link ngTransclude}) to insert the                                              // 6174
   * original contents of a directive's element into a specified place in the template of the directive.               // 6175
   * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                // 6176
   * content has access to the properties on the scope from which it was taken, even if the directive                  // 6177
   * has isolated scope.                                                                                               // 6178
   * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                  // 6179
   *                                                                                                                   // 6180
   * This makes it possible for the widget to have private state for its template, while the transcluded               // 6181
   * content has access to its originating scope.                                                                      // 6182
   *                                                                                                                   // 6183
   * <div class="alert alert-warning">                                                                                 // 6184
   * **Note:** When testing an element transclude directive you must not place the directive at the root of the        // 6185
   * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                // 6186
 * Testing Transclusion Directives}.                                                                                   // 6187
   * </div>                                                                                                            // 6188
   *                                                                                                                   // 6189
   * #### Transclusion Functions                                                                                       // 6190
   *                                                                                                                   // 6191
   * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion          // 6192
   * function** to the directive's `link` function and `controller`. This transclusion function is a special           // 6193
   * **linking function** that will return the compiled contents linked to a new transclusion scope.                   // 6194
   *                                                                                                                   // 6195
   * <div class="alert alert-info">                                                                                    // 6196
   * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                // 6197
   * ngTransclude will deal with it for us.                                                                            // 6198
   * </div>                                                                                                            // 6199
   *                                                                                                                   // 6200
   * If you want to manually control the insertion and removal of the transcluded content in your directive            // 6201
   * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery      // 6202
   * object that contains the compiled DOM, which is linked to the correct transclusion scope.                         // 6203
   *                                                                                                                   // 6204
   * When you call a transclusion function you can pass in a **clone attach function**. This function accepts          // 6205
   * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded  // 6206
   * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                     // 6207
   *                                                                                                                   // 6208
   * <div class="alert alert-info">                                                                                    // 6209
   * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function          // 6210
   * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.          // 6211
   * </div>                                                                                                            // 6212
   *                                                                                                                   // 6213
   * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                 // 6214
   * attach function**:                                                                                                // 6215
   *                                                                                                                   // 6216
   * ```js                                                                                                             // 6217
   * var transcludedContent, transclusionScope;                                                                        // 6218
   *                                                                                                                   // 6219
   * $transclude(function(clone, scope) {                                                                              // 6220
 *   element.append(clone);                                                                                            // 6221
 *   transcludedContent = clone;                                                                                       // 6222
 *   transclusionScope = scope;                                                                                        // 6223
 * });                                                                                                                 // 6224
   * ```                                                                                                               // 6225
   *                                                                                                                   // 6226
   * Later, if you want to remove the transcluded content from your DOM then you should also destroy the               // 6227
   * associated transclusion scope:                                                                                    // 6228
   *                                                                                                                   // 6229
   * ```js                                                                                                             // 6230
   * transcludedContent.remove();                                                                                      // 6231
   * transclusionScope.$destroy();                                                                                     // 6232
   * ```                                                                                                               // 6233
   *                                                                                                                   // 6234
   * <div class="alert alert-info">                                                                                    // 6235
   * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                 // 6236
   * (by calling the transclude function to get the DOM and and calling `element.remove()` to remove it),              // 6237
   * then you are also responsible for calling `$destroy` on the transclusion scope.                                   // 6238
   * </div>                                                                                                            // 6239
   *                                                                                                                   // 6240
   * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}             // 6241
   * automatically destroy their transluded clones as necessary so you do not need to worry about this if              // 6242
   * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                         // 6243
   *                                                                                                                   // 6244
   *                                                                                                                   // 6245
   * #### Transclusion Scopes                                                                                          // 6246
   *                                                                                                                   // 6247
   * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion               // 6248
   * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed             // 6249
   * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it              // 6250
   * was taken.                                                                                                        // 6251
   *                                                                                                                   // 6252
   * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look          // 6253
   * like this:                                                                                                        // 6254
   *                                                                                                                   // 6255
   * ```html                                                                                                           // 6256
   * <div ng-app>                                                                                                      // 6257
   *   <div isolate>                                                                                                   // 6258
   *     <div transclusion>                                                                                            // 6259
   *     </div>                                                                                                        // 6260
   *   </div>                                                                                                          // 6261
   * </div>                                                                                                            // 6262
   * ```                                                                                                               // 6263
   *                                                                                                                   // 6264
   * The `$parent` scope hierarchy will look like this:                                                                // 6265
   *                                                                                                                   // 6266
   * ```                                                                                                               // 6267
   * - $rootScope                                                                                                      // 6268
   *   - isolate                                                                                                       // 6269
   *     - transclusion                                                                                                // 6270
   * ```                                                                                                               // 6271
   *                                                                                                                   // 6272
   * but the scopes will inherit prototypically from different scopes to their `$parent`.                              // 6273
   *                                                                                                                   // 6274
   * ```                                                                                                               // 6275
   * - $rootScope                                                                                                      // 6276
   *   - transclusion                                                                                                  // 6277
   * - isolate                                                                                                         // 6278
   * ```                                                                                                               // 6279
   *                                                                                                                   // 6280
   *                                                                                                                   // 6281
   * ### Attributes                                                                                                    // 6282
   *                                                                                                                   // 6283
   * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                     // 6284
   * `link()` or `compile()` functions. It has a variety of uses.                                                      // 6285
   *                                                                                                                   // 6286
   * accessing *Normalized attribute names:*                                                                           // 6287
   * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                // 6288
   * the attributes object allows for normalized access to                                                             // 6289
   *   the attributes.                                                                                                 // 6290
   *                                                                                                                   // 6291
   * * *Directive inter-communication:* All directives share the same instance of the attributes                       // 6292
   *   object which allows the directives to use the attributes object as inter directive                              // 6293
   *   communication.                                                                                                  // 6294
   *                                                                                                                   // 6295
   * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                         // 6296
   *   allowing other directives to read the interpolated value.                                                       // 6297
   *                                                                                                                   // 6298
   * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                  // 6299
   *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also                // 6300
   *   the only way to easily get the actual value because during the linking phase the interpolation                  // 6301
   *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                  // 6302
   *                                                                                                                   // 6303
   * ```js                                                                                                             // 6304
   * function linkingFn(scope, elm, attrs, ctrl) {                                                                     // 6305
 *   // get the attribute value                                                                                        // 6306
 *   console.log(attrs.ngModel);                                                                                       // 6307
 *                                                                                                                     // 6308
 *   // change the attribute                                                                                           // 6309
 *   attrs.$set('ngModel', 'new value');                                                                               // 6310
 *                                                                                                                     // 6311
 *   // observe changes to interpolated attribute                                                                      // 6312
 *   attrs.$observe('ngModel', function(value) {                                                                       // 6313
 *     console.log('ngModel has changed value to ' + value);                                                           // 6314
 *   });                                                                                                               // 6315
 * }                                                                                                                   // 6316
   * ```                                                                                                               // 6317
   *                                                                                                                   // 6318
   * ## Example                                                                                                        // 6319
   *                                                                                                                   // 6320
   * <div class="alert alert-warning">                                                                                 // 6321
   * **Note**: Typically directives are registered with `module.directive`. The example below is                       // 6322
   * to illustrate how `$compile` works.                                                                               // 6323
   * </div>                                                                                                            // 6324
   *                                                                                                                   // 6325
   <example module="compileExample">                                                                                   // 6326
   <file name="index.html">                                                                                            // 6327
   <script>                                                                                                            // 6328
   angular.module('compileExample', [], function($compileProvider) {                                                   // 6329
        // configure new 'compile' directive by passing a directive                                                    // 6330
        // factory function. The factory function injects the '$compile'                                               // 6331
        $compileProvider.directive('compile', function($compile) {                                                     // 6332
          // directive factory creates a link function                                                                 // 6333
          return function(scope, element, attrs) {                                                                     // 6334
            scope.$watch(                                                                                              // 6335
              function(scope) {                                                                                        // 6336
                 // watch the 'compile' expression for changes                                                         // 6337
                return scope.$eval(attrs.compile);                                                                     // 6338
              },                                                                                                       // 6339
              function(value) {                                                                                        // 6340
                // when the 'compile' expression changes                                                               // 6341
                // assign it into the current DOM                                                                      // 6342
                element.html(value);                                                                                   // 6343
                                                                                                                       // 6344
                // compile the new DOM and link it to the current                                                      // 6345
                // scope.                                                                                              // 6346
                // NOTE: we only compile .childNodes so that                                                           // 6347
                // we don't get into infinite loop compiling ourselves                                                 // 6348
                $compile(element.contents())(scope);                                                                   // 6349
              }                                                                                                        // 6350
            );                                                                                                         // 6351
          };                                                                                                           // 6352
        });                                                                                                            // 6353
      })                                                                                                               // 6354
   .controller('GreeterController', ['$scope', function($scope) {                                                      // 6355
        $scope.name = 'Angular';                                                                                       // 6356
        $scope.html = 'Hello {{name}}';                                                                                // 6357
      }]);                                                                                                             // 6358
   </script>                                                                                                           // 6359
   <div ng-controller="GreeterController">                                                                             // 6360
   <input ng-model="name"> <br>                                                                                        // 6361
   <textarea ng-model="html"></textarea> <br>                                                                          // 6362
   <div compile="html"></div>                                                                                          // 6363
   </div>                                                                                                              // 6364
   </file>                                                                                                             // 6365
   <file name="protractor.js" type="protractor">                                                                       // 6366
   it('should auto compile', function() {                                                                              // 6367
       var textarea = $('textarea');                                                                                   // 6368
       var output = $('div[compile]');                                                                                 // 6369
       // The initial state reads 'Hello Angular'.                                                                     // 6370
       expect(output.getText()).toBe('Hello Angular');                                                                 // 6371
       textarea.clear();                                                                                               // 6372
       textarea.sendKeys('{{name}}!');                                                                                 // 6373
       expect(output.getText()).toBe('Angular!');                                                                      // 6374
     });                                                                                                               // 6375
   </file>                                                                                                             // 6376
   </example>                                                                                                          // 6377
                                                                                                                       // 6378
   *                                                                                                                   // 6379
   *                                                                                                                   // 6380
   * @param {string|DOMElement} element Element or HTML string to compile into a template function.                    // 6381
   * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.        // 6382
   *                                                                                                                   // 6383
   * <div class="alert alert-error">                                                                                   // 6384
   * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                           // 6385
   *   e.g. will not use the right outer scope. Please pass the transclude function as a                               // 6386
   *   `parentBoundTranscludeFn` to the link function instead.                                                         // 6387
   * </div>                                                                                                            // 6388
   *                                                                                                                   // 6389
   * @param {number} maxPriority only apply directives lower than given priority (Only effects the                     // 6390
   *                 root element(s), not their children)                                                              // 6391
   * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template               // 6392
   * (a DOM element/tree) to a scope. Where:                                                                           // 6393
   *                                                                                                                   // 6394
   *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                      // 6395
   *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                        // 6396
   *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                               // 6397
   *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                             // 6398
   *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:                                                     // 6399
   *                                                                                                                   // 6400
   *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                           // 6401
   *      * `scope` - is the current scope with which the linking function is working with.                            // 6402
   *                                                                                                                   // 6403
   *  * `options` - An optional object hash with linking options. If `options` is provided, then the following         // 6404
   *  keys may be used to control linking behavior:                                                                    // 6405
   *                                                                                                                   // 6406
   *      * `parentBoundTranscludeFn` - the transclude function made available to                                      // 6407
   *        directives; if given, it will be passed through to the link functions of                                   // 6408
   *        directives found in `element` during compilation.                                                          // 6409
   *      * `transcludeControllers` - an object hash with keys that map controller names                               // 6410
   *        to controller instances; if given, it will make the controllers                                            // 6411
   *        available to directives.                                                                                   // 6412
   *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                           // 6413
   *        the cloned elements; only needed for transcludes that are allowed to contain non html                      // 6414
   *        elements (e.g. SVG elements). See also the directive.controller property.                                  // 6415
   *                                                                                                                   // 6416
   * Calling the linking function returns the element of the template. It is either the original                       // 6417
   * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                // 6418
   *                                                                                                                   // 6419
   * After linking the view is not updated until after a call to $digest which typically is done by                    // 6420
   * Angular automatically.                                                                                            // 6421
   *                                                                                                                   // 6422
   * If you need access to the bound view, there are two ways to do it:                                                // 6423
   *                                                                                                                   // 6424
   * - If you are not asking the linking function to clone the template, create the DOM element(s)                     // 6425
   *   before you send them to the compiler and keep this reference around.                                            // 6426
   *   ```js                                                                                                           // 6427
   *     var element = $compile('<p>{{total}}</p>')(scope);                                                            // 6428
   *   ```                                                                                                             // 6429
   *                                                                                                                   // 6430
   * - if on the other hand, you need the element to be cloned, the view reference from the original                   // 6431
   *   example would not point to the clone, but rather to the original template that was cloned. In                   // 6432
   *   this case, you can access the clone via the cloneAttachFn:                                                      // 6433
   *   ```js                                                                                                           // 6434
   *     var templateElement = angular.element('<p>{{total}}</p>'),                                                    // 6435
   *         scope = ....;                                                                                             // 6436
   *                                                                                                                   // 6437
   *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                         // 6438
 *       //attach the clone to DOM document at the right place                                                         // 6439
 *     });                                                                                                             // 6440
   *                                                                                                                   // 6441
   *     //now we have reference to the cloned DOM via `clonedElement`                                                 // 6442
   *   ```                                                                                                             // 6443
   *                                                                                                                   // 6444
   *                                                                                                                   // 6445
   * For information on how the compiler works, see the                                                                // 6446
   * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                      // 6447
   */                                                                                                                  // 6448
                                                                                                                       // 6449
  var $compileMinErr = minErr('$compile');                                                                             // 6450
                                                                                                                       // 6451
  /**                                                                                                                  // 6452
   * @ngdoc provider                                                                                                   // 6453
   * @name $compileProvider                                                                                            // 6454
   *                                                                                                                   // 6455
   * @description                                                                                                      // 6456
   */                                                                                                                  // 6457
  $CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                    // 6458
  function $CompileProvider($provide, $$sanitizeUriProvider) {                                                         // 6459
    var hasDirectives = {},                                                                                            // 6460
      Suffix = 'Directive',                                                                                            // 6461
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,                                                // 6462
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,                                                          // 6463
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 6464
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;                                                           // 6465
                                                                                                                       // 6466
    // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                  // 6467
    // The assumption is that future DOM event attribute names will begin with                                         // 6468
    // 'on' and be composed of only English letters.                                                                   // 6469
    var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                         // 6470
                                                                                                                       // 6471
    function parseIsolateBindings(scope, directiveName) {                                                              // 6472
      var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;                                                         // 6473
                                                                                                                       // 6474
      var bindings = {};                                                                                               // 6475
                                                                                                                       // 6476
      forEach(scope, function(definition, scopeName) {                                                                 // 6477
        var match = definition.match(LOCAL_REGEXP);                                                                    // 6478
                                                                                                                       // 6479
        if (!match) {                                                                                                  // 6480
          throw $compileMinErr('iscp',                                                                                 // 6481
            "Invalid isolate scope definition for directive '{0}'." +                                                  // 6482
            " Definition: {... {1}: '{2}' ...}",                                                                       // 6483
            directiveName, scopeName, definition);                                                                     // 6484
        }                                                                                                              // 6485
                                                                                                                       // 6486
        bindings[scopeName] = {                                                                                        // 6487
          mode: match[1][0],                                                                                           // 6488
          collection: match[2] === '*',                                                                                // 6489
          optional: match[3] === '?',                                                                                  // 6490
          attrName: match[4] || scopeName                                                                              // 6491
        };                                                                                                             // 6492
      });                                                                                                              // 6493
                                                                                                                       // 6494
      return bindings;                                                                                                 // 6495
    }                                                                                                                  // 6496
                                                                                                                       // 6497
    /**                                                                                                                // 6498
     * @ngdoc method                                                                                                   // 6499
     * @name $compileProvider#directive                                                                                // 6500
     * @kind function                                                                                                  // 6501
     *                                                                                                                 // 6502
     * @description                                                                                                    // 6503
     * Register a new directive with the compiler.                                                                     // 6504
     *                                                                                                                 // 6505
     * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                 // 6506
     *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                   // 6507
     *    names and the values are the factories.                                                                      // 6508
     * @param {Function|Array} directiveFactory An injectable directive factory function. See                          // 6509
     *    {@link guide/directive} for more info.                                                                       // 6510
     * @returns {ng.$compileProvider} Self for chaining.                                                               // 6511
     */                                                                                                                // 6512
    this.directive = function registerDirective(name, directiveFactory) {                                              // 6513
      assertNotHasOwnProperty(name, 'directive');                                                                      // 6514
      if (isString(name)) {                                                                                            // 6515
        assertArg(directiveFactory, 'directiveFactory');                                                               // 6516
        if (!hasDirectives.hasOwnProperty(name)) {                                                                     // 6517
          hasDirectives[name] = [];                                                                                    // 6518
          $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                           // 6519
            function($injector, $exceptionHandler) {                                                                   // 6520
              var directives = [];                                                                                     // 6521
              forEach(hasDirectives[name], function(directiveFactory, index) {                                         // 6522
                try {                                                                                                  // 6523
                  var directive = $injector.invoke(directiveFactory);                                                  // 6524
                  if (isFunction(directive)) {                                                                         // 6525
                    directive = { compile: valueFn(directive) };                                                       // 6526
                  } else if (!directive.compile && directive.link) {                                                   // 6527
                    directive.compile = valueFn(directive.link);                                                       // 6528
                  }                                                                                                    // 6529
                  directive.priority = directive.priority || 0;                                                        // 6530
                  directive.index = index;                                                                             // 6531
                  directive.name = directive.name || name;                                                             // 6532
                  directive.require = directive.require || (directive.controller && directive.name);                   // 6533
                  directive.restrict = directive.restrict || 'EA';                                                     // 6534
                  if (isObject(directive.scope)) {                                                                     // 6535
                    directive.$$isolateBindings = parseIsolateBindings(directive.scope, directive.name);               // 6536
                  }                                                                                                    // 6537
                  directives.push(directive);                                                                          // 6538
                } catch (e) {                                                                                          // 6539
                  $exceptionHandler(e);                                                                                // 6540
                }                                                                                                      // 6541
              });                                                                                                      // 6542
              return directives;                                                                                       // 6543
            }]);                                                                                                       // 6544
        }                                                                                                              // 6545
        hasDirectives[name].push(directiveFactory);                                                                    // 6546
      } else {                                                                                                         // 6547
        forEach(name, reverseParams(registerDirective));                                                               // 6548
      }                                                                                                                // 6549
      return this;                                                                                                     // 6550
    };                                                                                                                 // 6551
                                                                                                                       // 6552
                                                                                                                       // 6553
    /**                                                                                                                // 6554
     * @ngdoc method                                                                                                   // 6555
     * @name $compileProvider#aHrefSanitizationWhitelist                                                               // 6556
     * @kind function                                                                                                  // 6557
     *                                                                                                                 // 6558
     * @description                                                                                                    // 6559
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe                     // 6560
     * urls during a[href] sanitization.                                                                               // 6561
     *                                                                                                                 // 6562
     * The sanitization is a security measure aimed at preventing XSS attacks via html links.                          // 6563
     *                                                                                                                 // 6564
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                    // 6565
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                        // 6566
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,                   // 6567
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                  // 6568
     *                                                                                                                 // 6569
     * @param {RegExp=} regexp New regexp to whitelist urls with.                                                      // 6570
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                        // 6571
     *    chaining otherwise.                                                                                          // 6572
     */                                                                                                                // 6573
    this.aHrefSanitizationWhitelist = function(regexp) {                                                               // 6574
      if (isDefined(regexp)) {                                                                                         // 6575
        $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                      // 6576
        return this;                                                                                                   // 6577
      } else {                                                                                                         // 6578
        return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                     // 6579
      }                                                                                                                // 6580
    };                                                                                                                 // 6581
                                                                                                                       // 6582
                                                                                                                       // 6583
    /**                                                                                                                // 6584
     * @ngdoc method                                                                                                   // 6585
     * @name $compileProvider#imgSrcSanitizationWhitelist                                                              // 6586
     * @kind function                                                                                                  // 6587
     *                                                                                                                 // 6588
     * @description                                                                                                    // 6589
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe                     // 6590
     * urls during img[src] sanitization.                                                                              // 6591
     *                                                                                                                 // 6592
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.                             // 6593
     *                                                                                                                 // 6594
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                   // 6595
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                       // 6596
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,                   // 6597
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                  // 6598
     *                                                                                                                 // 6599
     * @param {RegExp=} regexp New regexp to whitelist urls with.                                                      // 6600
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                        // 6601
     *    chaining otherwise.                                                                                          // 6602
     */                                                                                                                // 6603
    this.imgSrcSanitizationWhitelist = function(regexp) {                                                              // 6604
      if (isDefined(regexp)) {                                                                                         // 6605
        $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                     // 6606
        return this;                                                                                                   // 6607
      } else {                                                                                                         // 6608
        return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                    // 6609
      }                                                                                                                // 6610
    };                                                                                                                 // 6611
                                                                                                                       // 6612
    /**                                                                                                                // 6613
     * @ngdoc method                                                                                                   // 6614
     * @name  $compileProvider#debugInfoEnabled                                                                        // 6615
     *                                                                                                                 // 6616
     * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the              // 6617
     * current debugInfoEnabled state                                                                                  // 6618
     * @returns {*} current value if used as getter or itself (chaining) if used as setter                             // 6619
     *                                                                                                                 // 6620
     * @kind function                                                                                                  // 6621
     *                                                                                                                 // 6622
     * @description                                                                                                    // 6623
     * Call this method to enable/disable various debug runtime information in the compiler such as adding             // 6624
     * binding information and a reference to the current scope on to DOM elements.                                    // 6625
     * If enabled, the compiler will add the following to DOM elements that have been bound to the scope               // 6626
     * * `ng-binding` CSS class                                                                                        // 6627
     * * `$binding` data property containing an array of the binding expressions                                       // 6628
     *                                                                                                                 // 6629
     * You may want to disable this in production for a significant performance boost. See                             // 6630
     * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                    // 6631
     *                                                                                                                 // 6632
     * The default value is true.                                                                                      // 6633
     */                                                                                                                // 6634
    var debugInfoEnabled = true;                                                                                       // 6635
    this.debugInfoEnabled = function(enabled) {                                                                        // 6636
      if (isDefined(enabled)) {                                                                                        // 6637
        debugInfoEnabled = enabled;                                                                                    // 6638
        return this;                                                                                                   // 6639
      }                                                                                                                // 6640
      return debugInfoEnabled;                                                                                         // 6641
    };                                                                                                                 // 6642
                                                                                                                       // 6643
    this.$get = [                                                                                                      // 6644
      '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                                  // 6645
      '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                                   // 6646
      function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                           // 6647
               $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                          // 6648
                                                                                                                       // 6649
        var Attributes = function(element, attributesToCopy) {                                                         // 6650
          if (attributesToCopy) {                                                                                      // 6651
            var keys = Object.keys(attributesToCopy);                                                                  // 6652
            var i, l, key;                                                                                             // 6653
                                                                                                                       // 6654
            for (i = 0, l = keys.length; i < l; i++) {                                                                 // 6655
              key = keys[i];                                                                                           // 6656
              this[key] = attributesToCopy[key];                                                                       // 6657
            }                                                                                                          // 6658
          } else {                                                                                                     // 6659
            this.$attr = {};                                                                                           // 6660
          }                                                                                                            // 6661
                                                                                                                       // 6662
          this.$$element = element;                                                                                    // 6663
        };                                                                                                             // 6664
                                                                                                                       // 6665
        Attributes.prototype = {                                                                                       // 6666
          /**                                                                                                          // 6667
           * @ngdoc method                                                                                             // 6668
           * @name $compile.directive.Attributes#$normalize                                                            // 6669
           * @kind function                                                                                            // 6670
           *                                                                                                           // 6671
           * @description                                                                                              // 6672
           * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or // 6673
           * `data-`) to its normalized, camelCase form.                                                               // 6674
           *                                                                                                           // 6675
           * Also there is special case for Moz prefix starting with upper case letter.                                // 6676
           *                                                                                                           // 6677
           * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
           *                                                                                                           // 6679
           * @param {string} name Name to normalize                                                                    // 6680
           */                                                                                                          // 6681
          $normalize: directiveNormalize,                                                                              // 6682
                                                                                                                       // 6683
                                                                                                                       // 6684
          /**                                                                                                          // 6685
           * @ngdoc method                                                                                             // 6686
           * @name $compile.directive.Attributes#$addClass                                                             // 6687
           * @kind function                                                                                            // 6688
           *                                                                                                           // 6689
           * @description                                                                                              // 6690
           * Adds the CSS class value specified by the classVal parameter to the element. If animations                // 6691
           * are enabled then an animation will be triggered for the class addition.                                   // 6692
           *                                                                                                           // 6693
           * @param {string} classVal The className value that will be added to the element                            // 6694
           */                                                                                                          // 6695
          $addClass: function(classVal) {                                                                              // 6696
            if (classVal && classVal.length > 0) {                                                                     // 6697
              $animate.addClass(this.$$element, classVal);                                                             // 6698
            }                                                                                                          // 6699
          },                                                                                                           // 6700
                                                                                                                       // 6701
          /**                                                                                                          // 6702
           * @ngdoc method                                                                                             // 6703
           * @name $compile.directive.Attributes#$removeClass                                                          // 6704
           * @kind function                                                                                            // 6705
           *                                                                                                           // 6706
           * @description                                                                                              // 6707
           * Removes the CSS class value specified by the classVal parameter from the element. If                      // 6708
           * animations are enabled then an animation will be triggered for the class removal.                         // 6709
           *                                                                                                           // 6710
           * @param {string} classVal The className value that will be removed from the element                        // 6711
           */                                                                                                          // 6712
          $removeClass: function(classVal) {                                                                           // 6713
            if (classVal && classVal.length > 0) {                                                                     // 6714
              $animate.removeClass(this.$$element, classVal);                                                          // 6715
            }                                                                                                          // 6716
          },                                                                                                           // 6717
                                                                                                                       // 6718
          /**                                                                                                          // 6719
           * @ngdoc method                                                                                             // 6720
           * @name $compile.directive.Attributes#$updateClass                                                          // 6721
           * @kind function                                                                                            // 6722
           *                                                                                                           // 6723
           * @description                                                                                              // 6724
           * Adds and removes the appropriate CSS class values to the element based on the difference                  // 6725
           * between the new and old CSS class values (specified as newClasses and oldClasses).                        // 6726
           *                                                                                                           // 6727
           * @param {string} newClasses The current CSS className value                                                // 6728
           * @param {string} oldClasses The former CSS className value                                                 // 6729
           */                                                                                                          // 6730
          $updateClass: function(newClasses, oldClasses) {                                                             // 6731
            var toAdd = tokenDifference(newClasses, oldClasses);                                                       // 6732
            if (toAdd && toAdd.length) {                                                                               // 6733
              $animate.addClass(this.$$element, toAdd);                                                                // 6734
            }                                                                                                          // 6735
                                                                                                                       // 6736
            var toRemove = tokenDifference(oldClasses, newClasses);                                                    // 6737
            if (toRemove && toRemove.length) {                                                                         // 6738
              $animate.removeClass(this.$$element, toRemove);                                                          // 6739
            }                                                                                                          // 6740
          },                                                                                                           // 6741
                                                                                                                       // 6742
          /**                                                                                                          // 6743
           * Set a normalized attribute on the element in a way such that all directives                               // 6744
           * can share the attribute. This function properly handles boolean attributes.                               // 6745
           * @param {string} key Normalized key. (ie ngAttribute)                                                      // 6746
           * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                      // 6747
           * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                  // 6748
           *     Defaults to true.                                                                                     // 6749
           * @param {string=} attrName Optional none normalized name. Defaults to key.                                 // 6750
           */                                                                                                          // 6751
          $set: function(key, value, writeAttr, attrName) {                                                            // 6752
            // TODO: decide whether or not to throw an error if "class"                                                // 6753
            //is set through this function since it may cause $updateClass to                                          // 6754
            //become unstable.                                                                                         // 6755
                                                                                                                       // 6756
            var node = this.$$element[0],                                                                              // 6757
              booleanKey = getBooleanAttrName(node, key),                                                              // 6758
              aliasedKey = getAliasedAttrName(node, key),                                                              // 6759
              observer = key,                                                                                          // 6760
              nodeName;                                                                                                // 6761
                                                                                                                       // 6762
            if (booleanKey) {                                                                                          // 6763
              this.$$element.prop(key, value);                                                                         // 6764
              attrName = booleanKey;                                                                                   // 6765
            } else if (aliasedKey) {                                                                                   // 6766
              this[aliasedKey] = value;                                                                                // 6767
              observer = aliasedKey;                                                                                   // 6768
            }                                                                                                          // 6769
                                                                                                                       // 6770
            this[key] = value;                                                                                         // 6771
                                                                                                                       // 6772
            // translate normalized key to actual key                                                                  // 6773
            if (attrName) {                                                                                            // 6774
              this.$attr[key] = attrName;                                                                              // 6775
            } else {                                                                                                   // 6776
              attrName = this.$attr[key];                                                                              // 6777
              if (!attrName) {                                                                                         // 6778
                this.$attr[key] = attrName = snake_case(key, '-');                                                     // 6779
              }                                                                                                        // 6780
            }                                                                                                          // 6781
                                                                                                                       // 6782
            nodeName = nodeName_(this.$$element);                                                                      // 6783
                                                                                                                       // 6784
            if ((nodeName === 'a' && key === 'href') ||                                                                // 6785
              (nodeName === 'img' && key === 'src')) {                                                                 // 6786
              // sanitize a[href] and img[src] values                                                                  // 6787
              this[key] = value = $$sanitizeUri(value, key === 'src');                                                 // 6788
            } else if (nodeName === 'img' && key === 'srcset') {                                                       // 6789
              // sanitize img[srcset] values                                                                           // 6790
              var result = "";                                                                                         // 6791
                                                                                                                       // 6792
              // first check if there are spaces because it's not the same pattern                                     // 6793
              var trimmedSrcset = trim(value);                                                                         // 6794
              //                (   999x   ,|   999w   ,|   ,|,   )                                                    // 6795
              var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;                                                  // 6796
              var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                             // 6797
                                                                                                                       // 6798
              // split srcset into tuple of uri and descriptor except for the last item                                // 6799
              var rawUris = trimmedSrcset.split(pattern);                                                              // 6800
                                                                                                                       // 6801
              // for each tuples                                                                                       // 6802
              var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                  // 6803
              for (var i = 0; i < nbrUrisWith2parts; i++) {                                                            // 6804
                var innerIdx = i * 2;                                                                                  // 6805
                // sanitize the uri                                                                                    // 6806
                result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                // 6807
                // add the descriptor                                                                                  // 6808
                result += (" " + trim(rawUris[innerIdx + 1]));                                                         // 6809
              }                                                                                                        // 6810
                                                                                                                       // 6811
              // split the last item into uri and descriptor                                                           // 6812
              var lastTuple = trim(rawUris[i * 2]).split(/\s/);                                                        // 6813
                                                                                                                       // 6814
              // sanitize the last uri                                                                                 // 6815
              result += $$sanitizeUri(trim(lastTuple[0]), true);                                                       // 6816
                                                                                                                       // 6817
              // and add the last descriptor if any                                                                    // 6818
              if (lastTuple.length === 2) {                                                                            // 6819
                result += (" " + trim(lastTuple[1]));                                                                  // 6820
              }                                                                                                        // 6821
              this[key] = value = result;                                                                              // 6822
            }                                                                                                          // 6823
                                                                                                                       // 6824
            if (writeAttr !== false) {                                                                                 // 6825
              if (value === null || value === undefined) {                                                             // 6826
                this.$$element.removeAttr(attrName);                                                                   // 6827
              } else {                                                                                                 // 6828
                this.$$element.attr(attrName, value);                                                                  // 6829
              }                                                                                                        // 6830
            }                                                                                                          // 6831
                                                                                                                       // 6832
            // fire observers                                                                                          // 6833
            var $$observers = this.$$observers;                                                                        // 6834
            $$observers && forEach($$observers[observer], function(fn) {                                               // 6835
              try {                                                                                                    // 6836
                fn(value);                                                                                             // 6837
              } catch (e) {                                                                                            // 6838
                $exceptionHandler(e);                                                                                  // 6839
              }                                                                                                        // 6840
            });                                                                                                        // 6841
          },                                                                                                           // 6842
                                                                                                                       // 6843
                                                                                                                       // 6844
          /**                                                                                                          // 6845
           * @ngdoc method                                                                                             // 6846
           * @name $compile.directive.Attributes#$observe                                                              // 6847
           * @kind function                                                                                            // 6848
           *                                                                                                           // 6849
           * @description                                                                                              // 6850
           * Observes an interpolated attribute.                                                                       // 6851
           *                                                                                                           // 6852
           * The observer function will be invoked once during the next `$digest` following                            // 6853
           * compilation. The observer is then invoked whenever the interpolated value                                 // 6854
           * changes.                                                                                                  // 6855
           *                                                                                                           // 6856
           * @param {string} key Normalized key. (ie ngAttribute) .                                                    // 6857
           * @param {function(interpolatedValue)} fn Function that will be called whenever                             // 6858
           the interpolated value of the attribute changes.                                                            // 6859
           *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.        // 6860
           * @returns {function()} Returns a deregistration function for this observer.                                // 6861
           */                                                                                                          // 6862
          $observe: function(key, fn) {                                                                                // 6863
            var attrs = this,                                                                                          // 6864
              $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                  // 6865
              listeners = ($$observers[key] || ($$observers[key] = []));                                               // 6866
                                                                                                                       // 6867
            listeners.push(fn);                                                                                        // 6868
            $rootScope.$evalAsync(function() {                                                                         // 6869
              if (!listeners.$$inter && attrs.hasOwnProperty(key)) {                                                   // 6870
                // no one registered attribute interpolation function, so lets call it manually                        // 6871
                fn(attrs[key]);                                                                                        // 6872
              }                                                                                                        // 6873
            });                                                                                                        // 6874
                                                                                                                       // 6875
            return function() {                                                                                        // 6876
              arrayRemove(listeners, fn);                                                                              // 6877
            };                                                                                                         // 6878
          }                                                                                                            // 6879
        };                                                                                                             // 6880
                                                                                                                       // 6881
                                                                                                                       // 6882
        function safeAddClass($element, className) {                                                                   // 6883
          try {                                                                                                        // 6884
            $element.addClass(className);                                                                              // 6885
          } catch (e) {                                                                                                // 6886
            // ignore, since it means that we are trying to set class on                                               // 6887
            // SVG element, where class name is read-only.                                                             // 6888
          }                                                                                                            // 6889
        }                                                                                                              // 6890
                                                                                                                       // 6891
                                                                                                                       // 6892
        var startSymbol = $interpolate.startSymbol(),                                                                  // 6893
          endSymbol = $interpolate.endSymbol(),                                                                        // 6894
          denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                            // 6895
            ? identity                                                                                                 // 6896
            : function denormalizeTemplate(template) {                                                                 // 6897
            return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                   // 6898
          },                                                                                                           // 6899
          NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                            // 6900
                                                                                                                       // 6901
        compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                   // 6902
          var bindings = $element.data('$binding') || [];                                                              // 6903
                                                                                                                       // 6904
          if (isArray(binding)) {                                                                                      // 6905
            bindings = bindings.concat(binding);                                                                       // 6906
          } else {                                                                                                     // 6907
            bindings.push(binding);                                                                                    // 6908
          }                                                                                                            // 6909
                                                                                                                       // 6910
          $element.data('$binding', bindings);                                                                         // 6911
        } : noop;                                                                                                      // 6912
                                                                                                                       // 6913
        compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                          // 6914
          safeAddClass($element, 'ng-binding');                                                                        // 6915
        } : noop;                                                                                                      // 6916
                                                                                                                       // 6917
        compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {   // 6918
          var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';             // 6919
          $element.data(dataName, scope);                                                                              // 6920
        } : noop;                                                                                                      // 6921
                                                                                                                       // 6922
        compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                    // 6923
          safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                          // 6924
        } : noop;                                                                                                      // 6925
                                                                                                                       // 6926
        return compile;                                                                                                // 6927
                                                                                                                       // 6928
        //================================                                                                             // 6929
                                                                                                                       // 6930
        function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                    // 6931
                         previousCompileContext) {                                                                     // 6932
          if (!($compileNodes instanceof jqLite)) {                                                                    // 6933
            // jquery always rewraps, whereas we need to preserve the original selector so that we can                 // 6934
            // modify it.                                                                                              // 6935
            $compileNodes = jqLite($compileNodes);                                                                     // 6936
          }                                                                                                            // 6937
          // We can not compile top level text elements since text nodes can be merged and we will                     // 6938
          // not be able to attach scope data to them, so we will wrap them in <span>                                  // 6939
          forEach($compileNodes, function(node, index) {                                                               // 6940
            if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {                     // 6941
              $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                   // 6942
            }                                                                                                          // 6943
          });                                                                                                          // 6944
          var compositeLinkFn =                                                                                        // 6945
            compileNodes($compileNodes, transcludeFn, $compileNodes,                                                   // 6946
              maxPriority, ignoreDirective, previousCompileContext);                                                   // 6947
          compile.$$addScopeClass($compileNodes);                                                                      // 6948
          var namespace = null;                                                                                        // 6949
          return function publicLinkFn(scope, cloneConnectFn, options) {                                               // 6950
            assertArg(scope, 'scope');                                                                                 // 6951
                                                                                                                       // 6952
            options = options || {};                                                                                   // 6953
            var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                             // 6954
              transcludeControllers = options.transcludeControllers,                                                   // 6955
              futureParentElement = options.futureParentElement;                                                       // 6956
                                                                                                                       // 6957
            // When `parentBoundTranscludeFn` is passed, it is a                                                       // 6958
            // `controllersBoundTransclude` function (it was previously passed                                         // 6959
            // as `transclude` to directive.link) so we must unwrap it to get                                          // 6960
            // its `boundTranscludeFn`                                                                                 // 6961
            if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                // 6962
              parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                     // 6963
            }                                                                                                          // 6964
                                                                                                                       // 6965
            if (!namespace) {                                                                                          // 6966
              namespace = detectNamespaceForChildElements(futureParentElement);                                        // 6967
            }                                                                                                          // 6968
            var $linkNode;                                                                                             // 6969
            if (namespace !== 'html') {                                                                                // 6970
              // When using a directive with replace:true and templateUrl the $compileNodes                            // 6971
              // (or a child element inside of them)                                                                   // 6972
              // might change, so we need to recreate the namespace adapted compileNodes                               // 6973
              // for call to the link function.                                                                        // 6974
              // Note: This will already clone the nodes...                                                            // 6975
              $linkNode = jqLite(                                                                                      // 6976
                wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                  // 6977
              );                                                                                                       // 6978
            } else if (cloneConnectFn) {                                                                               // 6979
              // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart               // 6980
              // and sometimes changes the structure of the DOM.                                                       // 6981
              $linkNode = JQLitePrototype.clone.call($compileNodes);                                                   // 6982
            } else {                                                                                                   // 6983
              $linkNode = $compileNodes;                                                                               // 6984
            }                                                                                                          // 6985
                                                                                                                       // 6986
            if (transcludeControllers) {                                                                               // 6987
              for (var controllerName in transcludeControllers) {                                                      // 6988
                $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);   // 6989
              }                                                                                                        // 6990
            }                                                                                                          // 6991
                                                                                                                       // 6992
            compile.$$addScopeInfo($linkNode, scope);                                                                  // 6993
                                                                                                                       // 6994
            if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                      // 6995
            if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                // 6996
            return $linkNode;                                                                                          // 6997
          };                                                                                                           // 6998
        }                                                                                                              // 6999
                                                                                                                       // 7000
        function detectNamespaceForChildElements(parentElement) {                                                      // 7001
          // TODO: Make this detect MathML as well...                                                                  // 7002
          var node = parentElement && parentElement[0];                                                                // 7003
          if (!node) {                                                                                                 // 7004
            return 'html';                                                                                             // 7005
          } else {                                                                                                     // 7006
            return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';               // 7007
          }                                                                                                            // 7008
        }                                                                                                              // 7009
                                                                                                                       // 7010
        /**                                                                                                            // 7011
         * Compile function matches each node in nodeList against the directives. Once all directives                  // 7012
         * for a particular node are collected their compile functions are executed. The compile                       // 7013
         * functions return values - the linking functions - are combined into a composite linking                     // 7014
         * function, which is the a linking function for the node.                                                     // 7015
         *                                                                                                             // 7016
         * @param {NodeList} nodeList an array of nodes or NodeList to compile                                         // 7017
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                 // 7018
         *        scope argument is auto-generated to the new child of the transcluded parent scope.                   // 7019
         * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                  // 7020
         *        the rootElement must be set the jqLite collection of the compile root. This is                       // 7021
         *        needed so that the jqLite collection items can be replaced with widgets.                             // 7022
         * @param {number=} maxPriority Max directive priority.                                                        // 7023
         * @returns {Function} A composite linking function of all of the matched directives or null.                  // 7024
         */                                                                                                            // 7025
        function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                      // 7026
                              previousCompileContext) {                                                                // 7027
          var linkFns = [],                                                                                            // 7028
            attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                      // 7029
                                                                                                                       // 7030
          for (var i = 0; i < nodeList.length; i++) {                                                                  // 7031
            attrs = new Attributes();                                                                                  // 7032
                                                                                                                       // 7033
            // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                      // 7034
            directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                  // 7035
              ignoreDirective);                                                                                        // 7036
                                                                                                                       // 7037
            nodeLinkFn = (directives.length)                                                                           // 7038
              ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                      // 7039
              null, [], [], previousCompileContext)                                                                    // 7040
              : null;                                                                                                  // 7041
                                                                                                                       // 7042
            if (nodeLinkFn && nodeLinkFn.scope) {                                                                      // 7043
              compile.$$addScopeClass(attrs.$$element);                                                                // 7044
            }                                                                                                          // 7045
                                                                                                                       // 7046
            childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                        // 7047
            !(childNodes = nodeList[i].childNodes) ||                                                                  // 7048
            !childNodes.length)                                                                                        // 7049
              ? null                                                                                                   // 7050
              : compileNodes(childNodes,                                                                               // 7051
              nodeLinkFn ? (                                                                                           // 7052
              (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                                // 7053
              && nodeLinkFn.transclude) : transcludeFn);                                                               // 7054
                                                                                                                       // 7055
            if (nodeLinkFn || childLinkFn) {                                                                           // 7056
              linkFns.push(i, nodeLinkFn, childLinkFn);                                                                // 7057
              linkFnFound = true;                                                                                      // 7058
              nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                         // 7059
            }                                                                                                          // 7060
                                                                                                                       // 7061
            //use the previous context only for the first element in the virtual group                                 // 7062
            previousCompileContext = null;                                                                             // 7063
          }                                                                                                            // 7064
                                                                                                                       // 7065
          // return a linking function if we have found anything, null otherwise                                       // 7066
          return linkFnFound ? compositeLinkFn : null;                                                                 // 7067
                                                                                                                       // 7068
          function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                           // 7069
            var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                         // 7070
            var stableNodeList;                                                                                        // 7071
                                                                                                                       // 7072
                                                                                                                       // 7073
            if (nodeLinkFnFound) {                                                                                     // 7074
              // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                // 7075
              // offsets don't get screwed up                                                                          // 7076
              var nodeListLength = nodeList.length;                                                                    // 7077
              stableNodeList = new Array(nodeListLength);                                                              // 7078
                                                                                                                       // 7079
              // create a sparse array by only copying the elements which have a linkFn                                // 7080
              for (i = 0; i < linkFns.length; i+=3) {                                                                  // 7081
                idx = linkFns[i];                                                                                      // 7082
                stableNodeList[idx] = nodeList[idx];                                                                   // 7083
              }                                                                                                        // 7084
            } else {                                                                                                   // 7085
              stableNodeList = nodeList;                                                                               // 7086
            }                                                                                                          // 7087
                                                                                                                       // 7088
            for (i = 0, ii = linkFns.length; i < ii;) {                                                                // 7089
              node = stableNodeList[linkFns[i++]];                                                                     // 7090
              nodeLinkFn = linkFns[i++];                                                                               // 7091
              childLinkFn = linkFns[i++];                                                                              // 7092
                                                                                                                       // 7093
              if (nodeLinkFn) {                                                                                        // 7094
                if (nodeLinkFn.scope) {                                                                                // 7095
                  childScope = scope.$new();                                                                           // 7096
                  compile.$$addScopeInfo(jqLite(node), childScope);                                                    // 7097
                } else {                                                                                               // 7098
                  childScope = scope;                                                                                  // 7099
                }                                                                                                      // 7100
                                                                                                                       // 7101
                if (nodeLinkFn.transcludeOnThisElement) {                                                              // 7102
                  childBoundTranscludeFn = createBoundTranscludeFn(                                                    // 7103
                    scope, nodeLinkFn.transclude, parentBoundTranscludeFn,                                             // 7104
                    nodeLinkFn.elementTranscludeOnThisElement);                                                        // 7105
                                                                                                                       // 7106
                } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                             // 7107
                  childBoundTranscludeFn = parentBoundTranscludeFn;                                                    // 7108
                                                                                                                       // 7109
                } else if (!parentBoundTranscludeFn && transcludeFn) {                                                 // 7110
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                               // 7111
                                                                                                                       // 7112
                } else {                                                                                               // 7113
                  childBoundTranscludeFn = null;                                                                       // 7114
                }                                                                                                      // 7115
                                                                                                                       // 7116
                nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);                       // 7117
                                                                                                                       // 7118
              } else if (childLinkFn) {                                                                                // 7119
                childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                               // 7120
              }                                                                                                        // 7121
            }                                                                                                          // 7122
          }                                                                                                            // 7123
        }                                                                                                              // 7124
                                                                                                                       // 7125
        function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {        // 7126
                                                                                                                       // 7127
          var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
                                                                                                                       // 7129
            if (!transcludedScope) {                                                                                   // 7130
              transcludedScope = scope.$new(false, containingScope);                                                   // 7131
              transcludedScope.$$transcluded = true;                                                                   // 7132
            }                                                                                                          // 7133
                                                                                                                       // 7134
            return transcludeFn(transcludedScope, cloneFn, {                                                           // 7135
              parentBoundTranscludeFn: previousBoundTranscludeFn,                                                      // 7136
              transcludeControllers: controllers,                                                                      // 7137
              futureParentElement: futureParentElement                                                                 // 7138
            });                                                                                                        // 7139
          };                                                                                                           // 7140
                                                                                                                       // 7141
          return boundTranscludeFn;                                                                                    // 7142
        }                                                                                                              // 7143
                                                                                                                       // 7144
        /**                                                                                                            // 7145
         * Looks for directives on the given node and adds them to the directive collection which is                   // 7146
         * sorted.                                                                                                     // 7147
         *                                                                                                             // 7148
         * @param node Node to search.                                                                                 // 7149
         * @param directives An array to which the directives are added to. This array is sorted before                // 7150
         *        the function returns.                                                                                // 7151
         * @param attrs The shared attrs object which is used to populate the normalized attributes.                   // 7152
         * @param {number=} maxPriority Max directive priority.                                                        // 7153
         */                                                                                                            // 7154
        function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                            // 7155
          var nodeType = node.nodeType,                                                                                // 7156
            attrsMap = attrs.$attr,                                                                                    // 7157
            match,                                                                                                     // 7158
            className;                                                                                                 // 7159
                                                                                                                       // 7160
          switch (nodeType) {                                                                                          // 7161
            case NODE_TYPE_ELEMENT: /* Element */                                                                      // 7162
              // use the node name: <directive>                                                                        // 7163
              addDirective(directives,                                                                                 // 7164
                directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                               // 7165
                                                                                                                       // 7166
              // iterate over the attributes                                                                           // 7167
              for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                       // 7168
                     j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                               // 7169
                var attrStartName = false;                                                                             // 7170
                var attrEndName = false;                                                                               // 7171
                                                                                                                       // 7172
                attr = nAttrs[j];                                                                                      // 7173
                name = attr.name;                                                                                      // 7174
                value = trim(attr.value);                                                                              // 7175
                                                                                                                       // 7176
                // support ngAttr attribute binding                                                                    // 7177
                ngAttrName = directiveNormalize(name);                                                                 // 7178
                if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                     // 7179
                  name = name.replace(PREFIX_REGEXP, '')                                                               // 7180
                    .substr(8).replace(/_(.)/g, function(match, letter) {                                              // 7181
                      return letter.toUpperCase();                                                                     // 7182
                    });                                                                                                // 7183
                }                                                                                                      // 7184
                                                                                                                       // 7185
                var directiveNName = ngAttrName.replace(/(Start|End)$/, '');                                           // 7186
                if (directiveIsMultiElement(directiveNName)) {                                                         // 7187
                  if (ngAttrName === directiveNName + 'Start') {                                                       // 7188
                    attrStartName = name;                                                                              // 7189
                    attrEndName = name.substr(0, name.length - 5) + 'end';                                             // 7190
                    name = name.substr(0, name.length - 6);                                                            // 7191
                  }                                                                                                    // 7192
                }                                                                                                      // 7193
                                                                                                                       // 7194
                nName = directiveNormalize(name.toLowerCase());                                                        // 7195
                attrsMap[nName] = name;                                                                                // 7196
                if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                        // 7197
                  attrs[nName] = value;                                                                                // 7198
                  if (getBooleanAttrName(node, nName)) {                                                               // 7199
                    attrs[nName] = true; // presence means true                                                        // 7200
                  }                                                                                                    // 7201
                }                                                                                                      // 7202
                addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                 // 7203
                addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                      // 7204
                  attrEndName);                                                                                        // 7205
              }                                                                                                        // 7206
                                                                                                                       // 7207
              // use class as directive                                                                                // 7208
              className = node.className;                                                                              // 7209
              if (isObject(className)) {                                                                               // 7210
                // Maybe SVGAnimatedString                                                                             // 7211
                className = className.animVal;                                                                         // 7212
              }                                                                                                        // 7213
              if (isString(className) && className !== '') {                                                           // 7214
                while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                               // 7215
                  nName = directiveNormalize(match[2]);                                                                // 7216
                  if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                            // 7217
                    attrs[nName] = trim(match[3]);                                                                     // 7218
                  }                                                                                                    // 7219
                  className = className.substr(match.index + match[0].length);                                         // 7220
                }                                                                                                      // 7221
              }                                                                                                        // 7222
              break;                                                                                                   // 7223
            case NODE_TYPE_TEXT: /* Text Node */                                                                       // 7224
              addTextInterpolateDirective(directives, node.nodeValue);                                                 // 7225
              break;                                                                                                   // 7226
            case NODE_TYPE_COMMENT: /* Comment */                                                                      // 7227
              try {                                                                                                    // 7228
                match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                 // 7229
                if (match) {                                                                                           // 7230
                  nName = directiveNormalize(match[1]);                                                                // 7231
                  if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                            // 7232
                    attrs[nName] = trim(match[2]);                                                                     // 7233
                  }                                                                                                    // 7234
                }                                                                                                      // 7235
              } catch (e) {                                                                                            // 7236
                // turns out that under some circumstances IE9 throws errors when one attempts to read                 // 7237
                // comment's node value.                                                                               // 7238
                // Just ignore it and continue. (Can't seem to reproduce in test case.)                                // 7239
              }                                                                                                        // 7240
              break;                                                                                                   // 7241
          }                                                                                                            // 7242
                                                                                                                       // 7243
          directives.sort(byPriority);                                                                                 // 7244
          return directives;                                                                                           // 7245
        }                                                                                                              // 7246
                                                                                                                       // 7247
        /**                                                                                                            // 7248
         * Given a node with an directive-start it collects all of the siblings until it finds                         // 7249
         * directive-end.                                                                                              // 7250
         * @param node                                                                                                 // 7251
         * @param attrStart                                                                                            // 7252
         * @param attrEnd                                                                                              // 7253
         * @returns {*}                                                                                                // 7254
         */                                                                                                            // 7255
        function groupScan(node, attrStart, attrEnd) {                                                                 // 7256
          var nodes = [];                                                                                              // 7257
          var depth = 0;                                                                                               // 7258
          if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                        // 7259
            do {                                                                                                       // 7260
              if (!node) {                                                                                             // 7261
                throw $compileMinErr('uterdir',                                                                        // 7262
                  "Unterminated attribute, found '{0}' but no matching '{1}' found.",                                  // 7263
                  attrStart, attrEnd);                                                                                 // 7264
              }                                                                                                        // 7265
              if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                // 7266
                if (node.hasAttribute(attrStart)) depth++;                                                             // 7267
                if (node.hasAttribute(attrEnd)) depth--;                                                               // 7268
              }                                                                                                        // 7269
              nodes.push(node);                                                                                        // 7270
              node = node.nextSibling;                                                                                 // 7271
            } while (depth > 0);                                                                                       // 7272
          } else {                                                                                                     // 7273
            nodes.push(node);                                                                                          // 7274
          }                                                                                                            // 7275
                                                                                                                       // 7276
          return jqLite(nodes);                                                                                        // 7277
        }                                                                                                              // 7278
                                                                                                                       // 7279
        /**                                                                                                            // 7280
         * Wrapper for linking function which converts normal linking function into a grouped                          // 7281
         * linking function.                                                                                           // 7282
         * @param linkFn                                                                                               // 7283
         * @param attrStart                                                                                            // 7284
         * @param attrEnd                                                                                              // 7285
         * @returns {Function}                                                                                         // 7286
         */                                                                                                            // 7287
        function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                              // 7288
          return function(scope, element, attrs, controllers, transcludeFn) {                                          // 7289
            element = groupScan(element[0], attrStart, attrEnd);                                                       // 7290
            return linkFn(scope, element, attrs, controllers, transcludeFn);                                           // 7291
          };                                                                                                           // 7292
        }                                                                                                              // 7293
                                                                                                                       // 7294
        /**                                                                                                            // 7295
         * Once the directives have been collected, their compile functions are executed. This method                  // 7296
         * is responsible for inlining directive templates as well as terminating the application                      // 7297
         * of the directives if the terminal directive has been reached.                                               // 7298
         *                                                                                                             // 7299
         * @param {Array} directives Array of collected directives to execute their compile function.                  // 7300
         *        this needs to be pre-sorted by priority order.                                                       // 7301
         * @param {Node} compileNode The raw DOM node to apply the compile functions to                                // 7302
         * @param {Object} templateAttrs The shared attribute function                                                 // 7303
         * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                 // 7304
         *                                                  scope argument is auto-generated to the new                // 7305
         *                                                  child of the transcluded parent scope.                     // 7306
         * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                    // 7307
         *                              argument has the root jqLite array so that we can replace nodes                // 7308
         *                              on it.                                                                         // 7309
         * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                   // 7310
         *                                           compiling the transclusion.                                       // 7311
         * @param {Array.<Function>} preLinkFns                                                                        // 7312
         * @param {Array.<Function>} postLinkFns                                                                       // 7313
         * @param {Object} previousCompileContext Context used for previous compilation of the current                 // 7314
         *                                        node                                                                 // 7315
         * @returns {Function} linkFn                                                                                  // 7316
         */                                                                                                            // 7317
        function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                           // 7318
                                       jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                // 7319
                                       previousCompileContext) {                                                       // 7320
          previousCompileContext = previousCompileContext || {};                                                       // 7321
                                                                                                                       // 7322
          var terminalPriority = -Number.MAX_VALUE,                                                                    // 7323
            newScopeDirective,                                                                                         // 7324
            controllerDirectives = previousCompileContext.controllerDirectives,                                        // 7325
            controllers,                                                                                               // 7326
            newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                // 7327
            templateDirective = previousCompileContext.templateDirective,                                              // 7328
            nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                              // 7329
            hasTranscludeDirective = false,                                                                            // 7330
            hasTemplate = false,                                                                                       // 7331
            hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                      // 7332
            $compileNode = templateAttrs.$$element = jqLite(compileNode),                                              // 7333
            directive,                                                                                                 // 7334
            directiveName,                                                                                             // 7335
            $template,                                                                                                 // 7336
            replaceDirective = originalReplaceDirective,                                                               // 7337
            childTranscludeFn = transcludeFn,                                                                          // 7338
            linkFn,                                                                                                    // 7339
            directiveValue;                                                                                            // 7340
                                                                                                                       // 7341
          // executes all directives on the current element                                                            // 7342
          for (var i = 0, ii = directives.length; i < ii; i++) {                                                       // 7343
            directive = directives[i];                                                                                 // 7344
            var attrStart = directive.$$start;                                                                         // 7345
            var attrEnd = directive.$$end;                                                                             // 7346
                                                                                                                       // 7347
            // collect multiblock sections                                                                             // 7348
            if (attrStart) {                                                                                           // 7349
              $compileNode = groupScan(compileNode, attrStart, attrEnd);                                               // 7350
            }                                                                                                          // 7351
            $template = undefined;                                                                                     // 7352
                                                                                                                       // 7353
            if (terminalPriority > directive.priority) {                                                               // 7354
              break; // prevent further processing of directives                                                       // 7355
            }                                                                                                          // 7356
                                                                                                                       // 7357
            if (directiveValue = directive.scope) {                                                                    // 7358
                                                                                                                       // 7359
              // skip the check for directives with async templates, we'll check the derived sync                      // 7360
              // directive when the template arrives                                                                   // 7361
              if (!directive.templateUrl) {                                                                            // 7362
                if (isObject(directiveValue)) {                                                                        // 7363
                  // This directive is trying to add an isolated scope.                                                // 7364
                  // Check that there is no scope of any kind already                                                  // 7365
                  assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,               // 7366
                    directive, $compileNode);                                                                          // 7367
                  newIsolateScopeDirective = directive;                                                                // 7368
                } else {                                                                                               // 7369
                  // This directive is trying to add a child scope.                                                    // 7370
                  // Check that there is no isolated scope already                                                     // 7371
                  assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                         // 7372
                    $compileNode);                                                                                     // 7373
                }                                                                                                      // 7374
              }                                                                                                        // 7375
                                                                                                                       // 7376
              newScopeDirective = newScopeDirective || directive;                                                      // 7377
            }                                                                                                          // 7378
                                                                                                                       // 7379
            directiveName = directive.name;                                                                            // 7380
                                                                                                                       // 7381
            if (!directive.templateUrl && directive.controller) {                                                      // 7382
              directiveValue = directive.controller;                                                                   // 7383
              controllerDirectives = controllerDirectives || {};                                                       // 7384
              assertNoDuplicate("'" + directiveName + "' controller",                                                  // 7385
                controllerDirectives[directiveName], directive, $compileNode);                                         // 7386
              controllerDirectives[directiveName] = directive;                                                         // 7387
            }                                                                                                          // 7388
                                                                                                                       // 7389
            if (directiveValue = directive.transclude) {                                                               // 7390
              hasTranscludeDirective = true;                                                                           // 7391
                                                                                                                       // 7392
              // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                // 7393
              // This option should only be used by directives that know how to safely handle element transclusion,    // 7394
              // where the transcluded nodes are added or replaced after linking.                                      // 7395
              if (!directive.$$tlb) {                                                                                  // 7396
                assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                 // 7397
                nonTlbTranscludeDirective = directive;                                                                 // 7398
              }                                                                                                        // 7399
                                                                                                                       // 7400
              if (directiveValue == 'element') {                                                                       // 7401
                hasElementTranscludeDirective = true;                                                                  // 7402
                terminalPriority = directive.priority;                                                                 // 7403
                $template = $compileNode;                                                                              // 7404
                $compileNode = templateAttrs.$$element =                                                               // 7405
                  jqLite(document.createComment(' ' + directiveName + ': ' +                                           // 7406
                  templateAttrs[directiveName] + ' '));                                                                // 7407
                compileNode = $compileNode[0];                                                                         // 7408
                replaceWith(jqCollection, sliceArgs($template), compileNode);                                          // 7409
                                                                                                                       // 7410
                childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                 // 7411
                  replaceDirective && replaceDirective.name, {                                                         // 7412
                    // Don't pass in:                                                                                  // 7413
                    // - controllerDirectives - otherwise we'll create duplicates controllers                          // 7414
                    // - newIsolateScopeDirective or templateDirective - combining templates with                      // 7415
                    //   element transclusion doesn't make sense.                                                      // 7416
                    //                                                                                                 // 7417
                    // We need only nonTlbTranscludeDirective so that we prevent putting transclusion                  // 7418
                    // on the same element more than once.                                                             // 7419
                    nonTlbTranscludeDirective: nonTlbTranscludeDirective                                               // 7420
                  });                                                                                                  // 7421
              } else {                                                                                                 // 7422
                $template = jqLite(jqLiteClone(compileNode)).contents();                                               // 7423
                $compileNode.empty(); // clear contents                                                                // 7424
                childTranscludeFn = compile($template, transcludeFn);                                                  // 7425
              }                                                                                                        // 7426
            }                                                                                                          // 7427
                                                                                                                       // 7428
            if (directive.template) {                                                                                  // 7429
              hasTemplate = true;                                                                                      // 7430
              assertNoDuplicate('template', templateDirective, directive, $compileNode);                               // 7431
              templateDirective = directive;                                                                           // 7432
                                                                                                                       // 7433
              directiveValue = (isFunction(directive.template))                                                        // 7434
                ? directive.template($compileNode, templateAttrs)                                                      // 7435
                : directive.template;                                                                                  // 7436
                                                                                                                       // 7437
              directiveValue = denormalizeTemplate(directiveValue);                                                    // 7438
                                                                                                                       // 7439
              if (directive.replace) {                                                                                 // 7440
                replaceDirective = directive;                                                                          // 7441
                if (jqLiteIsTextNode(directiveValue)) {                                                                // 7442
                  $template = [];                                                                                      // 7443
                } else {                                                                                               // 7444
                  $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));         // 7445
                }                                                                                                      // 7446
                compileNode = $template[0];                                                                            // 7447
                                                                                                                       // 7448
                if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                             // 7449
                  throw $compileMinErr('tplrt',                                                                        // 7450
                    "Template for directive '{0}' must have exactly one root element. {1}",                            // 7451
                    directiveName, '');                                                                                // 7452
                }                                                                                                      // 7453
                                                                                                                       // 7454
                replaceWith(jqCollection, $compileNode, compileNode);                                                  // 7455
                                                                                                                       // 7456
                var newTemplateAttrs = {$attr: {}};                                                                    // 7457
                                                                                                                       // 7458
                // combine directives from the original node and from the template:                                    // 7459
                // - take the array of directives for this element                                                     // 7460
                // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
                // - collect directives from the template and sort them by priority                                    // 7462
                // - combine directives as: processed + template + unprocessed                                         // 7463
                var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                         // 7464
                var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                     // 7465
                                                                                                                       // 7466
                if (newIsolateScopeDirective) {                                                                        // 7467
                  markDirectivesAsIsolate(templateDirectives);                                                         // 7468
                }                                                                                                      // 7469
                directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                      // 7470
                mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                              // 7471
                                                                                                                       // 7472
                ii = directives.length;                                                                                // 7473
              } else {                                                                                                 // 7474
                $compileNode.html(directiveValue);                                                                     // 7475
              }                                                                                                        // 7476
            }                                                                                                          // 7477
                                                                                                                       // 7478
            if (directive.templateUrl) {                                                                               // 7479
              hasTemplate = true;                                                                                      // 7480
              assertNoDuplicate('template', templateDirective, directive, $compileNode);                               // 7481
              templateDirective = directive;                                                                           // 7482
                                                                                                                       // 7483
              if (directive.replace) {                                                                                 // 7484
                replaceDirective = directive;                                                                          // 7485
              }                                                                                                        // 7486
                                                                                                                       // 7487
              nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,               // 7488
                templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {   // 7489
                  controllerDirectives: controllerDirectives,                                                          // 7490
                  newIsolateScopeDirective: newIsolateScopeDirective,                                                  // 7491
                  templateDirective: templateDirective,                                                                // 7492
                  nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                 // 7493
                });                                                                                                    // 7494
              ii = directives.length;                                                                                  // 7495
            } else if (directive.compile) {                                                                            // 7496
              try {                                                                                                    // 7497
                linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                            // 7498
                if (isFunction(linkFn)) {                                                                              // 7499
                  addLinkFns(null, linkFn, attrStart, attrEnd);                                                        // 7500
                } else if (linkFn) {                                                                                   // 7501
                  addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                             // 7502
                }                                                                                                      // 7503
              } catch (e) {                                                                                            // 7504
                $exceptionHandler(e, startingTag($compileNode));                                                       // 7505
              }                                                                                                        // 7506
            }                                                                                                          // 7507
                                                                                                                       // 7508
            if (directive.terminal) {                                                                                  // 7509
              nodeLinkFn.terminal = true;                                                                              // 7510
              terminalPriority = Math.max(terminalPriority, directive.priority);                                       // 7511
            }                                                                                                          // 7512
                                                                                                                       // 7513
          }                                                                                                            // 7514
                                                                                                                       // 7515
          nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                    // 7516
          nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                 // 7517
          nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;                                   // 7518
          nodeLinkFn.templateOnThisElement = hasTemplate;                                                              // 7519
          nodeLinkFn.transclude = childTranscludeFn;                                                                   // 7520
                                                                                                                       // 7521
          previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                        // 7522
                                                                                                                       // 7523
          // might be normal or delayed nodeLinkFn depending on if templateUrl is present                              // 7524
          return nodeLinkFn;                                                                                           // 7525
                                                                                                                       // 7526
          ////////////////////                                                                                         // 7527
                                                                                                                       // 7528
          function addLinkFns(pre, post, attrStart, attrEnd) {                                                         // 7529
            if (pre) {                                                                                                 // 7530
              if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                // 7531
              pre.require = directive.require;                                                                         // 7532
              pre.directiveName = directiveName;                                                                       // 7533
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                // 7534
                pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                   // 7535
              }                                                                                                        // 7536
              preLinkFns.push(pre);                                                                                    // 7537
            }                                                                                                          // 7538
            if (post) {                                                                                                // 7539
              if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                              // 7540
              post.require = directive.require;                                                                        // 7541
              post.directiveName = directiveName;                                                                      // 7542
              if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                // 7543
                post = cloneAndAnnotateFn(post, {isolateScope: true});                                                 // 7544
              }                                                                                                        // 7545
              postLinkFns.push(post);                                                                                  // 7546
            }                                                                                                          // 7547
          }                                                                                                            // 7548
                                                                                                                       // 7549
                                                                                                                       // 7550
          function getControllers(directiveName, require, $element, elementControllers) {                              // 7551
            var value, retrievalMethod = 'data', optional = false;                                                     // 7552
            var $searchElement = $element;                                                                             // 7553
            var match;                                                                                                 // 7554
            if (isString(require)) {                                                                                   // 7555
              match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 7556
              require = require.substring(match[0].length);                                                            // 7557
                                                                                                                       // 7558
              if (match[3]) {                                                                                          // 7559
                if (match[1]) match[3] = null;                                                                         // 7560
                else match[1] = match[3];                                                                              // 7561
              }                                                                                                        // 7562
              if (match[1] === '^') {                                                                                  // 7563
                retrievalMethod = 'inheritedData';                                                                     // 7564
              } else if (match[1] === '^^') {                                                                          // 7565
                retrievalMethod = 'inheritedData';                                                                     // 7566
                $searchElement = $element.parent();                                                                    // 7567
              }                                                                                                        // 7568
              if (match[2] === '?') {                                                                                  // 7569
                optional = true;                                                                                       // 7570
              }                                                                                                        // 7571
                                                                                                                       // 7572
              value = null;                                                                                            // 7573
                                                                                                                       // 7574
              if (elementControllers && retrievalMethod === 'data') {                                                  // 7575
                if (value = elementControllers[require]) {                                                             // 7576
                  value = value.instance;                                                                              // 7577
                }                                                                                                      // 7578
              }                                                                                                        // 7579
              value = value || $searchElement[retrievalMethod]('$' + require + 'Controller');                          // 7580
                                                                                                                       // 7581
              if (!value && !optional) {                                                                               // 7582
                throw $compileMinErr('ctreq',                                                                          // 7583
                  "Controller '{0}', required by directive '{1}', can't be found!",                                    // 7584
                  require, directiveName);                                                                             // 7585
              }                                                                                                        // 7586
              return value || null;                                                                                    // 7587
            } else if (isArray(require)) {                                                                             // 7588
              value = [];                                                                                              // 7589
              forEach(require, function(require) {                                                                     // 7590
                value.push(getControllers(directiveName, require, $element, elementControllers));                      // 7591
              });                                                                                                      // 7592
            }                                                                                                          // 7593
            return value;                                                                                              // 7594
          }                                                                                                            // 7595
                                                                                                                       // 7596
                                                                                                                       // 7597
          function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {                         // 7598
            var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,                   // 7599
              attrs;                                                                                                   // 7600
                                                                                                                       // 7601
            if (compileNode === linkNode) {                                                                            // 7602
              attrs = templateAttrs;                                                                                   // 7603
              $element = templateAttrs.$$element;                                                                      // 7604
            } else {                                                                                                   // 7605
              $element = jqLite(linkNode);                                                                             // 7606
              attrs = new Attributes($element, templateAttrs);                                                         // 7607
            }                                                                                                          // 7608
                                                                                                                       // 7609
            if (newIsolateScopeDirective) {                                                                            // 7610
              isolateScope = scope.$new(true);                                                                         // 7611
            }                                                                                                          // 7612
                                                                                                                       // 7613
            if (boundTranscludeFn) {                                                                                   // 7614
              // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                    // 7615
              // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                        // 7616
              transcludeFn = controllersBoundTransclude;                                                               // 7617
              transcludeFn.$$boundTransclude = boundTranscludeFn;                                                      // 7618
            }                                                                                                          // 7619
                                                                                                                       // 7620
            if (controllerDirectives) {                                                                                // 7621
              // TODO: merge `controllers` and `elementControllers` into single object.                                // 7622
              controllers = {};                                                                                        // 7623
              elementControllers = {};                                                                                 // 7624
              forEach(controllerDirectives, function(directive) {                                                      // 7625
                var locals = {                                                                                         // 7626
                  $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,   // 7627
                  $element: $element,                                                                                  // 7628
                  $attrs: attrs,                                                                                       // 7629
                  $transclude: transcludeFn                                                                            // 7630
                }, controllerInstance;                                                                                 // 7631
                                                                                                                       // 7632
                controller = directive.controller;                                                                     // 7633
                if (controller == '@') {                                                                               // 7634
                  controller = attrs[directive.name];                                                                  // 7635
                }                                                                                                      // 7636
                                                                                                                       // 7637
                controllerInstance = $controller(controller, locals, true, directive.controllerAs);                    // 7638
                                                                                                                       // 7639
                // For directives with element transclusion the element is a comment,                                  // 7640
                // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                    // 7641
                // clean up (http://bugs.jquery.com/ticket/8335).                                                      // 7642
                // Instead, we save the controllers for the element in a local hash and attach to .data                // 7643
                // later, once we have the actual element.                                                             // 7644
                elementControllers[directive.name] = controllerInstance;                                               // 7645
                if (!hasElementTranscludeDirective) {                                                                  // 7646
                  $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                     // 7647
                }                                                                                                      // 7648
                                                                                                                       // 7649
                controllers[directive.name] = controllerInstance;                                                      // 7650
              });                                                                                                      // 7651
            }                                                                                                          // 7652
                                                                                                                       // 7653
            if (newIsolateScopeDirective) {                                                                            // 7654
              compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 7656
              compile.$$addScopeClass($element, true);                                                                 // 7657
                                                                                                                       // 7658
              var isolateScopeController = controllers && controllers[newIsolateScopeDirective.name];                  // 7659
              var isolateBindingContext = isolateScope;                                                                // 7660
              if (isolateScopeController && isolateScopeController.identifier &&                                       // 7661
                newIsolateScopeDirective.bindToController === true) {                                                  // 7662
                isolateBindingContext = isolateScopeController.instance;                                               // 7663
              }                                                                                                        // 7664
                                                                                                                       // 7665
              forEach(isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings, function(definition, scopeName) {
                var attrName = definition.attrName,                                                                    // 7667
                  optional = definition.optional,                                                                      // 7668
                  mode = definition.mode, // @, =, or &                                                                // 7669
                  lastValue,                                                                                           // 7670
                  parentGet, parentSet, compare;                                                                       // 7671
                                                                                                                       // 7672
                switch (mode) {                                                                                        // 7673
                                                                                                                       // 7674
                  case '@':                                                                                            // 7675
                    attrs.$observe(attrName, function(value) {                                                         // 7676
                      isolateBindingContext[scopeName] = value;                                                        // 7677
                    });                                                                                                // 7678
                    attrs.$$observers[attrName].$$scope = scope;                                                       // 7679
                    if (attrs[attrName]) {                                                                             // 7680
                      // If the attribute has been provided then we trigger an interpolation to ensure                 // 7681
                      // the value is there for use in the link fn                                                     // 7682
                      isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);                         // 7683
                    }                                                                                                  // 7684
                    break;                                                                                             // 7685
                                                                                                                       // 7686
                  case '=':                                                                                            // 7687
                    if (optional && !attrs[attrName]) {                                                                // 7688
                      return;                                                                                          // 7689
                    }                                                                                                  // 7690
                    parentGet = $parse(attrs[attrName]);                                                               // 7691
                    if (parentGet.literal) {                                                                           // 7692
                      compare = equals;                                                                                // 7693
                    } else {                                                                                           // 7694
                      compare = function(a, b) { return a === b || (a !== a && b !== b); };                            // 7695
                    }                                                                                                  // 7696
                    parentSet = parentGet.assign || function() {                                                       // 7697
                      // reset the change, or we will throw this exception on every $digest                            // 7698
                      lastValue = isolateBindingContext[scopeName] = parentGet(scope);                                 // 7699
                      throw $compileMinErr('nonassign',                                                                // 7700
                        "Expression '{0}' used with directive '{1}' is non-assignable!",                               // 7701
                        attrs[attrName], newIsolateScopeDirective.name);                                               // 7702
                    };                                                                                                 // 7703
                    lastValue = isolateBindingContext[scopeName] = parentGet(scope);                                   // 7704
                    var parentValueWatch = function parentValueWatch(parentValue) {                                    // 7705
                      if (!compare(parentValue, isolateBindingContext[scopeName])) {                                   // 7706
                        // we are out of sync and need to copy                                                         // 7707
                        if (!compare(parentValue, lastValue)) {                                                        // 7708
                          // parent changed and it has precedence                                                      // 7709
                          isolateBindingContext[scopeName] = parentValue;                                              // 7710
                        } else {                                                                                       // 7711
                          // if the parent can be assigned then do so                                                  // 7712
                          parentSet(scope, parentValue = isolateBindingContext[scopeName]);                            // 7713
                        }                                                                                              // 7714
                      }                                                                                                // 7715
                      return lastValue = parentValue;                                                                  // 7716
                    };                                                                                                 // 7717
                    parentValueWatch.$stateful = true;                                                                 // 7718
                    var unwatch;                                                                                       // 7719
                    if (definition.collection) {                                                                       // 7720
                      unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                             // 7721
                    } else {                                                                                           // 7722
                      unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);      // 7723
                    }                                                                                                  // 7724
                    isolateScope.$on('$destroy', unwatch);                                                             // 7725
                    break;                                                                                             // 7726
                                                                                                                       // 7727
                  case '&':                                                                                            // 7728
                    parentGet = $parse(attrs[attrName]);                                                               // 7729
                    isolateBindingContext[scopeName] = function(locals) {                                              // 7730
                      return parentGet(scope, locals);                                                                 // 7731
                    };                                                                                                 // 7732
                    break;                                                                                             // 7733
                }                                                                                                      // 7734
              });                                                                                                      // 7735
            }                                                                                                          // 7736
            if (controllers) {                                                                                         // 7737
              forEach(controllers, function(controller) {                                                              // 7738
                controller();                                                                                          // 7739
              });                                                                                                      // 7740
              controllers = null;                                                                                      // 7741
            }                                                                                                          // 7742
                                                                                                                       // 7743
            // PRELINKING                                                                                              // 7744
            for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                         // 7745
              linkFn = preLinkFns[i];                                                                                  // 7746
              invokeLinkFn(linkFn,                                                                                     // 7747
                linkFn.isolateScope ? isolateScope : scope,                                                            // 7748
                $element,                                                                                              // 7749
                attrs,                                                                                                 // 7750
                linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),  // 7751
                transcludeFn                                                                                           // 7752
              );                                                                                                       // 7753
            }                                                                                                          // 7754
                                                                                                                       // 7755
            // RECURSION                                                                                               // 7756
            // We only pass the isolate scope, if the isolate directive has a template,                                // 7757
            // otherwise the child elements do not belong to the isolate directive.                                    // 7758
            var scopeToChild = scope;                                                                                  // 7759
            if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
              scopeToChild = isolateScope;                                                                             // 7761
            }                                                                                                          // 7762
            childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);               // 7763
                                                                                                                       // 7764
            // POSTLINKING                                                                                             // 7765
            for (i = postLinkFns.length - 1; i >= 0; i--) {                                                            // 7766
              linkFn = postLinkFns[i];                                                                                 // 7767
              invokeLinkFn(linkFn,                                                                                     // 7768
                linkFn.isolateScope ? isolateScope : scope,                                                            // 7769
                $element,                                                                                              // 7770
                attrs,                                                                                                 // 7771
                linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),  // 7772
                transcludeFn                                                                                           // 7773
              );                                                                                                       // 7774
            }                                                                                                          // 7775
                                                                                                                       // 7776
            // This is the function that is injected as `$transclude`.                                                 // 7777
            // Note: all arguments are optional!                                                                       // 7778
            function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                           // 7779
              var transcludeControllers;                                                                               // 7780
                                                                                                                       // 7781
              // No scope passed in:                                                                                   // 7782
              if (!isScope(scope)) {                                                                                   // 7783
                futureParentElement = cloneAttachFn;                                                                   // 7784
                cloneAttachFn = scope;                                                                                 // 7785
                scope = undefined;                                                                                     // 7786
              }                                                                                                        // 7787
                                                                                                                       // 7788
              if (hasElementTranscludeDirective) {                                                                     // 7789
                transcludeControllers = elementControllers;                                                            // 7790
              }                                                                                                        // 7791
              if (!futureParentElement) {                                                                              // 7792
                futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                    // 7793
              }                                                                                                        // 7794
              return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
            }                                                                                                          // 7796
          }                                                                                                            // 7797
        }                                                                                                              // 7798
                                                                                                                       // 7799
        function markDirectivesAsIsolate(directives) {                                                                 // 7800
          // mark all directives as needing isolate scope.                                                             // 7801
          for (var j = 0, jj = directives.length; j < jj; j++) {                                                       // 7802
            directives[j] = inherit(directives[j], {$$isolateScope: true});                                            // 7803
          }                                                                                                            // 7804
        }                                                                                                              // 7805
                                                                                                                       // 7806
        /**                                                                                                            // 7807
         * looks up the directive and decorates it with exception handling and proper parameters. We                   // 7808
         * call this the boundDirective.                                                                               // 7809
         *                                                                                                             // 7810
         * @param {string} name name of the directive to look up.                                                      // 7811
         * @param {string} location The directive must be found in specific format.                                    // 7812
         *   String containing any of theses characters:                                                               // 7813
         *                                                                                                             // 7814
         *   * `E`: element name                                                                                       // 7815
         *   * `A': attribute                                                                                          // 7816
         *   * `C`: class                                                                                              // 7817
         *   * `M`: comment                                                                                            // 7818
         * @returns {boolean} true if directive was added.                                                             // 7819
         */                                                                                                            // 7820
        function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                // 7821
                              endAttrName) {                                                                           // 7822
          if (name === ignoreDirective) return null;                                                                   // 7823
          var match = null;                                                                                            // 7824
          if (hasDirectives.hasOwnProperty(name)) {                                                                    // 7825
            for (var directive, directives = $injector.get(name + Suffix),                                             // 7826
                   i = 0, ii = directives.length; i < ii; i++) {                                                       // 7827
              try {                                                                                                    // 7828
                directive = directives[i];                                                                             // 7829
                if ((maxPriority === undefined || maxPriority > directive.priority) &&                                 // 7830
                  directive.restrict.indexOf(location) != -1) {                                                        // 7831
                  if (startAttrName) {                                                                                 // 7832
                    directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                      // 7833
                  }                                                                                                    // 7834
                  tDirectives.push(directive);                                                                         // 7835
                  match = directive;                                                                                   // 7836
                }                                                                                                      // 7837
              } catch (e) { $exceptionHandler(e); }                                                                    // 7838
            }                                                                                                          // 7839
          }                                                                                                            // 7840
          return match;                                                                                                // 7841
        }                                                                                                              // 7842
                                                                                                                       // 7843
                                                                                                                       // 7844
        /**                                                                                                            // 7845
         * looks up the directive and returns true if it is a multi-element directive,                                 // 7846
         * and therefore requires DOM nodes between -start and -end markers to be grouped                              // 7847
         * together.                                                                                                   // 7848
         *                                                                                                             // 7849
         * @param {string} name name of the directive to look up.                                                      // 7850
         * @returns true if directive was registered as multi-element.                                                 // 7851
         */                                                                                                            // 7852
        function directiveIsMultiElement(name) {                                                                       // 7853
          if (hasDirectives.hasOwnProperty(name)) {                                                                    // 7854
            for (var directive, directives = $injector.get(name + Suffix),                                             // 7855
                   i = 0, ii = directives.length; i < ii; i++) {                                                       // 7856
              directive = directives[i];                                                                               // 7857
              if (directive.multiElement) {                                                                            // 7858
                return true;                                                                                           // 7859
              }                                                                                                        // 7860
            }                                                                                                          // 7861
          }                                                                                                            // 7862
          return false;                                                                                                // 7863
        }                                                                                                              // 7864
                                                                                                                       // 7865
        /**                                                                                                            // 7866
         * When the element is replaced with HTML template then the new attributes                                     // 7867
         * on the template need to be merged with the existing attributes in the DOM.                                  // 7868
         * The desired effect is to have both of the attributes present.                                               // 7869
         *                                                                                                             // 7870
         * @param {object} dst destination attributes (original DOM)                                                   // 7871
         * @param {object} src source attributes (from the directive template)                                         // 7872
         */                                                                                                            // 7873
        function mergeTemplateAttributes(dst, src) {                                                                   // 7874
          var srcAttr = src.$attr,                                                                                     // 7875
            dstAttr = dst.$attr,                                                                                       // 7876
            $element = dst.$$element;                                                                                  // 7877
                                                                                                                       // 7878
          // reapply the old attributes to the new element                                                             // 7879
          forEach(dst, function(value, key) {                                                                          // 7880
            if (key.charAt(0) != '$') {                                                                                // 7881
              if (src[key] && src[key] !== value) {                                                                    // 7882
                value += (key === 'style' ? ';' : ' ') + src[key];                                                     // 7883
              }                                                                                                        // 7884
              dst.$set(key, value, true, srcAttr[key]);                                                                // 7885
            }                                                                                                          // 7886
          });                                                                                                          // 7887
                                                                                                                       // 7888
          // copy the new attributes on the old attrs object                                                           // 7889
          forEach(src, function(value, key) {                                                                          // 7890
            if (key == 'class') {                                                                                      // 7891
              safeAddClass($element, value);                                                                           // 7892
              dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                         // 7893
            } else if (key == 'style') {                                                                               // 7894
              $element.attr('style', $element.attr('style') + ';' + value);                                            // 7895
              dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                         // 7896
              // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                   // 7897
              // You will get an "InvalidCharacterError: DOM Exception 5" error if you                                 // 7898
              // have an attribute like "has-own-property" or "data-has-own-property", etc.                            // 7899
            } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                             // 7900
              dst[key] = value;                                                                                        // 7901
              dstAttr[key] = srcAttr[key];                                                                             // 7902
            }                                                                                                          // 7903
          });                                                                                                          // 7904
        }                                                                                                              // 7905
                                                                                                                       // 7906
                                                                                                                       // 7907
        function compileTemplateUrl(directives, $compileNode, tAttrs,                                                  // 7908
                                    $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
          var linkQueue = [],                                                                                          // 7910
            afterTemplateNodeLinkFn,                                                                                   // 7911
            afterTemplateChildLinkFn,                                                                                  // 7912
            beforeTemplateCompileNode = $compileNode[0],                                                               // 7913
            origAsyncDirective = directives.shift(),                                                                   // 7914
            derivedSyncDirective = inherit(origAsyncDirective, {                                                       // 7915
              templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective              // 7916
            }),                                                                                                        // 7917
            templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                 // 7918
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 7919
              : origAsyncDirective.templateUrl,                                                                        // 7920
            templateNamespace = origAsyncDirective.templateNamespace;                                                  // 7921
                                                                                                                       // 7922
          $compileNode.empty();                                                                                        // 7923
                                                                                                                       // 7924
          $templateRequest($sce.getTrustedResourceUrl(templateUrl))                                                    // 7925
            .then(function(content) {                                                                                  // 7926
              var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                   // 7927
                                                                                                                       // 7928
              content = denormalizeTemplate(content);                                                                  // 7929
                                                                                                                       // 7930
              if (origAsyncDirective.replace) {                                                                        // 7931
                if (jqLiteIsTextNode(content)) {                                                                       // 7932
                  $template = [];                                                                                      // 7933
                } else {                                                                                               // 7934
                  $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                          // 7935
                }                                                                                                      // 7936
                compileNode = $template[0];                                                                            // 7937
                                                                                                                       // 7938
                if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                             // 7939
                  throw $compileMinErr('tplrt',                                                                        // 7940
                    "Template for directive '{0}' must have exactly one root element. {1}",                            // 7941
                    origAsyncDirective.name, templateUrl);                                                             // 7942
                }                                                                                                      // 7943
                                                                                                                       // 7944
                tempTemplateAttrs = {$attr: {}};                                                                       // 7945
                replaceWith($rootElement, $compileNode, compileNode);                                                  // 7946
                var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                        // 7947
                                                                                                                       // 7948
                if (isObject(origAsyncDirective.scope)) {                                                              // 7949
                  markDirectivesAsIsolate(templateDirectives);                                                         // 7950
                }                                                                                                      // 7951
                directives = templateDirectives.concat(directives);                                                    // 7952
                mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                    // 7953
              } else {                                                                                                 // 7954
                compileNode = beforeTemplateCompileNode;                                                               // 7955
                $compileNode.html(content);                                                                            // 7956
              }                                                                                                        // 7957
                                                                                                                       // 7958
              directives.unshift(derivedSyncDirective);                                                                // 7959
                                                                                                                       // 7960
              afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                         // 7961
                childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                          // 7962
                previousCompileContext);                                                                               // 7963
              forEach($rootElement, function(node, i) {                                                                // 7964
                if (node == compileNode) {                                                                             // 7965
                  $rootElement[i] = $compileNode[0];                                                                   // 7966
                }                                                                                                      // 7967
              });                                                                                                      // 7968
              afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                  // 7969
                                                                                                                       // 7970
              while (linkQueue.length) {                                                                               // 7971
                var scope = linkQueue.shift(),                                                                         // 7972
                  beforeTemplateLinkNode = linkQueue.shift(),                                                          // 7973
                  linkRootElement = linkQueue.shift(),                                                                 // 7974
                  boundTranscludeFn = linkQueue.shift(),                                                               // 7975
                  linkNode = $compileNode[0];                                                                          // 7976
                                                                                                                       // 7977
                if (scope.$$destroyed) continue;                                                                       // 7978
                                                                                                                       // 7979
                if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                            // 7980
                  var oldClasses = beforeTemplateLinkNode.className;                                                   // 7981
                                                                                                                       // 7982
                  if (!(previousCompileContext.hasElementTranscludeDirective &&                                        // 7983
                    origAsyncDirective.replace)) {                                                                     // 7984
                    // it was cloned therefore we have to clone as well.                                               // 7985
                    linkNode = jqLiteClone(compileNode);                                                               // 7986
                  }                                                                                                    // 7987
                  replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                              // 7988
                                                                                                                       // 7989
                  // Copy in CSS classes from original node                                                            // 7990
                  safeAddClass(jqLite(linkNode), oldClasses);                                                          // 7991
                }                                                                                                      // 7992
                if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                 // 7993
                  childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
                } else {                                                                                               // 7995
                  childBoundTranscludeFn = boundTranscludeFn;                                                          // 7996
                }                                                                                                      // 7997
                afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                       // 7998
                  childBoundTranscludeFn);                                                                             // 7999
              }                                                                                                        // 8000
              linkQueue = null;                                                                                        // 8001
            });                                                                                                        // 8002
                                                                                                                       // 8003
          return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {          // 8004
            var childBoundTranscludeFn = boundTranscludeFn;                                                            // 8005
            if (scope.$$destroyed) return;                                                                             // 8006
            if (linkQueue) {                                                                                           // 8007
              linkQueue.push(scope,                                                                                    // 8008
                node,                                                                                                  // 8009
                rootElement,                                                                                           // 8010
                childBoundTranscludeFn);                                                                               // 8011
            } else {                                                                                                   // 8012
              if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                   // 8013
                childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
              }                                                                                                        // 8015
              afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);     // 8016
            }                                                                                                          // 8017
          };                                                                                                           // 8018
        }                                                                                                              // 8019
                                                                                                                       // 8020
                                                                                                                       // 8021
        /**                                                                                                            // 8022
         * Sorting function for bound directives.                                                                      // 8023
         */                                                                                                            // 8024
        function byPriority(a, b) {                                                                                    // 8025
          var diff = b.priority - a.priority;                                                                          // 8026
          if (diff !== 0) return diff;                                                                                 // 8027
          if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                    // 8028
          return a.index - b.index;                                                                                    // 8029
        }                                                                                                              // 8030
                                                                                                                       // 8031
                                                                                                                       // 8032
        function assertNoDuplicate(what, previousDirective, directive, element) {                                      // 8033
          if (previousDirective) {                                                                                     // 8034
            throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',                  // 8035
              previousDirective.name, directive.name, what, startingTag(element));                                     // 8036
          }                                                                                                            // 8037
        }                                                                                                              // 8038
                                                                                                                       // 8039
                                                                                                                       // 8040
        function addTextInterpolateDirective(directives, text) {                                                       // 8041
          var interpolateFn = $interpolate(text, true);                                                                // 8042
          if (interpolateFn) {                                                                                         // 8043
            directives.push({                                                                                          // 8044
              priority: 0,                                                                                             // 8045
              compile: function textInterpolateCompileFn(templateNode) {                                               // 8046
                var templateNodeParent = templateNode.parent(),                                                        // 8047
                  hasCompileParent = !!templateNodeParent.length;                                                      // 8048
                                                                                                                       // 8049
                // When transcluding a template that has bindings in the root                                          // 8050
                // we don't have a parent and thus need to add the class during linking fn.                            // 8051
                if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                   // 8052
                                                                                                                       // 8053
                return function textInterpolateLinkFn(scope, node) {                                                   // 8054
                  var parent = node.parent();                                                                          // 8055
                  if (!hasCompileParent) compile.$$addBindingClass(parent);                                            // 8056
                  compile.$$addBindingInfo(parent, interpolateFn.expressions);                                         // 8057
                  scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                               // 8058
                    node[0].nodeValue = value;                                                                         // 8059
                  });                                                                                                  // 8060
                };                                                                                                     // 8061
              }                                                                                                        // 8062
            });                                                                                                        // 8063
          }                                                                                                            // 8064
        }                                                                                                              // 8065
                                                                                                                       // 8066
                                                                                                                       // 8067
        function wrapTemplate(type, template) {                                                                        // 8068
          type = lowercase(type || 'html');                                                                            // 8069
          switch (type) {                                                                                              // 8070
            case 'svg':                                                                                                // 8071
            case 'math':                                                                                               // 8072
              var wrapper = document.createElement('div');                                                             // 8073
              wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                     // 8074
              return wrapper.childNodes[0].childNodes;                                                                 // 8075
            default:                                                                                                   // 8076
              return template;                                                                                         // 8077
          }                                                                                                            // 8078
        }                                                                                                              // 8079
                                                                                                                       // 8080
                                                                                                                       // 8081
        function getTrustedContext(node, attrNormalizedName) {                                                         // 8082
          if (attrNormalizedName == "srcdoc") {                                                                        // 8083
            return $sce.HTML;                                                                                          // 8084
          }                                                                                                            // 8085
          var tag = nodeName_(node);                                                                                   // 8086
          // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                       // 8087
          if (attrNormalizedName == "xlinkHref" ||                                                                     // 8088
            (tag == "form" && attrNormalizedName == "action") ||                                                       // 8089
            (tag != "img" && (attrNormalizedName == "src" ||                                                           // 8090
            attrNormalizedName == "ngSrc"))) {                                                                         // 8091
            return $sce.RESOURCE_URL;                                                                                  // 8092
          }                                                                                                            // 8093
        }                                                                                                              // 8094
                                                                                                                       // 8095
                                                                                                                       // 8096
        function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                            // 8097
          var trustedContext = getTrustedContext(node, name);                                                          // 8098
          allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                   // 8099
                                                                                                                       // 8100
          var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                 // 8101
                                                                                                                       // 8102
          // no interpolation found -> ignore                                                                          // 8103
          if (!interpolateFn) return;                                                                                  // 8104
                                                                                                                       // 8105
                                                                                                                       // 8106
          if (name === "multiple" && nodeName_(node) === "select") {                                                   // 8107
            throw $compileMinErr("selmulti",                                                                           // 8108
              "Binding to the 'multiple' attribute is not supported. Element: {0}",                                    // 8109
              startingTag(node));                                                                                      // 8110
          }                                                                                                            // 8111
                                                                                                                       // 8112
          directives.push({                                                                                            // 8113
            priority: 100,                                                                                             // 8114
            compile: function() {                                                                                      // 8115
              return {                                                                                                 // 8116
                pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                         // 8117
                  var $$observers = (attr.$$observers || (attr.$$observers = {}));                                     // 8118
                                                                                                                       // 8119
                  if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                          // 8120
                    throw $compileMinErr('nodomevents',                                                                // 8121
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +                // 8122
                      "ng- versions (such as ng-click instead of onclick) instead.");                                  // 8123
                  }                                                                                                    // 8124
                                                                                                                       // 8125
                  // If the attribute has changed since last $interpolate()ed                                          // 8126
                  var newValue = attr[name];                                                                           // 8127
                  if (newValue !== value) {                                                                            // 8128
                    // we need to interpolate again since the attribute value has been updated                         // 8129
                    // (e.g. by another directive's compile function)                                                  // 8130
                    // ensure unset/empty values make interpolateFn falsy                                              // 8131
                    interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);            // 8132
                    value = newValue;                                                                                  // 8133
                  }                                                                                                    // 8134
                                                                                                                       // 8135
                  // if attribute was updated so that there is no interpolation going on we don't want to              // 8136
                  // register any observers                                                                            // 8137
                  if (!interpolateFn) return;                                                                          // 8138
                                                                                                                       // 8139
                  // initialize attr object so that it's ready in case we need the value for isolate                   // 8140
                  // scope initialization, otherwise the value would not be available from isolate                     // 8141
                  // directive's linking fn during linking phase                                                       // 8142
                  attr[name] = interpolateFn(scope);                                                                   // 8143
                                                                                                                       // 8144
                  ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                      // 8145
                  (attr.$$observers && attr.$$observers[name].$$scope || scope).                                       // 8146
                    $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                      // 8147
                      //special case for class attribute addition + removal                                            // 8148
                      //so that class changes can tap into the animation                                               // 8149
                      //hooks provided by the $animate service. Be sure to                                             // 8150
                      //skip animations when the first digest occurs (when                                             // 8151
                      //both the new and the old values are the same) since                                            // 8152
                      //the CSS classes are the non-interpolated values                                                // 8153
                      if (name === 'class' && newValue != oldValue) {                                                  // 8154
                        attr.$updateClass(newValue, oldValue);                                                         // 8155
                      } else {                                                                                         // 8156
                        attr.$set(name, newValue);                                                                     // 8157
                      }                                                                                                // 8158
                    });                                                                                                // 8159
                }                                                                                                      // 8160
              };                                                                                                       // 8161
            }                                                                                                          // 8162
          });                                                                                                          // 8163
        }                                                                                                              // 8164
                                                                                                                       // 8165
                                                                                                                       // 8166
        /**                                                                                                            // 8167
         * This is a special jqLite.replaceWith, which can replace items which                                         // 8168
         * have no parents, provided that the containing jqLite collection is provided.                                // 8169
         *                                                                                                             // 8170
         * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes               // 8171
         *                               in the root of the tree.                                                      // 8172
         * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                  // 8173
         *                                  the shell, but replace its DOM node reference.                             // 8174
         * @param {Node} newNode The new DOM node.                                                                     // 8175
         */                                                                                                            // 8176
        function replaceWith($rootElement, elementsToRemove, newNode) {                                                // 8177
          var firstElementToRemove = elementsToRemove[0],                                                              // 8178
            removeCount = elementsToRemove.length,                                                                     // 8179
            parent = firstElementToRemove.parentNode,                                                                  // 8180
            i, ii;                                                                                                     // 8181
                                                                                                                       // 8182
          if ($rootElement) {                                                                                          // 8183
            for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                       // 8184
              if ($rootElement[i] == firstElementToRemove) {                                                           // 8185
                $rootElement[i++] = newNode;                                                                           // 8186
                for (var j = i, j2 = j + removeCount - 1,                                                              // 8187
                       jj = $rootElement.length;                                                                       // 8188
                     j < jj; j++, j2++) {                                                                              // 8189
                  if (j2 < jj) {                                                                                       // 8190
                    $rootElement[j] = $rootElement[j2];                                                                // 8191
                  } else {                                                                                             // 8192
                    delete $rootElement[j];                                                                            // 8193
                  }                                                                                                    // 8194
                }                                                                                                      // 8195
                $rootElement.length -= removeCount - 1;                                                                // 8196
                                                                                                                       // 8197
                // If the replaced element is also the jQuery .context then replace it                                 // 8198
                // .context is a deprecated jQuery api, so we should set it only when jQuery set it                    // 8199
                // http://api.jquery.com/context/                                                                      // 8200
                if ($rootElement.context === firstElementToRemove) {                                                   // 8201
                  $rootElement.context = newNode;                                                                      // 8202
                }                                                                                                      // 8203
                break;                                                                                                 // 8204
              }                                                                                                        // 8205
            }                                                                                                          // 8206
          }                                                                                                            // 8207
                                                                                                                       // 8208
          if (parent) {                                                                                                // 8209
            parent.replaceChild(newNode, firstElementToRemove);                                                        // 8210
          }                                                                                                            // 8211
                                                                                                                       // 8212
          // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                    // 8213
          var fragment = document.createDocumentFragment();                                                            // 8214
          fragment.appendChild(firstElementToRemove);                                                                  // 8215
                                                                                                                       // 8216
          // Copy over user data (that includes Angular's $scope etc.). Don't copy private                             // 8217
          // data here because there's no public interface in jQuery to do that and copying over                       // 8218
          // event listeners (which is the main use of private data) wouldn't work anyway.                             // 8219
          jqLite(newNode).data(jqLite(firstElementToRemove).data());                                                   // 8220
                                                                                                                       // 8221
          // Remove data of the replaced element. We cannot just call .remove()                                        // 8222
          // on the element it since that would deallocate scope that is needed                                        // 8223
          // for the new node. Instead, remove the data "manually".                                                    // 8224
          if (!jQuery) {                                                                                               // 8225
            delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                 // 8226
          } else {                                                                                                     // 8227
            // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                      // 8228
            // the replaced element. The cleanData version monkey-patched by Angular would cause                       // 8229
            // the scope to be trashed and we do need the very same scope to work with the new                         // 8230
            // element. However, we cannot just cache the non-patched version and use it here as                       // 8231
            // that would break if another library patches the method after Angular does (one                          // 8232
            // example is jQuery UI). Instead, set a flag indicating scope destroying should be                        // 8233
            // skipped this one time.                                                                                  // 8234
            skipDestroyOnNextJQueryCleanData = true;                                                                   // 8235
            jQuery.cleanData([firstElementToRemove]);                                                                  // 8236
          }                                                                                                            // 8237
                                                                                                                       // 8238
          for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                 // 8239
            var element = elementsToRemove[k];                                                                         // 8240
            jqLite(element).remove(); // must do this way to clean up expando                                          // 8241
            fragment.appendChild(element);                                                                             // 8242
            delete elementsToRemove[k];                                                                                // 8243
          }                                                                                                            // 8244
                                                                                                                       // 8245
          elementsToRemove[0] = newNode;                                                                               // 8246
          elementsToRemove.length = 1;                                                                                 // 8247
        }                                                                                                              // 8248
                                                                                                                       // 8249
                                                                                                                       // 8250
        function cloneAndAnnotateFn(fn, annotation) {                                                                  // 8251
          return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                             // 8252
        }                                                                                                              // 8253
                                                                                                                       // 8254
                                                                                                                       // 8255
        function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                             // 8256
          try {                                                                                                        // 8257
            linkFn(scope, $element, attrs, controllers, transcludeFn);                                                 // 8258
          } catch (e) {                                                                                                // 8259
            $exceptionHandler(e, startingTag($element));                                                               // 8260
          }                                                                                                            // 8261
        }                                                                                                              // 8262
      }];                                                                                                              // 8263
  }                                                                                                                    // 8264
                                                                                                                       // 8265
  var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                         // 8266
  /**                                                                                                                  // 8267
   * Converts all accepted directives format into proper directive name.                                               // 8268
   * @param name Name to normalize                                                                                     // 8269
   */                                                                                                                  // 8270
  function directiveNormalize(name) {                                                                                  // 8271
    return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                 // 8272
  }                                                                                                                    // 8273
                                                                                                                       // 8274
  /**                                                                                                                  // 8275
   * @ngdoc type                                                                                                       // 8276
   * @name $compile.directive.Attributes                                                                               // 8277
   *                                                                                                                   // 8278
   * @description                                                                                                      // 8279
   * A shared object between directive compile / linking functions which contains normalized DOM                       // 8280
   * element attributes. The values reflect current binding state `{{ }}`. The normalization is                        // 8281
   * needed since all of these are treated as equivalent in Angular:                                                   // 8282
   *                                                                                                                   // 8283
   * ```                                                                                                               // 8284
   *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">                                                  // 8285
   * ```                                                                                                               // 8286
   */                                                                                                                  // 8287
                                                                                                                       // 8288
  /**                                                                                                                  // 8289
   * @ngdoc property                                                                                                   // 8290
   * @name $compile.directive.Attributes#$attr                                                                         // 8291
   *                                                                                                                   // 8292
   * @description                                                                                                      // 8293
   * A map of DOM element attribute names to the normalized name. This is                                              // 8294
   * needed to do reverse lookup from normalized name back to actual name.                                             // 8295
   */                                                                                                                  // 8296
                                                                                                                       // 8297
                                                                                                                       // 8298
  /**                                                                                                                  // 8299
   * @ngdoc method                                                                                                     // 8300
   * @name $compile.directive.Attributes#$set                                                                          // 8301
   * @kind function                                                                                                    // 8302
   *                                                                                                                   // 8303
   * @description                                                                                                      // 8304
   * Set DOM element attribute value.                                                                                  // 8305
   *                                                                                                                   // 8306
   *                                                                                                                   // 8307
   * @param {string} name Normalized element attribute name of the property to modify. The name is                     // 8308
   *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                        // 8309
   *          property to the original name.                                                                           // 8310
   * @param {string} value Value to set the attribute to. The value can be an interpolated string.                     // 8311
   */                                                                                                                  // 8312
                                                                                                                       // 8313
                                                                                                                       // 8314
                                                                                                                       // 8315
  /**                                                                                                                  // 8316
   * Closure compiler type information                                                                                 // 8317
   */                                                                                                                  // 8318
                                                                                                                       // 8319
  function nodesetLinkingFn(                                                                                           // 8320
    /* angular.Scope */ scope,                                                                                         // 8321
    /* NodeList */ nodeList,                                                                                           // 8322
    /* Element */ rootElement,                                                                                         // 8323
    /* function(Function) */ boundTranscludeFn                                                                         // 8324
  ) {}                                                                                                                 // 8325
                                                                                                                       // 8326
  function directiveLinkingFn(                                                                                         // 8327
    /* nodesetLinkingFn */ nodesetLinkingFn,                                                                           // 8328
    /* angular.Scope */ scope,                                                                                         // 8329
    /* Node */ node,                                                                                                   // 8330
    /* Element */ rootElement,                                                                                         // 8331
    /* function(Function) */ boundTranscludeFn                                                                         // 8332
  ) {}                                                                                                                 // 8333
                                                                                                                       // 8334
  function tokenDifference(str1, str2) {                                                                               // 8335
    var values = '',                                                                                                   // 8336
      tokens1 = str1.split(/\s+/),                                                                                     // 8337
      tokens2 = str2.split(/\s+/);                                                                                     // 8338
                                                                                                                       // 8339
    outer:                                                                                                             // 8340
      for (var i = 0; i < tokens1.length; i++) {                                                                       // 8341
        var token = tokens1[i];                                                                                        // 8342
        for (var j = 0; j < tokens2.length; j++) {                                                                     // 8343
          if (token == tokens2[j]) continue outer;                                                                     // 8344
        }                                                                                                              // 8345
        values += (values.length > 0 ? ' ' : '') + token;                                                              // 8346
      }                                                                                                                // 8347
    return values;                                                                                                     // 8348
  }                                                                                                                    // 8349
                                                                                                                       // 8350
  function removeComments(jqNodes) {                                                                                   // 8351
    jqNodes = jqLite(jqNodes);                                                                                         // 8352
    var i = jqNodes.length;                                                                                            // 8353
                                                                                                                       // 8354
    if (i <= 1) {                                                                                                      // 8355
      return jqNodes;                                                                                                  // 8356
    }                                                                                                                  // 8357
                                                                                                                       // 8358
    while (i--) {                                                                                                      // 8359
      var node = jqNodes[i];                                                                                           // 8360
      if (node.nodeType === NODE_TYPE_COMMENT) {                                                                       // 8361
        splice.call(jqNodes, i, 1);                                                                                    // 8362
      }                                                                                                                // 8363
    }                                                                                                                  // 8364
    return jqNodes;                                                                                                    // 8365
  }                                                                                                                    // 8366
                                                                                                                       // 8367
  var $controllerMinErr = minErr('$controller');                                                                       // 8368
                                                                                                                       // 8369
  /**                                                                                                                  // 8370
   * @ngdoc provider                                                                                                   // 8371
   * @name $controllerProvider                                                                                         // 8372
   * @description                                                                                                      // 8373
   * The {@link ng.$controller $controller service} is used by Angular to create new                                   // 8374
   * controllers.                                                                                                      // 8375
   *                                                                                                                   // 8376
   * This provider allows controller registration via the                                                              // 8377
   * {@link ng.$controllerProvider#register register} method.                                                          // 8378
   */                                                                                                                  // 8379
  function $ControllerProvider() {                                                                                     // 8380
    var controllers = {},                                                                                              // 8381
      globals = false,                                                                                                 // 8382
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;                                                                           // 8383
                                                                                                                       // 8384
                                                                                                                       // 8385
    /**                                                                                                                // 8386
     * @ngdoc method                                                                                                   // 8387
     * @name $controllerProvider#register                                                                              // 8388
     * @param {string|Object} name Controller name, or an object map of controllers where the keys are                 // 8389
     *    the names and the values are the constructors.                                                               // 8390
     * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                     // 8391
     *    annotations in the array notation).                                                                          // 8392
     */                                                                                                                // 8393
    this.register = function(name, constructor) {                                                                      // 8394
      assertNotHasOwnProperty(name, 'controller');                                                                     // 8395
      if (isObject(name)) {                                                                                            // 8396
        extend(controllers, name);                                                                                     // 8397
      } else {                                                                                                         // 8398
        controllers[name] = constructor;                                                                               // 8399
      }                                                                                                                // 8400
    };                                                                                                                 // 8401
                                                                                                                       // 8402
    /**                                                                                                                // 8403
     * @ngdoc method                                                                                                   // 8404
     * @name $controllerProvider#allowGlobals                                                                          // 8405
     * @description If called, allows `$controller` to find controller constructors on `window`                        // 8406
     */                                                                                                                // 8407
    this.allowGlobals = function() {                                                                                   // 8408
      globals = true;                                                                                                  // 8409
    };                                                                                                                 // 8410
                                                                                                                       // 8411
                                                                                                                       // 8412
    this.$get = ['$injector', '$window', function($injector, $window) {                                                // 8413
                                                                                                                       // 8414
      /**                                                                                                              // 8415
       * @ngdoc service                                                                                                // 8416
       * @name $controller                                                                                             // 8417
       * @requires $injector                                                                                           // 8418
       *                                                                                                               // 8419
       * @param {Function|string} constructor If called with a function then it's considered to be the                 // 8420
       *    controller constructor function. Otherwise it's considered to be a string which is used                    // 8421
       *    to retrieve the controller constructor using the following steps:                                          // 8422
       *                                                                                                               // 8423
       *    * check if a controller with given name is registered via `$controllerProvider`                            // 8424
       *    * check if evaluating the string on the current scope returns a constructor                                // 8425
       *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                           // 8426
       *      `window` object (not recommended)                                                                        // 8427
       *                                                                                                               // 8428
       *    The string can use the `controller as property` syntax, where the controller instance is published         // 8429
       *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this        // 8430
       *    to work correctly.                                                                                         // 8431
       *                                                                                                               // 8432
       * @param {Object} locals Injection locals for Controller.                                                       // 8433
       * @return {Object} Instance of given controller.                                                                // 8434
       *                                                                                                               // 8435
       * @description                                                                                                  // 8436
       * `$controller` service is responsible for instantiating controllers.                                           // 8437
       *                                                                                                               // 8438
       * It's just a simple call to {@link auto.$injector $injector}, but extracted into                               // 8439
       * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).          // 8440
       */                                                                                                              // 8441
      return function(expression, locals, later, ident) {                                                              // 8442
        // PRIVATE API:                                                                                                // 8443
        //   param `later` --- indicates that the controller's constructor is invoked at a later time.                 // 8444
        //                     If true, $controller will allocate the object with the correct                          // 8445
        //                     prototype chain, but will not invoke the controller until a returned                    // 8446
        //                     callback is invoked.                                                                    // 8447
        //   param `ident` --- An optional label which overrides the label parsed from the controller                  // 8448
        //                     expression, if any.                                                                     // 8449
        var instance, match, constructor, identifier;                                                                  // 8450
        later = later === true;                                                                                        // 8451
        if (ident && isString(ident)) {                                                                                // 8452
          identifier = ident;                                                                                          // 8453
        }                                                                                                              // 8454
                                                                                                                       // 8455
        if (isString(expression)) {                                                                                    // 8456
          match = expression.match(CNTRL_REG);                                                                         // 8457
          if (!match) {                                                                                                // 8458
            throw $controllerMinErr('ctrlfmt',                                                                         // 8459
              "Badly formed controller string '{0}'. " +                                                               // 8460
              "Must match `__name__ as __id__` or `__name__`.", expression);                                           // 8461
          }                                                                                                            // 8462
          constructor = match[1],                                                                                      // 8463
            identifier = identifier || match[3];                                                                       // 8464
          expression = controllers.hasOwnProperty(constructor)                                                         // 8465
            ? controllers[constructor]                                                                                 // 8466
            : getter(locals.$scope, constructor, true) ||                                                              // 8467
          (globals ? getter($window, constructor, true) : undefined);                                                  // 8468
                                                                                                                       // 8469
          assertArgFn(expression, constructor, true);                                                                  // 8470
        }                                                                                                              // 8471
                                                                                                                       // 8472
        if (later) {                                                                                                   // 8473
          // Instantiate controller later:                                                                             // 8474
          // This machinery is used to create an instance of the object before calling the                             // 8475
          // controller's constructor itself.                                                                          // 8476
          //                                                                                                           // 8477
          // This allows properties to be added to the controller before the constructor is                            // 8478
          // invoked. Primarily, this is used for isolate scope bindings in $compile.                                  // 8479
          //                                                                                                           // 8480
          // This feature is not intended for use by applications, and is thus not documented                          // 8481
          // publicly.                                                                                                 // 8482
          // Object creation: http://jsperf.com/create-constructor/2                                                   // 8483
          var controllerPrototype = (isArray(expression) ?                                                             // 8484
            expression[expression.length - 1] : expression).prototype;                                                 // 8485
          instance = Object.create(controllerPrototype || null);                                                       // 8486
                                                                                                                       // 8487
          if (identifier) {                                                                                            // 8488
            addIdentifier(locals, identifier, instance, constructor || expression.name);                               // 8489
          }                                                                                                            // 8490
                                                                                                                       // 8491
          return extend(function() {                                                                                   // 8492
            $injector.invoke(expression, instance, locals, constructor);                                               // 8493
            return instance;                                                                                           // 8494
          }, {                                                                                                         // 8495
            instance: instance,                                                                                        // 8496
            identifier: identifier                                                                                     // 8497
          });                                                                                                          // 8498
        }                                                                                                              // 8499
                                                                                                                       // 8500
        instance = $injector.instantiate(expression, locals, constructor);                                             // 8501
                                                                                                                       // 8502
        if (identifier) {                                                                                              // 8503
          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 8504
        }                                                                                                              // 8505
                                                                                                                       // 8506
        return instance;                                                                                               // 8507
      };                                                                                                               // 8508
                                                                                                                       // 8509
      function addIdentifier(locals, identifier, instance, name) {                                                     // 8510
        if (!(locals && isObject(locals.$scope))) {                                                                    // 8511
          throw minErr('$controller')('noscp',                                                                         // 8512
            "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",                        // 8513
            name, identifier);                                                                                         // 8514
        }                                                                                                              // 8515
                                                                                                                       // 8516
        locals.$scope[identifier] = instance;                                                                          // 8517
      }                                                                                                                // 8518
    }];                                                                                                                // 8519
  }                                                                                                                    // 8520
                                                                                                                       // 8521
  /**                                                                                                                  // 8522
   * @ngdoc service                                                                                                    // 8523
   * @name $document                                                                                                   // 8524
   * @requires $window                                                                                                 // 8525
   *                                                                                                                   // 8526
   * @description                                                                                                      // 8527
   * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                    // 8528
   *                                                                                                                   // 8529
   * @example                                                                                                          // 8530
   <example module="documentExample">                                                                                  // 8531
   <file name="index.html">                                                                                            // 8532
   <div ng-controller="ExampleController">                                                                             // 8533
   <p>$document title: <b ng-bind="title"></b></p>                                                                     // 8534
   <p>window.document title: <b ng-bind="windowTitle"></b></p>                                                         // 8535
   </div>                                                                                                              // 8536
   </file>                                                                                                             // 8537
   <file name="script.js">                                                                                             // 8538
   angular.module('documentExample', [])                                                                               // 8539
   .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                              // 8540
           $scope.title = $document[0].title;                                                                          // 8541
           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 8542
         }]);                                                                                                          // 8543
   </file>                                                                                                             // 8544
   </example>                                                                                                          // 8545
   */                                                                                                                  // 8546
  function $DocumentProvider() {                                                                                       // 8547
    this.$get = ['$window', function(window) {                                                                         // 8548
      return jqLite(window.document);                                                                                  // 8549
    }];                                                                                                                // 8550
  }                                                                                                                    // 8551
                                                                                                                       // 8552
  /**                                                                                                                  // 8553
   * @ngdoc service                                                                                                    // 8554
   * @name $exceptionHandler                                                                                           // 8555
   * @requires ng.$log                                                                                                 // 8556
   *                                                                                                                   // 8557
   * @description                                                                                                      // 8558
   * Any uncaught exception in angular expressions is delegated to this service.                                       // 8559
   * The default implementation simply delegates to `$log.error` which logs it into                                    // 8560
   * the browser console.                                                                                              // 8561
   *                                                                                                                   // 8562
   * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                     // 8563
   * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                    // 8564
   *                                                                                                                   // 8565
   * ## Example:                                                                                                       // 8566
   *                                                                                                                   // 8567
   * ```js                                                                                                             // 8568
   *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                               // 8569
 *     return function(exception, cause) {                                                                             // 8570
 *       exception.message += ' (caused by "' + cause + '")';                                                          // 8571
 *       throw exception;                                                                                              // 8572
 *     };                                                                                                              // 8573
 *   });                                                                                                               // 8574
   * ```                                                                                                               // 8575
   *                                                                                                                   // 8576
   * This example will override the normal action of `$exceptionHandler`, to make angular                              // 8577
   * exceptions fail hard when they happen, instead of just logging to the console.                                    // 8578
   *                                                                                                                   // 8579
   * <hr />                                                                                                            // 8580
   * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                     // 8581
   * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                       // 8582
   * (unless executed during a digest).                                                                                // 8583
   *                                                                                                                   // 8584
   * If you wish, you can manually delegate exceptions, e.g.                                                           // 8585
   * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                  // 8586
   *                                                                                                                   // 8587
   * @param {Error} exception Exception associated with the error.                                                     // 8588
   * @param {string=} cause optional information about the context in which                                            // 8589
   *       the error was thrown.                                                                                       // 8590
   *                                                                                                                   // 8591
   */                                                                                                                  // 8592
  function $ExceptionHandlerProvider() {                                                                               // 8593
    this.$get = ['$log', function($log) {                                                                              // 8594
      return function(exception, cause) {                                                                              // 8595
        $log.error.apply($log, arguments);                                                                             // 8596
      };                                                                                                               // 8597
    }];                                                                                                                // 8598
  }                                                                                                                    // 8599
                                                                                                                       // 8600
  var APPLICATION_JSON = 'application/json';                                                                           // 8601
  var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                           // 8602
  var JSON_START = /^\[|^\{(?!\{)/;                                                                                    // 8603
  var JSON_ENDS = {                                                                                                    // 8604
    '[': /]$/,                                                                                                         // 8605
    '{': /}$/                                                                                                          // 8606
  };                                                                                                                   // 8607
  var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;                                                                         // 8608
                                                                                                                       // 8609
  function defaultHttpResponseTransform(data, headers) {                                                               // 8610
    if (isString(data)) {                                                                                              // 8611
      // Strip json vulnerability protection prefix and trim whitespace                                                // 8612
      var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                  // 8613
                                                                                                                       // 8614
      if (tempData) {                                                                                                  // 8615
        var contentType = headers('Content-Type');                                                                     // 8616
        if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                  // 8617
          data = fromJson(tempData);                                                                                   // 8618
        }                                                                                                              // 8619
      }                                                                                                                // 8620
    }                                                                                                                  // 8621
                                                                                                                       // 8622
    return data;                                                                                                       // 8623
  }                                                                                                                    // 8624
                                                                                                                       // 8625
  function isJsonLike(str) {                                                                                           // 8626
    var jsonStart = str.match(JSON_START);                                                                             // 8627
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 8628
  }                                                                                                                    // 8629
                                                                                                                       // 8630
  /**                                                                                                                  // 8631
   * Parse headers into key value object                                                                               // 8632
   *                                                                                                                   // 8633
   * @param {string} headers Raw headers as a string                                                                   // 8634
   * @returns {Object} Parsed headers as key value object                                                              // 8635
   */                                                                                                                  // 8636
  function parseHeaders(headers) {                                                                                     // 8637
    var parsed = createMap(), key, val, i;                                                                             // 8638
                                                                                                                       // 8639
    if (!headers) return parsed;                                                                                       // 8640
                                                                                                                       // 8641
    forEach(headers.split('\n'), function(line) {                                                                      // 8642
      i = line.indexOf(':');                                                                                           // 8643
      key = lowercase(trim(line.substr(0, i)));                                                                        // 8644
      val = trim(line.substr(i + 1));                                                                                  // 8645
                                                                                                                       // 8646
      if (key) {                                                                                                       // 8647
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                    // 8648
      }                                                                                                                // 8649
    });                                                                                                                // 8650
                                                                                                                       // 8651
    return parsed;                                                                                                     // 8652
  }                                                                                                                    // 8653
                                                                                                                       // 8654
                                                                                                                       // 8655
  /**                                                                                                                  // 8656
   * Returns a function that provides access to parsed headers.                                                        // 8657
   *                                                                                                                   // 8658
   * Headers are lazy parsed when first requested.                                                                     // 8659
   * @see parseHeaders                                                                                                 // 8660
   *                                                                                                                   // 8661
   * @param {(string|Object)} headers Headers to provide access to.                                                    // 8662
   * @returns {function(string=)} Returns a getter function which if called with:                                      // 8663
   *                                                                                                                   // 8664
   *   - if called with single an argument returns a single header value or null                                       // 8665
   *   - if called with no arguments returns an object containing all headers.                                         // 8666
   */                                                                                                                  // 8667
  function headersGetter(headers) {                                                                                    // 8668
    var headersObj = isObject(headers) ? headers : undefined;                                                          // 8669
                                                                                                                       // 8670
    return function(name) {                                                                                            // 8671
      if (!headersObj) headersObj =  parseHeaders(headers);                                                            // 8672
                                                                                                                       // 8673
      if (name) {                                                                                                      // 8674
        var value = headersObj[lowercase(name)];                                                                       // 8675
        if (value === void 0) {                                                                                        // 8676
          value = null;                                                                                                // 8677
        }                                                                                                              // 8678
        return value;                                                                                                  // 8679
      }                                                                                                                // 8680
                                                                                                                       // 8681
      return headersObj;                                                                                               // 8682
    };                                                                                                                 // 8683
  }                                                                                                                    // 8684
                                                                                                                       // 8685
                                                                                                                       // 8686
  /**                                                                                                                  // 8687
   * Chain all given functions                                                                                         // 8688
   *                                                                                                                   // 8689
   * This function is used for both request and response transforming                                                  // 8690
   *                                                                                                                   // 8691
   * @param {*} data Data to transform.                                                                                // 8692
   * @param {function(string=)} headers HTTP headers getter fn.                                                        // 8693
   * @param {number} status HTTP status code of the response.                                                          // 8694
   * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                       // 8695
   * @returns {*} Transformed data.                                                                                    // 8696
   */                                                                                                                  // 8697
  function transformData(data, headers, status, fns) {                                                                 // 8698
    if (isFunction(fns))                                                                                               // 8699
      return fns(data, headers, status);                                                                               // 8700
                                                                                                                       // 8701
    forEach(fns, function(fn) {                                                                                        // 8702
      data = fn(data, headers, status);                                                                                // 8703
    });                                                                                                                // 8704
                                                                                                                       // 8705
    return data;                                                                                                       // 8706
  }                                                                                                                    // 8707
                                                                                                                       // 8708
                                                                                                                       // 8709
  function isSuccess(status) {                                                                                         // 8710
    return 200 <= status && status < 300;                                                                              // 8711
  }                                                                                                                    // 8712
                                                                                                                       // 8713
                                                                                                                       // 8714
  /**                                                                                                                  // 8715
   * @ngdoc provider                                                                                                   // 8716
   * @name $httpProvider                                                                                               // 8717
   * @description                                                                                                      // 8718
   * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                         // 8719
   * */                                                                                                                // 8720
  function $HttpProvider() {                                                                                           // 8721
    /**                                                                                                                // 8722
     * @ngdoc property                                                                                                 // 8723
     * @name $httpProvider#defaults                                                                                    // 8724
     * @description                                                                                                    // 8725
     *                                                                                                                 // 8726
     * Object containing default values for all {@link ng.$http $http} requests.                                       // 8727
     *                                                                                                                 // 8728
     * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}               // 8729
     * that will provide the cache for all requests who set their `cache` property to `true`.                          // 8730
     * If you set the `default.cache = false` then only requests that specify their own custom                         // 8731
     * cache object will be cached. See {@link $http#caching $http Caching} for more information.                      // 8732
     *                                                                                                                 // 8733
     * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                          // 8734
     * Defaults value is `'XSRF-TOKEN'`.                                                                               // 8735
     *                                                                                                                 // 8736
     * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                           // 8737
     * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                 // 8738
     *                                                                                                                 // 8739
     * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                   // 8740
     * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                       // 8741
     * setting default headers.                                                                                        // 8742
     *     - **`defaults.headers.common`**                                                                             // 8743
     *     - **`defaults.headers.post`**                                                                               // 8744
     *     - **`defaults.headers.put`**                                                                                // 8745
     *     - **`defaults.headers.patch`**                                                                              // 8746
     *                                                                                                                 // 8747
     **/                                                                                                               // 8748
    var defaults = this.defaults = {                                                                                   // 8749
      // transform incoming response data                                                                              // 8750
      transformResponse: [defaultHttpResponseTransform],                                                               // 8751
                                                                                                                       // 8752
      // transform outgoing request data                                                                               // 8753
      transformRequest: [function(d) {                                                                                 // 8754
        return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                              // 8755
      }],                                                                                                              // 8756
                                                                                                                       // 8757
      // default headers                                                                                               // 8758
      headers: {                                                                                                       // 8759
        common: {                                                                                                      // 8760
          'Accept': 'application/json, text/plain, */*'                                                                // 8761
        },                                                                                                             // 8762
        post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                            // 8763
        put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                            // 8764
        patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                             // 8765
      },                                                                                                               // 8766
                                                                                                                       // 8767
      xsrfCookieName: 'XSRF-TOKEN',                                                                                    // 8768
      xsrfHeaderName: 'X-XSRF-TOKEN'                                                                                   // 8769
    };                                                                                                                 // 8770
                                                                                                                       // 8771
    var useApplyAsync = false;                                                                                         // 8772
    /**                                                                                                                // 8773
     * @ngdoc method                                                                                                   // 8774
     * @name $httpProvider#useApplyAsync                                                                               // 8775
     * @description                                                                                                    // 8776
     *                                                                                                                 // 8777
     * Configure $http service to combine processing of multiple http responses received at around                     // 8778
     * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in            // 8779
     * significant performance improvement for bigger applications that make many HTTP requests                        // 8780
     * concurrently (common during application bootstrap).                                                             // 8781
     *                                                                                                                 // 8782
     * Defaults to false. If no value is specifed, returns the current configured value.                               // 8783
     *                                                                                                                 // 8784
     * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                        // 8785
     *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window                      // 8786
     *    to load and share the same digest cycle.                                                                     // 8787
     *                                                                                                                 // 8788
     * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                      // 8789
     *    otherwise, returns the current configured value.                                                             // 8790
     **/                                                                                                               // 8791
    this.useApplyAsync = function(value) {                                                                             // 8792
      if (isDefined(value)) {                                                                                          // 8793
        useApplyAsync = !!value;                                                                                       // 8794
        return this;                                                                                                   // 8795
      }                                                                                                                // 8796
      return useApplyAsync;                                                                                            // 8797
    };                                                                                                                 // 8798
                                                                                                                       // 8799
    /**                                                                                                                // 8800
     * @ngdoc property                                                                                                 // 8801
     * @name $httpProvider#interceptors                                                                                // 8802
     * @description                                                                                                    // 8803
     *                                                                                                                 // 8804
     * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                   // 8805
     * pre-processing of request or postprocessing of responses.                                                       // 8806
     *                                                                                                                 // 8807
     * These service factories are ordered by request, i.e. they are applied in the same order as the                  // 8808
     * array, on request, but reverse order, on response.                                                              // 8809
     *                                                                                                                 // 8810
     * {@link ng.$http#interceptors Interceptors detailed info}                                                        // 8811
     **/                                                                                                               // 8812
    var interceptorFactories = this.interceptors = [];                                                                 // 8813
                                                                                                                       // 8814
    this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',                         // 8815
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {                                     // 8816
                                                                                                                       // 8817
        var defaultCache = $cacheFactory('$http');                                                                     // 8818
                                                                                                                       // 8819
        /**                                                                                                            // 8820
         * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                         // 8821
         * The reversal is needed so that we can build up the interception chain around the                            // 8822
         * server request.                                                                                             // 8823
         */                                                                                                            // 8824
        var reversedInterceptors = [];                                                                                 // 8825
                                                                                                                       // 8826
        forEach(interceptorFactories, function(interceptorFactory) {                                                   // 8827
          reversedInterceptors.unshift(isString(interceptorFactory)                                                    // 8828
            ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                               // 8829
        });                                                                                                            // 8830
                                                                                                                       // 8831
        /**                                                                                                            // 8832
         * @ngdoc service                                                                                              // 8833
         * @kind function                                                                                              // 8834
         * @name $http                                                                                                 // 8835
         * @requires ng.$httpBackend                                                                                   // 8836
         * @requires $cacheFactory                                                                                     // 8837
         * @requires $rootScope                                                                                        // 8838
         * @requires $q                                                                                                // 8839
         * @requires $injector                                                                                         // 8840
         *                                                                                                             // 8841
         * @description                                                                                                // 8842
         * The `$http` service is a core Angular service that facilitates communication with the remote                // 8843
         * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)            // 8844
         * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                  // 8845
         *                                                                                                             // 8846
         * For unit testing applications that use `$http` service, see                                                 // 8847
         * {@link ngMock.$httpBackend $httpBackend mock}.                                                              // 8848
         *                                                                                                             // 8849
         * For a higher level of abstraction, please check out the {@link ngResource.$resource                         // 8850
     * $resource} service.                                                                                             // 8851
         *                                                                                                             // 8852
         * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                // 8853
         * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                // 8854
         * it is important to familiarize yourself with these APIs and the guarantees they provide.                    // 8855
         *                                                                                                             // 8856
         *                                                                                                             // 8857
         * ## General usage                                                                                            // 8858
         * The `$http` service is a function which takes a single argument ג€” a configuration object ג€”              // 8859
         * that is used to generate an HTTP request and returns  a {@link ng.$q promise}                               // 8860
         * with two $http specific methods: `success` and `error`.                                                     // 8861
         *                                                                                                             // 8862
         * ```js                                                                                                       // 8863
         *   // Simple GET request example :                                                                           // 8864
         *   $http.get('/someUrl').                                                                                    // 8865
         *     success(function(data, status, headers, config) {                                                       // 8866
     *       // this callback will be called asynchronously                                                            // 8867
     *       // when the response is available                                                                         // 8868
     *     }).                                                                                                         // 8869
         *     error(function(data, status, headers, config) {                                                         // 8870
     *       // called asynchronously if an error occurs                                                               // 8871
     *       // or server returns response with an error status.                                                       // 8872
     *     });                                                                                                         // 8873
         * ```                                                                                                         // 8874
         *                                                                                                             // 8875
         * ```js                                                                                                       // 8876
         *   // Simple POST request example (passing data) :                                                           // 8877
         *   $http.post('/someUrl', {msg:'hello word!'}).                                                              // 8878
         *     success(function(data, status, headers, config) {                                                       // 8879
     *       // this callback will be called asynchronously                                                            // 8880
     *       // when the response is available                                                                         // 8881
     *     }).                                                                                                         // 8882
         *     error(function(data, status, headers, config) {                                                         // 8883
     *       // called asynchronously if an error occurs                                                               // 8884
     *       // or server returns response with an error status.                                                       // 8885
     *     });                                                                                                         // 8886
         * ```                                                                                                         // 8887
         *                                                                                                             // 8888
         *                                                                                                             // 8889
         * Since the returned value of calling the $http function is a `promise`, you can also use                     // 8890
         * the `then` method to register callbacks, and these callbacks will receive a single argument ג€“             // 8891
         * an object representing the response. See the API signature and type info below for more                     // 8892
         * details.                                                                                                    // 8893
         *                                                                                                             // 8894
         * A response status code between 200 and 299 is considered a success status and                               // 8895
         * will result in the success callback being called. Note that if the response is a redirect,                  // 8896
         * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                    // 8897
         * called for such responses.                                                                                  // 8898
         *                                                                                                             // 8899
         * ## Writing Unit Tests that use $http                                                                        // 8900
         * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                    // 8901
         * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                // 8902
         * request using trained responses.                                                                            // 8903
         *                                                                                                             // 8904
         * ```                                                                                                         // 8905
         * $httpBackend.expectGET(...);                                                                                // 8906
         * $http.get(...);                                                                                             // 8907
         * $httpBackend.flush();                                                                                       // 8908
         * ```                                                                                                         // 8909
         *                                                                                                             // 8910
         * ## Shortcut methods                                                                                         // 8911
         *                                                                                                             // 8912
         * Shortcut methods are also available. All shortcut methods require passing in the URL, and                   // 8913
         * request data must be passed in for POST/PUT requests.                                                       // 8914
         *                                                                                                             // 8915
         * ```js                                                                                                       // 8916
         *   $http.get('/someUrl').success(successCallback);                                                           // 8917
         *   $http.post('/someUrl', data).success(successCallback);                                                    // 8918
         * ```                                                                                                         // 8919
         *                                                                                                             // 8920
         * Complete list of shortcut methods:                                                                          // 8921
         *                                                                                                             // 8922
         * - {@link ng.$http#get $http.get}                                                                            // 8923
         * - {@link ng.$http#head $http.head}                                                                          // 8924
         * - {@link ng.$http#post $http.post}                                                                          // 8925
         * - {@link ng.$http#put $http.put}                                                                            // 8926
         * - {@link ng.$http#delete $http.delete}                                                                      // 8927
         * - {@link ng.$http#jsonp $http.jsonp}                                                                        // 8928
         * - {@link ng.$http#patch $http.patch}                                                                        // 8929
         *                                                                                                             // 8930
         *                                                                                                             // 8931
         * ## Setting HTTP Headers                                                                                     // 8932
         *                                                                                                             // 8933
         * The $http service will automatically add certain HTTP headers to all requests. These defaults               // 8934
         * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                     // 8935
         * object, which currently contains this default configuration:                                                // 8936
         *                                                                                                             // 8937
         * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                       // 8938
         *   - `Accept: application/json, text/plain, * / *`                                                           // 8939
         * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                // 8940
         *   - `Content-Type: application/json`                                                                        // 8941
         * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                   // 8942
         *   - `Content-Type: application/json`                                                                        // 8943
         *                                                                                                             // 8944
         * To add or overwrite these defaults, simply add or remove a property from these configuration                // 8945
         * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                  // 8946
         * with the lowercased HTTP method name as the key, e.g.                                                       // 8947
         * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.                                            // 8948
         *                                                                                                             // 8949
         * The defaults can also be set at runtime via the `$http.defaults` object in the same                         // 8950
         * fashion. For example:                                                                                       // 8951
         *                                                                                                             // 8952
         * ```                                                                                                         // 8953
         * module.run(function($http) {                                                                                // 8954
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 8955
     * });                                                                                                             // 8956
         * ```                                                                                                         // 8957
         *                                                                                                             // 8958
         * In addition, you can supply a `headers` property in the config object passed when                           // 8959
         * calling `$http(config)`, which overrides the defaults without changing them globally.                       // 8960
         *                                                                                                             // 8961
         * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
         * Use the `headers` property, setting the desired header to `undefined`. For example:                         // 8963
         *                                                                                                             // 8964
         * ```js                                                                                                       // 8965
         * var req = {                                                                                                 // 8966
     *  method: 'POST',                                                                                                // 8967
     *  url: 'http://example.com',                                                                                     // 8968
     *  headers: {                                                                                                     // 8969
     *    'Content-Type': undefined                                                                                    // 8970
     *  },                                                                                                             // 8971
     *  data: { test: 'test' },                                                                                        // 8972
     * }                                                                                                               // 8973
         *                                                                                                             // 8974
         * $http(req).success(function(){...}).error(function(){...});                                                 // 8975
         * ```                                                                                                         // 8976
         *                                                                                                             // 8977
         * ## Transforming Requests and Responses                                                                      // 8978
         *                                                                                                             // 8979
         * Both requests and responses can be transformed using transformation functions: `transformRequest`           // 8980
         * and `transformResponse`. These properties can be a single function that returns                             // 8981
         * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
         * which allows you to `push` or `unshift` a new transformation function into the transformation chain.        // 8983
         *                                                                                                             // 8984
         * ### Default Transformations                                                                                 // 8985
         *                                                                                                             // 8986
         * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                     // 8987
         * `defaults.transformResponse` properties. If a request does not provide its own transformations              // 8988
         * then these will be applied.                                                                                 // 8989
         *                                                                                                             // 8990
         * You can augment or replace the default transformations by modifying these properties by adding to or        // 8991
         * replacing the array.                                                                                        // 8992
         *                                                                                                             // 8993
         * Angular provides the following default transformations:                                                     // 8994
         *                                                                                                             // 8995
         * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):  // 8996
         *                                                                                                             // 8997
         * - If the `data` property of the request configuration object contains an object, serialize it               // 8998
         *   into JSON format.                                                                                         // 8999
         *                                                                                                             // 9000
         * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
         *                                                                                                             // 9002
         *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                        // 9003
         *  - If JSON response is detected, deserialize it using a JSON parser.                                        // 9004
         *                                                                                                             // 9005
         *                                                                                                             // 9006
         * ### Overriding the Default Transformations Per Request                                                      // 9007
         *                                                                                                             // 9008
         * If you wish override the request/response transformations only for a single request then provide            // 9009
         * `transformRequest` and/or `transformResponse` properties on the configuration object passed                 // 9010
         * into `$http`.                                                                                               // 9011
         *                                                                                                             // 9012
         * Note that if you provide these properties on the config object the default transformations will be          // 9013
         * overwritten. If you wish to augment the default transformations then you must include them in your          // 9014
         * local transformation array.                                                                                 // 9015
         *                                                                                                             // 9016
         * The following code demonstrates adding a new response transformation to be run after the default response   // 9017
         * transformations have been run.                                                                              // 9018
         *                                                                                                             // 9019
         * ```js                                                                                                       // 9020
         * function appendTransform(defaults, transform) {                                                             // 9021
     *                                                                                                                 // 9022
     *   // We can't guarantee that the default transformation is an array                                             // 9023
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9024
     *                                                                                                                 // 9025
     *   // Append the new transformation to the defaults                                                              // 9026
     *   return defaults.concat(transform);                                                                            // 9027
     * }                                                                                                               // 9028
         *                                                                                                             // 9029
         * $http({                                                                                                     // 9030
     *   url: '...',                                                                                                   // 9031
     *   method: 'GET',                                                                                                // 9032
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9033
     *     return doTransform(value);                                                                                  // 9034
     *   })                                                                                                            // 9035
     * });                                                                                                             // 9036
         * ```                                                                                                         // 9037
         *                                                                                                             // 9038
         *                                                                                                             // 9039
         * ## Caching                                                                                                  // 9040
         *                                                                                                             // 9041
         * To enable caching, set the request configuration `cache` property to `true` (to use default                 // 9042
         * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                   // 9043
         * When the cache is enabled, `$http` stores the response from the server in the specified                     // 9044
         * cache. The next time the same request is made, the response is served from the cache without                // 9045
         * sending a request to the server.                                                                            // 9046
         *                                                                                                             // 9047
         * Note that even if the response is served from cache, delivery of the data is asynchronous in                // 9048
         * the same way that real requests are.                                                                        // 9049
         *                                                                                                             // 9050
         * If there are multiple GET requests for the same URL that should be cached using the same                    // 9051
         * cache, but the cache is not populated yet, only one request to the server will be made and                  // 9052
         * the remaining requests will be fulfilled using the response from the first request.                         // 9053
         *                                                                                                             // 9054
         * You can change the default cache to a new object (built with                                                // 9055
         * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                   // 9056
         * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                             // 9057
         * their `cache` property to `true` will now use this cache object.                                            // 9058
         *                                                                                                             // 9059
         * If you set the default cache to `false` then only requests that specify their own custom                    // 9060
         * cache object will be cached.                                                                                // 9061
         *                                                                                                             // 9062
         * ## Interceptors                                                                                             // 9063
         *                                                                                                             // 9064
         * Before you start creating interceptors, be sure to understand the                                           // 9065
         * {@link ng.$q $q and deferred/promise APIs}.                                                                 // 9066
         *                                                                                                             // 9067
         * For purposes of global error handling, authentication, or any kind of synchronous or                        // 9068
         * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                // 9069
         * able to intercept requests before they are handed to the server and                                         // 9070
         * responses before they are handed over to the application code that                                          // 9071
         * initiated these requests. The interceptors leverage the {@link ng.$q                                        // 9072
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9073
         *                                                                                                             // 9074
         * The interceptors are service factories that are registered with the `$httpProvider` by                      // 9075
         * adding them to the `$httpProvider.interceptors` array. The factory is called and                            // 9076
         * injected with dependencies (if specified) and returns the interceptor.                                      // 9077
         *                                                                                                             // 9078
         * There are two kinds of interceptors (and two kinds of rejection interceptors):                              // 9079
         *                                                                                                             // 9080
         *   * `request`: interceptors get called with a http `config` object. The function is free to                 // 9081
         *     modify the `config` object or create a new one. The function needs to return the `config`               // 9082
         *     object directly, or a promise containing the `config` or a new `config` object.                         // 9083
         *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                   // 9084
         *     resolved with a rejection.                                                                              // 9085
         *   * `response`: interceptors get called with http `response` object. The function is free to                // 9086
         *     modify the `response` object or create a new one. The function needs to return the `response`           // 9087
         *     object directly, or as a promise containing the `response` or a new `response` object.                  // 9088
         *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                  // 9089
         *     resolved with a rejection.                                                                              // 9090
         *                                                                                                             // 9091
         *                                                                                                             // 9092
         * ```js                                                                                                       // 9093
         *   // register the interceptor as a service                                                                  // 9094
         *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                            // 9095
     *     return {                                                                                                    // 9096
     *       // optional method                                                                                        // 9097
     *       'request': function(config) {                                                                             // 9098
     *         // do something on success                                                                              // 9099
     *         return config;                                                                                          // 9100
     *       },                                                                                                        // 9101
     *                                                                                                                 // 9102
     *       // optional method                                                                                        // 9103
     *      'requestError': function(rejection) {                                                                      // 9104
     *         // do something on error                                                                                // 9105
     *         if (canRecover(rejection)) {                                                                            // 9106
     *           return responseOrNewPromise                                                                           // 9107
     *         }                                                                                                       // 9108
     *         return $q.reject(rejection);                                                                            // 9109
     *       },                                                                                                        // 9110
     *                                                                                                                 // 9111
     *                                                                                                                 // 9112
     *                                                                                                                 // 9113
     *       // optional method                                                                                        // 9114
     *       'response': function(response) {                                                                          // 9115
     *         // do something on success                                                                              // 9116
     *         return response;                                                                                        // 9117
     *       },                                                                                                        // 9118
     *                                                                                                                 // 9119
     *       // optional method                                                                                        // 9120
     *      'responseError': function(rejection) {                                                                     // 9121
     *         // do something on error                                                                                // 9122
     *         if (canRecover(rejection)) {                                                                            // 9123
     *           return responseOrNewPromise                                                                           // 9124
     *         }                                                                                                       // 9125
     *         return $q.reject(rejection);                                                                            // 9126
     *       }                                                                                                         // 9127
     *     };                                                                                                          // 9128
     *   });                                                                                                           // 9129
         *                                                                                                             // 9130
         *   $httpProvider.interceptors.push('myHttpInterceptor');                                                     // 9131
         *                                                                                                             // 9132
         *                                                                                                             // 9133
         *   // alternatively, register the interceptor via an anonymous factory                                       // 9134
         *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                  // 9135
     *     return {                                                                                                    // 9136
     *      'request': function(config) {                                                                              // 9137
     *          // same as above                                                                                       // 9138
     *       },                                                                                                        // 9139
     *                                                                                                                 // 9140
     *       'response': function(response) {                                                                          // 9141
     *          // same as above                                                                                       // 9142
     *       }                                                                                                         // 9143
     *     };                                                                                                          // 9144
     *   });                                                                                                           // 9145
         * ```                                                                                                         // 9146
         *                                                                                                             // 9147
         * ## Security Considerations                                                                                  // 9148
         *                                                                                                             // 9149
         * When designing web applications, consider security threats from:                                            // 9150
         *                                                                                                             // 9151
         * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)   // 9152
         * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                           // 9153
         *                                                                                                             // 9154
         * Both server and the client must cooperate in order to eliminate these threats. Angular comes                // 9155
         * pre-configured with strategies that address these issues, but for this to work backend server               // 9156
         * cooperation is required.                                                                                    // 9157
         *                                                                                                             // 9158
         * ### JSON Vulnerability Protection                                                                           // 9159
         *                                                                                                             // 9160
         * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)   // 9161
         * allows third party website to turn your JSON resource URL into                                              // 9162
         * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                               // 9163
         * counter this your server can prefix all JSON requests with following string `")]}',\n"`.                    // 9164
         * Angular will automatically strip the prefix before processing it as JSON.                                   // 9165
         *                                                                                                             // 9166
         * For example if your server needs to return:                                                                 // 9167
         * ```js                                                                                                       // 9168
         * ['one','two']                                                                                               // 9169
         * ```                                                                                                         // 9170
         *                                                                                                             // 9171
         * which is vulnerable to attack, your server can return:                                                      // 9172
         * ```js                                                                                                       // 9173
         * )]}',                                                                                                       // 9174
         * ['one','two']                                                                                               // 9175
         * ```                                                                                                         // 9176
         *                                                                                                             // 9177
         * Angular will strip the prefix, before processing the JSON.                                                  // 9178
         *                                                                                                             // 9179
         *                                                                                                             // 9180
         * ### Cross Site Request Forgery (XSRF) Protection                                                            // 9181
         *                                                                                                             // 9182
         * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                     // 9183
         * an unauthorized site can gain your user's private data. Angular provides a mechanism                        // 9184
         * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                // 9185
         * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                       // 9186
         * JavaScript that runs on your domain could read the cookie, your server can be assured that                  // 9187
         * the XHR came from JavaScript running on your domain. The header will not be set for                         // 9188
         * cross-domain requests.                                                                                      // 9189
         *                                                                                                             // 9190
         * To take advantage of this, your server needs to set a token in a JavaScript readable session                // 9191
         * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                    // 9192
         * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                 // 9193
         * that only JavaScript running on your domain could have sent the request. The token must be                  // 9194
         * unique for each user and must be verifiable by the server (to prevent the JavaScript from                   // 9195
         * making up its own tokens). We recommend that the token is a digest of your site's                           // 9196
         * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                  // 9197
         * for added security.                                                                                         // 9198
         *                                                                                                             // 9199
         * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                        // 9200
         * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                     // 9201
         * or the per-request config object.                                                                           // 9202
         *                                                                                                             // 9203
         *                                                                                                             // 9204
         * @param {object} config Object describing the request to be made and how it should be                        // 9205
         *    processed. The object has following properties:                                                          // 9206
         *                                                                                                             // 9207
         *    - **method** ג€“ `{string}` ג€“ HTTP method (e.g. 'GET', 'POST', etc)                                    // 9208
         *    - **url** ג€“ `{string}` ג€“ Absolute or relative URL of the resource that is being requested.           // 9209
         *    - **params** ג€“ `{Object.<string|Object>}` ג€“ Map of strings or objects which will be turned           // 9210
         *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be                  // 9211
         *      JSONified.                                                                                             // 9212
         *    - **data** ג€“ `{string|Object}` ג€“ Data to be sent as the request message data.                        // 9213
         *    - **headers** ג€“ `{Object}` ג€“ Map of strings or functions which return strings representing           // 9214
         *      HTTP headers to send to the server. If the return value of a function is null, the                     // 9215
         *      header will not be sent.                                                                               // 9216
         *    - **xsrfHeaderName** ג€“ `{string}` ג€“ Name of HTTP header to populate with the XSRF token.             // 9217
         *    - **xsrfCookieName** ג€“ `{string}` ג€“ Name of cookie containing the XSRF token.                        // 9218
         *    - **transformRequest** ג€“                                                                               // 9219
         *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` ג€“                            // 9220
         *      transform function or an array of such functions. The transform function takes the http                // 9221
         *      request body and headers and returns its transformed (typically serialized) version.                   // 9222
         *      See {@link ng.$http#overriding-the-default-transformations-per-request                                 // 9223
     *      Overriding the Default Transformations}                                                                    // 9224
         *    - **transformResponse** ג€“                                                                              // 9225
         *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` ג€“            // 9226
         *      transform function or an array of such functions. The transform function takes the http                // 9227
         *      response body, headers and status and returns its transformed (typically deserialized) version.        // 9228
         *      See {@link ng.$http#overriding-the-default-transformations-per-request                                 // 9229
     *      Overriding the Default Transformations}                                                                    // 9230
         *    - **cache** ג€“ `{boolean|Cache}` ג€“ If true, a default $http cache will be used to cache the           // 9231
         *      GET request, otherwise if a cache instance built with                                                  // 9232
         *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                    // 9233
         *      caching.                                                                                               // 9234
         *    - **timeout** ג€“ `{number|Promise}` ג€“ timeout in milliseconds, or {@link ng.$q promise}               // 9235
         *      that should abort the request when resolved.                                                           // 9236
         *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                   // 9237
         *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
         *      for more information.                                                                                  // 9239
         *    - **responseType** - `{string}` - see                                                                    // 9240
         *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).               // 9241
         *                                                                                                             // 9242
         * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the                                      // 9243
         *   standard `then` method and two http specific methods: `success` and `error`. The `then`                   // 9244
         *   method takes two arguments a success and an error callback which will be called with a                    // 9245
         *   response object. The `success` and `error` methods take a single argument - a function that               // 9246
         *   will be called when the request succeeds or fails respectively. The arguments passed into                 // 9247
         *   these functions are destructured representation of the response object passed into the                    // 9248
         *   `then` method. The response object has these properties:                                                  // 9249
         *                                                                                                             // 9250
         *   - **data** ג€“ `{string|Object}` ג€“ The response body transformed with the transform                     // 9251
         *     functions.                                                                                              // 9252
         *   - **status** ג€“ `{number}` ג€“ HTTP status code of the response.                                         // 9253
         *   - **headers** ג€“ `{function([headerName])}` ג€“ Header getter function.                                  // 9254
         *   - **config** ג€“ `{Object}` ג€“ The configuration object that was used to generate the request.           // 9255
         *   - **statusText** ג€“ `{string}` ג€“ HTTP status text of the response.                                     // 9256
         *                                                                                                             // 9257
         * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                    // 9258
         *   requests. This is primarily meant to be used for debugging purposes.                                      // 9259
         *                                                                                                             // 9260
         *                                                                                                             // 9261
         * @example                                                                                                    // 9262
         <example module="httpExample">                                                                                // 9263
         <file name="index.html">                                                                                      // 9264
         <div ng-controller="FetchController">                                                                         // 9265
         <select ng-model="method">                                                                                    // 9266
         <option>GET</option>                                                                                          // 9267
         <option>JSONP</option>                                                                                        // 9268
         </select>                                                                                                     // 9269
         <input type="text" ng-model="url" size="80"/>                                                                 // 9270
         <button id="fetchbtn" ng-click="fetch()">fetch</button><br>                                                   // 9271
         <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>                // 9272
         <button id="samplejsonpbtn"                                                                                   // 9273
         ng-click="updateModel('JSONP',                                                                                // 9274
         'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">                                 // 9275
         Sample JSONP                                                                                                  // 9276
         </button>                                                                                                     // 9277
         <button id="invalidjsonpbtn"                                                                                  // 9278
         ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">                  // 9279
         Invalid JSONP                                                                                                 // 9280
         </button>                                                                                                     // 9281
         <pre>http status code: {{status}}</pre>                                                                       // 9282
         <pre>http response data: {{data}}</pre>                                                                       // 9283
         </div>                                                                                                        // 9284
         </file>                                                                                                       // 9285
         <file name="script.js">                                                                                       // 9286
         angular.module('httpExample', [])                                                                             // 9287
         .controller('FetchController', ['$scope', '$http', '$templateCache',                                          // 9288
         function($scope, $http, $templateCache) {                                                                     // 9289
        $scope.method = 'GET';                                                                                         // 9290
        $scope.url = 'http-hello.html';                                                                                // 9291
                                                                                                                       // 9292
        $scope.fetch = function() {                                                                                    // 9293
          $scope.code = null;                                                                                          // 9294
          $scope.response = null;                                                                                      // 9295
                                                                                                                       // 9296
          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 9297
            success(function(data, status) {                                                                           // 9298
              $scope.status = status;                                                                                  // 9299
              $scope.data = data;                                                                                      // 9300
            }).                                                                                                        // 9301
            error(function(data, status) {                                                                             // 9302
              $scope.data = data || "Request failed";                                                                  // 9303
              $scope.status = status;                                                                                  // 9304
          });                                                                                                          // 9305
        };                                                                                                             // 9306
                                                                                                                       // 9307
        $scope.updateModel = function(method, url) {                                                                   // 9308
          $scope.method = method;                                                                                      // 9309
          $scope.url = url;                                                                                            // 9310
        };                                                                                                             // 9311
      }]);                                                                                                             // 9312
         </file>                                                                                                       // 9313
         <file name="http-hello.html">                                                                                 // 9314
         Hello, $http!                                                                                                 // 9315
         </file>                                                                                                       // 9316
         <file name="protractor.js" type="protractor">                                                                 // 9317
         var status = element(by.binding('status'));                                                                   // 9318
         var data = element(by.binding('data'));                                                                       // 9319
         var fetchBtn = element(by.id('fetchbtn'));                                                                    // 9320
         var sampleGetBtn = element(by.id('samplegetbtn'));                                                            // 9321
         var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                        // 9322
         var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                      // 9323
                                                                                                                       // 9324
         it('should make an xhr GET request', function() {                                                             // 9325
    sampleGetBtn.click();                                                                                              // 9326
    fetchBtn.click();                                                                                                  // 9327
    expect(status.getText()).toMatch('200');                                                                           // 9328
    expect(data.getText()).toMatch(/Hello, \$http!/);                                                                  // 9329
  });                                                                                                                  // 9330
                                                                                                                       // 9331
         // Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                         // 9332
         // it('should make a JSONP request to angularjs.org', function() {                                            // 9333
//   sampleJsonpBtn.click();                                                                                           // 9334
//   fetchBtn.click();                                                                                                 // 9335
//   expect(status.getText()).toMatch('200');                                                                          // 9336
//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 9337
// });                                                                                                                 // 9338
                                                                                                                       // 9339
         it('should make JSONP request to invalid URL and invoke the error handler',                                   // 9340
         function() {                                                                                                  // 9341
    invalidJsonpBtn.click();                                                                                           // 9342
    fetchBtn.click();                                                                                                  // 9343
    expect(status.getText()).toMatch('0');                                                                             // 9344
    expect(data.getText()).toMatch('Request failed');                                                                  // 9345
  });                                                                                                                  // 9346
         </file>                                                                                                       // 9347
         </example>                                                                                                    // 9348
         */                                                                                                            // 9349
        function $http(requestConfig) {                                                                                // 9350
                                                                                                                       // 9351
          if (!angular.isObject(requestConfig)) {                                                                      // 9352
            throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
          }                                                                                                            // 9354
                                                                                                                       // 9355
          var config = extend({                                                                                        // 9356
            method: 'get',                                                                                             // 9357
            transformRequest: defaults.transformRequest,                                                               // 9358
            transformResponse: defaults.transformResponse                                                              // 9359
          }, requestConfig);                                                                                           // 9360
                                                                                                                       // 9361
          config.headers = mergeHeaders(requestConfig);                                                                // 9362
          config.method = uppercase(config.method);                                                                    // 9363
                                                                                                                       // 9364
          var serverRequest = function(config) {                                                                       // 9365
            var headers = config.headers;                                                                              // 9366
            var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);      // 9367
                                                                                                                       // 9368
            // strip content-type if data is undefined                                                                 // 9369
            if (isUndefined(reqData)) {                                                                                // 9370
              forEach(headers, function(value, header) {                                                               // 9371
                if (lowercase(header) === 'content-type') {                                                            // 9372
                  delete headers[header];                                                                              // 9373
                }                                                                                                      // 9374
              });                                                                                                      // 9375
            }                                                                                                          // 9376
                                                                                                                       // 9377
            if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                       // 9378
              config.withCredentials = defaults.withCredentials;                                                       // 9379
            }                                                                                                          // 9380
                                                                                                                       // 9381
            // send request                                                                                            // 9382
            return sendReq(config, reqData).then(transformResponse, transformResponse);                                // 9383
          };                                                                                                           // 9384
                                                                                                                       // 9385
          var chain = [serverRequest, undefined];                                                                      // 9386
          var promise = $q.when(config);                                                                               // 9387
                                                                                                                       // 9388
          // apply interceptors                                                                                        // 9389
          forEach(reversedInterceptors, function(interceptor) {                                                        // 9390
            if (interceptor.request || interceptor.requestError) {                                                     // 9391
              chain.unshift(interceptor.request, interceptor.requestError);                                            // 9392
            }                                                                                                          // 9393
            if (interceptor.response || interceptor.responseError) {                                                   // 9394
              chain.push(interceptor.response, interceptor.responseError);                                             // 9395
            }                                                                                                          // 9396
          });                                                                                                          // 9397
                                                                                                                       // 9398
          while (chain.length) {                                                                                       // 9399
            var thenFn = chain.shift();                                                                                // 9400
            var rejectFn = chain.shift();                                                                              // 9401
                                                                                                                       // 9402
            promise = promise.then(thenFn, rejectFn);                                                                  // 9403
          }                                                                                                            // 9404
                                                                                                                       // 9405
          promise.success = function(fn) {                                                                             // 9406
            promise.then(function(response) {                                                                          // 9407
              fn(response.data, response.status, response.headers, config);                                            // 9408
            });                                                                                                        // 9409
            return promise;                                                                                            // 9410
          };                                                                                                           // 9411
                                                                                                                       // 9412
          promise.error = function(fn) {                                                                               // 9413
            promise.then(null, function(response) {                                                                    // 9414
              fn(response.data, response.status, response.headers, config);                                            // 9415
            });                                                                                                        // 9416
            return promise;                                                                                            // 9417
          };                                                                                                           // 9418
                                                                                                                       // 9419
          return promise;                                                                                              // 9420
                                                                                                                       // 9421
          function transformResponse(response) {                                                                       // 9422
            // make a copy since the response must be cacheable                                                        // 9423
            var resp = extend({}, response);                                                                           // 9424
            if (!response.data) {                                                                                      // 9425
              resp.data = response.data;                                                                               // 9426
            } else {                                                                                                   // 9427
              resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);   // 9428
            }                                                                                                          // 9429
            return (isSuccess(response.status))                                                                        // 9430
              ? resp                                                                                                   // 9431
              : $q.reject(resp);                                                                                       // 9432
          }                                                                                                            // 9433
                                                                                                                       // 9434
          function executeHeaderFns(headers) {                                                                         // 9435
            var headerContent, processedHeaders = {};                                                                  // 9436
                                                                                                                       // 9437
            forEach(headers, function(headerFn, header) {                                                              // 9438
              if (isFunction(headerFn)) {                                                                              // 9439
                headerContent = headerFn();                                                                            // 9440
                if (headerContent != null) {                                                                           // 9441
                  processedHeaders[header] = headerContent;                                                            // 9442
                }                                                                                                      // 9443
              } else {                                                                                                 // 9444
                processedHeaders[header] = headerFn;                                                                   // 9445
              }                                                                                                        // 9446
            });                                                                                                        // 9447
                                                                                                                       // 9448
            return processedHeaders;                                                                                   // 9449
          }                                                                                                            // 9450
                                                                                                                       // 9451
          function mergeHeaders(config) {                                                                              // 9452
            var defHeaders = defaults.headers,                                                                         // 9453
              reqHeaders = extend({}, config.headers),                                                                 // 9454
              defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                    // 9455
                                                                                                                       // 9456
            defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                          // 9457
                                                                                                                       // 9458
            // using for-in instead of forEach to avoid unecessary iteration after header has been found               // 9459
            defaultHeadersIteration:                                                                                   // 9460
              for (defHeaderName in defHeaders) {                                                                      // 9461
                lowercaseDefHeaderName = lowercase(defHeaderName);                                                     // 9462
                                                                                                                       // 9463
                for (reqHeaderName in reqHeaders) {                                                                    // 9464
                  if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                           // 9465
                    continue defaultHeadersIteration;                                                                  // 9466
                  }                                                                                                    // 9467
                }                                                                                                      // 9468
                                                                                                                       // 9469
                reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                 // 9470
              }                                                                                                        // 9471
                                                                                                                       // 9472
            // execute if header value is a function for merged headers                                                // 9473
            return executeHeaderFns(reqHeaders);                                                                       // 9474
          }                                                                                                            // 9475
        }                                                                                                              // 9476
                                                                                                                       // 9477
        $http.pendingRequests = [];                                                                                    // 9478
                                                                                                                       // 9479
        /**                                                                                                            // 9480
         * @ngdoc method                                                                                               // 9481
         * @name $http#get                                                                                             // 9482
         *                                                                                                             // 9483
         * @description                                                                                                // 9484
         * Shortcut method to perform `GET` request.                                                                   // 9485
         *                                                                                                             // 9486
         * @param {string} url Relative or absolute URL specifying the destination of the request                      // 9487
         * @param {Object=} config Optional configuration object                                                       // 9488
         * @returns {HttpPromise} Future object                                                                        // 9489
         */                                                                                                            // 9490
                                                                                                                       // 9491
        /**                                                                                                            // 9492
         * @ngdoc method                                                                                               // 9493
         * @name $http#delete                                                                                          // 9494
         *                                                                                                             // 9495
         * @description                                                                                                // 9496
         * Shortcut method to perform `DELETE` request.                                                                // 9497
         *                                                                                                             // 9498
         * @param {string} url Relative or absolute URL specifying the destination of the request                      // 9499
         * @param {Object=} config Optional configuration object                                                       // 9500
         * @returns {HttpPromise} Future object                                                                        // 9501
         */                                                                                                            // 9502
                                                                                                                       // 9503
        /**                                                                                                            // 9504
         * @ngdoc method                                                                                               // 9505
         * @name $http#head                                                                                            // 9506
         *                                                                                                             // 9507
         * @description                                                                                                // 9508
         * Shortcut method to perform `HEAD` request.                                                                  // 9509
         *                                                                                                             // 9510
         * @param {string} url Relative or absolute URL specifying the destination of the request                      // 9511
         * @param {Object=} config Optional configuration object                                                       // 9512
         * @returns {HttpPromise} Future object                                                                        // 9513
         */                                                                                                            // 9514
                                                                                                                       // 9515
        /**                                                                                                            // 9516
         * @ngdoc method                                                                                               // 9517
         * @name $http#jsonp                                                                                           // 9518
         *                                                                                                             // 9519
         * @description                                                                                                // 9520
         * Shortcut method to perform `JSONP` request.                                                                 // 9521
         *                                                                                                             // 9522
         * @param {string} url Relative or absolute URL specifying the destination of the request.                     // 9523
         *                     The name of the callback should be the string `JSON_CALLBACK`.                          // 9524
         * @param {Object=} config Optional configuration object                                                       // 9525
         * @returns {HttpPromise} Future object                                                                        // 9526
         */                                                                                                            // 9527
        createShortMethods('get', 'delete', 'head', 'jsonp');                                                          // 9528
                                                                                                                       // 9529
        /**                                                                                                            // 9530
         * @ngdoc method                                                                                               // 9531
         * @name $http#post                                                                                            // 9532
         *                                                                                                             // 9533
         * @description                                                                                                // 9534
         * Shortcut method to perform `POST` request.                                                                  // 9535
         *                                                                                                             // 9536
         * @param {string} url Relative or absolute URL specifying the destination of the request                      // 9537
         * @param {*} data Request content                                                                             // 9538
         * @param {Object=} config Optional configuration object                                                       // 9539
         * @returns {HttpPromise} Future object                                                                        // 9540
         */                                                                                                            // 9541
                                                                                                                       // 9542
        /**                                                                                                            // 9543
         * @ngdoc method                                                                                               // 9544
         * @name $http#put                                                                                             // 9545
         *                                                                                                             // 9546
         * @description                                                                                                // 9547
         * Shortcut method to perform `PUT` request.                                                                   // 9548
         *                                                                                                             // 9549
         * @param {string} url Relative or absolute URL specifying the destination of the request                      // 9550
         * @param {*} data Request content                                                                             // 9551
         * @param {Object=} config Optional configuration object                                                       // 9552
         * @returns {HttpPromise} Future object                                                                        // 9553
         */                                                                                                            // 9554
                                                                                                                       // 9555
        /**                                                                                                            // 9556
         * @ngdoc method                                                                                               // 9557
         * @name $http#patch                                                                                           // 9558
         *                                                                                                             // 9559
         * @description                                                                                                // 9560
         * Shortcut method to perform `PATCH` request.                                                                 // 9561
         *                                                                                                             // 9562
         * @param {string} url Relative or absolute URL specifying the destination of the request                      // 9563
         * @param {*} data Request content                                                                             // 9564
         * @param {Object=} config Optional configuration object                                                       // 9565
         * @returns {HttpPromise} Future object                                                                        // 9566
         */                                                                                                            // 9567
        createShortMethodsWithData('post', 'put', 'patch');                                                            // 9568
                                                                                                                       // 9569
        /**                                                                                                            // 9570
         * @ngdoc property                                                                                             // 9571
         * @name $http#defaults                                                                                        // 9572
         *                                                                                                             // 9573
         * @description                                                                                                // 9574
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 9575
         * default headers, withCredentials as well as request and response transformations.                           // 9576
         *                                                                                                             // 9577
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.                        // 9578
         */                                                                                                            // 9579
        $http.defaults = defaults;                                                                                     // 9580
                                                                                                                       // 9581
                                                                                                                       // 9582
        return $http;                                                                                                  // 9583
                                                                                                                       // 9584
                                                                                                                       // 9585
        function createShortMethods(names) {                                                                           // 9586
          forEach(arguments, function(name) {                                                                          // 9587
            $http[name] = function(url, config) {                                                                      // 9588
              return $http(extend(config || {}, {                                                                      // 9589
                method: name,                                                                                          // 9590
                url: url                                                                                               // 9591
              }));                                                                                                     // 9592
            };                                                                                                         // 9593
          });                                                                                                          // 9594
        }                                                                                                              // 9595
                                                                                                                       // 9596
                                                                                                                       // 9597
        function createShortMethodsWithData(name) {                                                                    // 9598
          forEach(arguments, function(name) {                                                                          // 9599
            $http[name] = function(url, data, config) {                                                                // 9600
              return $http(extend(config || {}, {                                                                      // 9601
                method: name,                                                                                          // 9602
                url: url,                                                                                              // 9603
                data: data                                                                                             // 9604
              }));                                                                                                     // 9605
            };                                                                                                         // 9606
          });                                                                                                          // 9607
        }                                                                                                              // 9608
                                                                                                                       // 9609
                                                                                                                       // 9610
        /**                                                                                                            // 9611
         * Makes the request.                                                                                          // 9612
         *                                                                                                             // 9613
         * !!! ACCESSES CLOSURE VARS:                                                                                  // 9614
         * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                               // 9615
         */                                                                                                            // 9616
        function sendReq(config, reqData) {                                                                            // 9617
          var deferred = $q.defer(),                                                                                   // 9618
            promise = deferred.promise,                                                                                // 9619
            cache,                                                                                                     // 9620
            cachedResp,                                                                                                // 9621
            reqHeaders = config.headers,                                                                               // 9622
            url = buildUrl(config.url, config.params);                                                                 // 9623
                                                                                                                       // 9624
          $http.pendingRequests.push(config);                                                                          // 9625
          promise.then(removePendingReq, removePendingReq);                                                            // 9626
                                                                                                                       // 9627
                                                                                                                       // 9628
          if ((config.cache || defaults.cache) && config.cache !== false &&                                            // 9629
            (config.method === 'GET' || config.method === 'JSONP')) {                                                  // 9630
            cache = isObject(config.cache) ? config.cache                                                              // 9631
              : isObject(defaults.cache) ? defaults.cache                                                              // 9632
              : defaultCache;                                                                                          // 9633
          }                                                                                                            // 9634
                                                                                                                       // 9635
          if (cache) {                                                                                                 // 9636
            cachedResp = cache.get(url);                                                                               // 9637
            if (isDefined(cachedResp)) {                                                                               // 9638
              if (isPromiseLike(cachedResp)) {                                                                         // 9639
                // cached request has already been sent, but there is no response yet                                  // 9640
                cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                   // 9641
              } else {                                                                                                 // 9642
                // serving from cache                                                                                  // 9643
                if (isArray(cachedResp)) {                                                                             // 9644
                  resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);             // 9645
                } else {                                                                                               // 9646
                  resolvePromise(cachedResp, 200, {}, 'OK');                                                           // 9647
                }                                                                                                      // 9648
              }                                                                                                        // 9649
            } else {                                                                                                   // 9650
              // put the promise for the non-transformed response into cache as a placeholder                          // 9651
              cache.put(url, promise);                                                                                 // 9652
            }                                                                                                          // 9653
          }                                                                                                            // 9654
                                                                                                                       // 9655
                                                                                                                       // 9656
          // if we won't have the response in cache, set the xsrf headers and                                          // 9657
          // send the request to the backend                                                                           // 9658
          if (isUndefined(cachedResp)) {                                                                               // 9659
            var xsrfValue = urlIsSameOrigin(config.url)                                                                // 9660
              ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]                                   // 9661
              : undefined;                                                                                             // 9662
            if (xsrfValue) {                                                                                           // 9663
              reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                              // 9664
            }                                                                                                          // 9665
                                                                                                                       // 9666
            $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                // 9667
              config.withCredentials, config.responseType);                                                            // 9668
          }                                                                                                            // 9669
                                                                                                                       // 9670
          return promise;                                                                                              // 9671
                                                                                                                       // 9672
                                                                                                                       // 9673
          /**                                                                                                          // 9674
           * Callback registered to $httpBackend():                                                                    // 9675
           *  - caches the response if desired                                                                         // 9676
           *  - resolves the raw $http promise                                                                         // 9677
           *  - calls $apply                                                                                           // 9678
           */                                                                                                          // 9679
          function done(status, response, headersString, statusText) {                                                 // 9680
            if (cache) {                                                                                               // 9681
              if (isSuccess(status)) {                                                                                 // 9682
                cache.put(url, [status, response, parseHeaders(headersString), statusText]);                           // 9683
              } else {                                                                                                 // 9684
                // remove promise from the cache                                                                       // 9685
                cache.remove(url);                                                                                     // 9686
              }                                                                                                        // 9687
            }                                                                                                          // 9688
                                                                                                                       // 9689
            function resolveHttpPromise() {                                                                            // 9690
              resolvePromise(response, status, headersString, statusText);                                             // 9691
            }                                                                                                          // 9692
                                                                                                                       // 9693
            if (useApplyAsync) {                                                                                       // 9694
              $rootScope.$applyAsync(resolveHttpPromise);                                                              // 9695
            } else {                                                                                                   // 9696
              resolveHttpPromise();                                                                                    // 9697
              if (!$rootScope.$$phase) $rootScope.$apply();                                                            // 9698
            }                                                                                                          // 9699
          }                                                                                                            // 9700
                                                                                                                       // 9701
                                                                                                                       // 9702
          /**                                                                                                          // 9703
           * Resolves the raw $http promise.                                                                           // 9704
           */                                                                                                          // 9705
          function resolvePromise(response, status, headers, statusText) {                                             // 9706
            // normalize internal statuses to 0                                                                        // 9707
            status = Math.max(status, 0);                                                                              // 9708
                                                                                                                       // 9709
            (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                 // 9710
              data: response,                                                                                          // 9711
              status: status,                                                                                          // 9712
              headers: headersGetter(headers),                                                                         // 9713
              config: config,                                                                                          // 9714
              statusText: statusText                                                                                   // 9715
            });                                                                                                        // 9716
          }                                                                                                            // 9717
                                                                                                                       // 9718
          function resolvePromiseWithResult(result) {                                                                  // 9719
            resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);              // 9720
          }                                                                                                            // 9721
                                                                                                                       // 9722
          function removePendingReq() {                                                                                // 9723
            var idx = $http.pendingRequests.indexOf(config);                                                           // 9724
            if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                      // 9725
          }                                                                                                            // 9726
        }                                                                                                              // 9727
                                                                                                                       // 9728
                                                                                                                       // 9729
        function buildUrl(url, params) {                                                                               // 9730
          if (!params) return url;                                                                                     // 9731
          var parts = [];                                                                                              // 9732
          forEachSorted(params, function(value, key) {                                                                 // 9733
            if (value === null || isUndefined(value)) return;                                                          // 9734
            if (!isArray(value)) value = [value];                                                                      // 9735
                                                                                                                       // 9736
            forEach(value, function(v) {                                                                               // 9737
              if (isObject(v)) {                                                                                       // 9738
                if (isDate(v)) {                                                                                       // 9739
                  v = v.toISOString();                                                                                 // 9740
                } else {                                                                                               // 9741
                  v = toJson(v);                                                                                       // 9742
                }                                                                                                      // 9743
              }                                                                                                        // 9744
              parts.push(encodeUriQuery(key) + '=' +                                                                   // 9745
              encodeUriQuery(v));                                                                                      // 9746
            });                                                                                                        // 9747
          });                                                                                                          // 9748
          if (parts.length > 0) {                                                                                      // 9749
            url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');                                           // 9750
          }                                                                                                            // 9751
          return url;                                                                                                  // 9752
        }                                                                                                              // 9753
      }];                                                                                                              // 9754
  }                                                                                                                    // 9755
                                                                                                                       // 9756
  function createXhr() {                                                                                               // 9757
    return new window.XMLHttpRequest();                                                                                // 9758
  }                                                                                                                    // 9759
                                                                                                                       // 9760
  /**                                                                                                                  // 9761
   * @ngdoc service                                                                                                    // 9762
   * @name $httpBackend                                                                                                // 9763
   * @requires $window                                                                                                 // 9764
   * @requires $document                                                                                               // 9765
   *                                                                                                                   // 9766
   * @description                                                                                                      // 9767
   * HTTP backend used by the {@link ng.$http service} that delegates to                                               // 9768
   * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                          // 9769
   *                                                                                                                   // 9770
   * You should never need to use this service directly, instead use the higher-level abstractions:                    // 9771
   * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                 // 9772
   *                                                                                                                   // 9773
   * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                // 9774
 * $httpBackend} which can be trained with responses.                                                                  // 9775
   */                                                                                                                  // 9776
  function $HttpBackendProvider() {                                                                                    // 9777
    this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {                          // 9778
      return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);          // 9779
    }];                                                                                                                // 9780
  }                                                                                                                    // 9781
                                                                                                                       // 9782
  function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                             // 9783
    // TODO(vojta): fix the signature                                                                                  // 9784
    return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                    // 9785
      $browser.$$incOutstandingRequestCount();                                                                         // 9786
      url = url || $browser.url();                                                                                     // 9787
                                                                                                                       // 9788
      if (lowercase(method) == 'jsonp') {                                                                              // 9789
        var callbackId = '_' + (callbacks.counter++).toString(36);                                                     // 9790
        callbacks[callbackId] = function(data) {                                                                       // 9791
          callbacks[callbackId].data = data;                                                                           // 9792
          callbacks[callbackId].called = true;                                                                         // 9793
        };                                                                                                             // 9794
                                                                                                                       // 9795
        var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                      // 9796
          callbackId, function(status, text) {                                                                         // 9797
            completeRequest(callback, status, callbacks[callbackId].data, "", text);                                   // 9798
            callbacks[callbackId] = noop;                                                                              // 9799
          });                                                                                                          // 9800
      } else {                                                                                                         // 9801
                                                                                                                       // 9802
        var xhr = createXhr();                                                                                         // 9803
                                                                                                                       // 9804
        xhr.open(method, url, true);                                                                                   // 9805
        forEach(headers, function(value, key) {                                                                        // 9806
          if (isDefined(value)) {                                                                                      // 9807
            xhr.setRequestHeader(key, value);                                                                          // 9808
          }                                                                                                            // 9809
        });                                                                                                            // 9810
                                                                                                                       // 9811
        xhr.onload = function requestLoaded() {                                                                        // 9812
          var statusText = xhr.statusText || '';                                                                       // 9813
                                                                                                                       // 9814
          // responseText is the old-school way of retrieving response (supported by IE8 & 9)                          // 9815
          // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                   // 9816
          var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                        // 9817
                                                                                                                       // 9818
          // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                    // 9819
          var status = xhr.status === 1223 ? 204 : xhr.status;                                                         // 9820
                                                                                                                       // 9821
          // fix status code when it is 0 (0 status is undocumented).                                                  // 9822
          // Occurs when accessing file resources or on Android 4.1 stock browser                                      // 9823
          // while retrieving files from application cache.                                                            // 9824
          if (status === 0) {                                                                                          // 9825
            status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                    // 9826
          }                                                                                                            // 9827
                                                                                                                       // 9828
          completeRequest(callback,                                                                                    // 9829
            status,                                                                                                    // 9830
            response,                                                                                                  // 9831
            xhr.getAllResponseHeaders(),                                                                               // 9832
            statusText);                                                                                               // 9833
        };                                                                                                             // 9834
                                                                                                                       // 9835
        var requestError = function() {                                                                                // 9836
          // The response is always empty                                                                              // 9837
          // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
          completeRequest(callback, -1, null, null, '');                                                               // 9839
        };                                                                                                             // 9840
                                                                                                                       // 9841
        xhr.onerror = requestError;                                                                                    // 9842
        xhr.onabort = requestError;                                                                                    // 9843
                                                                                                                       // 9844
        if (withCredentials) {                                                                                         // 9845
          xhr.withCredentials = true;                                                                                  // 9846
        }                                                                                                              // 9847
                                                                                                                       // 9848
        if (responseType) {                                                                                            // 9849
          try {                                                                                                        // 9850
            xhr.responseType = responseType;                                                                           // 9851
          } catch (e) {                                                                                                // 9852
            // WebKit added support for the json responseType value on 09/03/2013                                      // 9853
            // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                        // 9854
            // known to throw when setting the value "json" as the response type. Other older                          // 9855
            // browsers implementing the responseType                                                                  // 9856
            //                                                                                                         // 9857
            // The json response type can be ignored if not supported, because JSON payloads are                       // 9858
            // parsed on the client-side regardless.                                                                   // 9859
            if (responseType !== 'json') {                                                                             // 9860
              throw e;                                                                                                 // 9861
            }                                                                                                          // 9862
          }                                                                                                            // 9863
        }                                                                                                              // 9864
                                                                                                                       // 9865
        xhr.send(post || null);                                                                                        // 9866
      }                                                                                                                // 9867
                                                                                                                       // 9868
      if (timeout > 0) {                                                                                               // 9869
        var timeoutId = $browserDefer(timeoutRequest, timeout);                                                        // 9870
      } else if (isPromiseLike(timeout)) {                                                                             // 9871
        timeout.then(timeoutRequest);                                                                                  // 9872
      }                                                                                                                // 9873
                                                                                                                       // 9874
                                                                                                                       // 9875
      function timeoutRequest() {                                                                                      // 9876
        jsonpDone && jsonpDone();                                                                                      // 9877
        xhr && xhr.abort();                                                                                            // 9878
      }                                                                                                                // 9879
                                                                                                                       // 9880
      function completeRequest(callback, status, response, headersString, statusText) {                                // 9881
        // cancel timeout and subsequent timeout promise resolution                                                    // 9882
        if (timeoutId !== undefined) {                                                                                 // 9883
          $browserDefer.cancel(timeoutId);                                                                             // 9884
        }                                                                                                              // 9885
        jsonpDone = xhr = null;                                                                                        // 9886
                                                                                                                       // 9887
        callback(status, response, headersString, statusText);                                                         // 9888
        $browser.$$completeOutstandingRequest(noop);                                                                   // 9889
      }                                                                                                                // 9890
    };                                                                                                                 // 9891
                                                                                                                       // 9892
    function jsonpReq(url, callbackId, done) {                                                                         // 9893
      // we can't use jQuery/jqLite here because jQuery does crazy shit with script elements, e.g.:                    // 9894
      // - fetches local scripts via XHR and evals them                                                                // 9895
      // - adds and immediately removes script elements from the document                                              // 9896
      var script = rawDocument.createElement('script'), callback = null;                                               // 9897
      script.type = "text/javascript";                                                                                 // 9898
      script.src = url;                                                                                                // 9899
      script.async = true;                                                                                             // 9900
                                                                                                                       // 9901
      callback = function(event) {                                                                                     // 9902
        removeEventListenerFn(script, "load", callback);                                                               // 9903
        removeEventListenerFn(script, "error", callback);                                                              // 9904
        rawDocument.body.removeChild(script);                                                                          // 9905
        script = null;                                                                                                 // 9906
        var status = -1;                                                                                               // 9907
        var text = "unknown";                                                                                          // 9908
                                                                                                                       // 9909
        if (event) {                                                                                                   // 9910
          if (event.type === "load" && !callbacks[callbackId].called) {                                                // 9911
            event = { type: "error" };                                                                                 // 9912
          }                                                                                                            // 9913
          text = event.type;                                                                                           // 9914
          status = event.type === "error" ? 404 : 200;                                                                 // 9915
        }                                                                                                              // 9916
                                                                                                                       // 9917
        if (done) {                                                                                                    // 9918
          done(status, text);                                                                                          // 9919
        }                                                                                                              // 9920
      };                                                                                                               // 9921
                                                                                                                       // 9922
      addEventListenerFn(script, "load", callback);                                                                    // 9923
      addEventListenerFn(script, "error", callback);                                                                   // 9924
      rawDocument.body.appendChild(script);                                                                            // 9925
      return callback;                                                                                                 // 9926
    }                                                                                                                  // 9927
  }                                                                                                                    // 9928
                                                                                                                       // 9929
  var $interpolateMinErr = minErr('$interpolate');                                                                     // 9930
                                                                                                                       // 9931
  /**                                                                                                                  // 9932
   * @ngdoc provider                                                                                                   // 9933
   * @name $interpolateProvider                                                                                        // 9934
   *                                                                                                                   // 9935
   * @description                                                                                                      // 9936
   *                                                                                                                   // 9937
   * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                         // 9938
   *                                                                                                                   // 9939
   * @example                                                                                                          // 9940
   <example module="customInterpolationApp">                                                                           // 9941
   <file name="index.html">                                                                                            // 9942
   <script>                                                                                                            // 9943
   var customInterpolationApp = angular.module('customInterpolationApp', []);                                          // 9944
                                                                                                                       // 9945
   customInterpolationApp.config(function($interpolateProvider) {                                                      // 9946
    $interpolateProvider.startSymbol('//');                                                                            // 9947
    $interpolateProvider.endSymbol('//');                                                                              // 9948
  });                                                                                                                  // 9949
                                                                                                                       // 9950
                                                                                                                       // 9951
   customInterpolationApp.controller('DemoController', function() {                                                    // 9952
      this.label = "This binding is brought you by // interpolation symbols.";                                         // 9953
  });                                                                                                                  // 9954
   </script>                                                                                                           // 9955
   <div ng-app="App" ng-controller="DemoController as demo">                                                           // 9956
   //demo.label//                                                                                                      // 9957
   </div>                                                                                                              // 9958
   </file>                                                                                                             // 9959
   <file name="protractor.js" type="protractor">                                                                       // 9960
   it('should interpolate binding with custom symbols', function() {                                                   // 9961
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });                                                                                                                  // 9963
   </file>                                                                                                             // 9964
   </example>                                                                                                          // 9965
   */                                                                                                                  // 9966
  function $InterpolateProvider() {                                                                                    // 9967
    var startSymbol = '{{';                                                                                            // 9968
    var endSymbol = '}}';                                                                                              // 9969
                                                                                                                       // 9970
    /**                                                                                                                // 9971
     * @ngdoc method                                                                                                   // 9972
     * @name $interpolateProvider#startSymbol                                                                          // 9973
     * @description                                                                                                    // 9974
     * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                              // 9975
   *                                                                                                                   // 9976
   * @param {string=} value new value to set the starting symbol to.                                                   // 9977
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                       // 9978
     */                                                                                                                // 9979
    this.startSymbol = function(value) {                                                                               // 9980
      if (value) {                                                                                                     // 9981
        startSymbol = value;                                                                                           // 9982
        return this;                                                                                                   // 9983
      } else {                                                                                                         // 9984
        return startSymbol;                                                                                            // 9985
      }                                                                                                                // 9986
    };                                                                                                                 // 9987
                                                                                                                       // 9988
    /**                                                                                                                // 9989
     * @ngdoc method                                                                                                   // 9990
     * @name $interpolateProvider#endSymbol                                                                            // 9991
     * @description                                                                                                    // 9992
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 9993
     *                                                                                                                 // 9994
     * @param {string=} value new value to set the ending symbol to.                                                   // 9995
     * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                       // 9996
     */                                                                                                                // 9997
    this.endSymbol = function(value) {                                                                                 // 9998
      if (value) {                                                                                                     // 9999
        endSymbol = value;                                                                                             // 10000
        return this;                                                                                                   // 10001
      } else {                                                                                                         // 10002
        return endSymbol;                                                                                              // 10003
      }                                                                                                                // 10004
    };                                                                                                                 // 10005
                                                                                                                       // 10006
                                                                                                                       // 10007
    this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                    // 10008
      var startSymbolLength = startSymbol.length,                                                                      // 10009
        endSymbolLength = endSymbol.length,                                                                            // 10010
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10011
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10012
                                                                                                                       // 10013
      function escape(ch) {                                                                                            // 10014
        return '\\\\\\' + ch;                                                                                          // 10015
      }                                                                                                                // 10016
                                                                                                                       // 10017
      /**                                                                                                              // 10018
       * @ngdoc service                                                                                                // 10019
       * @name $interpolate                                                                                            // 10020
       * @kind function                                                                                                // 10021
       *                                                                                                               // 10022
       * @requires $parse                                                                                              // 10023
       * @requires $sce                                                                                                // 10024
       *                                                                                                               // 10025
       * @description                                                                                                  // 10026
       *                                                                                                               // 10027
       * Compiles a string with markup into an interpolation function. This service is used by the                     // 10028
       * HTML {@link ng.$compile $compile} service for data binding. See                                               // 10029
       * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                      // 10030
       * interpolation markup.                                                                                         // 10031
       *                                                                                                               // 10032
       *                                                                                                               // 10033
       * ```js                                                                                                         // 10034
       *   var $interpolate = ...; // injected                                                                         // 10035
       *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                      // 10036
       *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');                                                     // 10037
       * ```                                                                                                           // 10038
       *                                                                                                               // 10039
       * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                        // 10040
       * `true`, the interpolation function will return `undefined` unless all embedded expressions                    // 10041
       * evaluate to a value other than `undefined`.                                                                   // 10042
       *                                                                                                               // 10043
       * ```js                                                                                                         // 10044
       *   var $interpolate = ...; // injected                                                                         // 10045
       *   var context = {greeting: 'Hello', name: undefined };                                                        // 10046
       *                                                                                                               // 10047
       *   // default "forgiving" mode                                                                                 // 10048
       *   var exp = $interpolate('{{greeting}} {{name}}!');                                                           // 10049
       *   expect(exp(context)).toEqual('Hello !');                                                                    // 10050
       *                                                                                                               // 10051
       *   // "allOrNothing" mode                                                                                      // 10052
       *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                            // 10053
       *   expect(exp(context)).toBeUndefined();                                                                       // 10054
       *   context.name = 'Angular';                                                                                   // 10055
       *   expect(exp(context)).toEqual('Hello Angular!');                                                             // 10056
       * ```                                                                                                           // 10057
       *                                                                                                               // 10058
       * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                    // 10059
       *                                                                                                               // 10060
       * ####Escaped Interpolation                                                                                     // 10061
       * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                   // 10062
       * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).               // 10063
       * It will be rendered as a regular start/end marker, and will not be interpreted as an expression               // 10064
       * or binding.                                                                                                   // 10065
       *                                                                                                               // 10066
       * This enables web-servers to prevent script injection attacks and defacing attacks, to some                    // 10067
       * degree, while also enabling code examples to work without relying on the                                      // 10068
       * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                   // 10069
       *                                                                                                               // 10070
       * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                // 10071
       * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all              // 10072
       * interpolation start/end markers with their escaped counterparts.**                                            // 10073
       *                                                                                                               // 10074
       * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered             // 10075
       * output when the $interpolate service processes the text. So, for HTML elements interpolated                   // 10076
       * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter            // 10077
       * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,             // 10078
       * this is typically useful only when user-data is used in rendering a template from the server, or              // 10079
       * when otherwise untrusted data is used by a directive.                                                         // 10080
       *                                                                                                               // 10081
       * <example>                                                                                                     // 10082
       *  <file name="index.html">                                                                                     // 10083
       *    <div ng-init="username='A user'">                                                                          // 10084
       *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}                // 10085
       *        </p>                                                                                                   // 10086
       *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                           // 10087
       *        application, but fails to accomplish their task, because the server has correctly                      // 10088
       *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                    // 10089
       *        characters.</p>                                                                                        // 10090
       *      <p>Instead, the result of the attempted script injection is visible, and can be removed                  // 10091
       *        from the database by an administrator.</p>                                                             // 10092
       *    </div>                                                                                                     // 10093
       *  </file>                                                                                                      // 10094
       * </example>                                                                                                    // 10095
       *                                                                                                               // 10096
       * @param {string} text The text with markup to interpolate.                                                     // 10097
       * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                   // 10098
       *    embedded expression in order to return an interpolation function. Strings with no                          // 10099
       *    embedded expression will return null for the interpolation function.                                       // 10100
       * @param {string=} trustedContext when provided, the returned function passes the interpolated                  // 10101
       *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                               // 10102
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 10103
       *    provides Strict Contextual Escaping for details.                                                           // 10104
       * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                        // 10105
       *    unless all embedded expressions evaluate to a value other than `undefined`.                                // 10106
       * @returns {function(context)} an interpolation function which is used to compute the                           // 10107
       *    interpolated string. The function has these parameters:                                                    // 10108
       *                                                                                                               // 10109
       * - `context`: evaluation context for all expressions embedded in the interpolated text                         // 10110
       */                                                                                                              // 10111
      function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                  // 10112
        allOrNothing = !!allOrNothing;                                                                                 // 10113
        var startIndex,                                                                                                // 10114
          endIndex,                                                                                                    // 10115
          index = 0,                                                                                                   // 10116
          expressions = [],                                                                                            // 10117
          parseFns = [],                                                                                               // 10118
          textLength = text.length,                                                                                    // 10119
          exp,                                                                                                         // 10120
          concat = [],                                                                                                 // 10121
          expressionPositions = [];                                                                                    // 10122
                                                                                                                       // 10123
        while (index < textLength) {                                                                                   // 10124
          if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                               // 10125
            ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                            // 10126
            if (index !== startIndex) {                                                                                // 10127
              concat.push(unescapeText(text.substring(index, startIndex)));                                            // 10128
            }                                                                                                          // 10129
            exp = text.substring(startIndex + startSymbolLength, endIndex);                                            // 10130
            expressions.push(exp);                                                                                     // 10131
            parseFns.push($parse(exp, parseStringifyInterceptor));                                                     // 10132
            index = endIndex + endSymbolLength;                                                                        // 10133
            expressionPositions.push(concat.length);                                                                   // 10134
            concat.push('');                                                                                           // 10135
          } else {                                                                                                     // 10136
            // we did not find an interpolation, so we have to add the remainder to the separators array               // 10137
            if (index !== textLength) {                                                                                // 10138
              concat.push(unescapeText(text.substring(index)));                                                        // 10139
            }                                                                                                          // 10140
            break;                                                                                                     // 10141
          }                                                                                                            // 10142
        }                                                                                                              // 10143
                                                                                                                       // 10144
        // Concatenating expressions makes it hard to reason about whether some combination of                         // 10145
        // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                    // 10146
        // single expression be used for iframe[src], object[src], etc., we ensure that the value                      // 10147
        // that's used is assigned or constructed by some JS code somewhere that is more testable or                   // 10148
        // make it obvious that you bound the value to some user controlled value.  This helps reduce                  // 10149
        // the load when auditing for XSS issues.                                                                      // 10150
        if (trustedContext && concat.length > 1) {                                                                     // 10151
          throw $interpolateMinErr('noconcat',                                                                         // 10152
            "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +                                  // 10153
            "interpolations that concatenate multiple expressions when a trusted value is " +                          // 10154
            "required.  See http://docs.angularjs.org/api/ng.$sce", text);                                             // 10155
        }                                                                                                              // 10156
                                                                                                                       // 10157
        if (!mustHaveExpression || expressions.length) {                                                               // 10158
          var compute = function(values) {                                                                             // 10159
            for (var i = 0, ii = expressions.length; i < ii; i++) {                                                    // 10160
              if (allOrNothing && isUndefined(values[i])) return;                                                      // 10161
              concat[expressionPositions[i]] = values[i];                                                              // 10162
            }                                                                                                          // 10163
            return concat.join('');                                                                                    // 10164
          };                                                                                                           // 10165
                                                                                                                       // 10166
          var getValue = function(value) {                                                                             // 10167
            return trustedContext ?                                                                                    // 10168
              $sce.getTrusted(trustedContext, value) :                                                                 // 10169
              $sce.valueOf(value);                                                                                     // 10170
          };                                                                                                           // 10171
                                                                                                                       // 10172
          var stringify = function(value) {                                                                            // 10173
            if (value == null) { // null || undefined                                                                  // 10174
              return '';                                                                                               // 10175
            }                                                                                                          // 10176
            switch (typeof value) {                                                                                    // 10177
              case 'string':                                                                                           // 10178
                break;                                                                                                 // 10179
              case 'number':                                                                                           // 10180
                value = '' + value;                                                                                    // 10181
                break;                                                                                                 // 10182
              default:                                                                                                 // 10183
                value = toJson(value);                                                                                 // 10184
            }                                                                                                          // 10185
                                                                                                                       // 10186
            return value;                                                                                              // 10187
          };                                                                                                           // 10188
                                                                                                                       // 10189
          return extend(function interpolationFn(context) {                                                            // 10190
            var i = 0;                                                                                                 // 10191
            var ii = expressions.length;                                                                               // 10192
            var values = new Array(ii);                                                                                // 10193
                                                                                                                       // 10194
            try {                                                                                                      // 10195
              for (; i < ii; i++) {                                                                                    // 10196
                values[i] = parseFns[i](context);                                                                      // 10197
              }                                                                                                        // 10198
                                                                                                                       // 10199
              return compute(values);                                                                                  // 10200
            } catch (err) {                                                                                            // 10201
              var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,                           // 10202
                err.toString());                                                                                       // 10203
              $exceptionHandler(newErr);                                                                               // 10204
            }                                                                                                          // 10205
                                                                                                                       // 10206
          }, {                                                                                                         // 10207
            // all of these properties are undocumented for now                                                        // 10208
            exp: text, //just for compatibility with regular watchers created via $watch                               // 10209
            expressions: expressions,                                                                                  // 10210
            $$watchDelegate: function(scope, listener, objectEquality) {                                               // 10211
              var lastValue;                                                                                           // 10212
              return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                    // 10213
                var currValue = compute(values);                                                                       // 10214
                if (isFunction(listener)) {                                                                            // 10215
                  listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                 // 10216
                }                                                                                                      // 10217
                lastValue = currValue;                                                                                 // 10218
              }, objectEquality);                                                                                      // 10219
            }                                                                                                          // 10220
          });                                                                                                          // 10221
        }                                                                                                              // 10222
                                                                                                                       // 10223
        function unescapeText(text) {                                                                                  // 10224
          return text.replace(escapedStartRegexp, startSymbol).                                                        // 10225
            replace(escapedEndRegexp, endSymbol);                                                                      // 10226
        }                                                                                                              // 10227
                                                                                                                       // 10228
        function parseStringifyInterceptor(value) {                                                                    // 10229
          try {                                                                                                        // 10230
            value = getValue(value);                                                                                   // 10231
            return allOrNothing && !isDefined(value) ? value : stringify(value);                                       // 10232
          } catch (err) {                                                                                              // 10233
            var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,                             // 10234
              err.toString());                                                                                         // 10235
            $exceptionHandler(newErr);                                                                                 // 10236
          }                                                                                                            // 10237
        }                                                                                                              // 10238
      }                                                                                                                // 10239
                                                                                                                       // 10240
                                                                                                                       // 10241
      /**                                                                                                              // 10242
       * @ngdoc method                                                                                                 // 10243
       * @name $interpolate#startSymbol                                                                                // 10244
       * @description                                                                                                  // 10245
       * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                        // 10246
     *                                                                                                                 // 10247
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 10248
       * the symbol.                                                                                                   // 10249
       *                                                                                                               // 10250
       * @returns {string} start symbol.                                                                               // 10251
       */                                                                                                              // 10252
      $interpolate.startSymbol = function() {                                                                          // 10253
        return startSymbol;                                                                                            // 10254
      };                                                                                                               // 10255
                                                                                                                       // 10256
                                                                                                                       // 10257
      /**                                                                                                              // 10258
       * @ngdoc method                                                                                                 // 10259
       * @name $interpolate#endSymbol                                                                                  // 10260
       * @description                                                                                                  // 10261
       * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                          // 10262
       *                                                                                                               // 10263
       * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                      // 10264
       * the symbol.                                                                                                   // 10265
       *                                                                                                               // 10266
       * @returns {string} end symbol.                                                                                 // 10267
       */                                                                                                              // 10268
      $interpolate.endSymbol = function() {                                                                            // 10269
        return endSymbol;                                                                                              // 10270
      };                                                                                                               // 10271
                                                                                                                       // 10272
      return $interpolate;                                                                                             // 10273
    }];                                                                                                                // 10274
  }                                                                                                                    // 10275
                                                                                                                       // 10276
  function $IntervalProvider() {                                                                                       // 10277
    this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                 // 10278
      function($rootScope,   $window,   $q,   $$q) {                                                                   // 10279
        var intervals = {};                                                                                            // 10280
                                                                                                                       // 10281
                                                                                                                       // 10282
        /**                                                                                                            // 10283
         * @ngdoc service                                                                                              // 10284
         * @name $interval                                                                                             // 10285
         *                                                                                                             // 10286
         * @description                                                                                                // 10287
         * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                     // 10288
         * milliseconds.                                                                                               // 10289
         *                                                                                                             // 10290
         * The return value of registering an interval function is a promise. This promise will be                     // 10291
         * notified upon each tick of the interval, and will be resolved after `count` iterations, or                  // 10292
         * run indefinitely if `count` is not defined. The value of the notification will be the                       // 10293
         * number of iterations that have run.                                                                         // 10294
         * To cancel an interval, call `$interval.cancel(promise)`.                                                    // 10295
         *                                                                                                             // 10296
         * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                            // 10297
         * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                    // 10298
         * time.                                                                                                       // 10299
         *                                                                                                             // 10300
         * <div class="alert alert-warning">                                                                           // 10301
         * **Note**: Intervals created by this service must be explicitly destroyed when you are finished              // 10302
         * with them.  In particular they are not automatically destroyed when a controller's scope or a               // 10303
         * directive's element are destroyed.                                                                          // 10304
         * You should take this into consideration and make sure to always cancel the interval at the                  // 10305
         * appropriate moment.  See the example below for more details on how and when to do this.                     // 10306
         * </div>                                                                                                      // 10307
         *                                                                                                             // 10308
         * @param {function()} fn A function that should be called repeatedly.                                         // 10309
         * @param {number} delay Number of milliseconds between each function call.                                    // 10310
         * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                         // 10311
         *   indefinitely.                                                                                             // 10312
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                // 10313
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                              // 10314
         * @returns {promise} A promise which will be notified on each iteration.                                      // 10315
         *                                                                                                             // 10316
         * @example                                                                                                    // 10317
         * <example module="intervalExample">                                                                          // 10318
         * <file name="index.html">                                                                                    // 10319
         *   <script>                                                                                                  // 10320
         *     angular.module('intervalExample', [])                                                                   // 10321
         *       .controller('ExampleController', ['$scope', '$interval',                                              // 10322
         *         function($scope, $interval) {                                                                       // 10323
      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 10324
      *           $scope.blood_1 = 100;                                                                                // 10325
      *           $scope.blood_2 = 120;                                                                                // 10326
      *                                                                                                                // 10327
      *           var stop;                                                                                            // 10328
      *           $scope.fight = function() {                                                                          // 10329
      *             // Don't start a new fight if we are already fighting                                              // 10330
      *             if ( angular.isDefined(stop) ) return;                                                             // 10331
      *                                                                                                                // 10332
      *             stop = $interval(function() {                                                                      // 10333
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 10334
      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 10335
      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 10336
      *               } else {                                                                                         // 10337
      *                 $scope.stopFight();                                                                            // 10338
      *               }                                                                                                // 10339
      *             }, 100);                                                                                           // 10340
      *           };                                                                                                   // 10341
      *                                                                                                                // 10342
      *           $scope.stopFight = function() {                                                                      // 10343
      *             if (angular.isDefined(stop)) {                                                                     // 10344
      *               $interval.cancel(stop);                                                                          // 10345
      *               stop = undefined;                                                                                // 10346
      *             }                                                                                                  // 10347
      *           };                                                                                                   // 10348
      *                                                                                                                // 10349
      *           $scope.resetFight = function() {                                                                     // 10350
      *             $scope.blood_1 = 100;                                                                              // 10351
      *             $scope.blood_2 = 120;                                                                              // 10352
      *           };                                                                                                   // 10353
      *                                                                                                                // 10354
      *           $scope.$on('$destroy', function() {                                                                  // 10355
      *             // Make sure that the interval is destroyed too                                                    // 10356
      *             $scope.stopFight();                                                                                // 10357
      *           });                                                                                                  // 10358
      *         }])                                                                                                    // 10359
         *       // Register the 'myCurrentTime' directive factory method.                                             // 10360
         *       // We inject $interval and dateFilter service since the factory method is DI.                         // 10361
         *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                               // 10362
         *         function($interval, dateFilter) {                                                                   // 10363
      *           // return the directive link function. (compile function not needed)                                 // 10364
      *           return function(scope, element, attrs) {                                                             // 10365
      *             var format,  // date format                                                                        // 10366
      *                 stopTime; // so that we can cancel the time updates                                            // 10367
      *                                                                                                                // 10368
      *             // used to update the UI                                                                           // 10369
      *             function updateTime() {                                                                            // 10370
      *               element.text(dateFilter(new Date(), format));                                                    // 10371
      *             }                                                                                                  // 10372
      *                                                                                                                // 10373
      *             // watch the expression, and update the UI on change.                                              // 10374
      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 10375
      *               format = value;                                                                                  // 10376
      *               updateTime();                                                                                    // 10377
      *             });                                                                                                // 10378
      *                                                                                                                // 10379
      *             stopTime = $interval(updateTime, 1000);                                                            // 10380
      *                                                                                                                // 10381
      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 10382
      *             // to prevent updating time after the DOM element was removed.                                     // 10383
      *             element.on('$destroy', function() {                                                                // 10384
      *               $interval.cancel(stopTime);                                                                      // 10385
      *             });                                                                                                // 10386
      *           }                                                                                                    // 10387
      *         }]);                                                                                                   // 10388
         *   </script>                                                                                                 // 10389
         *                                                                                                             // 10390
         *   <div>                                                                                                     // 10391
         *     <div ng-controller="ExampleController">                                                                 // 10392
         *       Date format: <input ng-model="format"> <hr/>                                                          // 10393
         *       Current time is: <span my-current-time="format"></span>                                               // 10394
         *       <hr/>                                                                                                 // 10395
         *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                        // 10396
         *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                        // 10397
         *       <button type="button" data-ng-click="fight()">Fight</button>                                          // 10398
         *       <button type="button" data-ng-click="stopFight()">StopFight</button>                                  // 10399
         *       <button type="button" data-ng-click="resetFight()">resetFight</button>                                // 10400
         *     </div>                                                                                                  // 10401
         *   </div>                                                                                                    // 10402
         *                                                                                                             // 10403
         * </file>                                                                                                     // 10404
         * </example>                                                                                                  // 10405
         */                                                                                                            // 10406
        function interval(fn, delay, count, invokeApply) {                                                             // 10407
          var setInterval = $window.setInterval,                                                                       // 10408
            clearInterval = $window.clearInterval,                                                                     // 10409
            iteration = 0,                                                                                             // 10410
            skipApply = (isDefined(invokeApply) && !invokeApply),                                                      // 10411
            deferred = (skipApply ? $$q : $q).defer(),                                                                 // 10412
            promise = deferred.promise;                                                                                // 10413
                                                                                                                       // 10414
          count = isDefined(count) ? count : 0;                                                                        // 10415
                                                                                                                       // 10416
          promise.then(null, null, fn);                                                                                // 10417
                                                                                                                       // 10418
          promise.$$intervalId = setInterval(function tick() {                                                         // 10419
            deferred.notify(iteration++);                                                                              // 10420
                                                                                                                       // 10421
            if (count > 0 && iteration >= count) {                                                                     // 10422
              deferred.resolve(iteration);                                                                             // 10423
              clearInterval(promise.$$intervalId);                                                                     // 10424
              delete intervals[promise.$$intervalId];                                                                  // 10425
            }                                                                                                          // 10426
                                                                                                                       // 10427
            if (!skipApply) $rootScope.$apply();                                                                       // 10428
                                                                                                                       // 10429
          }, delay);                                                                                                   // 10430
                                                                                                                       // 10431
          intervals[promise.$$intervalId] = deferred;                                                                  // 10432
                                                                                                                       // 10433
          return promise;                                                                                              // 10434
        }                                                                                                              // 10435
                                                                                                                       // 10436
                                                                                                                       // 10437
        /**                                                                                                            // 10438
         * @ngdoc method                                                                                               // 10439
         * @name $interval#cancel                                                                                      // 10440
         *                                                                                                             // 10441
         * @description                                                                                                // 10442
         * Cancels a task associated with the `promise`.                                                               // 10443
         *                                                                                                             // 10444
         * @param {promise} promise returned by the `$interval` function.                                              // 10445
         * @returns {boolean} Returns `true` if the task was successfully canceled.                                    // 10446
         */                                                                                                            // 10447
        interval.cancel = function(promise) {                                                                          // 10448
          if (promise && promise.$$intervalId in intervals) {                                                          // 10449
            intervals[promise.$$intervalId].reject('canceled');                                                        // 10450
            $window.clearInterval(promise.$$intervalId);                                                               // 10451
            delete intervals[promise.$$intervalId];                                                                    // 10452
            return true;                                                                                               // 10453
          }                                                                                                            // 10454
          return false;                                                                                                // 10455
        };                                                                                                             // 10456
                                                                                                                       // 10457
        return interval;                                                                                               // 10458
      }];                                                                                                              // 10459
  }                                                                                                                    // 10460
                                                                                                                       // 10461
  /**                                                                                                                  // 10462
   * @ngdoc service                                                                                                    // 10463
   * @name $locale                                                                                                     // 10464
   *                                                                                                                   // 10465
   * @description                                                                                                      // 10466
   * $locale service provides localization rules for various Angular components. As of right now the                   // 10467
   * only public api is:                                                                                               // 10468
   *                                                                                                                   // 10469
   * * `id` ג€“ `{string}` ג€“ locale id formatted as `languageId-countryId` (e.g. `en-us`)                            // 10470
   */                                                                                                                  // 10471
  function $LocaleProvider() {                                                                                         // 10472
    this.$get = function() {                                                                                           // 10473
      return {                                                                                                         // 10474
        id: 'en-us',                                                                                                   // 10475
                                                                                                                       // 10476
        NUMBER_FORMATS: {                                                                                              // 10477
          DECIMAL_SEP: '.',                                                                                            // 10478
          GROUP_SEP: ',',                                                                                              // 10479
          PATTERNS: [                                                                                                  // 10480
            { // Decimal Pattern                                                                                       // 10481
              minInt: 1,                                                                                               // 10482
              minFrac: 0,                                                                                              // 10483
              maxFrac: 3,                                                                                              // 10484
              posPre: '',                                                                                              // 10485
              posSuf: '',                                                                                              // 10486
              negPre: '-',                                                                                             // 10487
              negSuf: '',                                                                                              // 10488
              gSize: 3,                                                                                                // 10489
              lgSize: 3                                                                                                // 10490
            },{ //Currency Pattern                                                                                     // 10491
              minInt: 1,                                                                                               // 10492
              minFrac: 2,                                                                                              // 10493
              maxFrac: 2,                                                                                              // 10494
              posPre: '\u00A4',                                                                                        // 10495
              posSuf: '',                                                                                              // 10496
              negPre: '(\u00A4',                                                                                       // 10497
              negSuf: ')',                                                                                             // 10498
              gSize: 3,                                                                                                // 10499
              lgSize: 3                                                                                                // 10500
            }                                                                                                          // 10501
          ],                                                                                                           // 10502
          CURRENCY_SYM: '$'                                                                                            // 10503
        },                                                                                                             // 10504
                                                                                                                       // 10505
        DATETIME_FORMATS: {                                                                                            // 10506
          MONTH:                                                                                                       // 10507
            'January,February,March,April,May,June,July,August,September,October,November,December'                    // 10508
              .split(','),                                                                                             // 10509
          SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),                                   // 10510
          DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),                                  // 10511
          SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),                                                          // 10512
          AMPMS: ['AM','PM'],                                                                                          // 10513
          medium: 'MMM d, y h:mm:ss a',                                                                                // 10514
          'short': 'M/d/yy h:mm a',                                                                                    // 10515
          fullDate: 'EEEE, MMMM d, y',                                                                                 // 10516
          longDate: 'MMMM d, y',                                                                                       // 10517
          mediumDate: 'MMM d, y',                                                                                      // 10518
          shortDate: 'M/d/yy',                                                                                         // 10519
          mediumTime: 'h:mm:ss a',                                                                                     // 10520
          shortTime: 'h:mm a',                                                                                         // 10521
          ERANAMES: [                                                                                                  // 10522
            "Before Christ",                                                                                           // 10523
            "Anno Domini"                                                                                              // 10524
          ],                                                                                                           // 10525
          ERAS: [                                                                                                      // 10526
            "BC",                                                                                                      // 10527
            "AD"                                                                                                       // 10528
          ]                                                                                                            // 10529
        },                                                                                                             // 10530
                                                                                                                       // 10531
        pluralCat: function(num) {                                                                                     // 10532
          if (num === 1) {                                                                                             // 10533
            return 'one';                                                                                              // 10534
          }                                                                                                            // 10535
          return 'other';                                                                                              // 10536
        }                                                                                                              // 10537
      };                                                                                                               // 10538
    };                                                                                                                 // 10539
  }                                                                                                                    // 10540
                                                                                                                       // 10541
  var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,                                                                  // 10542
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 10543
  var $locationMinErr = minErr('$location');                                                                           // 10544
                                                                                                                       // 10545
                                                                                                                       // 10546
  /**                                                                                                                  // 10547
   * Encode path using encodeUriSegment, ignoring forward slashes                                                      // 10548
   *                                                                                                                   // 10549
   * @param {string} path Path to encode                                                                               // 10550
   * @returns {string}                                                                                                 // 10551
   */                                                                                                                  // 10552
  function encodePath(path) {                                                                                          // 10553
    var segments = path.split('/'),                                                                                    // 10554
      i = segments.length;                                                                                             // 10555
                                                                                                                       // 10556
    while (i--) {                                                                                                      // 10557
      segments[i] = encodeUriSegment(segments[i]);                                                                     // 10558
    }                                                                                                                  // 10559
                                                                                                                       // 10560
    return segments.join('/');                                                                                         // 10561
  }                                                                                                                    // 10562
                                                                                                                       // 10563
  function parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                // 10564
    var parsedUrl = urlResolve(absoluteUrl);                                                                           // 10565
                                                                                                                       // 10566
    locationObj.$$protocol = parsedUrl.protocol;                                                                       // 10567
    locationObj.$$host = parsedUrl.hostname;                                                                           // 10568
    locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 10569
  }                                                                                                                    // 10570
                                                                                                                       // 10571
                                                                                                                       // 10572
  function parseAppUrl(relativeUrl, locationObj) {                                                                     // 10573
    var prefixed = (relativeUrl.charAt(0) !== '/');                                                                    // 10574
    if (prefixed) {                                                                                                    // 10575
      relativeUrl = '/' + relativeUrl;                                                                                 // 10576
    }                                                                                                                  // 10577
    var match = urlResolve(relativeUrl);                                                                               // 10578
    locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                             // 10579
      match.pathname.substring(1) : match.pathname);                                                                   // 10580
    locationObj.$$search = parseKeyValue(match.search);                                                                // 10581
    locationObj.$$hash = decodeURIComponent(match.hash);                                                               // 10582
                                                                                                                       // 10583
    // make sure path starts with '/';                                                                                 // 10584
    if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                   // 10585
      locationObj.$$path = '/' + locationObj.$$path;                                                                   // 10586
    }                                                                                                                  // 10587
  }                                                                                                                    // 10588
                                                                                                                       // 10589
                                                                                                                       // 10590
  /**                                                                                                                  // 10591
   *                                                                                                                   // 10592
   * @param {string} begin                                                                                             // 10593
   * @param {string} whole                                                                                             // 10594
   * @returns {string} returns text from whole after begin or undefined if it does not begin with                      // 10595
   *                   expected string.                                                                                // 10596
   */                                                                                                                  // 10597
  function beginsWith(begin, whole) {                                                                                  // 10598
    if (whole.indexOf(begin) === 0) {                                                                                  // 10599
      return whole.substr(begin.length);                                                                               // 10600
    }                                                                                                                  // 10601
  }                                                                                                                    // 10602
                                                                                                                       // 10603
                                                                                                                       // 10604
  function stripHash(url) {                                                                                            // 10605
    var index = url.indexOf('#');                                                                                      // 10606
    return index == -1 ? url : url.substr(0, index);                                                                   // 10607
  }                                                                                                                    // 10608
                                                                                                                       // 10609
  function trimEmptyHash(url) {                                                                                        // 10610
    return url.replace(/(#.+)|#$/, '$1');                                                                              // 10611
  }                                                                                                                    // 10612
                                                                                                                       // 10613
                                                                                                                       // 10614
  function stripFile(url) {                                                                                            // 10615
    return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                         // 10616
  }                                                                                                                    // 10617
                                                                                                                       // 10618
  /* return the server only (scheme://host:port) */                                                                    // 10619
  function serverBase(url) {                                                                                           // 10620
    return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                  // 10621
  }                                                                                                                    // 10622
                                                                                                                       // 10623
                                                                                                                       // 10624
  /**                                                                                                                  // 10625
   * LocationHtml5Url represents an url                                                                                // 10626
   * This object is exposed as $location service when HTML5 mode is enabled and supported                              // 10627
   *                                                                                                                   // 10628
   * @constructor                                                                                                      // 10629
   * @param {string} appBase application base URL                                                                      // 10630
   * @param {string} basePrefix url path prefix                                                                        // 10631
   */                                                                                                                  // 10632
  function LocationHtml5Url(appBase, basePrefix) {                                                                     // 10633
    this.$$html5 = true;                                                                                               // 10634
    basePrefix = basePrefix || '';                                                                                     // 10635
    var appBaseNoFile = stripFile(appBase);                                                                            // 10636
    parseAbsoluteUrl(appBase, this);                                                                                   // 10637
                                                                                                                       // 10638
                                                                                                                       // 10639
    /**                                                                                                                // 10640
     * Parse given html5 (regular) url string into properties                                                          // 10641
     * @param {string} url HTML5 url                                                                                   // 10642
     * @private                                                                                                        // 10643
     */                                                                                                                // 10644
    this.$$parse = function(url) {                                                                                     // 10645
      var pathUrl = beginsWith(appBaseNoFile, url);                                                                    // 10646
      if (!isString(pathUrl)) {                                                                                        // 10647
        throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,                        // 10648
          appBaseNoFile);                                                                                              // 10649
      }                                                                                                                // 10650
                                                                                                                       // 10651
      parseAppUrl(pathUrl, this);                                                                                      // 10652
                                                                                                                       // 10653
      if (!this.$$path) {                                                                                              // 10654
        this.$$path = '/';                                                                                             // 10655
      }                                                                                                                // 10656
                                                                                                                       // 10657
      this.$$compose();                                                                                                // 10658
    };                                                                                                                 // 10659
                                                                                                                       // 10660
    /**                                                                                                                // 10661
     * Compose url and update `absUrl` property                                                                        // 10662
     * @private                                                                                                        // 10663
     */                                                                                                                // 10664
    this.$$compose = function() {                                                                                      // 10665
      var search = toKeyValue(this.$$search),                                                                          // 10666
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 10667
                                                                                                                       // 10668
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                      // 10669
      this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                // 10670
    };                                                                                                                 // 10671
                                                                                                                       // 10672
    this.$$parseLinkUrl = function(url, relHref) {                                                                     // 10673
      if (relHref && relHref[0] === '#') {                                                                             // 10674
        // special case for links to hash fragments:                                                                   // 10675
        // keep the old url and only replace the hash fragment                                                         // 10676
        this.hash(relHref.slice(1));                                                                                   // 10677
        return true;                                                                                                   // 10678
      }                                                                                                                // 10679
      var appUrl, prevAppUrl;                                                                                          // 10680
      var rewrittenUrl;                                                                                                // 10681
                                                                                                                       // 10682
      if ((appUrl = beginsWith(appBase, url)) !== undefined) {                                                         // 10683
        prevAppUrl = appUrl;                                                                                           // 10684
        if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {                                                 // 10685
          rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                          // 10686
        } else {                                                                                                       // 10687
          rewrittenUrl = appBase + prevAppUrl;                                                                         // 10688
        }                                                                                                              // 10689
      } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {                                            // 10690
        rewrittenUrl = appBaseNoFile + appUrl;                                                                         // 10691
      } else if (appBaseNoFile == url + '/') {                                                                         // 10692
        rewrittenUrl = appBaseNoFile;                                                                                  // 10693
      }                                                                                                                // 10694
      if (rewrittenUrl) {                                                                                              // 10695
        this.$$parse(rewrittenUrl);                                                                                    // 10696
      }                                                                                                                // 10697
      return !!rewrittenUrl;                                                                                           // 10698
    };                                                                                                                 // 10699
  }                                                                                                                    // 10700
                                                                                                                       // 10701
                                                                                                                       // 10702
  /**                                                                                                                  // 10703
   * LocationHashbangUrl represents url                                                                                // 10704
   * This object is exposed as $location service when developer doesn't opt into html5 mode.                           // 10705
   * It also serves as the base class for html5 mode fallback on legacy browsers.                                      // 10706
   *                                                                                                                   // 10707
   * @constructor                                                                                                      // 10708
   * @param {string} appBase application base URL                                                                      // 10709
   * @param {string} hashPrefix hashbang prefix                                                                        // 10710
   */                                                                                                                  // 10711
  function LocationHashbangUrl(appBase, hashPrefix) {                                                                  // 10712
    var appBaseNoFile = stripFile(appBase);                                                                            // 10713
                                                                                                                       // 10714
    parseAbsoluteUrl(appBase, this);                                                                                   // 10715
                                                                                                                       // 10716
                                                                                                                       // 10717
    /**                                                                                                                // 10718
     * Parse given hashbang url into properties                                                                        // 10719
     * @param {string} url Hashbang url                                                                                // 10720
     * @private                                                                                                        // 10721
     */                                                                                                                // 10722
    this.$$parse = function(url) {                                                                                     // 10723
      var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                 // 10724
      var withoutHashUrl;                                                                                              // 10725
                                                                                                                       // 10726
      if (withoutBaseUrl.charAt(0) === '#') {                                                                          // 10727
                                                                                                                       // 10728
        // The rest of the url starts with a hash so we have                                                           // 10729
        // got either a hashbang path or a plain hash fragment                                                         // 10730
        withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                       // 10731
        if (isUndefined(withoutHashUrl)) {                                                                             // 10732
          // There was no hashbang prefix so we just have a hash fragment                                              // 10733
          withoutHashUrl = withoutBaseUrl;                                                                             // 10734
        }                                                                                                              // 10735
                                                                                                                       // 10736
      } else {                                                                                                         // 10737
        // There was no hashbang path nor hash fragment:                                                               // 10738
        // If we are in HTML5 mode we use what is left as the path;                                                    // 10739
        // Otherwise we ignore what is left                                                                            // 10740
        withoutHashUrl = this.$$html5 ? withoutBaseUrl : '';                                                           // 10741
      }                                                                                                                // 10742
                                                                                                                       // 10743
      parseAppUrl(withoutHashUrl, this);                                                                               // 10744
                                                                                                                       // 10745
      this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                      // 10746
                                                                                                                       // 10747
      this.$$compose();                                                                                                // 10748
                                                                                                                       // 10749
      /*                                                                                                               // 10750
       * In Windows, on an anchor node on documents loaded from                                                        // 10751
       * the filesystem, the browser will return a pathname                                                            // 10752
       * prefixed with the drive name ('/C:/path') when a                                                              // 10753
       * pathname without a drive is set:                                                                              // 10754
       *  * a.setAttribute('href', '/foo')                                                                             // 10755
       *   * a.pathname === '/C:/foo' //true                                                                           // 10756
       *                                                                                                               // 10757
       * Inside of Angular, we're always using pathnames that                                                          // 10758
       * do not include drive names for routing.                                                                       // 10759
       */                                                                                                              // 10760
      function removeWindowsDriveName(path, url, base) {                                                               // 10761
        /*                                                                                                             // 10762
         Matches paths for file protocol on windows,                                                                   // 10763
         such as /C:/foo/bar, and captures only /foo/bar.                                                              // 10764
         */                                                                                                            // 10765
        var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;                                                                    // 10766
                                                                                                                       // 10767
        var firstPathSegmentMatch;                                                                                     // 10768
                                                                                                                       // 10769
        //Get the relative path from the input URL.                                                                    // 10770
        if (url.indexOf(base) === 0) {                                                                                 // 10771
          url = url.replace(base, '');                                                                                 // 10772
        }                                                                                                              // 10773
                                                                                                                       // 10774
        // The input URL intentionally contains a first path segment that ends with a colon.                           // 10775
        if (windowsFilePathExp.exec(url)) {                                                                            // 10776
          return path;                                                                                                 // 10777
        }                                                                                                              // 10778
                                                                                                                       // 10779
        firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                         // 10780
        return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                // 10781
      }                                                                                                                // 10782
    };                                                                                                                 // 10783
                                                                                                                       // 10784
    /**                                                                                                                // 10785
     * Compose hashbang url and update `absUrl` property                                                               // 10786
     * @private                                                                                                        // 10787
     */                                                                                                                // 10788
    this.$$compose = function() {                                                                                      // 10789
      var search = toKeyValue(this.$$search),                                                                          // 10790
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 10791
                                                                                                                       // 10792
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                      // 10793
      this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                           // 10794
    };                                                                                                                 // 10795
                                                                                                                       // 10796
    this.$$parseLinkUrl = function(url, relHref) {                                                                     // 10797
      if (stripHash(appBase) == stripHash(url)) {                                                                      // 10798
        this.$$parse(url);                                                                                             // 10799
        return true;                                                                                                   // 10800
      }                                                                                                                // 10801
      return false;                                                                                                    // 10802
    };                                                                                                                 // 10803
  }                                                                                                                    // 10804
                                                                                                                       // 10805
                                                                                                                       // 10806
  /**                                                                                                                  // 10807
   * LocationHashbangUrl represents url                                                                                // 10808
   * This object is exposed as $location service when html5 history api is enabled but the browser                     // 10809
   * does not support it.                                                                                              // 10810
   *                                                                                                                   // 10811
   * @constructor                                                                                                      // 10812
   * @param {string} appBase application base URL                                                                      // 10813
   * @param {string} hashPrefix hashbang prefix                                                                        // 10814
   */                                                                                                                  // 10815
  function LocationHashbangInHtml5Url(appBase, hashPrefix) {                                                           // 10816
    this.$$html5 = true;                                                                                               // 10817
    LocationHashbangUrl.apply(this, arguments);                                                                        // 10818
                                                                                                                       // 10819
    var appBaseNoFile = stripFile(appBase);                                                                            // 10820
                                                                                                                       // 10821
    this.$$parseLinkUrl = function(url, relHref) {                                                                     // 10822
      if (relHref && relHref[0] === '#') {                                                                             // 10823
        // special case for links to hash fragments:                                                                   // 10824
        // keep the old url and only replace the hash fragment                                                         // 10825
        this.hash(relHref.slice(1));                                                                                   // 10826
        return true;                                                                                                   // 10827
      }                                                                                                                // 10828
                                                                                                                       // 10829
      var rewrittenUrl;                                                                                                // 10830
      var appUrl;                                                                                                      // 10831
                                                                                                                       // 10832
      if (appBase == stripHash(url)) {                                                                                 // 10833
        rewrittenUrl = url;                                                                                            // 10834
      } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                          // 10835
        rewrittenUrl = appBase + hashPrefix + appUrl;                                                                  // 10836
      } else if (appBaseNoFile === url + '/') {                                                                        // 10837
        rewrittenUrl = appBaseNoFile;                                                                                  // 10838
      }                                                                                                                // 10839
      if (rewrittenUrl) {                                                                                              // 10840
        this.$$parse(rewrittenUrl);                                                                                    // 10841
      }                                                                                                                // 10842
      return !!rewrittenUrl;                                                                                           // 10843
    };                                                                                                                 // 10844
                                                                                                                       // 10845
    this.$$compose = function() {                                                                                      // 10846
      var search = toKeyValue(this.$$search),                                                                          // 10847
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 10848
                                                                                                                       // 10849
      this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                      // 10850
      // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'    // 10851
      this.$$absUrl = appBase + hashPrefix + this.$$url;                                                               // 10852
    };                                                                                                                 // 10853
                                                                                                                       // 10854
  }                                                                                                                    // 10855
                                                                                                                       // 10856
                                                                                                                       // 10857
  var locationPrototype = {                                                                                            // 10858
                                                                                                                       // 10859
    /**                                                                                                                // 10860
     * Are we in html5 mode?                                                                                           // 10861
     * @private                                                                                                        // 10862
     */                                                                                                                // 10863
    $$html5: false,                                                                                                    // 10864
                                                                                                                       // 10865
    /**                                                                                                                // 10866
     * Has any change been replacing?                                                                                  // 10867
     * @private                                                                                                        // 10868
     */                                                                                                                // 10869
    $$replace: false,                                                                                                  // 10870
                                                                                                                       // 10871
    /**                                                                                                                // 10872
     * @ngdoc method                                                                                                   // 10873
     * @name $location#absUrl                                                                                          // 10874
     *                                                                                                                 // 10875
     * @description                                                                                                    // 10876
     * This method is getter only.                                                                                     // 10877
     *                                                                                                                 // 10878
     * Return full url representation with all segments encoded according to rules specified in                        // 10879
     * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                // 10880
     *                                                                                                                 // 10881
     *                                                                                                                 // 10882
     * ```js                                                                                                           // 10883
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 10884
     * var absUrl = $location.absUrl();                                                                                // 10885
     * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"                                                         // 10886
     * ```                                                                                                             // 10887
     *                                                                                                                 // 10888
     * @return {string} full url                                                                                       // 10889
     */                                                                                                                // 10890
    absUrl: locationGetter('$$absUrl'),                                                                                // 10891
                                                                                                                       // 10892
    /**                                                                                                                // 10893
     * @ngdoc method                                                                                                   // 10894
     * @name $location#url                                                                                             // 10895
     *                                                                                                                 // 10896
     * @description                                                                                                    // 10897
     * This method is getter / setter.                                                                                 // 10898
     *                                                                                                                 // 10899
     * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                           // 10900
     *                                                                                                                 // 10901
     * Change path, search and hash, when called with parameter and return `$location`.                                // 10902
     *                                                                                                                 // 10903
     *                                                                                                                 // 10904
     * ```js                                                                                                           // 10905
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 10906
     * var url = $location.url();                                                                                      // 10907
     * // => "/some/path?foo=bar&baz=xoxo"                                                                             // 10908
     * ```                                                                                                             // 10909
     *                                                                                                                 // 10910
     * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                        // 10911
     * @return {string} url                                                                                            // 10912
     */                                                                                                                // 10913
    url: function(url) {                                                                                               // 10914
      if (isUndefined(url))                                                                                            // 10915
        return this.$$url;                                                                                             // 10916
                                                                                                                       // 10917
      var match = PATH_MATCH.exec(url);                                                                                // 10918
      if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                             // 10919
      if (match[2] || match[1] || url === '') this.search(match[3] || '');                                             // 10920
      this.hash(match[5] || '');                                                                                       // 10921
                                                                                                                       // 10922
      return this;                                                                                                     // 10923
    },                                                                                                                 // 10924
                                                                                                                       // 10925
    /**                                                                                                                // 10926
     * @ngdoc method                                                                                                   // 10927
     * @name $location#protocol                                                                                        // 10928
     *                                                                                                                 // 10929
     * @description                                                                                                    // 10930
     * This method is getter only.                                                                                     // 10931
     *                                                                                                                 // 10932
     * Return protocol of current url.                                                                                 // 10933
     *                                                                                                                 // 10934
     *                                                                                                                 // 10935
     * ```js                                                                                                           // 10936
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 10937
     * var protocol = $location.protocol();                                                                            // 10938
     * // => "http"                                                                                                    // 10939
     * ```                                                                                                             // 10940
     *                                                                                                                 // 10941
     * @return {string} protocol of current url                                                                        // 10942
     */                                                                                                                // 10943
    protocol: locationGetter('$$protocol'),                                                                            // 10944
                                                                                                                       // 10945
    /**                                                                                                                // 10946
     * @ngdoc method                                                                                                   // 10947
     * @name $location#host                                                                                            // 10948
     *                                                                                                                 // 10949
     * @description                                                                                                    // 10950
     * This method is getter only.                                                                                     // 10951
     *                                                                                                                 // 10952
     * Return host of current url.                                                                                     // 10953
     *                                                                                                                 // 10954
     *                                                                                                                 // 10955
     * ```js                                                                                                           // 10956
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 10957
     * var host = $location.host();                                                                                    // 10958
     * // => "example.com"                                                                                             // 10959
     * ```                                                                                                             // 10960
     *                                                                                                                 // 10961
     * @return {string} host of current url.                                                                           // 10962
     */                                                                                                                // 10963
    host: locationGetter('$$host'),                                                                                    // 10964
                                                                                                                       // 10965
    /**                                                                                                                // 10966
     * @ngdoc method                                                                                                   // 10967
     * @name $location#port                                                                                            // 10968
     *                                                                                                                 // 10969
     * @description                                                                                                    // 10970
     * This method is getter only.                                                                                     // 10971
     *                                                                                                                 // 10972
     * Return port of current url.                                                                                     // 10973
     *                                                                                                                 // 10974
     *                                                                                                                 // 10975
     * ```js                                                                                                           // 10976
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 10977
     * var port = $location.port();                                                                                    // 10978
     * // => 80                                                                                                        // 10979
     * ```                                                                                                             // 10980
     *                                                                                                                 // 10981
     * @return {Number} port                                                                                           // 10982
     */                                                                                                                // 10983
    port: locationGetter('$$port'),                                                                                    // 10984
                                                                                                                       // 10985
    /**                                                                                                                // 10986
     * @ngdoc method                                                                                                   // 10987
     * @name $location#path                                                                                            // 10988
     *                                                                                                                 // 10989
     * @description                                                                                                    // 10990
     * This method is getter / setter.                                                                                 // 10991
     *                                                                                                                 // 10992
     * Return path of current url when called without any parameter.                                                   // 10993
     *                                                                                                                 // 10994
     * Change path when called with parameter and return `$location`.                                                  // 10995
     *                                                                                                                 // 10996
     * Note: Path should always begin with forward slash (/), this method will add the forward slash                   // 10997
     * if it is missing.                                                                                               // 10998
     *                                                                                                                 // 10999
     *                                                                                                                 // 11000
     * ```js                                                                                                           // 11001
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 11002
     * var path = $location.path();                                                                                    // 11003
     * // => "/some/path"                                                                                              // 11004
     * ```                                                                                                             // 11005
     *                                                                                                                 // 11006
     * @param {(string|number)=} path New path                                                                         // 11007
     * @return {string} path                                                                                           // 11008
     */                                                                                                                // 11009
    path: locationGetterSetter('$$path', function(path) {                                                              // 11010
      path = path !== null ? path.toString() : '';                                                                     // 11011
      return path.charAt(0) == '/' ? path : '/' + path;                                                                // 11012
    }),                                                                                                                // 11013
                                                                                                                       // 11014
    /**                                                                                                                // 11015
     * @ngdoc method                                                                                                   // 11016
     * @name $location#search                                                                                          // 11017
     *                                                                                                                 // 11018
     * @description                                                                                                    // 11019
     * This method is getter / setter.                                                                                 // 11020
     *                                                                                                                 // 11021
     * Return search part (as object) of current url when called without any parameter.                                // 11022
     *                                                                                                                 // 11023
     * Change search part when called with parameter and return `$location`.                                           // 11024
     *                                                                                                                 // 11025
     *                                                                                                                 // 11026
     * ```js                                                                                                           // 11027
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                    // 11028
     * var searchObject = $location.search();                                                                          // 11029
     * // => {foo: 'bar', baz: 'xoxo'}                                                                                 // 11030
     *                                                                                                                 // 11031
     * // set foo to 'yipee'                                                                                           // 11032
     * $location.search('foo', 'yipee');                                                                               // 11033
     * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                            // 11034
     * ```                                                                                                             // 11035
     *                                                                                                                 // 11036
     * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                    // 11037
     * hash object.                                                                                                    // 11038
     *                                                                                                                 // 11039
     * When called with a single argument the method acts as a setter, setting the `search` component                  // 11040
     * of `$location` to the specified value.                                                                          // 11041
     *                                                                                                                 // 11042
     * If the argument is a hash object containing an array of values, these values will be encoded                    // 11043
     * as duplicate search parameters in the url.                                                                      // 11044
     *                                                                                                                 // 11045
     * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue` // 11046
     * will override only a single search property.                                                                    // 11047
     *                                                                                                                 // 11048
     * If `paramValue` is an array, it will override the property of the `search` component of                         // 11049
     * `$location` specified via the first argument.                                                                   // 11050
     *                                                                                                                 // 11051
     * If `paramValue` is `null`, the property specified via the first argument will be deleted.                       // 11052
     *                                                                                                                 // 11053
     * If `paramValue` is `true`, the property specified via the first argument will be added with no                  // 11054
     * value nor trailing equal sign.                                                                                  // 11055
     *                                                                                                                 // 11056
     * @return {Object} If called with no arguments returns the parsed `search` object. If called with                 // 11057
     * one or more arguments returns `$location` object itself.                                                        // 11058
     */                                                                                                                // 11059
    search: function(search, paramValue) {                                                                             // 11060
      switch (arguments.length) {                                                                                      // 11061
        case 0:                                                                                                        // 11062
          return this.$$search;                                                                                        // 11063
        case 1:                                                                                                        // 11064
          if (isString(search) || isNumber(search)) {                                                                  // 11065
            search = search.toString();                                                                                // 11066
            this.$$search = parseKeyValue(search);                                                                     // 11067
          } else if (isObject(search)) {                                                                               // 11068
            search = copy(search, {});                                                                                 // 11069
            // remove object undefined or null properties                                                              // 11070
            forEach(search, function(value, key) {                                                                     // 11071
              if (value == null) delete search[key];                                                                   // 11072
            });                                                                                                        // 11073
                                                                                                                       // 11074
            this.$$search = search;                                                                                    // 11075
          } else {                                                                                                     // 11076
            throw $locationMinErr('isrcharg',                                                                          // 11077
              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11078
          }                                                                                                            // 11079
          break;                                                                                                       // 11080
        default:                                                                                                       // 11081
          if (isUndefined(paramValue) || paramValue === null) {                                                        // 11082
            delete this.$$search[search];                                                                              // 11083
          } else {                                                                                                     // 11084
            this.$$search[search] = paramValue;                                                                        // 11085
          }                                                                                                            // 11086
      }                                                                                                                // 11087
                                                                                                                       // 11088
      this.$$compose();                                                                                                // 11089
      return this;                                                                                                     // 11090
    },                                                                                                                 // 11091
                                                                                                                       // 11092
    /**                                                                                                                // 11093
     * @ngdoc method                                                                                                   // 11094
     * @name $location#hash                                                                                            // 11095
     *                                                                                                                 // 11096
     * @description                                                                                                    // 11097
     * This method is getter / setter.                                                                                 // 11098
     *                                                                                                                 // 11099
     * Return hash fragment when called without any parameter.                                                         // 11100
     *                                                                                                                 // 11101
     * Change hash fragment when called with parameter and return `$location`.                                         // 11102
     *                                                                                                                 // 11103
     *                                                                                                                 // 11104
     * ```js                                                                                                           // 11105
     * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                          // 11106
     * var hash = $location.hash();                                                                                    // 11107
     * // => "hashValue"                                                                                               // 11108
     * ```                                                                                                             // 11109
     *                                                                                                                 // 11110
     * @param {(string|number)=} hash New hash fragment                                                                // 11111
     * @return {string} hash                                                                                           // 11112
     */                                                                                                                // 11113
    hash: locationGetterSetter('$$hash', function(hash) {                                                              // 11114
      return hash !== null ? hash.toString() : '';                                                                     // 11115
    }),                                                                                                                // 11116
                                                                                                                       // 11117
    /**                                                                                                                // 11118
     * @ngdoc method                                                                                                   // 11119
     * @name $location#replace                                                                                         // 11120
     *                                                                                                                 // 11121
     * @description                                                                                                    // 11122
     * If called, all changes to $location during current `$digest` will be replacing current history                  // 11123
     * record, instead of adding new one.                                                                              // 11124
     */                                                                                                                // 11125
    replace: function() {                                                                                              // 11126
      this.$$replace = true;                                                                                           // 11127
      return this;                                                                                                     // 11128
    }                                                                                                                  // 11129
  };                                                                                                                   // 11130
                                                                                                                       // 11131
  forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                    // 11132
    Location.prototype = Object.create(locationPrototype);                                                             // 11133
                                                                                                                       // 11134
    /**                                                                                                                // 11135
     * @ngdoc method                                                                                                   // 11136
     * @name $location#state                                                                                           // 11137
     *                                                                                                                 // 11138
     * @description                                                                                                    // 11139
     * This method is getter / setter.                                                                                 // 11140
     *                                                                                                                 // 11141
     * Return the history state object when called without any parameter.                                              // 11142
     *                                                                                                                 // 11143
     * Change the history state object when called with one parameter and return `$location`.                          // 11144
     * The state object is later passed to `pushState` or `replaceState`.                                              // 11145
     *                                                                                                                 // 11146
     * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                               // 11147
     * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                     // 11148
     * older browsers (like IE9 or Android < 4.0), don't use this method.                                              // 11149
     *                                                                                                                 // 11150
     * @param {object=} state State object for pushState or replaceState                                               // 11151
     * @return {object} state                                                                                          // 11152
     */                                                                                                                // 11153
    Location.prototype.state = function(state) {                                                                       // 11154
      if (!arguments.length)                                                                                           // 11155
        return this.$$state;                                                                                           // 11156
                                                                                                                       // 11157
      if (Location !== LocationHtml5Url || !this.$$html5) {                                                            // 11158
        throw $locationMinErr('nostate', 'History API state support is available only ' +                              // 11159
        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 11160
      }                                                                                                                // 11161
      // The user might modify `stateObject` after invoking `$location.state(stateObject)`                             // 11162
      // but we're changing the $$state reference to $browser.state() during the $digest                               // 11163
      // so the modification window is narrow.                                                                         // 11164
      this.$$state = isUndefined(state) ? null : state;                                                                // 11165
                                                                                                                       // 11166
      return this;                                                                                                     // 11167
    };                                                                                                                 // 11168
  });                                                                                                                  // 11169
                                                                                                                       // 11170
                                                                                                                       // 11171
  function locationGetter(property) {                                                                                  // 11172
    return function() {                                                                                                // 11173
      return this[property];                                                                                           // 11174
    };                                                                                                                 // 11175
  }                                                                                                                    // 11176
                                                                                                                       // 11177
                                                                                                                       // 11178
  function locationGetterSetter(property, preprocess) {                                                                // 11179
    return function(value) {                                                                                           // 11180
      if (isUndefined(value))                                                                                          // 11181
        return this[property];                                                                                         // 11182
                                                                                                                       // 11183
      this[property] = preprocess(value);                                                                              // 11184
      this.$$compose();                                                                                                // 11185
                                                                                                                       // 11186
      return this;                                                                                                     // 11187
    };                                                                                                                 // 11188
  }                                                                                                                    // 11189
                                                                                                                       // 11190
                                                                                                                       // 11191
  /**                                                                                                                  // 11192
   * @ngdoc service                                                                                                    // 11193
   * @name $location                                                                                                   // 11194
   *                                                                                                                   // 11195
   * @requires $rootElement                                                                                            // 11196
   *                                                                                                                   // 11197
   * @description                                                                                                      // 11198
   * The $location service parses the URL in the browser address bar (based on the                                     // 11199
   * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                            // 11200
   * available to your application. Changes to the URL in the address bar are reflected into                           // 11201
   * $location service and changes to $location are reflected into the browser address bar.                            // 11202
   *                                                                                                                   // 11203
   * **The $location service:**                                                                                        // 11204
   *                                                                                                                   // 11205
   * - Exposes the current URL in the browser address bar, so you can                                                  // 11206
   *   - Watch and observe the URL.                                                                                    // 11207
   *   - Change the URL.                                                                                               // 11208
   * - Synchronizes the URL with the browser when the user                                                             // 11209
   *   - Changes the address bar.                                                                                      // 11210
   *   - Clicks the back or forward button (or clicks a History link).                                                 // 11211
   *   - Clicks on a link.                                                                                             // 11212
   * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                       // 11213
   *                                                                                                                   // 11214
   * For more information see {@link guide/$location Developer Guide: Using $location}                                 // 11215
   */                                                                                                                  // 11216
                                                                                                                       // 11217
  /**                                                                                                                  // 11218
   * @ngdoc provider                                                                                                   // 11219
   * @name $locationProvider                                                                                           // 11220
   * @description                                                                                                      // 11221
   * Use the `$locationProvider` to configure how the application deep linking paths are stored.                       // 11222
   */                                                                                                                  // 11223
  function $LocationProvider() {                                                                                       // 11224
    var hashPrefix = '',                                                                                               // 11225
      html5Mode = {                                                                                                    // 11226
        enabled: false,                                                                                                // 11227
        requireBase: true,                                                                                             // 11228
        rewriteLinks: true                                                                                             // 11229
      };                                                                                                               // 11230
                                                                                                                       // 11231
    /**                                                                                                                // 11232
     * @ngdoc method                                                                                                   // 11233
     * @name $locationProvider#hashPrefix                                                                              // 11234
     * @description                                                                                                    // 11235
     * @param {string=} prefix Prefix for hash part (containing path and search)                                       // 11236
     * @returns {*} current value if used as getter or itself (chaining) if used as setter                             // 11237
     */                                                                                                                // 11238
    this.hashPrefix = function(prefix) {                                                                               // 11239
      if (isDefined(prefix)) {                                                                                         // 11240
        hashPrefix = prefix;                                                                                           // 11241
        return this;                                                                                                   // 11242
      } else {                                                                                                         // 11243
        return hashPrefix;                                                                                             // 11244
      }                                                                                                                // 11245
    };                                                                                                                 // 11246
                                                                                                                       // 11247
    /**                                                                                                                // 11248
     * @ngdoc method                                                                                                   // 11249
     * @name $locationProvider#html5Mode                                                                               // 11250
     * @description                                                                                                    // 11251
     * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                  // 11252
     *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                   // 11253
     *   properties:                                                                                                   // 11254
     *   - **enabled** ג€“ `{boolean}` ג€“ (default: false) If true, will rely on `history.pushState` to               // 11255
     *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                  // 11256
     *     support `pushState`.                                                                                        // 11257
     *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                      // 11258
     *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                   // 11259
     *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                  // 11260
     *     See the {@link guide/$location $location guide for more information}                                        // 11261
     *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                               // 11262
     *     enables/disables url rewriting for relative links.                                                          // 11263
     *                                                                                                                 // 11264
     * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                     // 11265
     */                                                                                                                // 11266
    this.html5Mode = function(mode) {                                                                                  // 11267
      if (isBoolean(mode)) {                                                                                           // 11268
        html5Mode.enabled = mode;                                                                                      // 11269
        return this;                                                                                                   // 11270
      } else if (isObject(mode)) {                                                                                     // 11271
                                                                                                                       // 11272
        if (isBoolean(mode.enabled)) {                                                                                 // 11273
          html5Mode.enabled = mode.enabled;                                                                            // 11274
        }                                                                                                              // 11275
                                                                                                                       // 11276
        if (isBoolean(mode.requireBase)) {                                                                             // 11277
          html5Mode.requireBase = mode.requireBase;                                                                    // 11278
        }                                                                                                              // 11279
                                                                                                                       // 11280
        if (isBoolean(mode.rewriteLinks)) {                                                                            // 11281
          html5Mode.rewriteLinks = mode.rewriteLinks;                                                                  // 11282
        }                                                                                                              // 11283
                                                                                                                       // 11284
        return this;                                                                                                   // 11285
      } else {                                                                                                         // 11286
        return html5Mode;                                                                                              // 11287
      }                                                                                                                // 11288
    };                                                                                                                 // 11289
                                                                                                                       // 11290
    /**                                                                                                                // 11291
     * @ngdoc event                                                                                                    // 11292
     * @name $location#$locationChangeStart                                                                            // 11293
     * @eventType broadcast on root scope                                                                              // 11294
     * @description                                                                                                    // 11295
     * Broadcasted before a URL will change.                                                                           // 11296
     *                                                                                                                 // 11297
     * This change can be prevented by calling                                                                         // 11298
     * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                              // 11299
     * details about event object. Upon successful change                                                              // 11300
     * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                    // 11301
     *                                                                                                                 // 11302
     * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                             // 11303
     * the browser supports the HTML5 History API.                                                                     // 11304
     *                                                                                                                 // 11305
     * @param {Object} angularEvent Synthetic event object.                                                            // 11306
     * @param {string} newUrl New URL                                                                                  // 11307
     * @param {string=} oldUrl URL that was before it was changed.                                                     // 11308
     * @param {string=} newState New history state object                                                              // 11309
     * @param {string=} oldState History state object that was before it was changed.                                  // 11310
     */                                                                                                                // 11311
                                                                                                                       // 11312
    /**                                                                                                                // 11313
     * @ngdoc event                                                                                                    // 11314
     * @name $location#$locationChangeSuccess                                                                          // 11315
     * @eventType broadcast on root scope                                                                              // 11316
     * @description                                                                                                    // 11317
     * Broadcasted after a URL was changed.                                                                            // 11318
     *                                                                                                                 // 11319
     * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                             // 11320
     * the browser supports the HTML5 History API.                                                                     // 11321
     *                                                                                                                 // 11322
     * @param {Object} angularEvent Synthetic event object.                                                            // 11323
     * @param {string} newUrl New URL                                                                                  // 11324
     * @param {string=} oldUrl URL that was before it was changed.                                                     // 11325
     * @param {string=} newState New history state object                                                              // 11326
     * @param {string=} oldState History state object that was before it was changed.                                  // 11327
     */                                                                                                                // 11328
                                                                                                                       // 11329
    this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                      // 11330
      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 11331
        var $location,                                                                                                 // 11332
          LocationMode,                                                                                                // 11333
          baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                             // 11334
          initialUrl = $browser.url(),                                                                                 // 11335
          appBase;                                                                                                     // 11336
                                                                                                                       // 11337
        if (html5Mode.enabled) {                                                                                       // 11338
          if (!baseHref && html5Mode.requireBase) {                                                                    // 11339
            throw $locationMinErr('nobase',                                                                            // 11340
              "$location in HTML5 mode requires a <base> tag to be present!");                                         // 11341
          }                                                                                                            // 11342
          appBase = serverBase(initialUrl) + (baseHref || '/');                                                        // 11343
          LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                             // 11344
        } else {                                                                                                       // 11345
          appBase = stripHash(initialUrl);                                                                             // 11346
          LocationMode = LocationHashbangUrl;                                                                          // 11347
        }                                                                                                              // 11348
        $location = new LocationMode(appBase, '#' + hashPrefix);                                                       // 11349
        $location.$$parseLinkUrl(initialUrl, initialUrl);                                                              // 11350
                                                                                                                       // 11351
        $location.$$state = $browser.state();                                                                          // 11352
                                                                                                                       // 11353
        var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;                                                           // 11354
                                                                                                                       // 11355
        function setBrowserUrlWithFallback(url, replace, state) {                                                      // 11356
          var oldUrl = $location.url();                                                                                // 11357
          var oldState = $location.$$state;                                                                            // 11358
          try {                                                                                                        // 11359
            $browser.url(url, replace, state);                                                                         // 11360
                                                                                                                       // 11361
            // Make sure $location.state() returns referentially identical (not just deeply equal)                     // 11362
            // state object; this makes possible quick checking if the state changed in the digest                     // 11363
            // loop. Checking deep equality would be too expensive.                                                    // 11364
            $location.$$state = $browser.state();                                                                      // 11365
          } catch (e) {                                                                                                // 11366
            // Restore old values if pushState fails                                                                   // 11367
            $location.url(oldUrl);                                                                                     // 11368
            $location.$$state = oldState;                                                                              // 11369
                                                                                                                       // 11370
            throw e;                                                                                                   // 11371
          }                                                                                                            // 11372
        }                                                                                                              // 11373
                                                                                                                       // 11374
        $rootElement.on('click', function(event) {                                                                     // 11375
          // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                              // 11376
          // currently we open nice url link and redirect then                                                         // 11377
                                                                                                                       // 11378
          if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
                                                                                                                       // 11380
          var elm = jqLite(event.target);                                                                              // 11381
                                                                                                                       // 11382
          // traverse the DOM up to find first A tag                                                                   // 11383
          while (nodeName_(elm[0]) !== 'a') {                                                                          // 11384
            // ignore rewriting if no A tag (reached root element, or no parent - removed from document)               // 11385
            if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                        // 11386
          }                                                                                                            // 11387
                                                                                                                       // 11388
          var absHref = elm.prop('href');                                                                              // 11389
          // get the actual href attribute - see                                                                       // 11390
          // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                         // 11391
          var relHref = elm.attr('href') || elm.attr('xlink:href');                                                    // 11392
                                                                                                                       // 11393
          if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                              // 11394
            // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during               // 11395
            // an animation.                                                                                           // 11396
            absHref = urlResolve(absHref.animVal).href;                                                                // 11397
          }                                                                                                            // 11398
                                                                                                                       // 11399
          // Ignore when url is started with javascript: or mailto:                                                    // 11400
          if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                 // 11401
                                                                                                                       // 11402
          if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                         // 11403
            if ($location.$$parseLinkUrl(absHref, relHref)) {                                                          // 11404
              // We do a preventDefault for all urls that are part of the angular application,                         // 11405
              // in html5mode and also without, so that we are able to abort navigation without                        // 11406
              // getting double entries in the location history.                                                       // 11407
              event.preventDefault();                                                                                  // 11408
              // update location manually                                                                              // 11409
              if ($location.absUrl() != $browser.url()) {                                                              // 11410
                $rootScope.$apply();                                                                                   // 11411
                // hack to work around FF6 bug 684208 when scenario runner clicks on links                             // 11412
                $window.angular['ff-684208-preventDefault'] = true;                                                    // 11413
              }                                                                                                        // 11414
            }                                                                                                          // 11415
          }                                                                                                            // 11416
        });                                                                                                            // 11417
                                                                                                                       // 11418
                                                                                                                       // 11419
        // rewrite hashbang url <> html5 url                                                                           // 11420
        if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                          // 11421
          $browser.url($location.absUrl(), true);                                                                      // 11422
        }                                                                                                              // 11423
                                                                                                                       // 11424
        var initializing = true;                                                                                       // 11425
                                                                                                                       // 11426
        // update $location when $browser url changes                                                                  // 11427
        $browser.onUrlChange(function(newUrl, newState) {                                                              // 11428
          $rootScope.$evalAsync(function() {                                                                           // 11429
            var oldUrl = $location.absUrl();                                                                           // 11430
            var oldState = $location.$$state;                                                                          // 11431
            var defaultPrevented;                                                                                      // 11432
                                                                                                                       // 11433
            $location.$$parse(newUrl);                                                                                 // 11434
            $location.$$state = newState;                                                                              // 11435
                                                                                                                       // 11436
            defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                           // 11437
              newState, oldState).defaultPrevented;                                                                    // 11438
                                                                                                                       // 11439
            // if the location was changed by a `$locationChangeStart` handler then stop                               // 11440
            // processing this location change                                                                         // 11441
            if ($location.absUrl() !== newUrl) return;                                                                 // 11442
                                                                                                                       // 11443
            if (defaultPrevented) {                                                                                    // 11444
              $location.$$parse(oldUrl);                                                                               // 11445
              $location.$$state = oldState;                                                                            // 11446
              setBrowserUrlWithFallback(oldUrl, false, oldState);                                                      // 11447
            } else {                                                                                                   // 11448
              initializing = false;                                                                                    // 11449
              afterLocationChange(oldUrl, oldState);                                                                   // 11450
            }                                                                                                          // 11451
          });                                                                                                          // 11452
          if (!$rootScope.$$phase) $rootScope.$digest();                                                               // 11453
        });                                                                                                            // 11454
                                                                                                                       // 11455
        // update browser                                                                                              // 11456
        $rootScope.$watch(function $locationWatch() {                                                                  // 11457
          var oldUrl = trimEmptyHash($browser.url());                                                                  // 11458
          var newUrl = trimEmptyHash($location.absUrl());                                                              // 11459
          var oldState = $browser.state();                                                                             // 11460
          var currentReplace = $location.$$replace;                                                                    // 11461
          var urlOrStateChanged = oldUrl !== newUrl ||                                                                 // 11462
            ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                 // 11463
                                                                                                                       // 11464
          if (initializing || urlOrStateChanged) {                                                                     // 11465
            initializing = false;                                                                                      // 11466
                                                                                                                       // 11467
            $rootScope.$evalAsync(function() {                                                                         // 11468
              var newUrl = $location.absUrl();                                                                         // 11469
              var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                     // 11470
                $location.$$state, oldState).defaultPrevented;                                                         // 11471
                                                                                                                       // 11472
              // if the location was changed by a `$locationChangeStart` handler then stop                             // 11473
              // processing this location change                                                                       // 11474
              if ($location.absUrl() !== newUrl) return;                                                               // 11475
                                                                                                                       // 11476
              if (defaultPrevented) {                                                                                  // 11477
                $location.$$parse(oldUrl);                                                                             // 11478
                $location.$$state = oldState;                                                                          // 11479
              } else {                                                                                                 // 11480
                if (urlOrStateChanged) {                                                                               // 11481
                  setBrowserUrlWithFallback(newUrl, currentReplace,                                                    // 11482
                    oldState === $location.$$state ? null : $location.$$state);                                        // 11483
                }                                                                                                      // 11484
                afterLocationChange(oldUrl, oldState);                                                                 // 11485
              }                                                                                                        // 11486
            });                                                                                                        // 11487
          }                                                                                                            // 11488
                                                                                                                       // 11489
          $location.$$replace = false;                                                                                 // 11490
                                                                                                                       // 11491
          // we don't need to return anything because $evalAsync will make the digest loop dirty when                  // 11492
          // there is a change                                                                                         // 11493
        });                                                                                                            // 11494
                                                                                                                       // 11495
        return $location;                                                                                              // 11496
                                                                                                                       // 11497
        function afterLocationChange(oldUrl, oldState) {                                                               // 11498
          $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                  // 11499
            $location.$$state, oldState);                                                                              // 11500
        }                                                                                                              // 11501
      }];                                                                                                              // 11502
  }                                                                                                                    // 11503
                                                                                                                       // 11504
  /**                                                                                                                  // 11505
   * @ngdoc service                                                                                                    // 11506
   * @name $log                                                                                                        // 11507
   * @requires $window                                                                                                 // 11508
   *                                                                                                                   // 11509
   * @description                                                                                                      // 11510
   * Simple service for logging. Default implementation safely writes the message                                      // 11511
   * into the browser's console (if present).                                                                          // 11512
   *                                                                                                                   // 11513
   * The main purpose of this service is to simplify debugging and troubleshooting.                                    // 11514
   *                                                                                                                   // 11515
   * The default is to log `debug` messages. You can use                                                               // 11516
   * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                              // 11517
   *                                                                                                                   // 11518
   * @example                                                                                                          // 11519
   <example module="logExample">                                                                                       // 11520
   <file name="script.js">                                                                                             // 11521
   angular.module('logExample', [])                                                                                    // 11522
   .controller('LogController', ['$scope', '$log', function($scope, $log) {                                            // 11523
           $scope.$log = $log;                                                                                         // 11524
           $scope.message = 'Hello World!';                                                                            // 11525
         }]);                                                                                                          // 11526
   </file>                                                                                                             // 11527
   <file name="index.html">                                                                                            // 11528
   <div ng-controller="LogController">                                                                                 // 11529
   <p>Reload this page with open console, enter text and hit the log button...</p>                                     // 11530
   Message:                                                                                                            // 11531
   <input type="text" ng-model="message"/>                                                                             // 11532
   <button ng-click="$log.log(message)">log</button>                                                                   // 11533
   <button ng-click="$log.warn(message)">warn</button>                                                                 // 11534
   <button ng-click="$log.info(message)">info</button>                                                                 // 11535
   <button ng-click="$log.error(message)">error</button>                                                               // 11536
   <button ng-click="$log.debug(message)">debug</button>                                                               // 11537
   </div>                                                                                                              // 11538
   </file>                                                                                                             // 11539
   </example>                                                                                                          // 11540
   */                                                                                                                  // 11541
                                                                                                                       // 11542
  /**                                                                                                                  // 11543
   * @ngdoc provider                                                                                                   // 11544
   * @name $logProvider                                                                                                // 11545
   * @description                                                                                                      // 11546
   * Use the `$logProvider` to configure how the application logs messages                                             // 11547
   */                                                                                                                  // 11548
  function $LogProvider() {                                                                                            // 11549
    var debug = true,                                                                                                  // 11550
      self = this;                                                                                                     // 11551
                                                                                                                       // 11552
    /**                                                                                                                // 11553
     * @ngdoc method                                                                                                   // 11554
     * @name $logProvider#debugEnabled                                                                                 // 11555
     * @description                                                                                                    // 11556
     * @param {boolean=} flag enable or disable debug level messages                                                   // 11557
     * @returns {*} current value if used as getter or itself (chaining) if used as setter                             // 11558
     */                                                                                                                // 11559
    this.debugEnabled = function(flag) {                                                                               // 11560
      if (isDefined(flag)) {                                                                                           // 11561
        debug = flag;                                                                                                  // 11562
        return this;                                                                                                   // 11563
      } else {                                                                                                         // 11564
        return debug;                                                                                                  // 11565
      }                                                                                                                // 11566
    };                                                                                                                 // 11567
                                                                                                                       // 11568
    this.$get = ['$window', function($window) {                                                                        // 11569
      return {                                                                                                         // 11570
        /**                                                                                                            // 11571
         * @ngdoc method                                                                                               // 11572
         * @name $log#log                                                                                              // 11573
         *                                                                                                             // 11574
         * @description                                                                                                // 11575
         * Write a log message                                                                                         // 11576
         */                                                                                                            // 11577
        log: consoleLog('log'),                                                                                        // 11578
                                                                                                                       // 11579
        /**                                                                                                            // 11580
         * @ngdoc method                                                                                               // 11581
         * @name $log#info                                                                                             // 11582
         *                                                                                                             // 11583
         * @description                                                                                                // 11584
         * Write an information message                                                                                // 11585
         */                                                                                                            // 11586
        info: consoleLog('info'),                                                                                      // 11587
                                                                                                                       // 11588
        /**                                                                                                            // 11589
         * @ngdoc method                                                                                               // 11590
         * @name $log#warn                                                                                             // 11591
         *                                                                                                             // 11592
         * @description                                                                                                // 11593
         * Write a warning message                                                                                     // 11594
         */                                                                                                            // 11595
        warn: consoleLog('warn'),                                                                                      // 11596
                                                                                                                       // 11597
        /**                                                                                                            // 11598
         * @ngdoc method                                                                                               // 11599
         * @name $log#error                                                                                            // 11600
         *                                                                                                             // 11601
         * @description                                                                                                // 11602
         * Write an error message                                                                                      // 11603
         */                                                                                                            // 11604
        error: consoleLog('error'),                                                                                    // 11605
                                                                                                                       // 11606
        /**                                                                                                            // 11607
         * @ngdoc method                                                                                               // 11608
         * @name $log#debug                                                                                            // 11609
         *                                                                                                             // 11610
         * @description                                                                                                // 11611
         * Write a debug message                                                                                       // 11612
         */                                                                                                            // 11613
        debug: (function() {                                                                                           // 11614
          var fn = consoleLog('debug');                                                                                // 11615
                                                                                                                       // 11616
          return function() {                                                                                          // 11617
            if (debug) {                                                                                               // 11618
              fn.apply(self, arguments);                                                                               // 11619
            }                                                                                                          // 11620
          };                                                                                                           // 11621
        }())                                                                                                           // 11622
      };                                                                                                               // 11623
                                                                                                                       // 11624
      function formatError(arg) {                                                                                      // 11625
        if (arg instanceof Error) {                                                                                    // 11626
          if (arg.stack) {                                                                                             // 11627
            arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                               // 11628
              ? 'Error: ' + arg.message + '\n' + arg.stack                                                             // 11629
              : arg.stack;                                                                                             // 11630
          } else if (arg.sourceURL) {                                                                                  // 11631
            arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;                                                 // 11632
          }                                                                                                            // 11633
        }                                                                                                              // 11634
        return arg;                                                                                                    // 11635
      }                                                                                                                // 11636
                                                                                                                       // 11637
      function consoleLog(type) {                                                                                      // 11638
        var console = $window.console || {},                                                                           // 11639
          logFn = console[type] || console.log || noop,                                                                // 11640
          hasApply = false;                                                                                            // 11641
                                                                                                                       // 11642
        // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                     // 11643
        // The reason behind this is that console.log has type "object" in IE8...                                      // 11644
        try {                                                                                                          // 11645
          hasApply = !!logFn.apply;                                                                                    // 11646
        } catch (e) {}                                                                                                 // 11647
                                                                                                                       // 11648
        if (hasApply) {                                                                                                // 11649
          return function() {                                                                                          // 11650
            var args = [];                                                                                             // 11651
            forEach(arguments, function(arg) {                                                                         // 11652
              args.push(formatError(arg));                                                                             // 11653
            });                                                                                                        // 11654
            return logFn.apply(console, args);                                                                         // 11655
          };                                                                                                           // 11656
        }                                                                                                              // 11657
                                                                                                                       // 11658
        // we are IE which either doesn't have window.console => this is noop and we do nothing,                       // 11659
        // or we are IE where console.log doesn't have apply so we log at least first 2 args                           // 11660
        return function(arg1, arg2) {                                                                                  // 11661
          logFn(arg1, arg2 == null ? '' : arg2);                                                                       // 11662
        };                                                                                                             // 11663
      }                                                                                                                // 11664
    }];                                                                                                                // 11665
  }                                                                                                                    // 11666
                                                                                                                       // 11667
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                         // 11668
   *     Any commits to this file should be reviewed with security in mind.  *                                         // 11669
   *   Changes to this file can potentially create security vulnerabilities. *                                         // 11670
   *          An approval from 2 Core members with history of modifying      *                                         // 11671
   *                         this file is required.                          *                                         // 11672
   *                                                                         *                                         // 11673
   *  Does the change somehow allow for arbitrary javascript to be executed? *                                         // 11674
   *    Or allows for someone to change the prototype of built-in objects?   *                                         // 11675
   *     Or gives undesired access to variables likes document or window?    *                                         // 11676
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                        // 11677
                                                                                                                       // 11678
  var $parseMinErr = minErr('$parse');                                                                                 // 11679
                                                                                                                       // 11680
// Sandboxing Angular Expressions                                                                                      // 11681
// ------------------------------                                                                                      // 11682
// Angular expressions are generally considered safe because these expressions only have direct                        // 11683
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 11684
// obtaining a reference to native JS functions such as the Function constructor.                                      // 11685
//                                                                                                                     // 11686
// As an example, consider the following Angular expression:                                                           // 11687
//                                                                                                                     // 11688
//   {}.toString.constructor('alert("evil JS code")')                                                                  // 11689
//                                                                                                                     // 11690
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 11691
// against the expression language, but not to prevent exploits that were enabled by exposing                          // 11692
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 11693
// practice and therefore we are not even trying to protect against interaction with an object                         // 11694
// explicitly exposed in this way.                                                                                     // 11695
//                                                                                                                     // 11696
// In general, it is not possible to access a Window object from an angular expression unless a                        // 11697
// window or some DOM object that has a reference to window is published onto a Scope.                                 // 11698
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 11699
// native objects.                                                                                                     // 11700
//                                                                                                                     // 11701
// See https://docs.angularjs.org/guide/security                                                                       // 11702
                                                                                                                       // 11703
                                                                                                                       // 11704
  function ensureSafeMemberName(name, fullExpression) {                                                                // 11705
    if (name === "__defineGetter__" || name === "__defineSetter__"                                                     // 11706
      || name === "__lookupGetter__" || name === "__lookupSetter__"                                                    // 11707
      || name === "__proto__") {                                                                                       // 11708
      throw $parseMinErr('isecfld',                                                                                    // 11709
        'Attempting to access a disallowed field in Angular expressions! '                                             // 11710
        + 'Expression: {0}', fullExpression);                                                                          // 11711
    }                                                                                                                  // 11712
    return name;                                                                                                       // 11713
  }                                                                                                                    // 11714
                                                                                                                       // 11715
  function ensureSafeObject(obj, fullExpression) {                                                                     // 11716
    // nifty check if obj is Function that is fast and works across iframes and other contexts                         // 11717
    if (obj) {                                                                                                         // 11718
      if (obj.constructor === obj) {                                                                                   // 11719
        throw $parseMinErr('isecfn',                                                                                   // 11720
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 11721
          fullExpression);                                                                                             // 11722
      } else if (// isWindow(obj)                                                                                      // 11723
      obj.window === obj) {                                                                                            // 11724
        throw $parseMinErr('isecwindow',                                                                               // 11725
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 11726
          fullExpression);                                                                                             // 11727
      } else if (// isElement(obj)                                                                                     // 11728
      obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                          // 11729
        throw $parseMinErr('isecdom',                                                                                  // 11730
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 11731
          fullExpression);                                                                                             // 11732
      } else if (// block Object so that we can't get hold of dangerous Object.* methods                               // 11733
      obj === Object) {                                                                                                // 11734
        throw $parseMinErr('isecobj',                                                                                  // 11735
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 11736
          fullExpression);                                                                                             // 11737
      }                                                                                                                // 11738
    }                                                                                                                  // 11739
    return obj;                                                                                                        // 11740
  }                                                                                                                    // 11741
                                                                                                                       // 11742
  var CALL = Function.prototype.call;                                                                                  // 11743
  var APPLY = Function.prototype.apply;                                                                                // 11744
  var BIND = Function.prototype.bind;                                                                                  // 11745
                                                                                                                       // 11746
  function ensureSafeFunction(obj, fullExpression) {                                                                   // 11747
    if (obj) {                                                                                                         // 11748
      if (obj.constructor === obj) {                                                                                   // 11749
        throw $parseMinErr('isecfn',                                                                                   // 11750
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 11751
          fullExpression);                                                                                             // 11752
      } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                      // 11753
        throw $parseMinErr('isecff',                                                                                   // 11754
          'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                     // 11755
          fullExpression);                                                                                             // 11756
      }                                                                                                                // 11757
    }                                                                                                                  // 11758
  }                                                                                                                    // 11759
                                                                                                                       // 11760
//Keyword constants                                                                                                    // 11761
  var CONSTANTS = createMap();                                                                                         // 11762
  forEach({                                                                                                            // 11763
    'null': function() { return null; },                                                                               // 11764
    'true': function() { return true; },                                                                               // 11765
    'false': function() { return false; },                                                                             // 11766
    'undefined': function() {}                                                                                         // 11767
  }, function(constantGetter, name) {                                                                                  // 11768
    constantGetter.constant = constantGetter.literal = constantGetter.sharedGetter = true;                             // 11769
    CONSTANTS[name] = constantGetter;                                                                                  // 11770
  });                                                                                                                  // 11771
                                                                                                                       // 11772
//Not quite a constant, but can be lex/parsed the same                                                                 // 11773
  CONSTANTS['this'] = function(self) { return self; };                                                                 // 11774
  CONSTANTS['this'].sharedGetter = true;                                                                               // 11775
                                                                                                                       // 11776
                                                                                                                       // 11777
//Operators - will be wrapped by binaryFn/unaryFn/assignment/filter                                                    // 11778
  var OPERATORS = extend(createMap(), {                                                                                // 11779
    '+':function(self, locals, a, b) {                                                                                 // 11780
      a=a(self, locals); b=b(self, locals);                                                                            // 11781
      if (isDefined(a)) {                                                                                              // 11782
        if (isDefined(b)) {                                                                                            // 11783
          return a + b;                                                                                                // 11784
        }                                                                                                              // 11785
        return a;                                                                                                      // 11786
      }                                                                                                                // 11787
      return isDefined(b) ? b : undefined;},                                                                           // 11788
    '-':function(self, locals, a, b) {                                                                                 // 11789
      a=a(self, locals); b=b(self, locals);                                                                            // 11790
      return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);                                                          // 11791
    },                                                                                                                 // 11792
    '*':function(self, locals, a, b) {return a(self, locals) * b(self, locals);},                                      // 11793
    '/':function(self, locals, a, b) {return a(self, locals) / b(self, locals);},                                      // 11794
    '%':function(self, locals, a, b) {return a(self, locals) % b(self, locals);},                                      // 11795
    '===':function(self, locals, a, b) {return a(self, locals) === b(self, locals);},                                  // 11796
    '!==':function(self, locals, a, b) {return a(self, locals) !== b(self, locals);},                                  // 11797
    '==':function(self, locals, a, b) {return a(self, locals) == b(self, locals);},                                    // 11798
    '!=':function(self, locals, a, b) {return a(self, locals) != b(self, locals);},                                    // 11799
    '<':function(self, locals, a, b) {return a(self, locals) < b(self, locals);},                                      // 11800
    '>':function(self, locals, a, b) {return a(self, locals) > b(self, locals);},                                      // 11801
    '<=':function(self, locals, a, b) {return a(self, locals) <= b(self, locals);},                                    // 11802
    '>=':function(self, locals, a, b) {return a(self, locals) >= b(self, locals);},                                    // 11803
    '&&':function(self, locals, a, b) {return a(self, locals) && b(self, locals);},                                    // 11804
    '||':function(self, locals, a, b) {return a(self, locals) || b(self, locals);},                                    // 11805
    '!':function(self, locals, a) {return !a(self, locals);},                                                          // 11806
                                                                                                                       // 11807
    //Tokenized as operators but parsed as assignment/filters                                                          // 11808
    '=':true,                                                                                                          // 11809
    '|':true                                                                                                           // 11810
  });                                                                                                                  // 11811
  var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};                                   // 11812
                                                                                                                       // 11813
                                                                                                                       // 11814
/////////////////////////////////////////                                                                              // 11815
                                                                                                                       // 11816
                                                                                                                       // 11817
  /**                                                                                                                  // 11818
   * @constructor                                                                                                      // 11819
   */                                                                                                                  // 11820
  var Lexer = function(options) {                                                                                      // 11821
    this.options = options;                                                                                            // 11822
  };                                                                                                                   // 11823
                                                                                                                       // 11824
  Lexer.prototype = {                                                                                                  // 11825
    constructor: Lexer,                                                                                                // 11826
                                                                                                                       // 11827
    lex: function(text) {                                                                                              // 11828
      this.text = text;                                                                                                // 11829
      this.index = 0;                                                                                                  // 11830
      this.tokens = [];                                                                                                // 11831
                                                                                                                       // 11832
      while (this.index < this.text.length) {                                                                          // 11833
        var ch = this.text.charAt(this.index);                                                                         // 11834
        if (ch === '"' || ch === "'") {                                                                                // 11835
          this.readString(ch);                                                                                         // 11836
        } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                    // 11837
          this.readNumber();                                                                                           // 11838
        } else if (this.isIdent(ch)) {                                                                                 // 11839
          this.readIdent();                                                                                            // 11840
        } else if (this.is(ch, '(){}[].,;:?')) {                                                                       // 11841
          this.tokens.push({index: this.index, text: ch});                                                             // 11842
          this.index++;                                                                                                // 11843
        } else if (this.isWhitespace(ch)) {                                                                            // 11844
          this.index++;                                                                                                // 11845
        } else {                                                                                                       // 11846
          var ch2 = ch + this.peek();                                                                                  // 11847
          var ch3 = ch2 + this.peek(2);                                                                                // 11848
          var op1 = OPERATORS[ch];                                                                                     // 11849
          var op2 = OPERATORS[ch2];                                                                                    // 11850
          var op3 = OPERATORS[ch3];                                                                                    // 11851
          if (op1 || op2 || op3) {                                                                                     // 11852
            var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                  // 11853
            this.tokens.push({index: this.index, text: token, operator: true});                                        // 11854
            this.index += token.length;                                                                                // 11855
          } else {                                                                                                     // 11856
            this.throwError('Unexpected next character ', this.index, this.index + 1);                                 // 11857
          }                                                                                                            // 11858
        }                                                                                                              // 11859
      }                                                                                                                // 11860
      return this.tokens;                                                                                              // 11861
    },                                                                                                                 // 11862
                                                                                                                       // 11863
    is: function(ch, chars) {                                                                                          // 11864
      return chars.indexOf(ch) !== -1;                                                                                 // 11865
    },                                                                                                                 // 11866
                                                                                                                       // 11867
    peek: function(i) {                                                                                                // 11868
      var num = i || 1;                                                                                                // 11869
      return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                       // 11870
    },                                                                                                                 // 11871
                                                                                                                       // 11872
    isNumber: function(ch) {                                                                                           // 11873
      return ('0' <= ch && ch <= '9') && typeof ch === "string";                                                       // 11874
    },                                                                                                                 // 11875
                                                                                                                       // 11876
    isWhitespace: function(ch) {                                                                                       // 11877
      // IE treats non-breaking space as \u00A0                                                                        // 11878
      return (ch === ' ' || ch === '\r' || ch === '\t' ||                                                              // 11879
      ch === '\n' || ch === '\v' || ch === '\u00A0');                                                                  // 11880
    },                                                                                                                 // 11881
                                                                                                                       // 11882
    isIdent: function(ch) {                                                                                            // 11883
      return ('a' <= ch && ch <= 'z' ||                                                                                // 11884
      'A' <= ch && ch <= 'Z' ||                                                                                        // 11885
      '_' === ch || ch === '$');                                                                                       // 11886
    },                                                                                                                 // 11887
                                                                                                                       // 11888
    isExpOperator: function(ch) {                                                                                      // 11889
      return (ch === '-' || ch === '+' || this.isNumber(ch));                                                          // 11890
    },                                                                                                                 // 11891
                                                                                                                       // 11892
    throwError: function(error, start, end) {                                                                          // 11893
      end = end || this.index;                                                                                         // 11894
      var colStr = (isDefined(start)                                                                                   // 11895
        ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                              // 11896
        : ' ' + end);                                                                                                  // 11897
      throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                               // 11898
        error, colStr, this.text);                                                                                     // 11899
    },                                                                                                                 // 11900
                                                                                                                       // 11901
    readNumber: function() {                                                                                           // 11902
      var number = '';                                                                                                 // 11903
      var start = this.index;                                                                                          // 11904
      while (this.index < this.text.length) {                                                                          // 11905
        var ch = lowercase(this.text.charAt(this.index));                                                              // 11906
        if (ch == '.' || this.isNumber(ch)) {                                                                          // 11907
          number += ch;                                                                                                // 11908
        } else {                                                                                                       // 11909
          var peekCh = this.peek();                                                                                    // 11910
          if (ch == 'e' && this.isExpOperator(peekCh)) {                                                               // 11911
            number += ch;                                                                                              // 11912
          } else if (this.isExpOperator(ch) &&                                                                         // 11913
            peekCh && this.isNumber(peekCh) &&                                                                         // 11914
            number.charAt(number.length - 1) == 'e') {                                                                 // 11915
            number += ch;                                                                                              // 11916
          } else if (this.isExpOperator(ch) &&                                                                         // 11917
            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 11918
            number.charAt(number.length - 1) == 'e') {                                                                 // 11919
            this.throwError('Invalid exponent');                                                                       // 11920
          } else {                                                                                                     // 11921
            break;                                                                                                     // 11922
          }                                                                                                            // 11923
        }                                                                                                              // 11924
        this.index++;                                                                                                  // 11925
      }                                                                                                                // 11926
      this.tokens.push({                                                                                               // 11927
        index: start,                                                                                                  // 11928
        text: number,                                                                                                  // 11929
        constant: true,                                                                                                // 11930
        value: Number(number)                                                                                          // 11931
      });                                                                                                              // 11932
    },                                                                                                                 // 11933
                                                                                                                       // 11934
    readIdent: function() {                                                                                            // 11935
      var start = this.index;                                                                                          // 11936
      while (this.index < this.text.length) {                                                                          // 11937
        var ch = this.text.charAt(this.index);                                                                         // 11938
        if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                // 11939
          break;                                                                                                       // 11940
        }                                                                                                              // 11941
        this.index++;                                                                                                  // 11942
      }                                                                                                                // 11943
      this.tokens.push({                                                                                               // 11944
        index: start,                                                                                                  // 11945
        text: this.text.slice(start, this.index),                                                                      // 11946
        identifier: true                                                                                               // 11947
      });                                                                                                              // 11948
    },                                                                                                                 // 11949
                                                                                                                       // 11950
    readString: function(quote) {                                                                                      // 11951
      var start = this.index;                                                                                          // 11952
      this.index++;                                                                                                    // 11953
      var string = '';                                                                                                 // 11954
      var rawString = quote;                                                                                           // 11955
      var escape = false;                                                                                              // 11956
      while (this.index < this.text.length) {                                                                          // 11957
        var ch = this.text.charAt(this.index);                                                                         // 11958
        rawString += ch;                                                                                               // 11959
        if (escape) {                                                                                                  // 11960
          if (ch === 'u') {                                                                                            // 11961
            var hex = this.text.substring(this.index + 1, this.index + 5);                                             // 11962
            if (!hex.match(/[\da-f]{4}/i))                                                                             // 11963
              this.throwError('Invalid unicode escape [\\u' + hex + ']');                                              // 11964
            this.index += 4;                                                                                           // 11965
            string += String.fromCharCode(parseInt(hex, 16));                                                          // 11966
          } else {                                                                                                     // 11967
            var rep = ESCAPE[ch];                                                                                      // 11968
            string = string + (rep || ch);                                                                             // 11969
          }                                                                                                            // 11970
          escape = false;                                                                                              // 11971
        } else if (ch === '\\') {                                                                                      // 11972
          escape = true;                                                                                               // 11973
        } else if (ch === quote) {                                                                                     // 11974
          this.index++;                                                                                                // 11975
          this.tokens.push({                                                                                           // 11976
            index: start,                                                                                              // 11977
            text: rawString,                                                                                           // 11978
            constant: true,                                                                                            // 11979
            value: string                                                                                              // 11980
          });                                                                                                          // 11981
          return;                                                                                                      // 11982
        } else {                                                                                                       // 11983
          string += ch;                                                                                                // 11984
        }                                                                                                              // 11985
        this.index++;                                                                                                  // 11986
      }                                                                                                                // 11987
      this.throwError('Unterminated quote', start);                                                                    // 11988
    }                                                                                                                  // 11989
  };                                                                                                                   // 11990
                                                                                                                       // 11991
                                                                                                                       // 11992
  function isConstant(exp) {                                                                                           // 11993
    return exp.constant;                                                                                               // 11994
  }                                                                                                                    // 11995
                                                                                                                       // 11996
  /**                                                                                                                  // 11997
   * @constructor                                                                                                      // 11998
   */                                                                                                                  // 11999
  var Parser = function(lexer, $filter, options) {                                                                     // 12000
    this.lexer = lexer;                                                                                                // 12001
    this.$filter = $filter;                                                                                            // 12002
    this.options = options;                                                                                            // 12003
  };                                                                                                                   // 12004
                                                                                                                       // 12005
  Parser.ZERO = extend(function() {                                                                                    // 12006
    return 0;                                                                                                          // 12007
  }, {                                                                                                                 // 12008
    sharedGetter: true,                                                                                                // 12009
    constant: true                                                                                                     // 12010
  });                                                                                                                  // 12011
                                                                                                                       // 12012
  Parser.prototype = {                                                                                                 // 12013
    constructor: Parser,                                                                                               // 12014
                                                                                                                       // 12015
    parse: function(text) {                                                                                            // 12016
      this.text = text;                                                                                                // 12017
      this.tokens = this.lexer.lex(text);                                                                              // 12018
                                                                                                                       // 12019
      var value = this.statements();                                                                                   // 12020
                                                                                                                       // 12021
      if (this.tokens.length !== 0) {                                                                                  // 12022
        this.throwError('is an unexpected token', this.tokens[0]);                                                     // 12023
      }                                                                                                                // 12024
                                                                                                                       // 12025
      value.literal = !!value.literal;                                                                                 // 12026
      value.constant = !!value.constant;                                                                               // 12027
                                                                                                                       // 12028
      return value;                                                                                                    // 12029
    },                                                                                                                 // 12030
                                                                                                                       // 12031
    primary: function() {                                                                                              // 12032
      var primary;                                                                                                     // 12033
      if (this.expect('(')) {                                                                                          // 12034
        primary = this.filterChain();                                                                                  // 12035
        this.consume(')');                                                                                             // 12036
      } else if (this.expect('[')) {                                                                                   // 12037
        primary = this.arrayDeclaration();                                                                             // 12038
      } else if (this.expect('{')) {                                                                                   // 12039
        primary = this.object();                                                                                       // 12040
      } else if (this.peek().identifier && this.peek().text in CONSTANTS) {                                            // 12041
        primary = CONSTANTS[this.consume().text];                                                                      // 12042
      } else if (this.peek().identifier) {                                                                             // 12043
        primary = this.identifier();                                                                                   // 12044
      } else if (this.peek().constant) {                                                                               // 12045
        primary = this.constant();                                                                                     // 12046
      } else {                                                                                                         // 12047
        this.throwError('not a primary expression', this.peek());                                                      // 12048
      }                                                                                                                // 12049
                                                                                                                       // 12050
      var next, context;                                                                                               // 12051
      while ((next = this.expect('(', '[', '.'))) {                                                                    // 12052
        if (next.text === '(') {                                                                                       // 12053
          primary = this.functionCall(primary, context);                                                               // 12054
          context = null;                                                                                              // 12055
        } else if (next.text === '[') {                                                                                // 12056
          context = primary;                                                                                           // 12057
          primary = this.objectIndex(primary);                                                                         // 12058
        } else if (next.text === '.') {                                                                                // 12059
          context = primary;                                                                                           // 12060
          primary = this.fieldAccess(primary);                                                                         // 12061
        } else {                                                                                                       // 12062
          this.throwError('IMPOSSIBLE');                                                                               // 12063
        }                                                                                                              // 12064
      }                                                                                                                // 12065
      return primary;                                                                                                  // 12066
    },                                                                                                                 // 12067
                                                                                                                       // 12068
    throwError: function(msg, token) {                                                                                 // 12069
      throw $parseMinErr('syntax',                                                                                     // 12070
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 12071
        token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                              // 12072
    },                                                                                                                 // 12073
                                                                                                                       // 12074
    peekToken: function() {                                                                                            // 12075
      if (this.tokens.length === 0)                                                                                    // 12076
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                    // 12077
      return this.tokens[0];                                                                                           // 12078
    },                                                                                                                 // 12079
                                                                                                                       // 12080
    peek: function(e1, e2, e3, e4) {                                                                                   // 12081
      return this.peekAhead(0, e1, e2, e3, e4);                                                                        // 12082
    },                                                                                                                 // 12083
    peekAhead: function(i, e1, e2, e3, e4) {                                                                           // 12084
      if (this.tokens.length > i) {                                                                                    // 12085
        var token = this.tokens[i];                                                                                    // 12086
        var t = token.text;                                                                                            // 12087
        if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                            // 12088
          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 12089
          return token;                                                                                                // 12090
        }                                                                                                              // 12091
      }                                                                                                                // 12092
      return false;                                                                                                    // 12093
    },                                                                                                                 // 12094
                                                                                                                       // 12095
    expect: function(e1, e2, e3, e4) {                                                                                 // 12096
      var token = this.peek(e1, e2, e3, e4);                                                                           // 12097
      if (token) {                                                                                                     // 12098
        this.tokens.shift();                                                                                           // 12099
        return token;                                                                                                  // 12100
      }                                                                                                                // 12101
      return false;                                                                                                    // 12102
    },                                                                                                                 // 12103
                                                                                                                       // 12104
    consume: function(e1) {                                                                                            // 12105
      if (this.tokens.length === 0) {                                                                                  // 12106
        throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                    // 12107
      }                                                                                                                // 12108
                                                                                                                       // 12109
      var token = this.expect(e1);                                                                                     // 12110
      if (!token) {                                                                                                    // 12111
        this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                         // 12112
      }                                                                                                                // 12113
      return token;                                                                                                    // 12114
    },                                                                                                                 // 12115
                                                                                                                       // 12116
    unaryFn: function(op, right) {                                                                                     // 12117
      var fn = OPERATORS[op];                                                                                          // 12118
      return extend(function $parseUnaryFn(self, locals) {                                                             // 12119
        return fn(self, locals, right);                                                                                // 12120
      }, {                                                                                                             // 12121
        constant:right.constant,                                                                                       // 12122
        inputs: [right]                                                                                                // 12123
      });                                                                                                              // 12124
    },                                                                                                                 // 12125
                                                                                                                       // 12126
    binaryFn: function(left, op, right, isBranching) {                                                                 // 12127
      var fn = OPERATORS[op];                                                                                          // 12128
      return extend(function $parseBinaryFn(self, locals) {                                                            // 12129
        return fn(self, locals, left, right);                                                                          // 12130
      }, {                                                                                                             // 12131
        constant: left.constant && right.constant,                                                                     // 12132
        inputs: !isBranching && [left, right]                                                                          // 12133
      });                                                                                                              // 12134
    },                                                                                                                 // 12135
                                                                                                                       // 12136
    identifier: function() {                                                                                           // 12137
      var id = this.consume().text;                                                                                    // 12138
                                                                                                                       // 12139
      //Continue reading each `.identifier` unless it is a method invocation                                           // 12140
      while (this.peek('.') && this.peekAhead(1).identifier && !this.peekAhead(2, '(')) {                              // 12141
        id += this.consume().text + this.consume().text;                                                               // 12142
      }                                                                                                                // 12143
                                                                                                                       // 12144
      return getterFn(id, this.options, this.text);                                                                    // 12145
    },                                                                                                                 // 12146
                                                                                                                       // 12147
    constant: function() {                                                                                             // 12148
      var value = this.consume().value;                                                                                // 12149
                                                                                                                       // 12150
      return extend(function $parseConstant() {                                                                        // 12151
        return value;                                                                                                  // 12152
      }, {                                                                                                             // 12153
        constant: true,                                                                                                // 12154
        literal: true                                                                                                  // 12155
      });                                                                                                              // 12156
    },                                                                                                                 // 12157
                                                                                                                       // 12158
    statements: function() {                                                                                           // 12159
      var statements = [];                                                                                             // 12160
      while (true) {                                                                                                   // 12161
        if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                  // 12162
          statements.push(this.filterChain());                                                                         // 12163
        if (!this.expect(';')) {                                                                                       // 12164
          // optimize for the common case where there is only one statement.                                           // 12165
          // TODO(size): maybe we should not support multiple statements?                                              // 12166
          return (statements.length === 1)                                                                             // 12167
            ? statements[0]                                                                                            // 12168
            : function $parseStatements(self, locals) {                                                                // 12169
            var value;                                                                                                 // 12170
            for (var i = 0, ii = statements.length; i < ii; i++) {                                                     // 12171
              value = statements[i](self, locals);                                                                     // 12172
            }                                                                                                          // 12173
            return value;                                                                                              // 12174
          };                                                                                                           // 12175
        }                                                                                                              // 12176
      }                                                                                                                // 12177
    },                                                                                                                 // 12178
                                                                                                                       // 12179
    filterChain: function() {                                                                                          // 12180
      var left = this.expression();                                                                                    // 12181
      var token;                                                                                                       // 12182
      while ((token = this.expect('|'))) {                                                                             // 12183
        left = this.filter(left);                                                                                      // 12184
      }                                                                                                                // 12185
      return left;                                                                                                     // 12186
    },                                                                                                                 // 12187
                                                                                                                       // 12188
    filter: function(inputFn) {                                                                                        // 12189
      var fn = this.$filter(this.consume().text);                                                                      // 12190
      var argsFn;                                                                                                      // 12191
      var args;                                                                                                        // 12192
                                                                                                                       // 12193
      if (this.peek(':')) {                                                                                            // 12194
        argsFn = [];                                                                                                   // 12195
        args = []; // we can safely reuse the array                                                                    // 12196
        while (this.expect(':')) {                                                                                     // 12197
          argsFn.push(this.expression());                                                                              // 12198
        }                                                                                                              // 12199
      }                                                                                                                // 12200
                                                                                                                       // 12201
      var inputs = [inputFn].concat(argsFn || []);                                                                     // 12202
                                                                                                                       // 12203
      return extend(function $parseFilter(self, locals) {                                                              // 12204
        var input = inputFn(self, locals);                                                                             // 12205
        if (args) {                                                                                                    // 12206
          args[0] = input;                                                                                             // 12207
                                                                                                                       // 12208
          var i = argsFn.length;                                                                                       // 12209
          while (i--) {                                                                                                // 12210
            args[i + 1] = argsFn[i](self, locals);                                                                     // 12211
          }                                                                                                            // 12212
                                                                                                                       // 12213
          return fn.apply(undefined, args);                                                                            // 12214
        }                                                                                                              // 12215
                                                                                                                       // 12216
        return fn(input);                                                                                              // 12217
      }, {                                                                                                             // 12218
        constant: !fn.$stateful && inputs.every(isConstant),                                                           // 12219
        inputs: !fn.$stateful && inputs                                                                                // 12220
      });                                                                                                              // 12221
    },                                                                                                                 // 12222
                                                                                                                       // 12223
    expression: function() {                                                                                           // 12224
      return this.assignment();                                                                                        // 12225
    },                                                                                                                 // 12226
                                                                                                                       // 12227
    assignment: function() {                                                                                           // 12228
      var left = this.ternary();                                                                                       // 12229
      var right;                                                                                                       // 12230
      var token;                                                                                                       // 12231
      if ((token = this.expect('='))) {                                                                                // 12232
        if (!left.assign) {                                                                                            // 12233
          this.throwError('implies assignment but [' +                                                                 // 12234
          this.text.substring(0, token.index) + '] can not be assigned to', token);                                    // 12235
        }                                                                                                              // 12236
        right = this.ternary();                                                                                        // 12237
        return extend(function $parseAssignment(scope, locals) {                                                       // 12238
          return left.assign(scope, right(scope, locals), locals);                                                     // 12239
        }, {                                                                                                           // 12240
          inputs: [left, right]                                                                                        // 12241
        });                                                                                                            // 12242
      }                                                                                                                // 12243
      return left;                                                                                                     // 12244
    },                                                                                                                 // 12245
                                                                                                                       // 12246
    ternary: function() {                                                                                              // 12247
      var left = this.logicalOR();                                                                                     // 12248
      var middle;                                                                                                      // 12249
      var token;                                                                                                       // 12250
      if ((token = this.expect('?'))) {                                                                                // 12251
        middle = this.assignment();                                                                                    // 12252
        if (this.consume(':')) {                                                                                       // 12253
          var right = this.assignment();                                                                               // 12254
                                                                                                                       // 12255
          return extend(function $parseTernary(self, locals) {                                                         // 12256
            return left(self, locals) ? middle(self, locals) : right(self, locals);                                    // 12257
          }, {                                                                                                         // 12258
            constant: left.constant && middle.constant && right.constant                                               // 12259
          });                                                                                                          // 12260
        }                                                                                                              // 12261
      }                                                                                                                // 12262
                                                                                                                       // 12263
      return left;                                                                                                     // 12264
    },                                                                                                                 // 12265
                                                                                                                       // 12266
    logicalOR: function() {                                                                                            // 12267
      var left = this.logicalAND();                                                                                    // 12268
      var token;                                                                                                       // 12269
      while ((token = this.expect('||'))) {                                                                            // 12270
        left = this.binaryFn(left, token.text, this.logicalAND(), true);                                               // 12271
      }                                                                                                                // 12272
      return left;                                                                                                     // 12273
    },                                                                                                                 // 12274
                                                                                                                       // 12275
    logicalAND: function() {                                                                                           // 12276
      var left = this.equality();                                                                                      // 12277
      var token;                                                                                                       // 12278
      while ((token = this.expect('&&'))) {                                                                            // 12279
        left = this.binaryFn(left, token.text, this.equality(), true);                                                 // 12280
      }                                                                                                                // 12281
      return left;                                                                                                     // 12282
    },                                                                                                                 // 12283
                                                                                                                       // 12284
    equality: function() {                                                                                             // 12285
      var left = this.relational();                                                                                    // 12286
      var token;                                                                                                       // 12287
      while ((token = this.expect('==','!=','===','!=='))) {                                                           // 12288
        left = this.binaryFn(left, token.text, this.relational());                                                     // 12289
      }                                                                                                                // 12290
      return left;                                                                                                     // 12291
    },                                                                                                                 // 12292
                                                                                                                       // 12293
    relational: function() {                                                                                           // 12294
      var left = this.additive();                                                                                      // 12295
      var token;                                                                                                       // 12296
      while ((token = this.expect('<', '>', '<=', '>='))) {                                                            // 12297
        left = this.binaryFn(left, token.text, this.additive());                                                       // 12298
      }                                                                                                                // 12299
      return left;                                                                                                     // 12300
    },                                                                                                                 // 12301
                                                                                                                       // 12302
    additive: function() {                                                                                             // 12303
      var left = this.multiplicative();                                                                                // 12304
      var token;                                                                                                       // 12305
      while ((token = this.expect('+','-'))) {                                                                         // 12306
        left = this.binaryFn(left, token.text, this.multiplicative());                                                 // 12307
      }                                                                                                                // 12308
      return left;                                                                                                     // 12309
    },                                                                                                                 // 12310
                                                                                                                       // 12311
    multiplicative: function() {                                                                                       // 12312
      var left = this.unary();                                                                                         // 12313
      var token;                                                                                                       // 12314
      while ((token = this.expect('*','/','%'))) {                                                                     // 12315
        left = this.binaryFn(left, token.text, this.unary());                                                          // 12316
      }                                                                                                                // 12317
      return left;                                                                                                     // 12318
    },                                                                                                                 // 12319
                                                                                                                       // 12320
    unary: function() {                                                                                                // 12321
      var token;                                                                                                       // 12322
      if (this.expect('+')) {                                                                                          // 12323
        return this.primary();                                                                                         // 12324
      } else if ((token = this.expect('-'))) {                                                                         // 12325
        return this.binaryFn(Parser.ZERO, token.text, this.unary());                                                   // 12326
      } else if ((token = this.expect('!'))) {                                                                         // 12327
        return this.unaryFn(token.text, this.unary());                                                                 // 12328
      } else {                                                                                                         // 12329
        return this.primary();                                                                                         // 12330
      }                                                                                                                // 12331
    },                                                                                                                 // 12332
                                                                                                                       // 12333
    fieldAccess: function(object) {                                                                                    // 12334
      var getter = this.identifier();                                                                                  // 12335
                                                                                                                       // 12336
      return extend(function $parseFieldAccess(scope, locals, self) {                                                  // 12337
        var o = self || object(scope, locals);                                                                         // 12338
        return (o == null) ? undefined : getter(o);                                                                    // 12339
      }, {                                                                                                             // 12340
        assign: function(scope, value, locals) {                                                                       // 12341
          var o = object(scope, locals);                                                                               // 12342
          if (!o) object.assign(scope, o = {}, locals);                                                                // 12343
          return getter.assign(o, value);                                                                              // 12344
        }                                                                                                              // 12345
      });                                                                                                              // 12346
    },                                                                                                                 // 12347
                                                                                                                       // 12348
    objectIndex: function(obj) {                                                                                       // 12349
      var expression = this.text;                                                                                      // 12350
                                                                                                                       // 12351
      var indexFn = this.expression();                                                                                 // 12352
      this.consume(']');                                                                                               // 12353
                                                                                                                       // 12354
      return extend(function $parseObjectIndex(self, locals) {                                                         // 12355
        var o = obj(self, locals),                                                                                     // 12356
          i = indexFn(self, locals),                                                                                   // 12357
          v;                                                                                                           // 12358
                                                                                                                       // 12359
        ensureSafeMemberName(i, expression);                                                                           // 12360
        if (!o) return undefined;                                                                                      // 12361
        v = ensureSafeObject(o[i], expression);                                                                        // 12362
        return v;                                                                                                      // 12363
      }, {                                                                                                             // 12364
        assign: function(self, value, locals) {                                                                        // 12365
          var key = ensureSafeMemberName(indexFn(self, locals), expression);                                           // 12366
          // prevent overwriting of Function.constructor which would break ensureSafeObject check                      // 12367
          var o = ensureSafeObject(obj(self, locals), expression);                                                     // 12368
          if (!o) obj.assign(self, o = {}, locals);                                                                    // 12369
          return o[key] = value;                                                                                       // 12370
        }                                                                                                              // 12371
      });                                                                                                              // 12372
    },                                                                                                                 // 12373
                                                                                                                       // 12374
    functionCall: function(fnGetter, contextGetter) {                                                                  // 12375
      var argsFn = [];                                                                                                 // 12376
      if (this.peekToken().text !== ')') {                                                                             // 12377
        do {                                                                                                           // 12378
          argsFn.push(this.expression());                                                                              // 12379
        } while (this.expect(','));                                                                                    // 12380
      }                                                                                                                // 12381
      this.consume(')');                                                                                               // 12382
                                                                                                                       // 12383
      var expressionText = this.text;                                                                                  // 12384
      // we can safely reuse the array across invocations                                                              // 12385
      var args = argsFn.length ? [] : null;                                                                            // 12386
                                                                                                                       // 12387
      return function $parseFunctionCall(scope, locals) {                                                              // 12388
        var context = contextGetter ? contextGetter(scope, locals) : isDefined(contextGetter) ? undefined : scope;     // 12389
        var fn = fnGetter(scope, locals, context) || noop;                                                             // 12390
                                                                                                                       // 12391
        if (args) {                                                                                                    // 12392
          var i = argsFn.length;                                                                                       // 12393
          while (i--) {                                                                                                // 12394
            args[i] = ensureSafeObject(argsFn[i](scope, locals), expressionText);                                      // 12395
          }                                                                                                            // 12396
        }                                                                                                              // 12397
                                                                                                                       // 12398
        ensureSafeObject(context, expressionText);                                                                     // 12399
        ensureSafeFunction(fn, expressionText);                                                                        // 12400
                                                                                                                       // 12401
        // IE doesn't have apply for some native functions                                                             // 12402
        var v = fn.apply                                                                                               // 12403
          ? fn.apply(context, args)                                                                                    // 12404
          : fn(args[0], args[1], args[2], args[3], args[4]);                                                           // 12405
                                                                                                                       // 12406
        if (args) {                                                                                                    // 12407
          // Free-up the memory (arguments of the last function call).                                                 // 12408
          args.length = 0;                                                                                             // 12409
        }                                                                                                              // 12410
                                                                                                                       // 12411
        return ensureSafeObject(v, expressionText);                                                                    // 12412
      };                                                                                                               // 12413
    },                                                                                                                 // 12414
                                                                                                                       // 12415
    // This is used with json array declaration                                                                        // 12416
    arrayDeclaration: function() {                                                                                     // 12417
      var elementFns = [];                                                                                             // 12418
      if (this.peekToken().text !== ']') {                                                                             // 12419
        do {                                                                                                           // 12420
          if (this.peek(']')) {                                                                                        // 12421
            // Support trailing commas per ES5.1.                                                                      // 12422
            break;                                                                                                     // 12423
          }                                                                                                            // 12424
          elementFns.push(this.expression());                                                                          // 12425
        } while (this.expect(','));                                                                                    // 12426
      }                                                                                                                // 12427
      this.consume(']');                                                                                               // 12428
                                                                                                                       // 12429
      return extend(function $parseArrayLiteral(self, locals) {                                                        // 12430
        var array = [];                                                                                                // 12431
        for (var i = 0, ii = elementFns.length; i < ii; i++) {                                                         // 12432
          array.push(elementFns[i](self, locals));                                                                     // 12433
        }                                                                                                              // 12434
        return array;                                                                                                  // 12435
      }, {                                                                                                             // 12436
        literal: true,                                                                                                 // 12437
        constant: elementFns.every(isConstant),                                                                        // 12438
        inputs: elementFns                                                                                             // 12439
      });                                                                                                              // 12440
    },                                                                                                                 // 12441
                                                                                                                       // 12442
    object: function() {                                                                                               // 12443
      var keys = [], valueFns = [];                                                                                    // 12444
      if (this.peekToken().text !== '}') {                                                                             // 12445
        do {                                                                                                           // 12446
          if (this.peek('}')) {                                                                                        // 12447
            // Support trailing commas per ES5.1.                                                                      // 12448
            break;                                                                                                     // 12449
          }                                                                                                            // 12450
          var token = this.consume();                                                                                  // 12451
          if (token.constant) {                                                                                        // 12452
            keys.push(token.value);                                                                                    // 12453
          } else if (token.identifier) {                                                                               // 12454
            keys.push(token.text);                                                                                     // 12455
          } else {                                                                                                     // 12456
            this.throwError("invalid key", token);                                                                     // 12457
          }                                                                                                            // 12458
          this.consume(':');                                                                                           // 12459
          valueFns.push(this.expression());                                                                            // 12460
        } while (this.expect(','));                                                                                    // 12461
      }                                                                                                                // 12462
      this.consume('}');                                                                                               // 12463
                                                                                                                       // 12464
      return extend(function $parseObjectLiteral(self, locals) {                                                       // 12465
        var object = {};                                                                                               // 12466
        for (var i = 0, ii = valueFns.length; i < ii; i++) {                                                           // 12467
          object[keys[i]] = valueFns[i](self, locals);                                                                 // 12468
        }                                                                                                              // 12469
        return object;                                                                                                 // 12470
      }, {                                                                                                             // 12471
        literal: true,                                                                                                 // 12472
        constant: valueFns.every(isConstant),                                                                          // 12473
        inputs: valueFns                                                                                               // 12474
      });                                                                                                              // 12475
    }                                                                                                                  // 12476
  };                                                                                                                   // 12477
                                                                                                                       // 12478
                                                                                                                       // 12479
//////////////////////////////////////////////////                                                                     // 12480
// Parser helper functions                                                                                             // 12481
//////////////////////////////////////////////////                                                                     // 12482
                                                                                                                       // 12483
  function setter(obj, locals, path, setValue, fullExp) {                                                              // 12484
    ensureSafeObject(obj, fullExp);                                                                                    // 12485
    ensureSafeObject(locals, fullExp);                                                                                 // 12486
                                                                                                                       // 12487
    var element = path.split('.'), key;                                                                                // 12488
    for (var i = 0; element.length > 1; i++) {                                                                         // 12489
      key = ensureSafeMemberName(element.shift(), fullExp);                                                            // 12490
      var propertyObj = (i === 0 && locals && locals[key]) || obj[key];                                                // 12491
      if (!propertyObj) {                                                                                              // 12492
        propertyObj = {};                                                                                              // 12493
        obj[key] = propertyObj;                                                                                        // 12494
      }                                                                                                                // 12495
      obj = ensureSafeObject(propertyObj, fullExp);                                                                    // 12496
    }                                                                                                                  // 12497
    key = ensureSafeMemberName(element.shift(), fullExp);                                                              // 12498
    ensureSafeObject(obj[key], fullExp);                                                                               // 12499
    obj[key] = setValue;                                                                                               // 12500
    return setValue;                                                                                                   // 12501
  }                                                                                                                    // 12502
                                                                                                                       // 12503
  var getterFnCacheDefault = createMap();                                                                              // 12504
  var getterFnCacheExpensive = createMap();                                                                            // 12505
                                                                                                                       // 12506
  function isPossiblyDangerousMemberName(name) {                                                                       // 12507
    return name == 'constructor';                                                                                      // 12508
  }                                                                                                                    // 12509
                                                                                                                       // 12510
  /**                                                                                                                  // 12511
   * Implementation of the "Black Hole" variant from:                                                                  // 12512
   * - http://jsperf.com/angularjs-parse-getter/4                                                                      // 12513
   * - http://jsperf.com/path-evaluation-simplified/7                                                                  // 12514
   */                                                                                                                  // 12515
  function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, expensiveChecks) {                                   // 12516
    ensureSafeMemberName(key0, fullExp);                                                                               // 12517
    ensureSafeMemberName(key1, fullExp);                                                                               // 12518
    ensureSafeMemberName(key2, fullExp);                                                                               // 12519
    ensureSafeMemberName(key3, fullExp);                                                                               // 12520
    ensureSafeMemberName(key4, fullExp);                                                                               // 12521
    var eso = function(o) {                                                                                            // 12522
      return ensureSafeObject(o, fullExp);                                                                             // 12523
    };                                                                                                                 // 12524
    var eso0 = (expensiveChecks || isPossiblyDangerousMemberName(key0)) ? eso : identity;                              // 12525
    var eso1 = (expensiveChecks || isPossiblyDangerousMemberName(key1)) ? eso : identity;                              // 12526
    var eso2 = (expensiveChecks || isPossiblyDangerousMemberName(key2)) ? eso : identity;                              // 12527
    var eso3 = (expensiveChecks || isPossiblyDangerousMemberName(key3)) ? eso : identity;                              // 12528
    var eso4 = (expensiveChecks || isPossiblyDangerousMemberName(key4)) ? eso : identity;                              // 12529
                                                                                                                       // 12530
    return function cspSafeGetter(scope, locals) {                                                                     // 12531
      var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;                                          // 12532
                                                                                                                       // 12533
      if (pathVal == null) return pathVal;                                                                             // 12534
      pathVal = eso0(pathVal[key0]);                                                                                   // 12535
                                                                                                                       // 12536
      if (!key1) return pathVal;                                                                                       // 12537
      if (pathVal == null) return undefined;                                                                           // 12538
      pathVal = eso1(pathVal[key1]);                                                                                   // 12539
                                                                                                                       // 12540
      if (!key2) return pathVal;                                                                                       // 12541
      if (pathVal == null) return undefined;                                                                           // 12542
      pathVal = eso2(pathVal[key2]);                                                                                   // 12543
                                                                                                                       // 12544
      if (!key3) return pathVal;                                                                                       // 12545
      if (pathVal == null) return undefined;                                                                           // 12546
      pathVal = eso3(pathVal[key3]);                                                                                   // 12547
                                                                                                                       // 12548
      if (!key4) return pathVal;                                                                                       // 12549
      if (pathVal == null) return undefined;                                                                           // 12550
      pathVal = eso4(pathVal[key4]);                                                                                   // 12551
                                                                                                                       // 12552
      return pathVal;                                                                                                  // 12553
    };                                                                                                                 // 12554
  }                                                                                                                    // 12555
                                                                                                                       // 12556
  function getterFnWithEnsureSafeObject(fn, fullExpression) {                                                          // 12557
    return function(s, l) {                                                                                            // 12558
      return fn(s, l, ensureSafeObject, fullExpression);                                                               // 12559
    };                                                                                                                 // 12560
  }                                                                                                                    // 12561
                                                                                                                       // 12562
  function getterFn(path, options, fullExp) {                                                                          // 12563
    var expensiveChecks = options.expensiveChecks;                                                                     // 12564
    var getterFnCache = (expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault);                             // 12565
    var fn = getterFnCache[path];                                                                                      // 12566
    if (fn) return fn;                                                                                                 // 12567
                                                                                                                       // 12568
                                                                                                                       // 12569
    var pathKeys = path.split('.'),                                                                                    // 12570
      pathKeysLength = pathKeys.length;                                                                                // 12571
                                                                                                                       // 12572
    // http://jsperf.com/angularjs-parse-getter/6                                                                      // 12573
    if (options.csp) {                                                                                                 // 12574
      if (pathKeysLength < 6) {                                                                                        // 12575
        fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, expensiveChecks);
      } else {                                                                                                         // 12577
        fn = function cspSafeGetter(scope, locals) {                                                                   // 12578
          var i = 0, val;                                                                                              // 12579
          do {                                                                                                         // 12580
            val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],                          // 12581
              pathKeys[i++], fullExp, expensiveChecks)(scope, locals);                                                 // 12582
                                                                                                                       // 12583
            locals = undefined; // clear after first iteration                                                         // 12584
            scope = val;                                                                                               // 12585
          } while (i < pathKeysLength);                                                                                // 12586
          return val;                                                                                                  // 12587
        };                                                                                                             // 12588
      }                                                                                                                // 12589
    } else {                                                                                                           // 12590
      var code = '';                                                                                                   // 12591
      if (expensiveChecks) {                                                                                           // 12592
        code += 's = eso(s, fe);\nl = eso(l, fe);\n';                                                                  // 12593
      }                                                                                                                // 12594
      var needsEnsureSafeObject = expensiveChecks;                                                                     // 12595
      forEach(pathKeys, function(key, index) {                                                                         // 12596
        ensureSafeMemberName(key, fullExp);                                                                            // 12597
        var lookupJs = (index                                                                                          // 12598
            // we simply dereference 's' on any .dot notation                                                          // 12599
            ? 's'                                                                                                      // 12600
            // but if we are first then we check locals first, and if so read it first                                 // 12601
            : '((l&&l.hasOwnProperty("' + key + '"))?l:s)') + '.' + key;                                               // 12602
        if (expensiveChecks || isPossiblyDangerousMemberName(key)) {                                                   // 12603
          lookupJs = 'eso(' + lookupJs + ', fe)';                                                                      // 12604
          needsEnsureSafeObject = true;                                                                                // 12605
        }                                                                                                              // 12606
        code += 'if(s == null) return undefined;\n' +                                                                  // 12607
        's=' + lookupJs + ';\n';                                                                                       // 12608
      });                                                                                                              // 12609
      code += 'return s;';                                                                                             // 12610
                                                                                                                       // 12611
      /* jshint -W054 */                                                                                               // 12612
      var evaledFnGetter = new Function('s', 'l', 'eso', 'fe', code); // s=scope, l=locals, eso=ensureSafeObject       // 12613
      /* jshint +W054 */                                                                                               // 12614
      evaledFnGetter.toString = valueFn(code);                                                                         // 12615
      if (needsEnsureSafeObject) {                                                                                     // 12616
        evaledFnGetter = getterFnWithEnsureSafeObject(evaledFnGetter, fullExp);                                        // 12617
      }                                                                                                                // 12618
      fn = evaledFnGetter;                                                                                             // 12619
    }                                                                                                                  // 12620
                                                                                                                       // 12621
    fn.sharedGetter = true;                                                                                            // 12622
    fn.assign = function(self, value, locals) {                                                                        // 12623
      return setter(self, locals, path, value, path);                                                                  // 12624
    };                                                                                                                 // 12625
    getterFnCache[path] = fn;                                                                                          // 12626
    return fn;                                                                                                         // 12627
  }                                                                                                                    // 12628
                                                                                                                       // 12629
  var objectValueOf = Object.prototype.valueOf;                                                                        // 12630
                                                                                                                       // 12631
  function getValueOf(value) {                                                                                         // 12632
    return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                    // 12633
  }                                                                                                                    // 12634
                                                                                                                       // 12635
///////////////////////////////////                                                                                    // 12636
                                                                                                                       // 12637
  /**                                                                                                                  // 12638
   * @ngdoc service                                                                                                    // 12639
   * @name $parse                                                                                                      // 12640
   * @kind function                                                                                                    // 12641
   *                                                                                                                   // 12642
   * @description                                                                                                      // 12643
   *                                                                                                                   // 12644
   * Converts Angular {@link guide/expression expression} into a function.                                             // 12645
   *                                                                                                                   // 12646
   * ```js                                                                                                             // 12647
   *   var getter = $parse('user.name');                                                                               // 12648
   *   var setter = getter.assign;                                                                                     // 12649
   *   var context = {user:{name:'angular'}};                                                                          // 12650
   *   var locals = {user:{name:'local'}};                                                                             // 12651
   *                                                                                                                   // 12652
   *   expect(getter(context)).toEqual('angular');                                                                     // 12653
   *   setter(context, 'newValue');                                                                                    // 12654
   *   expect(context.user.name).toEqual('newValue');                                                                  // 12655
   *   expect(getter(context, locals)).toEqual('local');                                                               // 12656
   * ```                                                                                                               // 12657
   *                                                                                                                   // 12658
   *                                                                                                                   // 12659
   * @param {string} expression String expression to compile.                                                          // 12660
   * @returns {function(context, locals)} a function which represents the compiled expression:                         // 12661
   *                                                                                                                   // 12662
   *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings                 // 12663
   *      are evaluated against (typically a scope object).                                                            // 12664
   *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in                 // 12665
   *      `context`.                                                                                                   // 12666
   *                                                                                                                   // 12667
   *    The returned function also has the following properties:                                                       // 12668
   *      * `literal` ג€“ `{boolean}` ג€“ whether the expression's top-level node is a JavaScript                      // 12669
   *        literal.                                                                                                   // 12670
   *      * `constant` ג€“ `{boolean}` ג€“ whether the expression is made entirely of JavaScript                       // 12671
   *        constant literals.                                                                                         // 12672
   *      * `assign` ג€“ `{?function(context, value)}` ג€“ if the expression is assignable, this will be               // 12673
   *        set to a function to change its value on the given context.                                                // 12674
   *                                                                                                                   // 12675
   */                                                                                                                  // 12676
                                                                                                                       // 12677
                                                                                                                       // 12678
  /**                                                                                                                  // 12679
   * @ngdoc provider                                                                                                   // 12680
   * @name $parseProvider                                                                                              // 12681
   *                                                                                                                   // 12682
   * @description                                                                                                      // 12683
   * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                 // 12684
   *  service.                                                                                                         // 12685
   */                                                                                                                  // 12686
  function $ParseProvider() {                                                                                          // 12687
    var cacheDefault = createMap();                                                                                    // 12688
    var cacheExpensive = createMap();                                                                                  // 12689
                                                                                                                       // 12690
                                                                                                                       // 12691
                                                                                                                       // 12692
    this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {                                                  // 12693
      var $parseOptions = {                                                                                            // 12694
          csp: $sniffer.csp,                                                                                           // 12695
          expensiveChecks: false                                                                                       // 12696
        },                                                                                                             // 12697
        $parseOptionsExpensive = {                                                                                     // 12698
          csp: $sniffer.csp,                                                                                           // 12699
          expensiveChecks: true                                                                                        // 12700
        };                                                                                                             // 12701
                                                                                                                       // 12702
      function wrapSharedExpression(exp) {                                                                             // 12703
        var wrapped = exp;                                                                                             // 12704
                                                                                                                       // 12705
        if (exp.sharedGetter) {                                                                                        // 12706
          wrapped = function $parseWrapper(self, locals) {                                                             // 12707
            return exp(self, locals);                                                                                  // 12708
          };                                                                                                           // 12709
          wrapped.literal = exp.literal;                                                                               // 12710
          wrapped.constant = exp.constant;                                                                             // 12711
          wrapped.assign = exp.assign;                                                                                 // 12712
        }                                                                                                              // 12713
                                                                                                                       // 12714
        return wrapped;                                                                                                // 12715
      }                                                                                                                // 12716
                                                                                                                       // 12717
      return function $parse(exp, interceptorFn, expensiveChecks) {                                                    // 12718
        var parsedExpression, oneTime, cacheKey;                                                                       // 12719
                                                                                                                       // 12720
        switch (typeof exp) {                                                                                          // 12721
          case 'string':                                                                                               // 12722
            cacheKey = exp = exp.trim();                                                                               // 12723
                                                                                                                       // 12724
            var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                             // 12725
            parsedExpression = cache[cacheKey];                                                                        // 12726
                                                                                                                       // 12727
            if (!parsedExpression) {                                                                                   // 12728
              if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                    // 12729
                oneTime = true;                                                                                        // 12730
                exp = exp.substring(2);                                                                                // 12731
              }                                                                                                        // 12732
                                                                                                                       // 12733
              var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                             // 12734
              var lexer = new Lexer(parseOptions);                                                                     // 12735
              var parser = new Parser(lexer, $filter, parseOptions);                                                   // 12736
              parsedExpression = parser.parse(exp);                                                                    // 12737
                                                                                                                       // 12738
              if (parsedExpression.constant) {                                                                         // 12739
                parsedExpression.$$watchDelegate = constantWatchDelegate;                                              // 12740
              } else if (oneTime) {                                                                                    // 12741
                //oneTime is not part of the exp passed to the Parser so we may have to                                // 12742
                //wrap the parsedExpression before adding a $$watchDelegate                                            // 12743
                parsedExpression = wrapSharedExpression(parsedExpression);                                             // 12744
                parsedExpression.$$watchDelegate = parsedExpression.literal ?                                          // 12745
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 12746
              } else if (parsedExpression.inputs) {                                                                    // 12747
                parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                // 12748
              }                                                                                                        // 12749
                                                                                                                       // 12750
              cache[cacheKey] = parsedExpression;                                                                      // 12751
            }                                                                                                          // 12752
            return addInterceptor(parsedExpression, interceptorFn);                                                    // 12753
                                                                                                                       // 12754
          case 'function':                                                                                             // 12755
            return addInterceptor(exp, interceptorFn);                                                                 // 12756
                                                                                                                       // 12757
          default:                                                                                                     // 12758
            return addInterceptor(noop, interceptorFn);                                                                // 12759
        }                                                                                                              // 12760
      };                                                                                                               // 12761
                                                                                                                       // 12762
      function collectExpressionInputs(inputs, list) {                                                                 // 12763
        for (var i = 0, ii = inputs.length; i < ii; i++) {                                                             // 12764
          var input = inputs[i];                                                                                       // 12765
          if (!input.constant) {                                                                                       // 12766
            if (input.inputs) {                                                                                        // 12767
              collectExpressionInputs(input.inputs, list);                                                             // 12768
            } else if (list.indexOf(input) === -1) { // TODO(perf) can we do better?                                   // 12769
              list.push(input);                                                                                        // 12770
            }                                                                                                          // 12771
          }                                                                                                            // 12772
        }                                                                                                              // 12773
                                                                                                                       // 12774
        return list;                                                                                                   // 12775
      }                                                                                                                // 12776
                                                                                                                       // 12777
      function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                  // 12778
                                                                                                                       // 12779
        if (newValue == null || oldValueOfValue == null) { // null/undefined                                           // 12780
          return newValue === oldValueOfValue;                                                                         // 12781
        }                                                                                                              // 12782
                                                                                                                       // 12783
        if (typeof newValue === 'object') {                                                                            // 12784
                                                                                                                       // 12785
          // attempt to convert the value to a primitive type                                                          // 12786
          // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                   // 12787
          //             be cheaply dirty-checked                                                                      // 12788
          newValue = getValueOf(newValue);                                                                             // 12789
                                                                                                                       // 12790
          if (typeof newValue === 'object') {                                                                          // 12791
            // objects/arrays are not supported - deep-watching them would be too expensive                            // 12792
            return false;                                                                                              // 12793
          }                                                                                                            // 12794
                                                                                                                       // 12795
          // fall-through to the primitive equality check                                                              // 12796
        }                                                                                                              // 12797
                                                                                                                       // 12798
        //Primitive or NaN                                                                                             // 12799
        return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);         // 12800
      }                                                                                                                // 12801
                                                                                                                       // 12802
      function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 12803
        var inputExpressions = parsedExpression.$$inputs ||                                                            // 12804
          (parsedExpression.$$inputs = collectExpressionInputs(parsedExpression.inputs, []));                          // 12805
                                                                                                                       // 12806
        var lastResult;                                                                                                // 12807
                                                                                                                       // 12808
        if (inputExpressions.length === 1) {                                                                           // 12809
          var oldInputValue = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 12810
          inputExpressions = inputExpressions[0];                                                                      // 12811
          return scope.$watch(function expressionInputWatch(scope) {                                                   // 12812
            var newInputValue = inputExpressions(scope);                                                               // 12813
            if (!expressionInputDirtyCheck(newInputValue, oldInputValue)) {                                            // 12814
              lastResult = parsedExpression(scope);                                                                    // 12815
              oldInputValue = newInputValue && getValueOf(newInputValue);                                              // 12816
            }                                                                                                          // 12817
            return lastResult;                                                                                         // 12818
          }, listener, objectEquality);                                                                                // 12819
        }                                                                                                              // 12820
                                                                                                                       // 12821
        var oldInputValueOfValues = [];                                                                                // 12822
        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 12823
          oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails // 12824
        }                                                                                                              // 12825
                                                                                                                       // 12826
        return scope.$watch(function expressionInputsWatch(scope) {                                                    // 12827
          var changed = false;                                                                                         // 12828
                                                                                                                       // 12829
          for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                 // 12830
            var newInputValue = inputExpressions[i](scope);                                                            // 12831
            if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {          // 12832
              oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                   // 12833
            }                                                                                                          // 12834
          }                                                                                                            // 12835
                                                                                                                       // 12836
          if (changed) {                                                                                               // 12837
            lastResult = parsedExpression(scope);                                                                      // 12838
          }                                                                                                            // 12839
                                                                                                                       // 12840
          return lastResult;                                                                                           // 12841
        }, listener, objectEquality);                                                                                  // 12842
      }                                                                                                                // 12843
                                                                                                                       // 12844
      function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                               // 12845
        var unwatch, lastValue;                                                                                        // 12846
        return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                   // 12847
          return parsedExpression(scope);                                                                              // 12848
        }, function oneTimeListener(value, old, scope) {                                                               // 12849
          lastValue = value;                                                                                           // 12850
          if (isFunction(listener)) {                                                                                  // 12851
            listener.apply(this, arguments);                                                                           // 12852
          }                                                                                                            // 12853
          if (isDefined(value)) {                                                                                      // 12854
            scope.$$postDigest(function() {                                                                            // 12855
              if (isDefined(lastValue)) {                                                                              // 12856
                unwatch();                                                                                             // 12857
              }                                                                                                        // 12858
            });                                                                                                        // 12859
          }                                                                                                            // 12860
        }, objectEquality);                                                                                            // 12861
      }                                                                                                                // 12862
                                                                                                                       // 12863
      function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                        // 12864
        var unwatch, lastValue;                                                                                        // 12865
        return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                   // 12866
          return parsedExpression(scope);                                                                              // 12867
        }, function oneTimeListener(value, old, scope) {                                                               // 12868
          lastValue = value;                                                                                           // 12869
          if (isFunction(listener)) {                                                                                  // 12870
            listener.call(this, value, old, scope);                                                                    // 12871
          }                                                                                                            // 12872
          if (isAllDefined(value)) {                                                                                   // 12873
            scope.$$postDigest(function() {                                                                            // 12874
              if (isAllDefined(lastValue)) unwatch();                                                                  // 12875
            });                                                                                                        // 12876
          }                                                                                                            // 12877
        }, objectEquality);                                                                                            // 12878
                                                                                                                       // 12879
        function isAllDefined(value) {                                                                                 // 12880
          var allDefined = true;                                                                                       // 12881
          forEach(value, function(val) {                                                                               // 12882
            if (!isDefined(val)) allDefined = false;                                                                   // 12883
          });                                                                                                          // 12884
          return allDefined;                                                                                           // 12885
        }                                                                                                              // 12886
      }                                                                                                                // 12887
                                                                                                                       // 12888
      function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                              // 12889
        var unwatch;                                                                                                   // 12890
        return unwatch = scope.$watch(function constantWatch(scope) {                                                  // 12891
          return parsedExpression(scope);                                                                              // 12892
        }, function constantListener(value, old, scope) {                                                              // 12893
          if (isFunction(listener)) {                                                                                  // 12894
            listener.apply(this, arguments);                                                                           // 12895
          }                                                                                                            // 12896
          unwatch();                                                                                                   // 12897
        }, objectEquality);                                                                                            // 12898
      }                                                                                                                // 12899
                                                                                                                       // 12900
      function addInterceptor(parsedExpression, interceptorFn) {                                                       // 12901
        if (!interceptorFn) return parsedExpression;                                                                   // 12902
        var watchDelegate = parsedExpression.$$watchDelegate;                                                          // 12903
                                                                                                                       // 12904
        var regularWatch =                                                                                             // 12905
          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 12906
          watchDelegate !== oneTimeWatchDelegate;                                                                      // 12907
                                                                                                                       // 12908
        var fn = regularWatch ? function regularInterceptedExpression(scope, locals) {                                 // 12909
          var value = parsedExpression(scope, locals);                                                                 // 12910
          return interceptorFn(value, scope, locals);                                                                  // 12911
        } : function oneTimeInterceptedExpression(scope, locals) {                                                     // 12912
          var value = parsedExpression(scope, locals);                                                                 // 12913
          var result = interceptorFn(value, scope, locals);                                                            // 12914
          // we only return the interceptor's result if the                                                            // 12915
          // initial value is defined (for bind-once)                                                                  // 12916
          return isDefined(value) ? result : value;                                                                    // 12917
        };                                                                                                             // 12918
                                                                                                                       // 12919
        // Propagate $$watchDelegates other then inputsWatchDelegate                                                   // 12920
        if (parsedExpression.$$watchDelegate &&                                                                        // 12921
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 12922
          fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                       // 12923
        } else if (!interceptorFn.$stateful) {                                                                         // 12924
          // If there is an interceptor, but no watchDelegate then treat the interceptor like                          // 12925
          // we treat filters - it is assumed to be a pure function unless flagged with $stateful                      // 12926
          fn.$$watchDelegate = inputsWatchDelegate;                                                                    // 12927
          fn.inputs = [parsedExpression];                                                                              // 12928
        }                                                                                                              // 12929
                                                                                                                       // 12930
        return fn;                                                                                                     // 12931
      }                                                                                                                // 12932
    }];                                                                                                                // 12933
  }                                                                                                                    // 12934
                                                                                                                       // 12935
  /**                                                                                                                  // 12936
   * @ngdoc service                                                                                                    // 12937
   * @name $q                                                                                                          // 12938
   * @requires $rootScope                                                                                              // 12939
   *                                                                                                                   // 12940
   * @description                                                                                                      // 12941
   * A service that helps you run functions asynchronously, and use their return values (or exceptions)                // 12942
   * when they are done processing.                                                                                    // 12943
   *                                                                                                                   // 12944
   * This is an implementation of promises/deferred objects inspired by                                                // 12945
   * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                 // 12946
   *                                                                                                                   // 12947
   * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred               // 12948
   * implementations, and the other which resembles ES6 promises to some degree.                                       // 12949
   *                                                                                                                   // 12950
   * # $q constructor                                                                                                  // 12951
   *                                                                                                                   // 12952
   * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`          // 12953
   * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,            // 12954
   * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).              // 12955
   *                                                                                                                   // 12956
   * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are     // 12957
   * available yet.                                                                                                    // 12958
   *                                                                                                                   // 12959
   * It can be used like so:                                                                                           // 12960
   *                                                                                                                   // 12961
   * ```js                                                                                                             // 12962
   *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                             // 12963
   *   // are available in the current lexical scope (they could have been injected or passed in).                     // 12964
   *                                                                                                                   // 12965
   *   function asyncGreet(name) {                                                                                     // 12966
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 12967
 *     return $q(function(resolve, reject) {                                                                           // 12968
 *       setTimeout(function() {                                                                                       // 12969
 *         if (okToGreet(name)) {                                                                                      // 12970
 *           resolve('Hello, ' + name + '!');                                                                          // 12971
 *         } else {                                                                                                    // 12972
 *           reject('Greeting ' + name + ' is not allowed.');                                                          // 12973
 *         }                                                                                                           // 12974
 *       }, 1000);                                                                                                     // 12975
 *     });                                                                                                             // 12976
 *   }                                                                                                                 // 12977
   *                                                                                                                   // 12978
   *   var promise = asyncGreet('Robin Hood');                                                                         // 12979
   *   promise.then(function(greeting) {                                                                               // 12980
 *     alert('Success: ' + greeting);                                                                                  // 12981
 *   }, function(reason) {                                                                                             // 12982
 *     alert('Failed: ' + reason);                                                                                     // 12983
 *   });                                                                                                               // 12984
   * ```                                                                                                               // 12985
   *                                                                                                                   // 12986
   * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                          // 12987
   *                                                                                                                   // 12988
   * However, the more traditional CommonJS-style usage is still available, and documented below.                      // 12989
   *                                                                                                                   // 12990
   * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                 // 12991
   * interface for interacting with an object that represents the result of an action that is                          // 12992
   * performed asynchronously, and may or may not be finished at any given point in time.                              // 12993
   *                                                                                                                   // 12994
   * From the perspective of dealing with error handling, deferred and promise APIs are to                             // 12995
   * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                 // 12996
   *                                                                                                                   // 12997
   * ```js                                                                                                             // 12998
   *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                             // 12999
   *   // are available in the current lexical scope (they could have been injected or passed in).                     // 13000
   *                                                                                                                   // 13001
   *   function asyncGreet(name) {                                                                                     // 13002
 *     var deferred = $q.defer();                                                                                      // 13003
 *                                                                                                                     // 13004
 *     setTimeout(function() {                                                                                         // 13005
 *       deferred.notify('About to greet ' + name + '.');                                                              // 13006
 *                                                                                                                     // 13007
 *       if (okToGreet(name)) {                                                                                        // 13008
 *         deferred.resolve('Hello, ' + name + '!');                                                                   // 13009
 *       } else {                                                                                                      // 13010
 *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 13011
 *       }                                                                                                             // 13012
 *     }, 1000);                                                                                                       // 13013
 *                                                                                                                     // 13014
 *     return deferred.promise;                                                                                        // 13015
 *   }                                                                                                                 // 13016
   *                                                                                                                   // 13017
   *   var promise = asyncGreet('Robin Hood');                                                                         // 13018
   *   promise.then(function(greeting) {                                                                               // 13019
 *     alert('Success: ' + greeting);                                                                                  // 13020
 *   }, function(reason) {                                                                                             // 13021
 *     alert('Failed: ' + reason);                                                                                     // 13022
 *   }, function(update) {                                                                                             // 13023
 *     alert('Got notification: ' + update);                                                                           // 13024
 *   });                                                                                                               // 13025
   * ```                                                                                                               // 13026
   *                                                                                                                   // 13027
   * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                       // 13028
   * comes in the way of guarantees that promise and deferred APIs make, see                                           // 13029
   * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                    // 13030
   *                                                                                                                   // 13031
   * Additionally the promise api allows for composition that is very hard to do with the                              // 13032
   * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                   // 13033
   * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                  // 13034
   * section on serial or parallel joining of promises.                                                                // 13035
   *                                                                                                                   // 13036
   * # The Deferred API                                                                                                // 13037
   *                                                                                                                   // 13038
   * A new instance of deferred is constructed by calling `$q.defer()`.                                                // 13039
   *                                                                                                                   // 13040
   * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                   // 13041
   * that can be used for signaling the successful or unsuccessful completion, as well as the status                   // 13042
   * of the task.                                                                                                      // 13043
   *                                                                                                                   // 13044
   * **Methods**                                                                                                       // 13045
   *                                                                                                                   // 13046
   * - `resolve(value)` ג€“ resolves the derived promise with the `value`. If the value is a rejection                 // 13047
   *   constructed via `$q.reject`, the promise will be rejected instead.                                              // 13048
   * - `reject(reason)` ג€“ rejects the derived promise with the `reason`. This is equivalent to                       // 13049
   *   resolving it with a rejection constructed via `$q.reject`.                                                      // 13050
   * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                 // 13051
   *   multiple times before the promise is either resolved or rejected.                                               // 13052
   *                                                                                                                   // 13053
   * **Properties**                                                                                                    // 13054
   *                                                                                                                   // 13055
   * - promise ג€“ `{Promise}` ג€“ promise object associated with this deferred.                                       // 13056
   *                                                                                                                   // 13057
   *                                                                                                                   // 13058
   * # The Promise API                                                                                                 // 13059
   *                                                                                                                   // 13060
   * A new promise instance is created when a deferred instance is created and can be retrieved by                     // 13061
   * calling `deferred.promise`.                                                                                       // 13062
   *                                                                                                                   // 13063
   * The purpose of the promise object is to allow for interested parties to get access to the result                  // 13064
   * of the deferred task when it completes.                                                                           // 13065
   *                                                                                                                   // 13066
   * **Methods**                                                                                                       // 13067
   *                                                                                                                   // 13068
   * - `then(successCallback, errorCallback, notifyCallback)` ג€“ regardless of when the promise was or                // 13069
   *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                 // 13070
   *   as soon as the result is available. The callbacks are called with a single argument: the result                 // 13071
   *   or rejection reason. Additionally, the notify callback may be called zero or more times to                      // 13072
   *   provide a progress indication, before the promise is resolved or rejected.                                      // 13073
   *                                                                                                                   // 13074
   *   This method *returns a new promise* which is resolved or rejected via the return value of the                   // 13075
   *   `successCallback`, `errorCallback`. It also notifies via the return value of the                                // 13076
   *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback                     // 13077
   *   method.                                                                                                         // 13078
   *                                                                                                                   // 13079
   * - `catch(errorCallback)` ג€“ shorthand for `promise.then(null, errorCallback)`                                    // 13080
   *                                                                                                                   // 13081
   * - `finally(callback, notifyCallback)` ג€“ allows you to observe either the fulfillment or rejection of a promise, // 13082
   *   but to do so without modifying the final value. This is useful to release resources or do some                  // 13083
   *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                      // 13084
   *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                    // 13085
   *   more information.                                                                                               // 13086
   *                                                                                                                   // 13087
   * # Chaining promises                                                                                               // 13088
   *                                                                                                                   // 13089
   * Because calling the `then` method of a promise returns a new derived promise, it is easily                        // 13090
   * possible to create a chain of promises:                                                                           // 13091
   *                                                                                                                   // 13092
   * ```js                                                                                                             // 13093
   *   promiseB = promiseA.then(function(result) {                                                                     // 13094
 *     return result + 1;                                                                                              // 13095
 *   });                                                                                                               // 13096
   *                                                                                                                   // 13097
   *   // promiseB will be resolved immediately after promiseA is resolved and its value                               // 13098
   *   // will be the result of promiseA incremented by 1                                                              // 13099
   * ```                                                                                                               // 13100
   *                                                                                                                   // 13101
   * It is possible to create chains of any length and since a promise can be resolved with another                    // 13102
   * promise (which will defer its resolution further), it is possible to pause/defer resolution of                    // 13103
   * the promises at any point in the chain. This makes it possible to implement powerful APIs like                    // 13104
   * $http's response interceptors.                                                                                    // 13105
   *                                                                                                                   // 13106
   *                                                                                                                   // 13107
   * # Differences between Kris Kowal's Q and $q                                                                       // 13108
   *                                                                                                                   // 13109
   *  There are two main differences:                                                                                  // 13110
   *                                                                                                                   // 13111
   * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                   // 13112
   *   mechanism in angular, which means faster propagation of resolution or rejection into your                       // 13113
   *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                          // 13114
   * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                   // 13115
   *   all the important functionality needed for common async tasks.                                                  // 13116
   *                                                                                                                   // 13117
   *  # Testing                                                                                                        // 13118
   *                                                                                                                   // 13119
   *  ```js                                                                                                            // 13120
   *    it('should simulate promise', inject(function($q, $rootScope) {                                                // 13121
 *      var deferred = $q.defer();                                                                                     // 13122
 *      var promise = deferred.promise;                                                                                // 13123
 *      var resolvedValue;                                                                                             // 13124
 *                                                                                                                     // 13125
 *      promise.then(function(value) { resolvedValue = value; });                                                      // 13126
 *      expect(resolvedValue).toBeUndefined();                                                                         // 13127
 *                                                                                                                     // 13128
 *      // Simulate resolving of promise                                                                               // 13129
 *      deferred.resolve(123);                                                                                         // 13130
 *      // Note that the 'then' function does not get called synchronously.                                            // 13131
 *      // This is because we want the promise API to always be async, whether or not                                  // 13132
 *      // it got called synchronously or asynchronously.                                                              // 13133
 *      expect(resolvedValue).toBeUndefined();                                                                         // 13134
 *                                                                                                                     // 13135
 *      // Propagate promise resolution to 'then' functions using $apply().                                            // 13136
 *      $rootScope.$apply();                                                                                           // 13137
 *      expect(resolvedValue).toEqual(123);                                                                            // 13138
 *    }));                                                                                                             // 13139
   *  ```                                                                                                              // 13140
   *                                                                                                                   // 13141
   * @param {function(function, function)} resolver Function which is responsible for resolving or                     // 13142
   *   rejecting the newly created promise. The first parameter is a function which resolves the                       // 13143
   *   promise, the second parameter is a function which rejects the promise.                                          // 13144
   *                                                                                                                   // 13145
   * @returns {Promise} The newly created promise.                                                                     // 13146
   */                                                                                                                  // 13147
  function $QProvider() {                                                                                              // 13148
                                                                                                                       // 13149
    this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                          // 13150
      return qFactory(function(callback) {                                                                             // 13151
        $rootScope.$evalAsync(callback);                                                                               // 13152
      }, $exceptionHandler);                                                                                           // 13153
    }];                                                                                                                // 13154
  }                                                                                                                    // 13155
                                                                                                                       // 13156
  function $$QProvider() {                                                                                             // 13157
    this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                              // 13158
      return qFactory(function(callback) {                                                                             // 13159
        $browser.defer(callback);                                                                                      // 13160
      }, $exceptionHandler);                                                                                           // 13161
    }];                                                                                                                // 13162
  }                                                                                                                    // 13163
                                                                                                                       // 13164
  /**                                                                                                                  // 13165
   * Constructs a promise manager.                                                                                     // 13166
   *                                                                                                                   // 13167
   * @param {function(function)} nextTick Function for executing functions in the next turn.                           // 13168
   * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                 // 13169
   *     debugging purposes.                                                                                           // 13170
   * @returns {object} Promise manager.                                                                                // 13171
   */                                                                                                                  // 13172
  function qFactory(nextTick, exceptionHandler) {                                                                      // 13173
    var $qMinErr = minErr('$q', TypeError);                                                                            // 13174
    function callOnce(self, resolveFn, rejectFn) {                                                                     // 13175
      var called = false;                                                                                              // 13176
      function wrap(fn) {                                                                                              // 13177
        return function(value) {                                                                                       // 13178
          if (called) return;                                                                                          // 13179
          called = true;                                                                                               // 13180
          fn.call(self, value);                                                                                        // 13181
        };                                                                                                             // 13182
      }                                                                                                                // 13183
                                                                                                                       // 13184
      return [wrap(resolveFn), wrap(rejectFn)];                                                                        // 13185
    }                                                                                                                  // 13186
                                                                                                                       // 13187
    /**                                                                                                                // 13188
     * @ngdoc method                                                                                                   // 13189
     * @name ng.$q#defer                                                                                               // 13190
     * @kind function                                                                                                  // 13191
     *                                                                                                                 // 13192
     * @description                                                                                                    // 13193
     * Creates a `Deferred` object which represents a task which will finish in the future.                            // 13194
     *                                                                                                                 // 13195
     * @returns {Deferred} Returns a new instance of deferred.                                                         // 13196
     */                                                                                                                // 13197
    var defer = function() {                                                                                           // 13198
      return new Deferred();                                                                                           // 13199
    };                                                                                                                 // 13200
                                                                                                                       // 13201
    function Promise() {                                                                                               // 13202
      this.$$state = { status: 0 };                                                                                    // 13203
    }                                                                                                                  // 13204
                                                                                                                       // 13205
    Promise.prototype = {                                                                                              // 13206
      then: function(onFulfilled, onRejected, progressBack) {                                                          // 13207
        var result = new Deferred();                                                                                   // 13208
                                                                                                                       // 13209
        this.$$state.pending = this.$$state.pending || [];                                                             // 13210
        this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                    // 13211
        if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                               // 13212
                                                                                                                       // 13213
        return result.promise;                                                                                         // 13214
      },                                                                                                               // 13215
                                                                                                                       // 13216
      "catch": function(callback) {                                                                                    // 13217
        return this.then(null, callback);                                                                              // 13218
      },                                                                                                               // 13219
                                                                                                                       // 13220
      "finally": function(callback, progressBack) {                                                                    // 13221
        return this.then(function(value) {                                                                             // 13222
          return handleCallback(value, true, callback);                                                                // 13223
        }, function(error) {                                                                                           // 13224
          return handleCallback(error, false, callback);                                                               // 13225
        }, progressBack);                                                                                              // 13226
      }                                                                                                                // 13227
    };                                                                                                                 // 13228
                                                                                                                       // 13229
    //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                          // 13230
    function simpleBind(context, fn) {                                                                                 // 13231
      return function(value) {                                                                                         // 13232
        fn.call(context, value);                                                                                       // 13233
      };                                                                                                               // 13234
    }                                                                                                                  // 13235
                                                                                                                       // 13236
    function processQueue(state) {                                                                                     // 13237
      var fn, promise, pending;                                                                                        // 13238
                                                                                                                       // 13239
      pending = state.pending;                                                                                         // 13240
      state.processScheduled = false;                                                                                  // 13241
      state.pending = undefined;                                                                                       // 13242
      for (var i = 0, ii = pending.length; i < ii; ++i) {                                                              // 13243
        promise = pending[i][0];                                                                                       // 13244
        fn = pending[i][state.status];                                                                                 // 13245
        try {                                                                                                          // 13246
          if (isFunction(fn)) {                                                                                        // 13247
            promise.resolve(fn(state.value));                                                                          // 13248
          } else if (state.status === 1) {                                                                             // 13249
            promise.resolve(state.value);                                                                              // 13250
          } else {                                                                                                     // 13251
            promise.reject(state.value);                                                                               // 13252
          }                                                                                                            // 13253
        } catch (e) {                                                                                                  // 13254
          promise.reject(e);                                                                                           // 13255
          exceptionHandler(e);                                                                                         // 13256
        }                                                                                                              // 13257
      }                                                                                                                // 13258
    }                                                                                                                  // 13259
                                                                                                                       // 13260
    function scheduleProcessQueue(state) {                                                                             // 13261
      if (state.processScheduled || !state.pending) return;                                                            // 13262
      state.processScheduled = true;                                                                                   // 13263
      nextTick(function() { processQueue(state); });                                                                   // 13264
    }                                                                                                                  // 13265
                                                                                                                       // 13266
    function Deferred() {                                                                                              // 13267
      this.promise = new Promise();                                                                                    // 13268
      //Necessary to support unbound execution :/                                                                      // 13269
      this.resolve = simpleBind(this, this.resolve);                                                                   // 13270
      this.reject = simpleBind(this, this.reject);                                                                     // 13271
      this.notify = simpleBind(this, this.notify);                                                                     // 13272
    }                                                                                                                  // 13273
                                                                                                                       // 13274
    Deferred.prototype = {                                                                                             // 13275
      resolve: function(val) {                                                                                         // 13276
        if (this.promise.$$state.status) return;                                                                       // 13277
        if (val === this.promise) {                                                                                    // 13278
          this.$$reject($qMinErr(                                                                                      // 13279
            'qcycle',                                                                                                  // 13280
            "Expected promise to be resolved with value other than itself '{0}'",                                      // 13281
            val));                                                                                                     // 13282
        } else {                                                                                                       // 13283
          this.$$resolve(val);                                                                                         // 13284
        }                                                                                                              // 13285
                                                                                                                       // 13286
      },                                                                                                               // 13287
                                                                                                                       // 13288
      $$resolve: function(val) {                                                                                       // 13289
        var then, fns;                                                                                                 // 13290
                                                                                                                       // 13291
        fns = callOnce(this, this.$$resolve, this.$$reject);                                                           // 13292
        try {                                                                                                          // 13293
          if ((isObject(val) || isFunction(val))) then = val && val.then;                                              // 13294
          if (isFunction(then)) {                                                                                      // 13295
            this.promise.$$state.status = -1;                                                                          // 13296
            then.call(val, fns[0], fns[1], this.notify);                                                               // 13297
          } else {                                                                                                     // 13298
            this.promise.$$state.value = val;                                                                          // 13299
            this.promise.$$state.status = 1;                                                                           // 13300
            scheduleProcessQueue(this.promise.$$state);                                                                // 13301
          }                                                                                                            // 13302
        } catch (e) {                                                                                                  // 13303
          fns[1](e);                                                                                                   // 13304
          exceptionHandler(e);                                                                                         // 13305
        }                                                                                                              // 13306
      },                                                                                                               // 13307
                                                                                                                       // 13308
      reject: function(reason) {                                                                                       // 13309
        if (this.promise.$$state.status) return;                                                                       // 13310
        this.$$reject(reason);                                                                                         // 13311
      },                                                                                                               // 13312
                                                                                                                       // 13313
      $$reject: function(reason) {                                                                                     // 13314
        this.promise.$$state.value = reason;                                                                           // 13315
        this.promise.$$state.status = 2;                                                                               // 13316
        scheduleProcessQueue(this.promise.$$state);                                                                    // 13317
      },                                                                                                               // 13318
                                                                                                                       // 13319
      notify: function(progress) {                                                                                     // 13320
        var callbacks = this.promise.$$state.pending;                                                                  // 13321
                                                                                                                       // 13322
        if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                     // 13323
          nextTick(function() {                                                                                        // 13324
            var callback, result;                                                                                      // 13325
            for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                      // 13326
              result = callbacks[i][0];                                                                                // 13327
              callback = callbacks[i][3];                                                                              // 13328
              try {                                                                                                    // 13329
                result.notify(isFunction(callback) ? callback(progress) : progress);                                   // 13330
              } catch (e) {                                                                                            // 13331
                exceptionHandler(e);                                                                                   // 13332
              }                                                                                                        // 13333
            }                                                                                                          // 13334
          });                                                                                                          // 13335
        }                                                                                                              // 13336
      }                                                                                                                // 13337
    };                                                                                                                 // 13338
                                                                                                                       // 13339
    /**                                                                                                                // 13340
     * @ngdoc method                                                                                                   // 13341
     * @name $q#reject                                                                                                 // 13342
     * @kind function                                                                                                  // 13343
     *                                                                                                                 // 13344
     * @description                                                                                                    // 13345
     * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                  // 13346
     * used to forward rejection in a chain of promises. If you are dealing with the last promise in                   // 13347
     * a promise chain, you don't need to worry about it.                                                              // 13348
     *                                                                                                                 // 13349
     * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                         // 13350
     * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via                 // 13351
     * a promise error callback and you want to forward the error to the promise derived from the                      // 13352
     * current promise, you have to "rethrow" the error by returning a rejection constructed via                       // 13353
     * `reject`.                                                                                                       // 13354
     *                                                                                                                 // 13355
     * ```js                                                                                                           // 13356
     *   promiseB = promiseA.then(function(result) {                                                                   // 13357
   *     // success: do something and resolve promiseB                                                                 // 13358
   *     //          with the old or a new result                                                                      // 13359
   *     return result;                                                                                                // 13360
   *   }, function(reason) {                                                                                           // 13361
   *     // error: handle the error if possible and                                                                    // 13362
   *     //        resolve promiseB with newPromiseOrValue,                                                            // 13363
   *     //        otherwise forward the rejection to promiseB                                                         // 13364
   *     if (canHandle(reason)) {                                                                                      // 13365
   *      // handle the error and recover                                                                              // 13366
   *      return newPromiseOrValue;                                                                                    // 13367
   *     }                                                                                                             // 13368
   *     return $q.reject(reason);                                                                                     // 13369
   *   });                                                                                                             // 13370
     * ```                                                                                                             // 13371
     *                                                                                                                 // 13372
     * @param {*} reason Constant, message, exception or an object representing the rejection reason.                  // 13373
     * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                   // 13374
     */                                                                                                                // 13375
    var reject = function(reason) {                                                                                    // 13376
      var result = new Deferred();                                                                                     // 13377
      result.reject(reason);                                                                                           // 13378
      return result.promise;                                                                                           // 13379
    };                                                                                                                 // 13380
                                                                                                                       // 13381
    var makePromise = function makePromise(value, resolved) {                                                          // 13382
      var result = new Deferred();                                                                                     // 13383
      if (resolved) {                                                                                                  // 13384
        result.resolve(value);                                                                                         // 13385
      } else {                                                                                                         // 13386
        result.reject(value);                                                                                          // 13387
      }                                                                                                                // 13388
      return result.promise;                                                                                           // 13389
    };                                                                                                                 // 13390
                                                                                                                       // 13391
    var handleCallback = function handleCallback(value, isResolved, callback) {                                        // 13392
      var callbackOutput = null;                                                                                       // 13393
      try {                                                                                                            // 13394
        if (isFunction(callback)) callbackOutput = callback();                                                         // 13395
      } catch (e) {                                                                                                    // 13396
        return makePromise(e, false);                                                                                  // 13397
      }                                                                                                                // 13398
      if (isPromiseLike(callbackOutput)) {                                                                             // 13399
        return callbackOutput.then(function() {                                                                        // 13400
          return makePromise(value, isResolved);                                                                       // 13401
        }, function(error) {                                                                                           // 13402
          return makePromise(error, false);                                                                            // 13403
        });                                                                                                            // 13404
      } else {                                                                                                         // 13405
        return makePromise(value, isResolved);                                                                         // 13406
      }                                                                                                                // 13407
    };                                                                                                                 // 13408
                                                                                                                       // 13409
    /**                                                                                                                // 13410
     * @ngdoc method                                                                                                   // 13411
     * @name $q#when                                                                                                   // 13412
     * @kind function                                                                                                  // 13413
     *                                                                                                                 // 13414
     * @description                                                                                                    // 13415
     * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                     // 13416
     * This is useful when you are dealing with an object that might or might not be a promise, or if                  // 13417
     * the promise comes from a source that can't be trusted.                                                          // 13418
     *                                                                                                                 // 13419
     * @param {*} value Value or a promise                                                                             // 13420
     * @returns {Promise} Returns a promise of the passed value or promise                                             // 13421
     */                                                                                                                // 13422
                                                                                                                       // 13423
                                                                                                                       // 13424
    var when = function(value, callback, errback, progressBack) {                                                      // 13425
      var result = new Deferred();                                                                                     // 13426
      result.resolve(value);                                                                                           // 13427
      return result.promise.then(callback, errback, progressBack);                                                     // 13428
    };                                                                                                                 // 13429
                                                                                                                       // 13430
    /**                                                                                                                // 13431
     * @ngdoc method                                                                                                   // 13432
     * @name $q#all                                                                                                    // 13433
     * @kind function                                                                                                  // 13434
     *                                                                                                                 // 13435
     * @description                                                                                                    // 13436
     * Combines multiple promises into a single promise that is resolved when all of the input                         // 13437
     * promises are resolved.                                                                                          // 13438
     *                                                                                                                 // 13439
     * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                // 13440
     * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                 // 13441
     *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                   // 13442
     *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                  // 13443
     *   with the same rejection value.                                                                                // 13444
     */                                                                                                                // 13445
                                                                                                                       // 13446
    function all(promises) {                                                                                           // 13447
      var deferred = new Deferred(),                                                                                   // 13448
        counter = 0,                                                                                                   // 13449
        results = isArray(promises) ? [] : {};                                                                         // 13450
                                                                                                                       // 13451
      forEach(promises, function(promise, key) {                                                                       // 13452
        counter++;                                                                                                     // 13453
        when(promise).then(function(value) {                                                                           // 13454
          if (results.hasOwnProperty(key)) return;                                                                     // 13455
          results[key] = value;                                                                                        // 13456
          if (!(--counter)) deferred.resolve(results);                                                                 // 13457
        }, function(reason) {                                                                                          // 13458
          if (results.hasOwnProperty(key)) return;                                                                     // 13459
          deferred.reject(reason);                                                                                     // 13460
        });                                                                                                            // 13461
      });                                                                                                              // 13462
                                                                                                                       // 13463
      if (counter === 0) {                                                                                             // 13464
        deferred.resolve(results);                                                                                     // 13465
      }                                                                                                                // 13466
                                                                                                                       // 13467
      return deferred.promise;                                                                                         // 13468
    }                                                                                                                  // 13469
                                                                                                                       // 13470
    var $Q = function Q(resolver) {                                                                                    // 13471
      if (!isFunction(resolver)) {                                                                                     // 13472
        throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);                                         // 13473
      }                                                                                                                // 13474
                                                                                                                       // 13475
      if (!(this instanceof Q)) {                                                                                      // 13476
        // More useful when $Q is the Promise itself.                                                                  // 13477
        return new Q(resolver);                                                                                        // 13478
      }                                                                                                                // 13479
                                                                                                                       // 13480
      var deferred = new Deferred();                                                                                   // 13481
                                                                                                                       // 13482
      function resolveFn(value) {                                                                                      // 13483
        deferred.resolve(value);                                                                                       // 13484
      }                                                                                                                // 13485
                                                                                                                       // 13486
      function rejectFn(reason) {                                                                                      // 13487
        deferred.reject(reason);                                                                                       // 13488
      }                                                                                                                // 13489
                                                                                                                       // 13490
      resolver(resolveFn, rejectFn);                                                                                   // 13491
                                                                                                                       // 13492
      return deferred.promise;                                                                                         // 13493
    };                                                                                                                 // 13494
                                                                                                                       // 13495
    $Q.defer = defer;                                                                                                  // 13496
    $Q.reject = reject;                                                                                                // 13497
    $Q.when = when;                                                                                                    // 13498
    $Q.all = all;                                                                                                      // 13499
                                                                                                                       // 13500
    return $Q;                                                                                                         // 13501
  }                                                                                                                    // 13502
                                                                                                                       // 13503
  function $$RAFProvider() { //rAF                                                                                     // 13504
    this.$get = ['$window', '$timeout', function($window, $timeout) {                                                  // 13505
      var requestAnimationFrame = $window.requestAnimationFrame ||                                                     // 13506
        $window.webkitRequestAnimationFrame;                                                                           // 13507
                                                                                                                       // 13508
      var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                       // 13509
        $window.webkitCancelAnimationFrame ||                                                                          // 13510
        $window.webkitCancelRequestAnimationFrame;                                                                     // 13511
                                                                                                                       // 13512
      var rafSupported = !!requestAnimationFrame;                                                                      // 13513
      var raf = rafSupported                                                                                           // 13514
        ? function(fn) {                                                                                               // 13515
        var id = requestAnimationFrame(fn);                                                                            // 13516
        return function() {                                                                                            // 13517
          cancelAnimationFrame(id);                                                                                    // 13518
        };                                                                                                             // 13519
      }                                                                                                                // 13520
        : function(fn) {                                                                                               // 13521
        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                  // 13522
        return function() {                                                                                            // 13523
          $timeout.cancel(timer);                                                                                      // 13524
        };                                                                                                             // 13525
      };                                                                                                               // 13526
                                                                                                                       // 13527
      raf.supported = rafSupported;                                                                                    // 13528
                                                                                                                       // 13529
      return raf;                                                                                                      // 13530
    }];                                                                                                                // 13531
  }                                                                                                                    // 13532
                                                                                                                       // 13533
  /**                                                                                                                  // 13534
   * DESIGN NOTES                                                                                                      // 13535
   *                                                                                                                   // 13536
   * The design decisions behind the scope are heavily favored for speed and memory consumption.                       // 13537
   *                                                                                                                   // 13538
   * The typical use of scope is to watch the expressions, which most of the time return the same                      // 13539
   * value as last time so we optimize the operation.                                                                  // 13540
   *                                                                                                                   // 13541
   * Closures construction is expensive in terms of speed as well as memory:                                           // 13542
   *   - No closures, instead use prototypical inheritance for API                                                     // 13543
   *   - Internal state needs to be stored on scope directly, which means that private state is                        // 13544
   *     exposed as $$____ properties                                                                                  // 13545
   *                                                                                                                   // 13546
   * Loop operations are optimized by using while(count--) { ... }                                                     // 13547
   *   - this means that in order to keep the same order of execution as addition we have to add                       // 13548
   *     items to the array at the beginning (unshift) instead of at the end (push)                                    // 13549
   *                                                                                                                   // 13550
   * Child scopes are created and removed often                                                                        // 13551
   *   - Using an array would be slow since inserts in middle are expensive so we use linked list                      // 13552
   *                                                                                                                   // 13553
   * There are few watches then a lot of observers. This is why you don't want the observer to be                      // 13554
   * implemented in the same way as watch. Watch requires return of initialization function which                      // 13555
   * are expensive to construct.                                                                                       // 13556
   */                                                                                                                  // 13557
                                                                                                                       // 13558
                                                                                                                       // 13559
  /**                                                                                                                  // 13560
   * @ngdoc provider                                                                                                   // 13561
   * @name $rootScopeProvider                                                                                          // 13562
   * @description                                                                                                      // 13563
   *                                                                                                                   // 13564
   * Provider for the $rootScope service.                                                                              // 13565
   */                                                                                                                  // 13566
                                                                                                                       // 13567
  /**                                                                                                                  // 13568
   * @ngdoc method                                                                                                     // 13569
   * @name $rootScopeProvider#digestTtl                                                                                // 13570
   * @description                                                                                                      // 13571
   *                                                                                                                   // 13572
   * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                  // 13573
   * assuming that the model is unstable.                                                                              // 13574
   *                                                                                                                   // 13575
   * The current default is 10 iterations.                                                                             // 13576
   *                                                                                                                   // 13577
   * In complex applications it's possible that the dependencies between `$watch`s will result in                      // 13578
   * several digest iterations. However if an application needs more than the default 10 digest                        // 13579
   * iterations for its model to stabilize then you should investigate what is causing the model to                    // 13580
   * continuously change during the digest.                                                                            // 13581
   *                                                                                                                   // 13582
   * Increasing the TTL could have performance implications, so you should not change it without                       // 13583
   * proper justification.                                                                                             // 13584
   *                                                                                                                   // 13585
   * @param {number} limit The number of digest iterations.                                                            // 13586
   */                                                                                                                  // 13587
                                                                                                                       // 13588
                                                                                                                       // 13589
  /**                                                                                                                  // 13590
   * @ngdoc service                                                                                                    // 13591
   * @name $rootScope                                                                                                  // 13592
   * @description                                                                                                      // 13593
   *                                                                                                                   // 13594
   * Every application has a single root {@link ng.$rootScope.Scope scope}.                                            // 13595
   * All other scopes are descendant scopes of the root scope. Scopes provide separation                               // 13596
   * between the model and the view, via a mechanism for watching the model for changes.                               // 13597
   * They also provide an event emission/broadcast and subscription facility. See the                                  // 13598
   * {@link guide/scope developer guide on scopes}.                                                                    // 13599
   */                                                                                                                  // 13600
  function $RootScopeProvider() {                                                                                      // 13601
    var TTL = 10;                                                                                                      // 13602
    var $rootScopeMinErr = minErr('$rootScope');                                                                       // 13603
    var lastDirtyWatch = null;                                                                                         // 13604
    var applyAsyncId = null;                                                                                           // 13605
                                                                                                                       // 13606
    this.digestTtl = function(value) {                                                                                 // 13607
      if (arguments.length) {                                                                                          // 13608
        TTL = value;                                                                                                   // 13609
      }                                                                                                                // 13610
      return TTL;                                                                                                      // 13611
    };                                                                                                                 // 13612
                                                                                                                       // 13613
    function createChildScopeClass(parent) {                                                                           // 13614
      function ChildScope() {                                                                                          // 13615
        this.$$watchers = this.$$nextSibling =                                                                         // 13616
          this.$$childHead = this.$$childTail = null;                                                                  // 13617
        this.$$listeners = {};                                                                                         // 13618
        this.$$listenerCount = {};                                                                                     // 13619
        this.$$watchersCount = 0;                                                                                      // 13620
        this.$id = nextUid();                                                                                          // 13621
        this.$$ChildScope = null;                                                                                      // 13622
      }                                                                                                                // 13623
      ChildScope.prototype = parent;                                                                                   // 13624
      return ChildScope;                                                                                               // 13625
    }                                                                                                                  // 13626
                                                                                                                       // 13627
    this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                               // 13628
      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 13629
                                                                                                                       // 13630
        function destroyChildScope($event) {                                                                           // 13631
          $event.currentScope.$$destroyed = true;                                                                      // 13632
        }                                                                                                              // 13633
                                                                                                                       // 13634
        /**                                                                                                            // 13635
         * @ngdoc type                                                                                                 // 13636
         * @name $rootScope.Scope                                                                                      // 13637
         *                                                                                                             // 13638
         * @description                                                                                                // 13639
         * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                       // 13640
         * {@link auto.$injector $injector}. Child scopes are created using the                                        // 13641
         * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                 // 13642
         * compiled HTML template is executed.)                                                                        // 13643
         *                                                                                                             // 13644
         * Here is a simple scope snippet to show how you can interact with the scope.                                 // 13645
         * ```html                                                                                                     // 13646
         * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />                                                       // 13647
         * ```                                                                                                         // 13648
         *                                                                                                             // 13649
         * # Inheritance                                                                                               // 13650
         * A scope can inherit from a parent scope, as in this example:                                                // 13651
         * ```js                                                                                                       // 13652
         var parent = $rootScope;                                                                                      // 13653
         var child = parent.$new();                                                                                    // 13654
                                                                                                                       // 13655
         parent.salutation = "Hello";                                                                                  // 13656
         expect(child.salutation).toEqual('Hello');                                                                    // 13657
                                                                                                                       // 13658
         child.salutation = "Welcome";                                                                                 // 13659
         expect(child.salutation).toEqual('Welcome');                                                                  // 13660
         expect(parent.salutation).toEqual('Hello');                                                                   // 13661
         * ```                                                                                                         // 13662
         *                                                                                                             // 13663
         * When interacting with `Scope` in tests, additional helper methods are available on the                      // 13664
         * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                  // 13665
         * details.                                                                                                    // 13666
         *                                                                                                             // 13667
         *                                                                                                             // 13668
         * @param {Object.<string, function()>=} providers Map of service factory which need to be                     // 13669
         *                                       provided for the current scope. Defaults to {@link ng}.               // 13670
         * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                  // 13671
         *                              append/override services provided by `providers`. This is handy                // 13672
         *                              when unit-testing and having the need to override a default                    // 13673
         *                              service.                                                                       // 13674
         * @returns {Object} Newly created scope.                                                                      // 13675
         *                                                                                                             // 13676
         */                                                                                                            // 13677
        function Scope() {                                                                                             // 13678
          this.$id = nextUid();                                                                                        // 13679
          this.$$phase = this.$parent = this.$$watchers =                                                              // 13680
            this.$$nextSibling = this.$$prevSibling =                                                                  // 13681
              this.$$childHead = this.$$childTail = null;                                                              // 13682
          this.$root = this;                                                                                           // 13683
          this.$$destroyed = false;                                                                                    // 13684
          this.$$listeners = {};                                                                                       // 13685
          this.$$listenerCount = {};                                                                                   // 13686
          this.$$isolateBindings = null;                                                                               // 13687
        }                                                                                                              // 13688
                                                                                                                       // 13689
        /**                                                                                                            // 13690
         * @ngdoc property                                                                                             // 13691
         * @name $rootScope.Scope#$id                                                                                  // 13692
         *                                                                                                             // 13693
         * @description                                                                                                // 13694
         * Unique scope ID (monotonically increasing) useful for debugging.                                            // 13695
         */                                                                                                            // 13696
                                                                                                                       // 13697
        /**                                                                                                            // 13698
         * @ngdoc property                                                                                             // 13699
         * @name $rootScope.Scope#$parent                                                                              // 13700
         *                                                                                                             // 13701
         * @description                                                                                                // 13702
         * Reference to the parent scope.                                                                              // 13703
         */                                                                                                            // 13704
                                                                                                                       // 13705
        /**                                                                                                            // 13706
         * @ngdoc property                                                                                             // 13707
         * @name $rootScope.Scope#$root                                                                                // 13708
         *                                                                                                             // 13709
         * @description                                                                                                // 13710
         * Reference to the root scope.                                                                                // 13711
         */                                                                                                            // 13712
                                                                                                                       // 13713
        Scope.prototype = {                                                                                            // 13714
          constructor: Scope,                                                                                          // 13715
          /**                                                                                                          // 13716
           * @ngdoc method                                                                                             // 13717
           * @name $rootScope.Scope#$new                                                                               // 13718
           * @kind function                                                                                            // 13719
           *                                                                                                           // 13720
           * @description                                                                                              // 13721
           * Creates a new child {@link ng.$rootScope.Scope scope}.                                                    // 13722
           *                                                                                                           // 13723
           * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                  // 13724
           * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.  // 13725
           *                                                                                                           // 13726
           * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                      // 13727
           * desired for the scope and its child scopes to be permanently detached from the parent and                 // 13728
           * thus stop participating in model change detection and listener notification by invoking.                  // 13729
           *                                                                                                           // 13730
           * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                 // 13731
           *         parent scope. The scope is isolated, as it can not see parent scope properties.                   // 13732
           *         When creating widgets, it is useful for the widget to not accidentally read parent                // 13733
           *         state.                                                                                            // 13734
           *                                                                                                           // 13735
           * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`           // 13736
           *                              of the newly created scope. Defaults to `this` scope if not provided.        // 13737
           *                              This is used when creating a transclude scope to correctly place it          // 13738
           *                              in the scope hierarchy while maintaining the correct prototypical            // 13739
           *                              inheritance.                                                                 // 13740
           *                                                                                                           // 13741
           * @returns {Object} The newly created child scope.                                                          // 13742
           *                                                                                                           // 13743
           */                                                                                                          // 13744
          $new: function(isolate, parent) {                                                                            // 13745
            var child;                                                                                                 // 13746
                                                                                                                       // 13747
            parent = parent || this;                                                                                   // 13748
                                                                                                                       // 13749
            if (isolate) {                                                                                             // 13750
              child = new Scope();                                                                                     // 13751
              child.$root = this.$root;                                                                                // 13752
            } else {                                                                                                   // 13753
              // Only create a child scope class if somebody asks for one,                                             // 13754
              // but cache it to allow the VM to optimize lookups.                                                     // 13755
              if (!this.$$ChildScope) {                                                                                // 13756
                this.$$ChildScope = createChildScopeClass(this);                                                       // 13757
              }                                                                                                        // 13758
              child = new this.$$ChildScope();                                                                         // 13759
            }                                                                                                          // 13760
            child.$parent = parent;                                                                                    // 13761
            child.$$prevSibling = parent.$$childTail;                                                                  // 13762
            if (parent.$$childHead) {                                                                                  // 13763
              parent.$$childTail.$$nextSibling = child;                                                                // 13764
              parent.$$childTail = child;                                                                              // 13765
            } else {                                                                                                   // 13766
              parent.$$childHead = parent.$$childTail = child;                                                         // 13767
            }                                                                                                          // 13768
                                                                                                                       // 13769
            // When the new scope is not isolated or we inherit from `this`, and                                       // 13770
            // the parent scope is destroyed, the property `$$destroyed` is inherited                                  // 13771
            // prototypically. In all other cases, this property needs to be set                                       // 13772
            // when the parent scope is destroyed.                                                                     // 13773
            // The listener needs to be added after the parent is set                                                  // 13774
            if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                   // 13775
                                                                                                                       // 13776
            return child;                                                                                              // 13777
          },                                                                                                           // 13778
                                                                                                                       // 13779
          /**                                                                                                          // 13780
           * @ngdoc method                                                                                             // 13781
           * @name $rootScope.Scope#$watch                                                                             // 13782
           * @kind function                                                                                            // 13783
           *                                                                                                           // 13784
           * @description                                                                                              // 13785
           * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                    // 13786
           *                                                                                                           // 13787
           * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                     // 13788
       *   $digest()} and should return the value that will be watched. (Since                                         // 13789
           *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the                        // 13790
           *   `watchExpression` can execute multiple times per                                                        // 13791
           *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)                                // 13792
           * - The `listener` is called only when the value from the current `watchExpression` and the                 // 13793
           *   previous call to `watchExpression` are not equal (with the exception of the initial run,                // 13794
           *   see below). Inequality is determined according to reference inequality,                                 // 13795
           *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
           *    via the `!==` Javascript operator, unless `objectEquality == true`                                     // 13797
           *   (see next point)                                                                                        // 13798
           * - When `objectEquality == true`, inequality of the `watchExpression` is determined                        // 13799
           *   according to the {@link angular.equals} function. To save the value of the object for                   // 13800
           *   later comparison, the {@link angular.copy} function is used. This therefore means that                  // 13801
           *   watching complex objects will have adverse memory and performance implications.                         // 13802
           * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                 // 13803
           *   This is achieved by rerunning the watchers until no changes are detected. The rerun                     // 13804
           *   iteration limit is 10 to prevent an infinite loop deadlock.                                             // 13805
           *                                                                                                           // 13806
           *                                                                                                           // 13807
           * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                // 13808
           * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`                // 13809
           * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a                   // 13810
           * change is detected, be prepared for multiple calls to your listener.)                                     // 13811
           *                                                                                                           // 13812
           * After a watcher is registered with the scope, the `listener` fn is called asynchronously                  // 13813
           * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                 // 13814
           * watcher. In rare cases, this is undesirable because the listener is called when the result                // 13815
           * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                 // 13816
           * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                 // 13817
           * listener was called due to initialization.                                                                // 13818
           *                                                                                                           // 13819
           *                                                                                                           // 13820
           *                                                                                                           // 13821
           * # Example                                                                                                 // 13822
           * ```js                                                                                                     // 13823
           // let's assume that scope was dependency injected as the $rootScope                                        // 13824
           var scope = $rootScope;                                                                                     // 13825
           scope.name = 'misko';                                                                                       // 13826
           scope.counter = 0;                                                                                          // 13827
                                                                                                                       // 13828
           expect(scope.counter).toEqual(0);                                                                           // 13829
           scope.$watch('name', function(newValue, oldValue) {                                                         // 13830
             scope.counter = scope.counter + 1;                                                                        // 13831
           });                                                                                                         // 13832
           expect(scope.counter).toEqual(0);                                                                           // 13833
                                                                                                                       // 13834
           scope.$digest();                                                                                            // 13835
           // the listener is always called during the first $digest loop after it was registered                      // 13836
           expect(scope.counter).toEqual(1);                                                                           // 13837
                                                                                                                       // 13838
           scope.$digest();                                                                                            // 13839
           // but now it will not be called unless the value changes                                                   // 13840
           expect(scope.counter).toEqual(1);                                                                           // 13841
                                                                                                                       // 13842
           scope.name = 'adam';                                                                                        // 13843
           scope.$digest();                                                                                            // 13844
           expect(scope.counter).toEqual(2);                                                                           // 13845
                                                                                                                       // 13846
                                                                                                                       // 13847
                                                                                                                       // 13848
           // Using a function as a watchExpression                                                                    // 13849
           var food;                                                                                                   // 13850
           scope.foodCounter = 0;                                                                                      // 13851
           expect(scope.foodCounter).toEqual(0);                                                                       // 13852
           scope.$watch(                                                                                               // 13853
           // This function returns the value being watched. It is called for each turn of the $digest loop            // 13854
           function() { return food; },                                                                                // 13855
           // This is the change listener, called when the value returned from the above function changes              // 13856
           function(newValue, oldValue) {                                                                              // 13857
               if ( newValue !== oldValue ) {                                                                          // 13858
                 // Only increment the counter if the value changed                                                    // 13859
                 scope.foodCounter = scope.foodCounter + 1;                                                            // 13860
               }                                                                                                       // 13861
             }                                                                                                         // 13862
           );                                                                                                          // 13863
           // No digest has been run so the counter will be zero                                                       // 13864
           expect(scope.foodCounter).toEqual(0);                                                                       // 13865
                                                                                                                       // 13866
           // Run the digest but since food has not changed count will still be zero                                   // 13867
           scope.$digest();                                                                                            // 13868
           expect(scope.foodCounter).toEqual(0);                                                                       // 13869
                                                                                                                       // 13870
           // Update food and run digest.  Now the counter will increment                                              // 13871
           food = 'cheeseburger';                                                                                      // 13872
           scope.$digest();                                                                                            // 13873
           expect(scope.foodCounter).toEqual(1);                                                                       // 13874
                                                                                                                       // 13875
           * ```                                                                                                       // 13876
           *                                                                                                           // 13877
           *                                                                                                           // 13878
           *                                                                                                           // 13879
           * @param {(function()|string)} watchExpression Expression that is evaluated on each                         // 13880
           *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers               // 13881
           *    a call to the `listener`.                                                                              // 13882
           *                                                                                                           // 13883
           *    - `string`: Evaluated as {@link guide/expression expression}                                           // 13884
           *    - `function(scope)`: called with current `scope` as a parameter.                                       // 13885
           * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                      // 13886
           *    of `watchExpression` changes.                                                                          // 13887
           *                                                                                                           // 13888
           *    - `newVal` contains the current value of the `watchExpression`                                         // 13889
           *    - `oldVal` contains the previous value of the `watchExpression`                                        // 13890
           *    - `scope` refers to the current scope                                                                  // 13891
           * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of      // 13892
           *     comparing for reference equality.                                                                     // 13893
           * @returns {function()} Returns a deregistration function for this listener.                                // 13894
           */                                                                                                          // 13895
          $watch: function(watchExp, listener, objectEquality) {                                                       // 13896
            var get = $parse(watchExp);                                                                                // 13897
                                                                                                                       // 13898
            if (get.$$watchDelegate) {                                                                                 // 13899
              return get.$$watchDelegate(this, listener, objectEquality, get);                                         // 13900
            }                                                                                                          // 13901
            var scope = this,                                                                                          // 13902
              array = scope.$$watchers,                                                                                // 13903
              watcher = {                                                                                              // 13904
                fn: listener,                                                                                          // 13905
                last: initWatchVal,                                                                                    // 13906
                get: get,                                                                                              // 13907
                exp: watchExp,                                                                                         // 13908
                eq: !!objectEquality                                                                                   // 13909
              };                                                                                                       // 13910
                                                                                                                       // 13911
            lastDirtyWatch = null;                                                                                     // 13912
                                                                                                                       // 13913
            if (!isFunction(listener)) {                                                                               // 13914
              watcher.fn = noop;                                                                                       // 13915
            }                                                                                                          // 13916
                                                                                                                       // 13917
            if (!array) {                                                                                              // 13918
              array = scope.$$watchers = [];                                                                           // 13919
            }                                                                                                          // 13920
            // we use unshift since we use a while loop in $digest for speed.                                          // 13921
            // the while loop reads in reverse order.                                                                  // 13922
            array.unshift(watcher);                                                                                    // 13923
                                                                                                                       // 13924
            return function deregisterWatch() {                                                                        // 13925
              arrayRemove(array, watcher);                                                                             // 13926
              lastDirtyWatch = null;                                                                                   // 13927
            };                                                                                                         // 13928
          },                                                                                                           // 13929
                                                                                                                       // 13930
          /**                                                                                                          // 13931
           * @ngdoc method                                                                                             // 13932
           * @name $rootScope.Scope#$watchGroup                                                                        // 13933
           * @kind function                                                                                            // 13934
           *                                                                                                           // 13935
           * @description                                                                                              // 13936
           * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`. // 13937
           * If any one expression in the collection changes the `listener` is executed.                               // 13938
           *                                                                                                           // 13939
           * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
           *   call to $digest() to see if any items changes.                                                          // 13941
           * - The `listener` is called whenever any expression in the `watchExpressions` array changes.               // 13942
           *                                                                                                           // 13943
           * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually   // 13944
           * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                 // 13945
           *                                                                                                           // 13946
           * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any  // 13947
           *    expression in `watchExpressions` changes                                                               // 13948
           *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching // 13949
           *    those of `watchExpression`                                                                             // 13950
           *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
           *    those of `watchExpression`                                                                             // 13952
           *    The `scope` refers to the current scope.                                                               // 13953
           * @returns {function()} Returns a de-registration function for all listeners.                               // 13954
           */                                                                                                          // 13955
          $watchGroup: function(watchExpressions, listener) {                                                          // 13956
            var oldValues = new Array(watchExpressions.length);                                                        // 13957
            var newValues = new Array(watchExpressions.length);                                                        // 13958
            var deregisterFns = [];                                                                                    // 13959
            var self = this;                                                                                           // 13960
            var changeReactionScheduled = false;                                                                       // 13961
            var firstRun = true;                                                                                       // 13962
                                                                                                                       // 13963
            if (!watchExpressions.length) {                                                                            // 13964
              // No expressions means we call the listener ASAP                                                        // 13965
              var shouldCall = true;                                                                                   // 13966
              self.$evalAsync(function() {                                                                             // 13967
                if (shouldCall) listener(newValues, newValues, self);                                                  // 13968
              });                                                                                                      // 13969
              return function deregisterWatchGroup() {                                                                 // 13970
                shouldCall = false;                                                                                    // 13971
              };                                                                                                       // 13972
            }                                                                                                          // 13973
                                                                                                                       // 13974
            if (watchExpressions.length === 1) {                                                                       // 13975
              // Special case size of one                                                                              // 13976
              return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {              // 13977
                newValues[0] = value;                                                                                  // 13978
                oldValues[0] = oldValue;                                                                               // 13979
                listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                              // 13980
              });                                                                                                      // 13981
            }                                                                                                          // 13982
                                                                                                                       // 13983
            forEach(watchExpressions, function(expr, i) {                                                              // 13984
              var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                        // 13985
                newValues[i] = value;                                                                                  // 13986
                oldValues[i] = oldValue;                                                                               // 13987
                if (!changeReactionScheduled) {                                                                        // 13988
                  changeReactionScheduled = true;                                                                      // 13989
                  self.$evalAsync(watchGroupAction);                                                                   // 13990
                }                                                                                                      // 13991
              });                                                                                                      // 13992
              deregisterFns.push(unwatchFn);                                                                           // 13993
            });                                                                                                        // 13994
                                                                                                                       // 13995
            function watchGroupAction() {                                                                              // 13996
              changeReactionScheduled = false;                                                                         // 13997
                                                                                                                       // 13998
              if (firstRun) {                                                                                          // 13999
                firstRun = false;                                                                                      // 14000
                listener(newValues, newValues, self);                                                                  // 14001
              } else {                                                                                                 // 14002
                listener(newValues, oldValues, self);                                                                  // 14003
              }                                                                                                        // 14004
            }                                                                                                          // 14005
                                                                                                                       // 14006
            return function deregisterWatchGroup() {                                                                   // 14007
              while (deregisterFns.length) {                                                                           // 14008
                deregisterFns.shift()();                                                                               // 14009
              }                                                                                                        // 14010
            };                                                                                                         // 14011
          },                                                                                                           // 14012
                                                                                                                       // 14013
                                                                                                                       // 14014
          /**                                                                                                          // 14015
           * @ngdoc method                                                                                             // 14016
           * @name $rootScope.Scope#$watchCollection                                                                   // 14017
           * @kind function                                                                                            // 14018
           *                                                                                                           // 14019
           * @description                                                                                              // 14020
           * Shallow watches the properties of an object and fires whenever any of the properties change               // 14021
           * (for arrays, this implies watching the array items; for object maps, this implies watching                // 14022
           * the properties). If a change is detected, the `listener` callback is fired.                               // 14023
           *                                                                                                           // 14024
           * - The `obj` collection is observed via standard $watch operation and is examined on every                 // 14025
           *   call to $digest() to see if any items have been added, removed, or moved.                               // 14026
           * - The `listener` is called whenever anything within the `obj` has changed. Examples include               // 14027
           *   adding, removing, and moving items belonging to an object or array.                                     // 14028
           *                                                                                                           // 14029
           *                                                                                                           // 14030
           * # Example                                                                                                 // 14031
           * ```js                                                                                                     // 14032
           $scope.names = ['igor', 'matias', 'misko', 'james'];                                                        // 14033
           $scope.dataCount = 4;                                                                                       // 14034
                                                                                                                       // 14035
           $scope.$watchCollection('names', function(newNames, oldNames) {                                             // 14036
            $scope.dataCount = newNames.length;                                                                        // 14037
          });                                                                                                          // 14038
                                                                                                                       // 14039
           expect($scope.dataCount).toEqual(4);                                                                        // 14040
           $scope.$digest();                                                                                           // 14041
                                                                                                                       // 14042
           //still at 4 ... no changes                                                                                 // 14043
           expect($scope.dataCount).toEqual(4);                                                                        // 14044
                                                                                                                       // 14045
           $scope.names.pop();                                                                                         // 14046
           $scope.$digest();                                                                                           // 14047
                                                                                                                       // 14048
           //now there's been a change                                                                                 // 14049
           expect($scope.dataCount).toEqual(3);                                                                        // 14050
           * ```                                                                                                       // 14051
           *                                                                                                           // 14052
           *                                                                                                           // 14053
           * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                 // 14054
           *    expression value should evaluate to an object or an array which is observed on each                    // 14055
           *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                       // 14056
           *    collection will trigger a call to the `listener`.                                                      // 14057
           *                                                                                                           // 14058
           * @param {function(newCollection, oldCollection, scope)} listener a callback function called                // 14059
           *    when a change is detected.                                                                             // 14060
           *    - The `newCollection` object is the newly modified data obtained from the `obj` expression             // 14061
           *    - The `oldCollection` object is a copy of the former collection data.                                  // 14062
           *      Due to performance considerations, the`oldCollection` value is computed only if the                  // 14063
           *      `listener` function declares two or more arguments.                                                  // 14064
           *    - The `scope` argument refers to the current scope.                                                    // 14065
           *                                                                                                           // 14066
           * @returns {function()} Returns a de-registration function for this listener. When the                      // 14067
           *    de-registration function is executed, the internal watch operation is terminated.                      // 14068
           */                                                                                                          // 14069
          $watchCollection: function(obj, listener) {                                                                  // 14070
            $watchCollectionInterceptor.$stateful = true;                                                              // 14071
                                                                                                                       // 14072
            var self = this;                                                                                           // 14073
            // the current value, updated on each dirty-check run                                                      // 14074
            var newValue;                                                                                              // 14075
            // a shallow copy of the newValue from the last dirty-check run,                                           // 14076
            // updated to match newValue during dirty-check run                                                        // 14077
            var oldValue;                                                                                              // 14078
            // a shallow copy of the newValue from when the last change happened                                       // 14079
            var veryOldValue;                                                                                          // 14080
            // only track veryOldValue if the listener is asking for it                                                // 14081
            var trackVeryOldValue = (listener.length > 1);                                                             // 14082
            var changeDetected = 0;                                                                                    // 14083
            var changeDetector = $parse(obj, $watchCollectionInterceptor);                                             // 14084
            var internalArray = [];                                                                                    // 14085
            var internalObject = {};                                                                                   // 14086
            var initRun = true;                                                                                        // 14087
            var oldLength = 0;                                                                                         // 14088
                                                                                                                       // 14089
            function $watchCollectionInterceptor(_value) {                                                             // 14090
              newValue = _value;                                                                                       // 14091
              var newLength, key, bothNaN, newItem, oldItem;                                                           // 14092
                                                                                                                       // 14093
              // If the new value is undefined, then return undefined as the watch may be a one-time watch             // 14094
              if (isUndefined(newValue)) return;                                                                       // 14095
                                                                                                                       // 14096
              if (!isObject(newValue)) { // if primitive                                                               // 14097
                if (oldValue !== newValue) {                                                                           // 14098
                  oldValue = newValue;                                                                                 // 14099
                  changeDetected++;                                                                                    // 14100
                }                                                                                                      // 14101
              } else if (isArrayLike(newValue)) {                                                                      // 14102
                if (oldValue !== internalArray) {                                                                      // 14103
                  // we are transitioning from something which was not an array into array.                            // 14104
                  oldValue = internalArray;                                                                            // 14105
                  oldLength = oldValue.length = 0;                                                                     // 14106
                  changeDetected++;                                                                                    // 14107
                }                                                                                                      // 14108
                                                                                                                       // 14109
                newLength = newValue.length;                                                                           // 14110
                                                                                                                       // 14111
                if (oldLength !== newLength) {                                                                         // 14112
                  // if lengths do not match we need to trigger change notification                                    // 14113
                  changeDetected++;                                                                                    // 14114
                  oldValue.length = oldLength = newLength;                                                             // 14115
                }                                                                                                      // 14116
                // copy the items to oldValue and look for changes.                                                    // 14117
                for (var i = 0; i < newLength; i++) {                                                                  // 14118
                  oldItem = oldValue[i];                                                                               // 14119
                  newItem = newValue[i];                                                                               // 14120
                                                                                                                       // 14121
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 14122
                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 14123
                    changeDetected++;                                                                                  // 14124
                    oldValue[i] = newItem;                                                                             // 14125
                  }                                                                                                    // 14126
                }                                                                                                      // 14127
              } else {                                                                                                 // 14128
                if (oldValue !== internalObject) {                                                                     // 14129
                  // we are transitioning from something which was not an object into object.                          // 14130
                  oldValue = internalObject = {};                                                                      // 14131
                  oldLength = 0;                                                                                       // 14132
                  changeDetected++;                                                                                    // 14133
                }                                                                                                      // 14134
                // copy the items to oldValue and look for changes.                                                    // 14135
                newLength = 0;                                                                                         // 14136
                for (key in newValue) {                                                                                // 14137
                  if (newValue.hasOwnProperty(key)) {                                                                  // 14138
                    newLength++;                                                                                       // 14139
                    newItem = newValue[key];                                                                           // 14140
                    oldItem = oldValue[key];                                                                           // 14141
                                                                                                                       // 14142
                    if (key in oldValue) {                                                                             // 14143
                      bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                        // 14144
                      if (!bothNaN && (oldItem !== newItem)) {                                                         // 14145
                        changeDetected++;                                                                              // 14146
                        oldValue[key] = newItem;                                                                       // 14147
                      }                                                                                                // 14148
                    } else {                                                                                           // 14149
                      oldLength++;                                                                                     // 14150
                      oldValue[key] = newItem;                                                                         // 14151
                      changeDetected++;                                                                                // 14152
                    }                                                                                                  // 14153
                  }                                                                                                    // 14154
                }                                                                                                      // 14155
                if (oldLength > newLength) {                                                                           // 14156
                  // we used to have more keys, need to find them and destroy them.                                    // 14157
                  changeDetected++;                                                                                    // 14158
                  for (key in oldValue) {                                                                              // 14159
                    if (!newValue.hasOwnProperty(key)) {                                                               // 14160
                      oldLength--;                                                                                     // 14161
                      delete oldValue[key];                                                                            // 14162
                    }                                                                                                  // 14163
                  }                                                                                                    // 14164
                }                                                                                                      // 14165
              }                                                                                                        // 14166
              return changeDetected;                                                                                   // 14167
            }                                                                                                          // 14168
                                                                                                                       // 14169
            function $watchCollectionAction() {                                                                        // 14170
              if (initRun) {                                                                                           // 14171
                initRun = false;                                                                                       // 14172
                listener(newValue, newValue, self);                                                                    // 14173
              } else {                                                                                                 // 14174
                listener(newValue, veryOldValue, self);                                                                // 14175
              }                                                                                                        // 14176
                                                                                                                       // 14177
              // make a copy for the next time a collection is changed                                                 // 14178
              if (trackVeryOldValue) {                                                                                 // 14179
                if (!isObject(newValue)) {                                                                             // 14180
                  //primitive                                                                                          // 14181
                  veryOldValue = newValue;                                                                             // 14182
                } else if (isArrayLike(newValue)) {                                                                    // 14183
                  veryOldValue = new Array(newValue.length);                                                           // 14184
                  for (var i = 0; i < newValue.length; i++) {                                                          // 14185
                    veryOldValue[i] = newValue[i];                                                                     // 14186
                  }                                                                                                    // 14187
                } else { // if object                                                                                  // 14188
                  veryOldValue = {};                                                                                   // 14189
                  for (var key in newValue) {                                                                          // 14190
                    if (hasOwnProperty.call(newValue, key)) {                                                          // 14191
                      veryOldValue[key] = newValue[key];                                                               // 14192
                    }                                                                                                  // 14193
                  }                                                                                                    // 14194
                }                                                                                                      // 14195
              }                                                                                                        // 14196
            }                                                                                                          // 14197
                                                                                                                       // 14198
            return this.$watch(changeDetector, $watchCollectionAction);                                                // 14199
          },                                                                                                           // 14200
                                                                                                                       // 14201
          /**                                                                                                          // 14202
           * @ngdoc method                                                                                             // 14203
           * @name $rootScope.Scope#$digest                                                                            // 14204
           * @kind function                                                                                            // 14205
           *                                                                                                           // 14206
           * @description                                                                                              // 14207
           * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                 // 14208
           * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                  // 14209
           * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                  // 14210
           * until no more listeners are firing. This means that it is possible to get into an infinite                // 14211
           * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                     // 14212
           * iterations exceeds 10.                                                                                    // 14213
           *                                                                                                           // 14214
           * Usually, you don't call `$digest()` directly in                                                           // 14215
           * {@link ng.directive:ngController controllers} or in                                                       // 14216
           * {@link ng.$compileProvider#directive directives}.                                                         // 14217
           * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within               // 14218
           * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                       // 14219
           *                                                                                                           // 14220
           * If you want to be notified whenever `$digest()` is called,                                                // 14221
           * you can register a `watchExpression` function with                                                        // 14222
           * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                           // 14223
           *                                                                                                           // 14224
           * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                         // 14225
           *                                                                                                           // 14226
           * # Example                                                                                                 // 14227
           * ```js                                                                                                     // 14228
           var scope = ...;                                                                                            // 14229
           scope.name = 'misko';                                                                                       // 14230
           scope.counter = 0;                                                                                          // 14231
                                                                                                                       // 14232
           expect(scope.counter).toEqual(0);                                                                           // 14233
           scope.$watch('name', function(newValue, oldValue) {                                                         // 14234
             scope.counter = scope.counter + 1;                                                                        // 14235
           });                                                                                                         // 14236
           expect(scope.counter).toEqual(0);                                                                           // 14237
                                                                                                                       // 14238
           scope.$digest();                                                                                            // 14239
           // the listener is always called during the first $digest loop after it was registered                      // 14240
           expect(scope.counter).toEqual(1);                                                                           // 14241
                                                                                                                       // 14242
           scope.$digest();                                                                                            // 14243
           // but now it will not be called unless the value changes                                                   // 14244
           expect(scope.counter).toEqual(1);                                                                           // 14245
                                                                                                                       // 14246
           scope.name = 'adam';                                                                                        // 14247
           scope.$digest();                                                                                            // 14248
           expect(scope.counter).toEqual(2);                                                                           // 14249
           * ```                                                                                                       // 14250
           *                                                                                                           // 14251
           */                                                                                                          // 14252
          $digest: function() {                                                                                        // 14253
            var watch, value, last,                                                                                    // 14254
              watchers,                                                                                                // 14255
              length,                                                                                                  // 14256
              dirty, ttl = TTL,                                                                                        // 14257
              next, current, target = this,                                                                            // 14258
              watchLog = [],                                                                                           // 14259
              logIdx, logMsg, asyncTask;                                                                               // 14260
                                                                                                                       // 14261
            beginPhase('$digest');                                                                                     // 14262
            // Check for changes to browser url that happened in sync before the call to $digest                       // 14263
            $browser.$$checkUrlChange();                                                                               // 14264
                                                                                                                       // 14265
            if (this === $rootScope && applyAsyncId !== null) {                                                        // 14266
              // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                    // 14267
              // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                       // 14268
              $browser.defer.cancel(applyAsyncId);                                                                     // 14269
              flushApplyAsync();                                                                                       // 14270
            }                                                                                                          // 14271
                                                                                                                       // 14272
            lastDirtyWatch = null;                                                                                     // 14273
                                                                                                                       // 14274
            do { // "while dirty" loop                                                                                 // 14275
              dirty = false;                                                                                           // 14276
              current = target;                                                                                        // 14277
                                                                                                                       // 14278
              while (asyncQueue.length) {                                                                              // 14279
                try {                                                                                                  // 14280
                  asyncTask = asyncQueue.shift();                                                                      // 14281
                  asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                       // 14282
                } catch (e) {                                                                                          // 14283
                  $exceptionHandler(e);                                                                                // 14284
                }                                                                                                      // 14285
                lastDirtyWatch = null;                                                                                 // 14286
              }                                                                                                        // 14287
                                                                                                                       // 14288
              traverseScopesLoop:                                                                                      // 14289
                do { // "traverse the scopes" loop                                                                     // 14290
                  if ((watchers = current.$$watchers)) {                                                               // 14291
                    // process our watches                                                                             // 14292
                    length = watchers.length;                                                                          // 14293
                    while (length--) {                                                                                 // 14294
                      try {                                                                                            // 14295
                        watch = watchers[length];                                                                      // 14296
                        // Most common watches are on primitives, in which case we can short                           // 14297
                        // circuit it with === operator, only when === fails do we use .equals                         // 14298
                        if (watch) {                                                                                   // 14299
                          if ((value = watch.get(current)) !== (last = watch.last) &&                                  // 14300
                            !(watch.eq                                                                                 // 14301
                              ? equals(value, last)                                                                    // 14302
                              : (typeof value === 'number' && typeof last === 'number'                                 // 14303
                            && isNaN(value) && isNaN(last)))) {                                                        // 14304
                            dirty = true;                                                                              // 14305
                            lastDirtyWatch = watch;                                                                    // 14306
                            watch.last = watch.eq ? copy(value, null) : value;                                         // 14307
                            watch.fn(value, ((last === initWatchVal) ? value : last), current);                        // 14308
                            if (ttl < 5) {                                                                             // 14309
                              logIdx = 4 - ttl;                                                                        // 14310
                              if (!watchLog[logIdx]) watchLog[logIdx] = [];                                            // 14311
                              watchLog[logIdx].push({                                                                  // 14312
                                msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                                newVal: value,                                                                         // 14314
                                oldVal: last                                                                           // 14315
                              });                                                                                      // 14316
                            }                                                                                          // 14317
                          } else if (watch === lastDirtyWatch) {                                                       // 14318
                            // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                            // have already been tested.                                                               // 14320
                            dirty = false;                                                                             // 14321
                            break traverseScopesLoop;                                                                  // 14322
                          }                                                                                            // 14323
                        }                                                                                              // 14324
                      } catch (e) {                                                                                    // 14325
                        $exceptionHandler(e);                                                                          // 14326
                      }                                                                                                // 14327
                    }                                                                                                  // 14328
                  }                                                                                                    // 14329
                                                                                                                       // 14330
                  // Insanity Warning: scope depth-first traversal                                                     // 14331
                  // yes, this code is a bit crazy, but it works and we have tests to prove it!                        // 14332
                  // this piece should be kept in sync with the traversal in $broadcast                                // 14333
                  if (!(next = (current.$$childHead ||                                                                 // 14334
                    (current !== target && current.$$nextSibling)))) {                                                 // 14335
                    while (current !== target && !(next = current.$$nextSibling)) {                                    // 14336
                      current = current.$parent;                                                                       // 14337
                    }                                                                                                  // 14338
                  }                                                                                                    // 14339
                } while ((current = next));                                                                            // 14340
                                                                                                                       // 14341
              // `break traverseScopesLoop;` takes us to here                                                          // 14342
                                                                                                                       // 14343
              if ((dirty || asyncQueue.length) && !(ttl--)) {                                                          // 14344
                clearPhase();                                                                                          // 14345
                throw $rootScopeMinErr('infdig',                                                                       // 14346
                  '{0} $digest() iterations reached. Aborting!\n' +                                                    // 14347
                  'Watchers fired in the last 5 iterations: {1}',                                                      // 14348
                  TTL, watchLog);                                                                                      // 14349
              }                                                                                                        // 14350
                                                                                                                       // 14351
            } while (dirty || asyncQueue.length);                                                                      // 14352
                                                                                                                       // 14353
            clearPhase();                                                                                              // 14354
                                                                                                                       // 14355
            while (postDigestQueue.length) {                                                                           // 14356
              try {                                                                                                    // 14357
                postDigestQueue.shift()();                                                                             // 14358
              } catch (e) {                                                                                            // 14359
                $exceptionHandler(e);                                                                                  // 14360
              }                                                                                                        // 14361
            }                                                                                                          // 14362
          },                                                                                                           // 14363
                                                                                                                       // 14364
                                                                                                                       // 14365
          /**                                                                                                          // 14366
           * @ngdoc event                                                                                              // 14367
           * @name $rootScope.Scope#$destroy                                                                           // 14368
           * @eventType broadcast on scope being destroyed                                                             // 14369
           *                                                                                                           // 14370
           * @description                                                                                              // 14371
           * Broadcasted when a scope and its children are being destroyed.                                            // 14372
           *                                                                                                           // 14373
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                    // 14374
           * clean up DOM bindings before an element is removed from the DOM.                                          // 14375
           */                                                                                                          // 14376
                                                                                                                       // 14377
          /**                                                                                                          // 14378
           * @ngdoc method                                                                                             // 14379
           * @name $rootScope.Scope#$destroy                                                                           // 14380
           * @kind function                                                                                            // 14381
           *                                                                                                           // 14382
           * @description                                                                                              // 14383
           * Removes the current scope (and all of its children) from the parent scope. Removal implies                // 14384
           * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                // 14385
           * propagate to the current scope and its children. Removal also implies that the current                    // 14386
           * scope is eligible for garbage collection.                                                                 // 14387
           *                                                                                                           // 14388
           * The `$destroy()` is usually used by directives such as                                                    // 14389
           * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                   // 14390
           * unrolling of the loop.                                                                                    // 14391
           *                                                                                                           // 14392
           * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                        // 14393
           * Application code can register a `$destroy` event handler that will give it a chance to                    // 14394
           * perform any necessary cleanup.                                                                            // 14395
           *                                                                                                           // 14396
           * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                    // 14397
           * clean up DOM bindings before an element is removed from the DOM.                                          // 14398
           */                                                                                                          // 14399
          $destroy: function() {                                                                                       // 14400
            // we can't destroy the root scope or a scope that has been already destroyed                              // 14401
            if (this.$$destroyed) return;                                                                              // 14402
            var parent = this.$parent;                                                                                 // 14403
                                                                                                                       // 14404
            this.$broadcast('$destroy');                                                                               // 14405
            this.$$destroyed = true;                                                                                   // 14406
            if (this === $rootScope) return;                                                                           // 14407
                                                                                                                       // 14408
            for (var eventName in this.$$listenerCount) {                                                              // 14409
              decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                // 14410
            }                                                                                                          // 14411
                                                                                                                       // 14412
            // sever all the references to parent scopes (after this cleanup, the current scope should                 // 14413
            // not be retained by any of our references and should be eligible for garbage collection)                 // 14414
            if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                                   // 14415
            if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                                   // 14416
            if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                             // 14417
            if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                             // 14418
                                                                                                                       // 14419
            // Disable listeners, watchers and apply/digest methods                                                    // 14420
            this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                    // 14421
            this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                   // 14422
            this.$$listeners = {};                                                                                     // 14423
                                                                                                                       // 14424
            // All of the code below is bogus code that works around V8's memory leak via optimized code               // 14425
            // and inline caches.                                                                                      // 14426
            //                                                                                                         // 14427
            // see:                                                                                                    // 14428
            // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                // 14429
            // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                               // 14430
            // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                               // 14431
                                                                                                                       // 14432
            this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =                                // 14433
              this.$$childTail = this.$root = this.$$watchers = null;                                                  // 14434
          },                                                                                                           // 14435
                                                                                                                       // 14436
          /**                                                                                                          // 14437
           * @ngdoc method                                                                                             // 14438
           * @name $rootScope.Scope#$eval                                                                              // 14439
           * @kind function                                                                                            // 14440
           *                                                                                                           // 14441
           * @description                                                                                              // 14442
           * Executes the `expression` on the current scope and returns the result. Any exceptions in                  // 14443
           * the expression are propagated (uncaught). This is useful when evaluating Angular                          // 14444
           * expressions.                                                                                              // 14445
           *                                                                                                           // 14446
           * # Example                                                                                                 // 14447
           * ```js                                                                                                     // 14448
           var scope = ng.$rootScope.Scope();                                                                          // 14449
           scope.a = 1;                                                                                                // 14450
           scope.b = 2;                                                                                                // 14451
                                                                                                                       // 14452
           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 14453
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 14454
           * ```                                                                                                       // 14455
           *                                                                                                           // 14456
           * @param {(string|function())=} expression An angular expression to be executed.                            // 14457
           *                                                                                                           // 14458
           *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                // 14459
           *    - `function(scope)`: execute the function with the current `scope` parameter.                          // 14460
           *                                                                                                           // 14461
           * @param {(object)=} locals Local variables object, useful for overriding values in scope.                  // 14462
           * @returns {*} The result of evaluating the expression.                                                     // 14463
           */                                                                                                          // 14464
          $eval: function(expr, locals) {                                                                              // 14465
            return $parse(expr)(this, locals);                                                                         // 14466
          },                                                                                                           // 14467
                                                                                                                       // 14468
          /**                                                                                                          // 14469
           * @ngdoc method                                                                                             // 14470
           * @name $rootScope.Scope#$evalAsync                                                                         // 14471
           * @kind function                                                                                            // 14472
           *                                                                                                           // 14473
           * @description                                                                                              // 14474
           * Executes the expression on the current scope at a later point in time.                                    // 14475
           *                                                                                                           // 14476
           * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                   // 14477
           * that:                                                                                                     // 14478
           *                                                                                                           // 14479
           *   - it will execute after the function that scheduled the evaluation (preferably before DOM               // 14480
           *     rendering).                                                                                           // 14481
           *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                // 14482
           *     `expression` execution.                                                                               // 14483
           *                                                                                                           // 14484
           * Any exceptions from the execution of the expression are forwarded to the                                  // 14485
           * {@link ng.$exceptionHandler $exceptionHandler} service.                                                   // 14486
           *                                                                                                           // 14487
           * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                  // 14488
           * will be scheduled. However, it is encouraged to always call code that changes the model                   // 14489
           * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                              // 14490
           *                                                                                                           // 14491
           * @param {(string|function())=} expression An angular expression to be executed.                            // 14492
           *                                                                                                           // 14493
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                 // 14494
           *    - `function(scope)`: execute the function with the current `scope` parameter.                          // 14495
           *                                                                                                           // 14496
           * @param {(object)=} locals Local variables object, useful for overriding values in scope.                  // 14497
           */                                                                                                          // 14498
          $evalAsync: function(expr, locals) {                                                                         // 14499
            // if we are outside of an $digest loop and this is the first time we are scheduling async                 // 14500
            // task also schedule async auto-flush                                                                     // 14501
            if (!$rootScope.$$phase && !asyncQueue.length) {                                                           // 14502
              $browser.defer(function() {                                                                              // 14503
                if (asyncQueue.length) {                                                                               // 14504
                  $rootScope.$digest();                                                                                // 14505
                }                                                                                                      // 14506
              });                                                                                                      // 14507
            }                                                                                                          // 14508
                                                                                                                       // 14509
            asyncQueue.push({scope: this, expression: expr, locals: locals});                                          // 14510
          },                                                                                                           // 14511
                                                                                                                       // 14512
          $$postDigest: function(fn) {                                                                                 // 14513
            postDigestQueue.push(fn);                                                                                  // 14514
          },                                                                                                           // 14515
                                                                                                                       // 14516
          /**                                                                                                          // 14517
           * @ngdoc method                                                                                             // 14518
           * @name $rootScope.Scope#$apply                                                                             // 14519
           * @kind function                                                                                            // 14520
           *                                                                                                           // 14521
           * @description                                                                                              // 14522
           * `$apply()` is used to execute an expression in angular from outside of the angular                        // 14523
           * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).               // 14524
           * Because we are calling into the angular framework we need to perform proper scope life                    // 14525
           * cycle of {@link ng.$exceptionHandler exception handling},                                                 // 14526
           * {@link ng.$rootScope.Scope#$digest executing watches}.                                                    // 14527
           *                                                                                                           // 14528
           * ## Life cycle                                                                                             // 14529
           *                                                                                                           // 14530
           * # Pseudo-Code of `$apply()`                                                                               // 14531
           * ```js                                                                                                     // 14532
           function $apply(expr) {                                                                                     // 14533
             try {                                                                                                     // 14534
               return $eval(expr);                                                                                     // 14535
             } catch (e) {                                                                                             // 14536
               $exceptionHandler(e);                                                                                   // 14537
             } finally {                                                                                               // 14538
               $root.$digest();                                                                                        // 14539
             }                                                                                                         // 14540
           }                                                                                                           // 14541
           * ```                                                                                                       // 14542
           *                                                                                                           // 14543
           *                                                                                                           // 14544
           * Scope's `$apply()` method transitions through the following stages:                                       // 14545
           *                                                                                                           // 14546
           * 1. The {@link guide/expression expression} is executed using the                                          // 14547
           *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                      // 14548
           * 2. Any exceptions from the execution of the expression are forwarded to the                               // 14549
           *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                // 14550
           * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                 // 14551
           *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                // 14552
           *                                                                                                           // 14553
           *                                                                                                           // 14554
           * @param {(string|function())=} exp An angular expression to be executed.                                   // 14555
           *                                                                                                           // 14556
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                 // 14557
           *    - `function(scope)`: execute the function with current `scope` parameter.                              // 14558
           *                                                                                                           // 14559
           * @returns {*} The result of evaluating the expression.                                                     // 14560
           */                                                                                                          // 14561
          $apply: function(expr) {                                                                                     // 14562
            try {                                                                                                      // 14563
              beginPhase('$apply');                                                                                    // 14564
              return this.$eval(expr);                                                                                 // 14565
            } catch (e) {                                                                                              // 14566
              $exceptionHandler(e);                                                                                    // 14567
            } finally {                                                                                                // 14568
              clearPhase();                                                                                            // 14569
              try {                                                                                                    // 14570
                $rootScope.$digest();                                                                                  // 14571
              } catch (e) {                                                                                            // 14572
                $exceptionHandler(e);                                                                                  // 14573
                throw e;                                                                                               // 14574
              }                                                                                                        // 14575
            }                                                                                                          // 14576
          },                                                                                                           // 14577
                                                                                                                       // 14578
          /**                                                                                                          // 14579
           * @ngdoc method                                                                                             // 14580
           * @name $rootScope.Scope#$applyAsync                                                                        // 14581
           * @kind function                                                                                            // 14582
           *                                                                                                           // 14583
           * @description                                                                                              // 14584
           * Schedule the invocation of $apply to occur at a later time. The actual time difference                    // 14585
           * varies across browsers, but is typically around ~10 milliseconds.                                         // 14586
           *                                                                                                           // 14587
           * This can be used to queue up multiple expressions which need to be evaluated in the same                  // 14588
           * digest.                                                                                                   // 14589
           *                                                                                                           // 14590
           * @param {(string|function())=} exp An angular expression to be executed.                                   // 14591
           *                                                                                                           // 14592
           *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                 // 14593
           *    - `function(scope)`: execute the function with current `scope` parameter.                              // 14594
           */                                                                                                          // 14595
          $applyAsync: function(expr) {                                                                                // 14596
            var scope = this;                                                                                          // 14597
            expr && applyAsyncQueue.push($applyAsyncExpression);                                                       // 14598
            scheduleApplyAsync();                                                                                      // 14599
                                                                                                                       // 14600
            function $applyAsyncExpression() {                                                                         // 14601
              scope.$eval(expr);                                                                                       // 14602
            }                                                                                                          // 14603
          },                                                                                                           // 14604
                                                                                                                       // 14605
          /**                                                                                                          // 14606
           * @ngdoc method                                                                                             // 14607
           * @name $rootScope.Scope#$on                                                                                // 14608
           * @kind function                                                                                            // 14609
           *                                                                                                           // 14610
           * @description                                                                                              // 14611
           * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                        // 14612
           * discussion of event life cycle.                                                                           // 14613
           *                                                                                                           // 14614
           * The event listener function format is: `function(event, args...)`. The `event` object                     // 14615
           * passed into the listener has the following attributes:                                                    // 14616
           *                                                                                                           // 14617
           *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                             // 14618
           *     `$broadcast`-ed.                                                                                      // 14619
           *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                  // 14620
           *     event propagates through the scope hierarchy, this property is set to null.                           // 14621
           *   - `name` - `{string}`: name of the event.                                                               // 14622
           *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                     // 14623
           *     further event propagation (available only for events that were `$emit`-ed).                           // 14624
           *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                // 14625
           *     to true.                                                                                              // 14626
           *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                // 14627
           *                                                                                                           // 14628
           * @param {string} name Event name to listen on.                                                             // 14629
           * @param {function(event, ...args)} listener Function to call when the event is emitted.                    // 14630
           * @returns {function()} Returns a deregistration function for this listener.                                // 14631
           */                                                                                                          // 14632
          $on: function(name, listener) {                                                                              // 14633
            var namedListeners = this.$$listeners[name];                                                               // 14634
            if (!namedListeners) {                                                                                     // 14635
              this.$$listeners[name] = namedListeners = [];                                                            // 14636
            }                                                                                                          // 14637
            namedListeners.push(listener);                                                                             // 14638
                                                                                                                       // 14639
            var current = this;                                                                                        // 14640
            do {                                                                                                       // 14641
              if (!current.$$listenerCount[name]) {                                                                    // 14642
                current.$$listenerCount[name] = 0;                                                                     // 14643
              }                                                                                                        // 14644
              current.$$listenerCount[name]++;                                                                         // 14645
            } while ((current = current.$parent));                                                                     // 14646
                                                                                                                       // 14647
            var self = this;                                                                                           // 14648
            return function() {                                                                                        // 14649
              var indexOfListener = namedListeners.indexOf(listener);                                                  // 14650
              if (indexOfListener !== -1) {                                                                            // 14651
                namedListeners[indexOfListener] = null;                                                                // 14652
                decrementListenerCount(self, 1, name);                                                                 // 14653
              }                                                                                                        // 14654
            };                                                                                                         // 14655
          },                                                                                                           // 14656
                                                                                                                       // 14657
                                                                                                                       // 14658
          /**                                                                                                          // 14659
           * @ngdoc method                                                                                             // 14660
           * @name $rootScope.Scope#$emit                                                                              // 14661
           * @kind function                                                                                            // 14662
           *                                                                                                           // 14663
           * @description                                                                                              // 14664
           * Dispatches an event `name` upwards through the scope hierarchy notifying the                              // 14665
           * registered {@link ng.$rootScope.Scope#$on} listeners.                                                     // 14666
           *                                                                                                           // 14667
           * The event life cycle starts at the scope on which `$emit` was called. All                                 // 14668
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                    // 14669
           * notified. Afterwards, the event traverses upwards toward the root scope and calls all                     // 14670
           * registered listeners along the way. The event will stop propagating if one of the listeners               // 14671
           * cancels it.                                                                                               // 14672
           *                                                                                                           // 14673
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                   // 14674
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                          // 14675
           *                                                                                                           // 14676
           * @param {string} name Event name to emit.                                                                  // 14677
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.          // 14678
           * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                      // 14679
           */                                                                                                          // 14680
          $emit: function(name, args) {                                                                                // 14681
            var empty = [],                                                                                            // 14682
              namedListeners,                                                                                          // 14683
              scope = this,                                                                                            // 14684
              stopPropagation = false,                                                                                 // 14685
              event = {                                                                                                // 14686
                name: name,                                                                                            // 14687
                targetScope: scope,                                                                                    // 14688
                stopPropagation: function() {stopPropagation = true;},                                                 // 14689
                preventDefault: function() {                                                                           // 14690
                  event.defaultPrevented = true;                                                                       // 14691
                },                                                                                                     // 14692
                defaultPrevented: false                                                                                // 14693
              },                                                                                                       // 14694
              listenerArgs = concat([event], arguments, 1),                                                            // 14695
              i, length;                                                                                               // 14696
                                                                                                                       // 14697
            do {                                                                                                       // 14698
              namedListeners = scope.$$listeners[name] || empty;                                                       // 14699
              event.currentScope = scope;                                                                              // 14700
              for (i = 0, length = namedListeners.length; i < length; i++) {                                           // 14701
                                                                                                                       // 14702
                // if listeners were deregistered, defragment the array                                                // 14703
                if (!namedListeners[i]) {                                                                              // 14704
                  namedListeners.splice(i, 1);                                                                         // 14705
                  i--;                                                                                                 // 14706
                  length--;                                                                                            // 14707
                  continue;                                                                                            // 14708
                }                                                                                                      // 14709
                try {                                                                                                  // 14710
                  //allow all listeners attached to the current scope to run                                           // 14711
                  namedListeners[i].apply(null, listenerArgs);                                                         // 14712
                } catch (e) {                                                                                          // 14713
                  $exceptionHandler(e);                                                                                // 14714
                }                                                                                                      // 14715
              }                                                                                                        // 14716
              //if any listener on the current scope stops propagation, prevent bubbling                               // 14717
              if (stopPropagation) {                                                                                   // 14718
                event.currentScope = null;                                                                             // 14719
                return event;                                                                                          // 14720
              }                                                                                                        // 14721
              //traverse upwards                                                                                       // 14722
              scope = scope.$parent;                                                                                   // 14723
            } while (scope);                                                                                           // 14724
                                                                                                                       // 14725
            event.currentScope = null;                                                                                 // 14726
                                                                                                                       // 14727
            return event;                                                                                              // 14728
          },                                                                                                           // 14729
                                                                                                                       // 14730
                                                                                                                       // 14731
          /**                                                                                                          // 14732
           * @ngdoc method                                                                                             // 14733
           * @name $rootScope.Scope#$broadcast                                                                         // 14734
           * @kind function                                                                                            // 14735
           *                                                                                                           // 14736
           * @description                                                                                              // 14737
           * Dispatches an event `name` downwards to all child scopes (and their children) notifying the               // 14738
           * registered {@link ng.$rootScope.Scope#$on} listeners.                                                     // 14739
           *                                                                                                           // 14740
           * The event life cycle starts at the scope on which `$broadcast` was called. All                            // 14741
           * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                    // 14742
           * notified. Afterwards, the event propagates to all direct and indirect scopes of the current               // 14743
           * scope and calls all registered listeners along the way. The event cannot be canceled.                     // 14744
           *                                                                                                           // 14745
           * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                   // 14746
           * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                          // 14747
           *                                                                                                           // 14748
           * @param {string} name Event name to broadcast.                                                             // 14749
           * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.          // 14750
           * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                        // 14751
           */                                                                                                          // 14752
          $broadcast: function(name, args) {                                                                           // 14753
            var target = this,                                                                                         // 14754
              current = target,                                                                                        // 14755
              next = target,                                                                                           // 14756
              event = {                                                                                                // 14757
                name: name,                                                                                            // 14758
                targetScope: target,                                                                                   // 14759
                preventDefault: function() {                                                                           // 14760
                  event.defaultPrevented = true;                                                                       // 14761
                },                                                                                                     // 14762
                defaultPrevented: false                                                                                // 14763
              };                                                                                                       // 14764
                                                                                                                       // 14765
            if (!target.$$listenerCount[name]) return event;                                                           // 14766
                                                                                                                       // 14767
            var listenerArgs = concat([event], arguments, 1),                                                          // 14768
              listeners, i, length;                                                                                    // 14769
                                                                                                                       // 14770
            //down while you can, then up and next sibling or up and next sibling until back at root                   // 14771
            while ((current = next)) {                                                                                 // 14772
              event.currentScope = current;                                                                            // 14773
              listeners = current.$$listeners[name] || [];                                                             // 14774
              for (i = 0, length = listeners.length; i < length; i++) {                                                // 14775
                // if listeners were deregistered, defragment the array                                                // 14776
                if (!listeners[i]) {                                                                                   // 14777
                  listeners.splice(i, 1);                                                                              // 14778
                  i--;                                                                                                 // 14779
                  length--;                                                                                            // 14780
                  continue;                                                                                            // 14781
                }                                                                                                      // 14782
                                                                                                                       // 14783
                try {                                                                                                  // 14784
                  listeners[i].apply(null, listenerArgs);                                                              // 14785
                } catch (e) {                                                                                          // 14786
                  $exceptionHandler(e);                                                                                // 14787
                }                                                                                                      // 14788
              }                                                                                                        // 14789
                                                                                                                       // 14790
              // Insanity Warning: scope depth-first traversal                                                         // 14791
              // yes, this code is a bit crazy, but it works and we have tests to prove it!                            // 14792
              // this piece should be kept in sync with the traversal in $digest                                       // 14793
              // (though it differs due to having the extra check for $$listenerCount)                                 // 14794
              if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                  // 14795
                (current !== target && current.$$nextSibling)))) {                                                     // 14796
                while (current !== target && !(next = current.$$nextSibling)) {                                        // 14797
                  current = current.$parent;                                                                           // 14798
                }                                                                                                      // 14799
              }                                                                                                        // 14800
            }                                                                                                          // 14801
                                                                                                                       // 14802
            event.currentScope = null;                                                                                 // 14803
            return event;                                                                                              // 14804
          }                                                                                                            // 14805
        };                                                                                                             // 14806
                                                                                                                       // 14807
        var $rootScope = new Scope();                                                                                  // 14808
                                                                                                                       // 14809
        //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                           // 14810
        var asyncQueue = $rootScope.$$asyncQueue = [];                                                                 // 14811
        var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                       // 14812
        var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                       // 14813
                                                                                                                       // 14814
        return $rootScope;                                                                                             // 14815
                                                                                                                       // 14816
                                                                                                                       // 14817
        function beginPhase(phase) {                                                                                   // 14818
          if ($rootScope.$$phase) {                                                                                    // 14819
            throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                           // 14820
          }                                                                                                            // 14821
                                                                                                                       // 14822
          $rootScope.$$phase = phase;                                                                                  // 14823
        }                                                                                                              // 14824
                                                                                                                       // 14825
        function clearPhase() {                                                                                        // 14826
          $rootScope.$$phase = null;                                                                                   // 14827
        }                                                                                                              // 14828
                                                                                                                       // 14829
                                                                                                                       // 14830
        function decrementListenerCount(current, count, name) {                                                        // 14831
          do {                                                                                                         // 14832
            current.$$listenerCount[name] -= count;                                                                    // 14833
                                                                                                                       // 14834
            if (current.$$listenerCount[name] === 0) {                                                                 // 14835
              delete current.$$listenerCount[name];                                                                    // 14836
            }                                                                                                          // 14837
          } while ((current = current.$parent));                                                                       // 14838
        }                                                                                                              // 14839
                                                                                                                       // 14840
        /**                                                                                                            // 14841
         * function used as an initial value for watchers.                                                             // 14842
         * because it's unique we can easily tell it apart from other values                                           // 14843
         */                                                                                                            // 14844
        function initWatchVal() {}                                                                                     // 14845
                                                                                                                       // 14846
        function flushApplyAsync() {                                                                                   // 14847
          while (applyAsyncQueue.length) {                                                                             // 14848
            try {                                                                                                      // 14849
              applyAsyncQueue.shift()();                                                                               // 14850
            } catch (e) {                                                                                              // 14851
              $exceptionHandler(e);                                                                                    // 14852
            }                                                                                                          // 14853
          }                                                                                                            // 14854
          applyAsyncId = null;                                                                                         // 14855
        }                                                                                                              // 14856
                                                                                                                       // 14857
        function scheduleApplyAsync() {                                                                                // 14858
          if (applyAsyncId === null) {                                                                                 // 14859
            applyAsyncId = $browser.defer(function() {                                                                 // 14860
              $rootScope.$apply(flushApplyAsync);                                                                      // 14861
            });                                                                                                        // 14862
          }                                                                                                            // 14863
        }                                                                                                              // 14864
      }];                                                                                                              // 14865
  }                                                                                                                    // 14866
                                                                                                                       // 14867
  /**                                                                                                                  // 14868
   * @description                                                                                                      // 14869
   * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                            // 14870
   */                                                                                                                  // 14871
  function $$SanitizeUriProvider() {                                                                                   // 14872
    var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,                                              // 14873
      imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;                                      // 14874
                                                                                                                       // 14875
    /**                                                                                                                // 14876
     * @description                                                                                                    // 14877
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe                     // 14878
     * urls during a[href] sanitization.                                                                               // 14879
     *                                                                                                                 // 14880
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.                             // 14881
     *                                                                                                                 // 14882
     * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                    // 14883
     * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                        // 14884
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,                   // 14885
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                  // 14886
     *                                                                                                                 // 14887
     * @param {RegExp=} regexp New regexp to whitelist urls with.                                                      // 14888
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                        // 14889
     *    chaining otherwise.                                                                                          // 14890
     */                                                                                                                // 14891
    this.aHrefSanitizationWhitelist = function(regexp) {                                                               // 14892
      if (isDefined(regexp)) {                                                                                         // 14893
        aHrefSanitizationWhitelist = regexp;                                                                           // 14894
        return this;                                                                                                   // 14895
      }                                                                                                                // 14896
      return aHrefSanitizationWhitelist;                                                                               // 14897
    };                                                                                                                 // 14898
                                                                                                                       // 14899
                                                                                                                       // 14900
    /**                                                                                                                // 14901
     * @description                                                                                                    // 14902
     * Retrieves or overrides the default regular expression that is used for whitelisting of safe                     // 14903
     * urls during img[src] sanitization.                                                                              // 14904
     *                                                                                                                 // 14905
     * The sanitization is a security measure aimed at prevent XSS attacks via html links.                             // 14906
     *                                                                                                                 // 14907
     * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                   // 14908
     * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                       // 14909
     * regular expression. If a match is found, the original url is written into the dom. Otherwise,                   // 14910
     * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                  // 14911
     *                                                                                                                 // 14912
     * @param {RegExp=} regexp New regexp to whitelist urls with.                                                      // 14913
     * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                        // 14914
     *    chaining otherwise.                                                                                          // 14915
     */                                                                                                                // 14916
    this.imgSrcSanitizationWhitelist = function(regexp) {                                                              // 14917
      if (isDefined(regexp)) {                                                                                         // 14918
        imgSrcSanitizationWhitelist = regexp;                                                                          // 14919
        return this;                                                                                                   // 14920
      }                                                                                                                // 14921
      return imgSrcSanitizationWhitelist;                                                                              // 14922
    };                                                                                                                 // 14923
                                                                                                                       // 14924
    this.$get = function() {                                                                                           // 14925
      return function sanitizeUri(uri, isImage) {                                                                      // 14926
        var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                // 14927
        var normalizedVal;                                                                                             // 14928
        normalizedVal = urlResolve(uri).href;                                                                          // 14929
        if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                     // 14930
          return 'unsafe:' + normalizedVal;                                                                            // 14931
        }                                                                                                              // 14932
        return uri;                                                                                                    // 14933
      };                                                                                                               // 14934
    };                                                                                                                 // 14935
  }                                                                                                                    // 14936
                                                                                                                       // 14937
  /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                         // 14938
   *     Any commits to this file should be reviewed with security in mind.  *                                         // 14939
   *   Changes to this file can potentially create security vulnerabilities. *                                         // 14940
   *          An approval from 2 Core members with history of modifying      *                                         // 14941
   *                         this file is required.                          *                                         // 14942
   *                                                                         *                                         // 14943
   *  Does the change somehow allow for arbitrary javascript to be executed? *                                         // 14944
   *    Or allows for someone to change the prototype of built-in objects?   *                                         // 14945
   *     Or gives undesired access to variables likes document or window?    *                                         // 14946
   * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                        // 14947
                                                                                                                       // 14948
  var $sceMinErr = minErr('$sce');                                                                                     // 14949
                                                                                                                       // 14950
  var SCE_CONTEXTS = {                                                                                                 // 14951
    HTML: 'html',                                                                                                      // 14952
    CSS: 'css',                                                                                                        // 14953
    URL: 'url',                                                                                                        // 14954
    // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                 // 14955
    // url.  (e.g. ng-include, script src, templateUrl)                                                                // 14956
    RESOURCE_URL: 'resourceUrl',                                                                                       // 14957
    JS: 'js'                                                                                                           // 14958
  };                                                                                                                   // 14959
                                                                                                                       // 14960
// Helper functions follow.                                                                                            // 14961
                                                                                                                       // 14962
  function adjustMatcher(matcher) {                                                                                    // 14963
    if (matcher === 'self') {                                                                                          // 14964
      return matcher;                                                                                                  // 14965
    } else if (isString(matcher)) {                                                                                    // 14966
      // Strings match exactly except for 2 wildcards - '*' and '**'.                                                  // 14967
      // '*' matches any character except those from the set ':/.?&'.                                                  // 14968
      // '**' matches any character (like .* in a RegExp).                                                             // 14969
      // More than 2 *'s raises an error as it's ill defined.                                                          // 14970
      if (matcher.indexOf('***') > -1) {                                                                               // 14971
        throw $sceMinErr('iwcard',                                                                                     // 14972
          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 14973
      }                                                                                                                // 14974
      matcher = escapeForRegexp(matcher).                                                                              // 14975
        replace('\\*\\*', '.*').                                                                                       // 14976
        replace('\\*', '[^:/.?&;]*');                                                                                  // 14977
      return new RegExp('^' + matcher + '$');                                                                          // 14978
    } else if (isRegExp(matcher)) {                                                                                    // 14979
      // The only other type of matcher allowed is a Regexp.                                                           // 14980
      // Match entire URL / disallow partial matches.                                                                  // 14981
      // Flags are reset (i.e. no global, ignoreCase or multiline)                                                     // 14982
      return new RegExp('^' + matcher.source + '$');                                                                   // 14983
    } else {                                                                                                           // 14984
      throw $sceMinErr('imatcher',                                                                                     // 14985
        'Matchers may only be "self", string patterns or RegExp objects');                                             // 14986
    }                                                                                                                  // 14987
  }                                                                                                                    // 14988
                                                                                                                       // 14989
                                                                                                                       // 14990
  function adjustMatchers(matchers) {                                                                                  // 14991
    var adjustedMatchers = [];                                                                                         // 14992
    if (isDefined(matchers)) {                                                                                         // 14993
      forEach(matchers, function(matcher) {                                                                            // 14994
        adjustedMatchers.push(adjustMatcher(matcher));                                                                 // 14995
      });                                                                                                              // 14996
    }                                                                                                                  // 14997
    return adjustedMatchers;                                                                                           // 14998
  }                                                                                                                    // 14999
                                                                                                                       // 15000
                                                                                                                       // 15001
  /**                                                                                                                  // 15002
   * @ngdoc service                                                                                                    // 15003
   * @name $sceDelegate                                                                                                // 15004
   * @kind function                                                                                                    // 15005
   *                                                                                                                   // 15006
   * @description                                                                                                      // 15007
   *                                                                                                                   // 15008
   * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                   // 15009
 * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 15010
   *                                                                                                                   // 15011
   * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                    // 15012
   * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                   // 15013
   * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                      // 15014
   * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                       // 15015
   * work because `$sce` delegates to `$sceDelegate` for these operations.                                             // 15016
   *                                                                                                                   // 15017
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                             // 15018
   *                                                                                                                   // 15019
   * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                    // 15020
   * can override it completely to change the behavior of `$sce`, the common case would                                // 15021
   * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                   // 15022
   * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                 // 15023
   * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                             // 15024
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 15025
    * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                          // 15026
   */                                                                                                                  // 15027
                                                                                                                       // 15028
  /**                                                                                                                  // 15029
   * @ngdoc provider                                                                                                   // 15030
   * @name $sceDelegateProvider                                                                                        // 15031
   * @description                                                                                                      // 15032
   *                                                                                                                   // 15033
   * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                     // 15034
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 15035
   * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                         // 15036
    * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                      // 15037
   * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                    // 15038
   *                                                                                                                   // 15039
   * For the general details about this service in Angular, read the main page for {@link ng.$sce                      // 15040
 * Strict Contextual Escaping (SCE)}.                                                                                  // 15041
   *                                                                                                                   // 15042
   * **Example**:  Consider the following case. <a name="example"></a>                                                 // 15043
   *                                                                                                                   // 15044
   * - your app is hosted at url `http://myapp.example.com/`                                                           // 15045
   * - but some of your templates are hosted on other domains you control such as                                      // 15046
   *   `http://srv01.assets.example.com/`,ֲ  `http://srv02.assets.example.com/`, etc.                                  // 15047
   * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                      // 15048
   *                                                                                                                   // 15049
   * Here is what a secure configuration for this scenario might look like:                                            // 15050
   *                                                                                                                   // 15051
   * ```                                                                                                               // 15052
   *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                              // 15053
 *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 15054
 *      // Allow same origin resource loads.                                                                           // 15055
 *      'self',                                                                                                        // 15056
 *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 15057
 *      'http://srv*.assets.example.com/**'                                                                            // 15058
 *    ]);                                                                                                              // 15059
 *                                                                                                                     // 15060
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 15061
 *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 15062
 *      'http://myapp.example.com/clickThru**'                                                                         // 15063
 *    ]);                                                                                                              // 15064
 *  });                                                                                                                // 15065
   * ```                                                                                                               // 15066
   */                                                                                                                  // 15067
                                                                                                                       // 15068
  function $SceDelegateProvider() {                                                                                    // 15069
    this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                  // 15070
                                                                                                                       // 15071
    // Resource URLs can also be trusted by policy.                                                                    // 15072
    var resourceUrlWhitelist = ['self'],                                                                               // 15073
      resourceUrlBlacklist = [];                                                                                       // 15074
                                                                                                                       // 15075
    /**                                                                                                                // 15076
     * @ngdoc method                                                                                                   // 15077
     * @name $sceDelegateProvider#resourceUrlWhitelist                                                                 // 15078
     * @kind function                                                                                                  // 15079
     *                                                                                                                 // 15080
     * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                       // 15081
     *     provided.  This must be an array or null.  A snapshot of this array is used so further                      // 15082
     *     changes to the array are ignored.                                                                           // 15083
     *                                                                                                                 // 15084
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                      // 15085
     *     allowed in this array.                                                                                      // 15086
     *                                                                                                                 // 15087
     *     Note: **an empty whitelist array will block all URLs**!                                                     // 15088
     *                                                                                                                 // 15089
     * @return {Array} the currently set whitelist array.                                                              // 15090
     *                                                                                                                 // 15091
     * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                     // 15092
     * same origin resource requests.                                                                                  // 15093
     *                                                                                                                 // 15094
     * @description                                                                                                    // 15095
     * Sets/Gets the whitelist of trusted resource URLs.                                                               // 15096
     */                                                                                                                // 15097
    this.resourceUrlWhitelist = function(value) {                                                                      // 15098
      if (arguments.length) {                                                                                          // 15099
        resourceUrlWhitelist = adjustMatchers(value);                                                                  // 15100
      }                                                                                                                // 15101
      return resourceUrlWhitelist;                                                                                     // 15102
    };                                                                                                                 // 15103
                                                                                                                       // 15104
    /**                                                                                                                // 15105
     * @ngdoc method                                                                                                   // 15106
     * @name $sceDelegateProvider#resourceUrlBlacklist                                                                 // 15107
     * @kind function                                                                                                  // 15108
     *                                                                                                                 // 15109
     * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                       // 15110
     *     provided.  This must be an array or null.  A snapshot of this array is used so further                      // 15111
     *     changes to the array are ignored.                                                                           // 15112
     *                                                                                                                 // 15113
     *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                      // 15114
     *     allowed in this array.                                                                                      // 15115
     *                                                                                                                 // 15116
     *     The typical usage for the blacklist is to **block                                                           // 15117
     *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                 // 15118
     *     these would otherwise be trusted but actually return content from the redirected domain.                    // 15119
     *                                                                                                                 // 15120
     *     Finally, **the blacklist overrides the whitelist** and has the final say.                                   // 15121
     *                                                                                                                 // 15122
     * @return {Array} the currently set blacklist array.                                                              // 15123
     *                                                                                                                 // 15124
     * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                  // 15125
     * is no blacklist.)                                                                                               // 15126
     *                                                                                                                 // 15127
     * @description                                                                                                    // 15128
     * Sets/Gets the blacklist of trusted resource URLs.                                                               // 15129
     */                                                                                                                // 15130
                                                                                                                       // 15131
    this.resourceUrlBlacklist = function(value) {                                                                      // 15132
      if (arguments.length) {                                                                                          // 15133
        resourceUrlBlacklist = adjustMatchers(value);                                                                  // 15134
      }                                                                                                                // 15135
      return resourceUrlBlacklist;                                                                                     // 15136
    };                                                                                                                 // 15137
                                                                                                                       // 15138
    this.$get = ['$injector', function($injector) {                                                                    // 15139
                                                                                                                       // 15140
      var htmlSanitizer = function htmlSanitizer(html) {                                                               // 15141
        throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                            // 15142
      };                                                                                                               // 15143
                                                                                                                       // 15144
      if ($injector.has('$sanitize')) {                                                                                // 15145
        htmlSanitizer = $injector.get('$sanitize');                                                                    // 15146
      }                                                                                                                // 15147
                                                                                                                       // 15148
                                                                                                                       // 15149
      function matchUrl(matcher, parsedUrl) {                                                                          // 15150
        if (matcher === 'self') {                                                                                      // 15151
          return urlIsSameOrigin(parsedUrl);                                                                           // 15152
        } else {                                                                                                       // 15153
          // definitely a regex.  See adjustMatchers()                                                                 // 15154
          return !!matcher.exec(parsedUrl.href);                                                                       // 15155
        }                                                                                                              // 15156
      }                                                                                                                // 15157
                                                                                                                       // 15158
      function isResourceUrlAllowedByPolicy(url) {                                                                     // 15159
        var parsedUrl = urlResolve(url.toString());                                                                    // 15160
        var i, n, allowed = false;                                                                                     // 15161
        // Ensure that at least one item from the whitelist allows this url.                                           // 15162
        for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                     // 15163
          if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                          // 15164
            allowed = true;                                                                                            // 15165
            break;                                                                                                     // 15166
          }                                                                                                            // 15167
        }                                                                                                              // 15168
        if (allowed) {                                                                                                 // 15169
          // Ensure that no item from the blacklist blocked this url.                                                  // 15170
          for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                   // 15171
            if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                        // 15172
              allowed = false;                                                                                         // 15173
              break;                                                                                                   // 15174
            }                                                                                                          // 15175
          }                                                                                                            // 15176
        }                                                                                                              // 15177
        return allowed;                                                                                                // 15178
      }                                                                                                                // 15179
                                                                                                                       // 15180
      function generateHolderType(Base) {                                                                              // 15181
        var holderType = function TrustedValueHolderType(trustedValue) {                                               // 15182
          this.$$unwrapTrustedValue = function() {                                                                     // 15183
            return trustedValue;                                                                                       // 15184
          };                                                                                                           // 15185
        };                                                                                                             // 15186
        if (Base) {                                                                                                    // 15187
          holderType.prototype = new Base();                                                                           // 15188
        }                                                                                                              // 15189
        holderType.prototype.valueOf = function sceValueOf() {                                                         // 15190
          return this.$$unwrapTrustedValue();                                                                          // 15191
        };                                                                                                             // 15192
        holderType.prototype.toString = function sceToString() {                                                       // 15193
          return this.$$unwrapTrustedValue().toString();                                                               // 15194
        };                                                                                                             // 15195
        return holderType;                                                                                             // 15196
      }                                                                                                                // 15197
                                                                                                                       // 15198
      var trustedValueHolderBase = generateHolderType(),                                                               // 15199
        byType = {};                                                                                                   // 15200
                                                                                                                       // 15201
      byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                          // 15202
      byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                           // 15203
      byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                           // 15204
      byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                            // 15205
      byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                // 15206
                                                                                                                       // 15207
      /**                                                                                                              // 15208
       * @ngdoc method                                                                                                 // 15209
       * @name $sceDelegate#trustAs                                                                                    // 15210
       *                                                                                                               // 15211
       * @description                                                                                                  // 15212
       * Returns an object that is trusted by angular for use in specified strict                                      // 15213
       * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                       // 15214
       * attribute interpolation, any dom event binding attribute interpolation                                        // 15215
       * such as for onclick,  etc.) that uses the provided value.                                                     // 15216
       * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                             // 15217
       *                                                                                                               // 15218
       * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                      // 15219
       *   resourceUrl, html, js and css.                                                                              // 15220
       * @param {*} value The value that that should be considered trusted/safe.                                       // 15221
       * @returns {*} A value that can be used to stand in for the provided `value` in places                          // 15222
       * where Angular expects a $sce.trustAs() return value.                                                          // 15223
       */                                                                                                              // 15224
      function trustAs(type, trustedValue) {                                                                           // 15225
        var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                         // 15226
        if (!Constructor) {                                                                                            // 15227
          throw $sceMinErr('icontext',                                                                                 // 15228
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 15229
            type, trustedValue);                                                                                       // 15230
        }                                                                                                              // 15231
        if (trustedValue === null || trustedValue === undefined || trustedValue === '') {                              // 15232
          return trustedValue;                                                                                         // 15233
        }                                                                                                              // 15234
        // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                  // 15235
        // mutable objects, we ensure here that the value passed in is actually a string.                              // 15236
        if (typeof trustedValue !== 'string') {                                                                        // 15237
          throw $sceMinErr('itype',                                                                                    // 15238
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 15239
            type);                                                                                                     // 15240
        }                                                                                                              // 15241
        return new Constructor(trustedValue);                                                                          // 15242
      }                                                                                                                // 15243
                                                                                                                       // 15244
      /**                                                                                                              // 15245
       * @ngdoc method                                                                                                 // 15246
       * @name $sceDelegate#valueOf                                                                                    // 15247
       *                                                                                                               // 15248
       * @description                                                                                                  // 15249
       * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                   // 15250
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 15251
        * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                             // 15252
       *                                                                                                               // 15253
       * If the passed parameter is not a value that had been returned by {@link                                       // 15254
        * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                           // 15255
       *                                                                                                               // 15256
       * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                 // 15257
       *      call or anything else.                                                                                   // 15258
       * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                       // 15259
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 15260
       *     `value` unchanged.                                                                                        // 15261
       */                                                                                                              // 15262
      function valueOf(maybeTrusted) {                                                                                 // 15263
        if (maybeTrusted instanceof trustedValueHolderBase) {                                                          // 15264
          return maybeTrusted.$$unwrapTrustedValue();                                                                  // 15265
        } else {                                                                                                       // 15266
          return maybeTrusted;                                                                                         // 15267
        }                                                                                                              // 15268
      }                                                                                                                // 15269
                                                                                                                       // 15270
      /**                                                                                                              // 15271
       * @ngdoc method                                                                                                 // 15272
       * @name $sceDelegate#getTrusted                                                                                 // 15273
       *                                                                                                               // 15274
       * @description                                                                                                  // 15275
       * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                         // 15276
       * returns the originally supplied value if the queried context type is a supertype of the                       // 15277
       * created type.  If this condition isn't satisfied, throws an exception.                                        // 15278
       *                                                                                                               // 15279
       * @param {string} type The kind of context in which this value is to be used.                                   // 15280
       * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                  // 15281
     *     `$sceDelegate.trustAs`} call.                                                                               // 15282
       * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                          // 15283
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 15284
       */                                                                                                              // 15285
      function getTrusted(type, maybeTrusted) {                                                                        // 15286
        if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {                              // 15287
          return maybeTrusted;                                                                                         // 15288
        }                                                                                                              // 15289
        var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                         // 15290
        if (constructor && maybeTrusted instanceof constructor) {                                                      // 15291
          return maybeTrusted.$$unwrapTrustedValue();                                                                  // 15292
        }                                                                                                              // 15293
        // If we get here, then we may only take one of two actions.                                                   // 15294
        // 1. sanitize the value for the requested type, or                                                            // 15295
        // 2. throw an exception.                                                                                      // 15296
        if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                      // 15297
          if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                            // 15298
            return maybeTrusted;                                                                                       // 15299
          } else {                                                                                                     // 15300
            throw $sceMinErr('insecurl',                                                                               // 15301
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 15302
              maybeTrusted.toString());                                                                                // 15303
          }                                                                                                            // 15304
        } else if (type === SCE_CONTEXTS.HTML) {                                                                       // 15305
          return htmlSanitizer(maybeTrusted);                                                                          // 15306
        }                                                                                                              // 15307
        throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                            // 15308
      }                                                                                                                // 15309
                                                                                                                       // 15310
      return { trustAs: trustAs,                                                                                       // 15311
        getTrusted: getTrusted,                                                                                        // 15312
        valueOf: valueOf };                                                                                            // 15313
    }];                                                                                                                // 15314
  }                                                                                                                    // 15315
                                                                                                                       // 15316
                                                                                                                       // 15317
  /**                                                                                                                  // 15318
   * @ngdoc provider                                                                                                   // 15319
   * @name $sceProvider                                                                                                // 15320
   * @description                                                                                                      // 15321
   *                                                                                                                   // 15322
   * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                        // 15323
   * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                   // 15324
   * -   override the default implementation with a custom delegate                                                    // 15325
   *                                                                                                                   // 15326
   * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                 // 15327
   */                                                                                                                  // 15328
                                                                                                                       // 15329
  /* jshint maxlen: false*/                                                                                            // 15330
                                                                                                                       // 15331
  /**                                                                                                                  // 15332
   * @ngdoc service                                                                                                    // 15333
   * @name $sce                                                                                                        // 15334
   * @kind function                                                                                                    // 15335
   *                                                                                                                   // 15336
   * @description                                                                                                      // 15337
   *                                                                                                                   // 15338
   * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                               // 15339
   *                                                                                                                   // 15340
   * # Strict Contextual Escaping                                                                                      // 15341
   *                                                                                                                   // 15342
   * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                        // 15343
   * contexts to result in a value that is marked as safe to use for that context.  One example of                     // 15344
   * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                     // 15345
   * to these contexts as privileged or SCE contexts.                                                                  // 15346
   *                                                                                                                   // 15347
   * As of version 1.2, Angular ships with SCE enabled by default.                                                     // 15348
   *                                                                                                                   // 15349
   * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow              // 15350
   * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                 // 15351
   * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                 // 15352
   * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                 // 15353
   * to the top of your HTML document.                                                                                 // 15354
   *                                                                                                                   // 15355
   * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                       // 15356
   * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                            // 15357
   *                                                                                                                   // 15358
   * Here's an example of a binding in a privileged context:                                                           // 15359
   *                                                                                                                   // 15360
   * ```                                                                                                               // 15361
   * <input ng-model="userHtml">                                                                                       // 15362
   * <div ng-bind-html="userHtml"></div>                                                                               // 15363
   * ```                                                                                                               // 15364
   *                                                                                                                   // 15365
   * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                               // 15366
   * disabled, this application allows the user to render arbitrary HTML into the DIV.                                 // 15367
   * In a more realistic example, one may be rendering user comments, blog articles, etc. via                          // 15368
   * bindings.  (HTML is just one example of a context where rendering user controlled input creates                   // 15369
   * security vulnerabilities.)                                                                                        // 15370
   *                                                                                                                   // 15371
   * For the case of HTML, you might use a library, either on the client side, or on the server side,                  // 15372
   * to sanitize unsafe HTML before binding to the value and rendering it in the document.                             // 15373
   *                                                                                                                   // 15374
   * How would you ensure that every place that used these types of bindings was bound to a value that                 // 15375
   * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                    // 15376
   * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                     // 15377
   * properties/fields and forgot to update the binding to the sanitized value?                                        // 15378
   *                                                                                                                   // 15379
   * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                  // 15380
   * determine that something explicitly says it's safe to use a value for binding in that                             // 15381
   * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                  // 15382
   * for those values that you can easily tell are safe - because they were received from your server,                 // 15383
   * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                       // 15384
   * allowing only the files in a specific directory to do this.  Ensuring that the internal API                       // 15385
   * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                 // 15386
   *                                                                                                                   // 15387
   * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                              // 15388
   * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                             // 15389
   * obtain values that will be accepted by SCE / privileged contexts.                                                 // 15390
   *                                                                                                                   // 15391
   *                                                                                                                   // 15392
   * ## How does it work?                                                                                              // 15393
   *                                                                                                                   // 15394
   * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                  // 15395
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 15396
    * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the               // 15397
   * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                            // 15398
   *                                                                                                                   // 15399
   * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                             // 15400
    * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                     // 15401
   * simplified):                                                                                                      // 15402
   *                                                                                                                   // 15403
   * ```                                                                                                               // 15404
   * var ngBindHtmlDirective = ['$sce', function($sce) {                                                               // 15405
 *   return function(scope, element, attr) {                                                                           // 15406
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 15407
 *       element.html(value || '');                                                                                    // 15408
 *     });                                                                                                             // 15409
 *   };                                                                                                                // 15410
 * }];                                                                                                                 // 15411
   * ```                                                                                                               // 15412
   *                                                                                                                   // 15413
   * ## Impact on loading templates                                                                                    // 15414
   *                                                                                                                   // 15415
   * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                         // 15416
   * `templateUrl`'s specified by {@link guide/directive directives}.                                                  // 15417
   *                                                                                                                   // 15418
   * By default, Angular only loads templates from the same domain and protocol as the application                     // 15419
   * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                           // 15420
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 15421
   * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                    // 15422
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 15423
   *                                                                                                                   // 15424
   * *Please note*:                                                                                                    // 15425
   * The browser's                                                                                                     // 15426
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)       // 15427
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                            // 15428
   * policy apply in addition to this and may further restrict whether the template is successfully                    // 15429
   * loaded.  This means that without the right CORS policy, loading templates from a different domain                 // 15430
   * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                     // 15431
   * browsers.                                                                                                         // 15432
   *                                                                                                                   // 15433
   * ## This feels like too much overhead                                                                              // 15434
   *                                                                                                                   // 15435
   * It's important to remember that SCE only applies to interpolation expressions.                                    // 15436
   *                                                                                                                   // 15437
   * If your expressions are constant literals, they're automatically trusted and you don't need to                    // 15438
   * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                   // 15439
   * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.                                             // 15440
   *                                                                                                                   // 15441
   * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                     // 15442
   * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                // 15443
   *                                                                                                                   // 15444
   * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                   // 15445
   * templates in `ng-include` from your application's domain without having to even know about SCE.                   // 15446
   * It blocks loading templates from other domains or loading templates over http from an https                       // 15447
   * served document.  You can change these by setting your own custom {@link                                          // 15448
    * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                              // 15449
    * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                 // 15450
   *                                                                                                                   // 15451
   * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                  // 15452
   * application that's secure and can be audited to verify that with much more ease than bolting                      // 15453
   * security onto an application later.                                                                               // 15454
   *                                                                                                                   // 15455
   * <a name="contexts"></a>                                                                                           // 15456
   * ## What trusted context types are supported?                                                                      // 15457
   *                                                                                                                   // 15458
   * | Context             | Notes          |                                                                          // 15459
   * |---------------------|----------------|                                                                          // 15460
   * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
   * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
   * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
   * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
   * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
   *                                                                                                                   // 15466
   * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
   *                                                                                                                   // 15468
   *  Each element in these arrays must be one of the following:                                                       // 15469
   *                                                                                                                   // 15470
   *  - **'self'**                                                                                                     // 15471
   *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                        // 15472
   *      domain** as the application document using the **same protocol**.                                            // 15473
   *  - **String** (except the special value `'self'`)                                                                 // 15474
   *    - The string is matched against the full *normalized / absolute URL* of the resource                           // 15475
   *      being tested (substring matches are not good enough.)                                                        // 15476
   *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                           // 15477
   *      match themselves.                                                                                            // 15478
   *    - `*`: matches zero or more occurrences of any character other than one of the following 6                     // 15479
   *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use                       // 15480
   *      in a whitelist.                                                                                              // 15481
   *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                // 15482
   *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.                      // 15483
   *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                      // 15484
   *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                           // 15485
   *      http://foo.example.com/templates/**).                                                                        // 15486
   *  - **RegExp** (*see caveat below*)                                                                                // 15487
   *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                 // 15488
   *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                             // 15489
   *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                 // 15490
   *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a                   // 15491
   *      small number of cases.  A `.` character in the regex used when matching the scheme or a                      // 15492
   *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                   // 15493
   *      is highly recommended to use the string patterns and only fall back to regular expressions                   // 15494
   *      if they as a last resort.                                                                                    // 15495
   *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                             // 15496
   *      matched against the **entire** *normalized / absolute URL* of the resource being tested                      // 15497
   *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                           // 15498
   *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                   // 15499
   *    - If you are generating your JavaScript from some other templating engine (not                                 // 15500
   *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                      // 15501
   *      remember to escape your regular expression (and be aware that you might need more than                       // 15502
   *      one level of escaping depending on your templating engine and the way you interpolated                       // 15503
   *      the value.)  Do make use of your platform's escaping mechanism as it might be good                           // 15504
   *      enough before coding your own.  e.g. Ruby has                                                                // 15505
   *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                         // 15506
   *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                // 15507
   *      Javascript lacks a similar built in function for escaping.  Take a look at Google                            // 15508
   *      Closure library's [goog.string.regExpEscape(s)](                                                             // 15509
   *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).           // 15510
   *                                                                                                                   // 15511
   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                        // 15512
   *                                                                                                                   // 15513
   * ## Show me an example using SCE.                                                                                  // 15514
   *                                                                                                                   // 15515
   * <example module="mySceApp" deps="angular-sanitize.js">                                                            // 15516
   * <file name="index.html">                                                                                          // 15517
   *   <div ng-controller="AppController as myCtrl">                                                                   // 15518
   *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>                        // 15519
   *     <b>User comments</b><br>                                                                                      // 15520
   *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                       // 15521
   *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                 // 15522
   *     exploit.                                                                                                      // 15523
   *     <div class="well">                                                                                            // 15524
   *       <div ng-repeat="userComment in myCtrl.userComments">                                                        // 15525
   *         <b>{{userComment.name}}</b>:                                                                              // 15526
   *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>                                  // 15527
   *         <br>                                                                                                      // 15528
   *       </div>                                                                                                      // 15529
   *     </div>                                                                                                        // 15530
   *   </div>                                                                                                          // 15531
   * </file>                                                                                                           // 15532
   *                                                                                                                   // 15533
   * <file name="script.js">                                                                                           // 15534
   *   angular.module('mySceApp', ['ngSanitize'])                                                                      // 15535
   *     .controller('AppController', ['$http', '$templateCache', '$sce',                                              // 15536
   *       function($http, $templateCache, $sce) {                                                                     // 15537
 *         var self = this;                                                                                            // 15538
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {                       // 15539
 *           self.userComments = userComments;                                                                         // 15540
 *         });                                                                                                         // 15541
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 15542
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 15543
 *             'sanitization.&quot;">Hover over this text.</span>');                                                   // 15544
 *       }]);                                                                                                          // 15545
   * </file>                                                                                                           // 15546
   *                                                                                                                   // 15547
   * <file name="test_data.json">                                                                                      // 15548
   * [                                                                                                                 // 15549
   *   { "name": "Alice",                                                                                              // 15550
 *     "htmlComment":                                                                                                  // 15551
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"                     // 15552
 *   },                                                                                                                // 15553
   *   { "name": "Bob",                                                                                                // 15554
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"                                                          // 15555
 *   }                                                                                                                 // 15556
   * ]                                                                                                                 // 15557
   * </file>                                                                                                           // 15558
   *                                                                                                                   // 15559
   * <file name="protractor.js" type="protractor">                                                                     // 15560
   *   describe('SCE doc demo', function() {                                                                           // 15561
 *     it('should sanitize untrusted values', function() {                                                             // 15562
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 15563
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 15564
 *     });                                                                                                             // 15565
 *                                                                                                                     // 15566
 *     it('should NOT sanitize explicitly trusted values', function() {                                                // 15567
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 15568
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 15569
 *           'sanitization.&quot;">Hover over this text.</span>');                                                     // 15570
 *     });                                                                                                             // 15571
 *   });                                                                                                               // 15572
   * </file>                                                                                                           // 15573
   * </example>                                                                                                        // 15574
   *                                                                                                                   // 15575
   *                                                                                                                   // 15576
   *                                                                                                                   // 15577
   * ## Can I disable SCE completely?                                                                                  // 15578
   *                                                                                                                   // 15579
   * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                   // 15580
   * for little coding overhead.  It will be much harder to take an SCE disabled application and                       // 15581
   * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                  // 15582
   * for cases where you have a lot of existing code that was written before SCE was introduced and                    // 15583
   * you're migrating them a module at a time.                                                                         // 15584
   *                                                                                                                   // 15585
   * That said, here's how you can completely disable SCE:                                                             // 15586
   *                                                                                                                   // 15587
   * ```                                                                                                               // 15588
   * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                   // 15589
 *   // Completely disable SCE.  For demonstration purposes only!                                                      // 15590
 *   // Do not use in new projects.                                                                                    // 15591
 *   $sceProvider.enabled(false);                                                                                      // 15592
 * });                                                                                                                 // 15593
   * ```                                                                                                               // 15594
   *                                                                                                                   // 15595
   */                                                                                                                  // 15596
  /* jshint maxlen: 100 */                                                                                             // 15597
                                                                                                                       // 15598
  function $SceProvider() {                                                                                            // 15599
    var enabled = true;                                                                                                // 15600
                                                                                                                       // 15601
    /**                                                                                                                // 15602
     * @ngdoc method                                                                                                   // 15603
     * @name $sceProvider#enabled                                                                                      // 15604
     * @kind function                                                                                                  // 15605
     *                                                                                                                 // 15606
     * @param {boolean=} value If provided, then enables/disables SCE.                                                 // 15607
     * @return {boolean} true if SCE is enabled, false otherwise.                                                      // 15608
     *                                                                                                                 // 15609
     * @description                                                                                                    // 15610
     * Enables/disables SCE and returns the current value.                                                             // 15611
     */                                                                                                                // 15612
    this.enabled = function(value) {                                                                                   // 15613
      if (arguments.length) {                                                                                          // 15614
        enabled = !!value;                                                                                             // 15615
      }                                                                                                                // 15616
      return enabled;                                                                                                  // 15617
    };                                                                                                                 // 15618
                                                                                                                       // 15619
                                                                                                                       // 15620
    /* Design notes on the default implementation for SCE.                                                             // 15621
     *                                                                                                                 // 15622
     * The API contract for the SCE delegate                                                                           // 15623
     * -------------------------------------                                                                           // 15624
     * The SCE delegate object must provide the following 3 methods:                                                   // 15625
     *                                                                                                                 // 15626
     * - trustAs(contextEnum, value)                                                                                   // 15627
     *     This method is used to tell the SCE service that the provided value is OK to use in the                     // 15628
     *     contexts specified by contextEnum.  It must return an object that will be accepted by                       // 15629
     *     getTrusted() for a compatible contextEnum and return this value.                                            // 15630
     *                                                                                                                 // 15631
     * - valueOf(value)                                                                                                // 15632
     *     For values that were not produced by trustAs(), return them as is.  For values that were                    // 15633
     *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                      // 15634
     *     trustAs is wrapping the given values into some type, this operation unwraps it when given                   // 15635
     *     such a value.                                                                                               // 15636
     *                                                                                                                 // 15637
     * - getTrusted(contextEnum, value)                                                                                // 15638
     *     This function should return the a value that is safe to use in the context specified by                     // 15639
     *     contextEnum or throw and exception otherwise.                                                               // 15640
     *                                                                                                                 // 15641
     * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                       // 15642
     * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                     // 15643
     * instance, an implementation could maintain a registry of all trusted objects by context.  In                    // 15644
     * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                     // 15645
     * return the same object passed in if it was found in the registry under a compatible context or                  // 15646
     * throw an exception otherwise.  An implementation might only wrap values some of the time based                  // 15647
     * on some criteria.  getTrusted() might return a value and not throw an exception for special                     // 15648
     * constants or objects even if not wrapped.  All such implementations fulfill this contract.                      // 15649
     *                                                                                                                 // 15650
     *                                                                                                                 // 15651
     * A note on the inheritance model for SCE contexts                                                                // 15652
     * ------------------------------------------------                                                                // 15653
     * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                 // 15654
     * is purely an implementation details.                                                                            // 15655
     *                                                                                                                 // 15656
     * The contract is simply this:                                                                                    // 15657
     *                                                                                                                 // 15658
     *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                    // 15659
     *     will also succeed.                                                                                          // 15660
     *                                                                                                                 // 15661
     * Inheritance happens to capture this in a natural way.  In some future, we                                       // 15662
     * may not use inheritance anymore.  That is OK because no code outside of                                         // 15663
     * sce.js and sceSpecs.js would need to be aware of this detail.                                                   // 15664
     */                                                                                                                // 15665
                                                                                                                       // 15666
    this.$get = ['$parse', '$sceDelegate', function(                                                                   // 15667
      $parse,   $sceDelegate) {                                                                                        // 15668
      // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                      // 15669
      // the "expression(javascript expression)" syntax which is insecure.                                             // 15670
      if (enabled && msie < 8) {                                                                                       // 15671
        throw $sceMinErr('iequirks',                                                                                   // 15672
          'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                    // 15673
          'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                      // 15674
          'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                               // 15675
      }                                                                                                                // 15676
                                                                                                                       // 15677
      var sce = shallowCopy(SCE_CONTEXTS);                                                                             // 15678
                                                                                                                       // 15679
      /**                                                                                                              // 15680
       * @ngdoc method                                                                                                 // 15681
       * @name $sce#isEnabled                                                                                          // 15682
       * @kind function                                                                                                // 15683
       *                                                                                                               // 15684
       * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                 // 15685
       * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                  // 15686
       *                                                                                                               // 15687
       * @description                                                                                                  // 15688
       * Returns a boolean indicating if SCE is enabled.                                                               // 15689
       */                                                                                                              // 15690
      sce.isEnabled = function() {                                                                                     // 15691
        return enabled;                                                                                                // 15692
      };                                                                                                               // 15693
      sce.trustAs = $sceDelegate.trustAs;                                                                              // 15694
      sce.getTrusted = $sceDelegate.getTrusted;                                                                        // 15695
      sce.valueOf = $sceDelegate.valueOf;                                                                              // 15696
                                                                                                                       // 15697
      if (!enabled) {                                                                                                  // 15698
        sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                        // 15699
        sce.valueOf = identity;                                                                                        // 15700
      }                                                                                                                // 15701
                                                                                                                       // 15702
      /**                                                                                                              // 15703
       * @ngdoc method                                                                                                 // 15704
       * @name $sce#parseAs                                                                                            // 15705
       *                                                                                                               // 15706
       * @description                                                                                                  // 15707
       * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                    // 15708
        * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                 // 15709
       * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                           // 15710
     * *result*)}                                                                                                      // 15711
       *                                                                                                               // 15712
       * @param {string} type The kind of SCE context in which this result will be used.                               // 15713
       * @param {string} expression String expression to compile.                                                      // 15714
       * @returns {function(context, locals)} a function which represents the compiled expression:                     // 15715
       *                                                                                                               // 15716
       *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings             // 15717
       *      are evaluated against (typically a scope object).                                                        // 15718
       *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in             // 15719
       *      `context`.                                                                                               // 15720
       */                                                                                                              // 15721
      sce.parseAs = function sceParseAs(type, expr) {                                                                  // 15722
        var parsed = $parse(expr);                                                                                     // 15723
        if (parsed.literal && parsed.constant) {                                                                       // 15724
          return parsed;                                                                                               // 15725
        } else {                                                                                                       // 15726
          return $parse(expr, function(value) {                                                                        // 15727
            return sce.getTrusted(type, value);                                                                        // 15728
          });                                                                                                          // 15729
        }                                                                                                              // 15730
      };                                                                                                               // 15731
                                                                                                                       // 15732
      /**                                                                                                              // 15733
       * @ngdoc method                                                                                                 // 15734
       * @name $sce#trustAs                                                                                            // 15735
       *                                                                                                               // 15736
       * @description                                                                                                  // 15737
       * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                // 15738
       * returns an object that is trusted by angular for use in specified strict contextual                           // 15739
       * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                        // 15740
       * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                      // 15741
       * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                      // 15742
       * escaping.                                                                                                     // 15743
       *                                                                                                               // 15744
       * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                      // 15745
       *   resource_url, html, js and css.                                                                             // 15746
       * @param {*} value The value that that should be considered trusted/safe.                                       // 15747
       * @returns {*} A value that can be used to stand in for the provided `value` in places                          // 15748
       * where Angular expects a $sce.trustAs() return value.                                                          // 15749
       */                                                                                                              // 15750
                                                                                                                       // 15751
      /**                                                                                                              // 15752
       * @ngdoc method                                                                                                 // 15753
       * @name $sce#trustAsHtml                                                                                        // 15754
       *                                                                                                               // 15755
       * @description                                                                                                  // 15756
       * Shorthand method.  `$sce.trustAsHtml(value)` ג†’                                                              // 15757
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                  // 15758
       *                                                                                                               // 15759
       * @param {*} value The value to trustAs.                                                                        // 15760
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                    // 15761
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 15762
       *     only accept expressions that are either literal constants or are the                                      // 15763
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                    // 15764
       */                                                                                                              // 15765
                                                                                                                       // 15766
      /**                                                                                                              // 15767
       * @ngdoc method                                                                                                 // 15768
       * @name $sce#trustAsUrl                                                                                         // 15769
       *                                                                                                               // 15770
       * @description                                                                                                  // 15771
       * Shorthand method.  `$sce.trustAsUrl(value)` ג†’                                                               // 15772
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                   // 15773
       *                                                                                                               // 15774
       * @param {*} value The value to trustAs.                                                                        // 15775
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                     // 15776
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 15777
       *     only accept expressions that are either literal constants or are the                                      // 15778
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                    // 15779
       */                                                                                                              // 15780
                                                                                                                       // 15781
      /**                                                                                                              // 15782
       * @ngdoc method                                                                                                 // 15783
       * @name $sce#trustAsResourceUrl                                                                                 // 15784
       *                                                                                                               // 15785
       * @description                                                                                                  // 15786
       * Shorthand method.  `$sce.trustAsResourceUrl(value)` ג†’                                                       // 15787
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                          // 15788
       *                                                                                                               // 15789
       * @param {*} value The value to trustAs.                                                                        // 15790
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                             // 15791
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 15792
       *     only accept expressions that are either literal constants or are the return                               // 15793
       *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                           // 15794
       */                                                                                                              // 15795
                                                                                                                       // 15796
      /**                                                                                                              // 15797
       * @ngdoc method                                                                                                 // 15798
       * @name $sce#trustAsJs                                                                                          // 15799
       *                                                                                                               // 15800
       * @description                                                                                                  // 15801
       * Shorthand method.  `$sce.trustAsJs(value)` ג†’                                                                // 15802
       *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                    // 15803
       *                                                                                                               // 15804
       * @param {*} value The value to trustAs.                                                                        // 15805
       * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                      // 15806
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 15807
       *     only accept expressions that are either literal constants or are the                                      // 15808
       *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                    // 15809
       */                                                                                                              // 15810
                                                                                                                       // 15811
      /**                                                                                                              // 15812
       * @ngdoc method                                                                                                 // 15813
       * @name $sce#getTrusted                                                                                         // 15814
       *                                                                                                               // 15815
       * @description                                                                                                  // 15816
       * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                          // 15817
       * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                           // 15818
       * originally supplied value if the queried context type is a supertype of the created type.                     // 15819
       * If this condition isn't satisfied, throws an exception.                                                       // 15820
       *                                                                                                               // 15821
       * @param {string} type The kind of context in which this value is to be used.                                   // 15822
       * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                          // 15823
       *                         call.                                                                                 // 15824
       * @returns {*} The value the was originally provided to                                                         // 15825
       *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                 // 15826
       *              Otherwise, throws an exception.                                                                  // 15827
       */                                                                                                              // 15828
                                                                                                                       // 15829
      /**                                                                                                              // 15830
       * @ngdoc method                                                                                                 // 15831
       * @name $sce#getTrustedHtml                                                                                     // 15832
       *                                                                                                               // 15833
       * @description                                                                                                  // 15834
       * Shorthand method.  `$sce.getTrustedHtml(value)` ג†’                                                           // 15835
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                            // 15836
       *                                                                                                               // 15837
       * @param {*} value The value to pass to `$sce.getTrusted`.                                                      // 15838
       * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                          // 15839
       */                                                                                                              // 15840
                                                                                                                       // 15841
      /**                                                                                                              // 15842
       * @ngdoc method                                                                                                 // 15843
       * @name $sce#getTrustedCss                                                                                      // 15844
       *                                                                                                               // 15845
       * @description                                                                                                  // 15846
       * Shorthand method.  `$sce.getTrustedCss(value)` ג†’                                                            // 15847
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                             // 15848
       *                                                                                                               // 15849
       * @param {*} value The value to pass to `$sce.getTrusted`.                                                      // 15850
       * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                           // 15851
       */                                                                                                              // 15852
                                                                                                                       // 15853
      /**                                                                                                              // 15854
       * @ngdoc method                                                                                                 // 15855
       * @name $sce#getTrustedUrl                                                                                      // 15856
       *                                                                                                               // 15857
       * @description                                                                                                  // 15858
       * Shorthand method.  `$sce.getTrustedUrl(value)` ג†’                                                            // 15859
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                             // 15860
       *                                                                                                               // 15861
       * @param {*} value The value to pass to `$sce.getTrusted`.                                                      // 15862
       * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                           // 15863
       */                                                                                                              // 15864
                                                                                                                       // 15865
      /**                                                                                                              // 15866
       * @ngdoc method                                                                                                 // 15867
       * @name $sce#getTrustedResourceUrl                                                                              // 15868
       *                                                                                                               // 15869
       * @description                                                                                                  // 15870
       * Shorthand method.  `$sce.getTrustedResourceUrl(value)` ג†’                                                    // 15871
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                    // 15872
       *                                                                                                               // 15873
       * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                              // 15874
       * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                  // 15875
       */                                                                                                              // 15876
                                                                                                                       // 15877
      /**                                                                                                              // 15878
       * @ngdoc method                                                                                                 // 15879
       * @name $sce#getTrustedJs                                                                                       // 15880
       *                                                                                                               // 15881
       * @description                                                                                                  // 15882
       * Shorthand method.  `$sce.getTrustedJs(value)` ג†’                                                             // 15883
       *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                              // 15884
       *                                                                                                               // 15885
       * @param {*} value The value to pass to `$sce.getTrusted`.                                                      // 15886
       * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                            // 15887
       */                                                                                                              // 15888
                                                                                                                       // 15889
      /**                                                                                                              // 15890
       * @ngdoc method                                                                                                 // 15891
       * @name $sce#parseAsHtml                                                                                        // 15892
       *                                                                                                               // 15893
       * @description                                                                                                  // 15894
       * Shorthand method.  `$sce.parseAsHtml(expression string)` ג†’                                                  // 15895
       *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                  // 15896
       *                                                                                                               // 15897
       * @param {string} expression String expression to compile.                                                      // 15898
       * @returns {function(context, locals)} a function which represents the compiled expression:                     // 15899
       *                                                                                                               // 15900
       *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings             // 15901
       *      are evaluated against (typically a scope object).                                                        // 15902
       *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in             // 15903
       *      `context`.                                                                                               // 15904
       */                                                                                                              // 15905
                                                                                                                       // 15906
      /**                                                                                                              // 15907
       * @ngdoc method                                                                                                 // 15908
       * @name $sce#parseAsCss                                                                                         // 15909
       *                                                                                                               // 15910
       * @description                                                                                                  // 15911
       * Shorthand method.  `$sce.parseAsCss(value)` ג†’                                                               // 15912
       *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                   // 15913
       *                                                                                                               // 15914
       * @param {string} expression String expression to compile.                                                      // 15915
       * @returns {function(context, locals)} a function which represents the compiled expression:                     // 15916
       *                                                                                                               // 15917
       *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings             // 15918
       *      are evaluated against (typically a scope object).                                                        // 15919
       *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in             // 15920
       *      `context`.                                                                                               // 15921
       */                                                                                                              // 15922
                                                                                                                       // 15923
      /**                                                                                                              // 15924
       * @ngdoc method                                                                                                 // 15925
       * @name $sce#parseAsUrl                                                                                         // 15926
       *                                                                                                               // 15927
       * @description                                                                                                  // 15928
       * Shorthand method.  `$sce.parseAsUrl(value)` ג†’                                                               // 15929
       *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                   // 15930
       *                                                                                                               // 15931
       * @param {string} expression String expression to compile.                                                      // 15932
       * @returns {function(context, locals)} a function which represents the compiled expression:                     // 15933
       *                                                                                                               // 15934
       *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings             // 15935
       *      are evaluated against (typically a scope object).                                                        // 15936
       *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in             // 15937
       *      `context`.                                                                                               // 15938
       */                                                                                                              // 15939
                                                                                                                       // 15940
      /**                                                                                                              // 15941
       * @ngdoc method                                                                                                 // 15942
       * @name $sce#parseAsResourceUrl                                                                                 // 15943
       *                                                                                                               // 15944
       * @description                                                                                                  // 15945
       * Shorthand method.  `$sce.parseAsResourceUrl(value)` ג†’                                                       // 15946
       *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                          // 15947
       *                                                                                                               // 15948
       * @param {string} expression String expression to compile.                                                      // 15949
       * @returns {function(context, locals)} a function which represents the compiled expression:                     // 15950
       *                                                                                                               // 15951
       *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings             // 15952
       *      are evaluated against (typically a scope object).                                                        // 15953
       *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in             // 15954
       *      `context`.                                                                                               // 15955
       */                                                                                                              // 15956
                                                                                                                       // 15957
      /**                                                                                                              // 15958
       * @ngdoc method                                                                                                 // 15959
       * @name $sce#parseAsJs                                                                                          // 15960
       *                                                                                                               // 15961
       * @description                                                                                                  // 15962
       * Shorthand method.  `$sce.parseAsJs(value)` ג†’                                                                // 15963
       *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                    // 15964
       *                                                                                                               // 15965
       * @param {string} expression String expression to compile.                                                      // 15966
       * @returns {function(context, locals)} a function which represents the compiled expression:                     // 15967
       *                                                                                                               // 15968
       *    * `context` ג€“ `{object}` ג€“ an object against which any expressions embedded in the strings             // 15969
       *      are evaluated against (typically a scope object).                                                        // 15970
       *    * `locals` ג€“ `{object=}` ג€“ local variables context object, useful for overriding values in             // 15971
       *      `context`.                                                                                               // 15972
       */                                                                                                              // 15973
                                                                                                                       // 15974
      // Shorthand delegations.                                                                                        // 15975
      var parse = sce.parseAs,                                                                                         // 15976
        getTrusted = sce.getTrusted,                                                                                   // 15977
        trustAs = sce.trustAs;                                                                                         // 15978
                                                                                                                       // 15979
      forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                // 15980
        var lName = lowercase(name);                                                                                   // 15981
        sce[camelCase("parse_as_" + lName)] = function(expr) {                                                         // 15982
          return parse(enumValue, expr);                                                                               // 15983
        };                                                                                                             // 15984
        sce[camelCase("get_trusted_" + lName)] = function(value) {                                                     // 15985
          return getTrusted(enumValue, value);                                                                         // 15986
        };                                                                                                             // 15987
        sce[camelCase("trust_as_" + lName)] = function(value) {                                                        // 15988
          return trustAs(enumValue, value);                                                                            // 15989
        };                                                                                                             // 15990
      });                                                                                                              // 15991
                                                                                                                       // 15992
      return sce;                                                                                                      // 15993
    }];                                                                                                                // 15994
  }                                                                                                                    // 15995
                                                                                                                       // 15996
  /**                                                                                                                  // 15997
   * !!! This is an undocumented "private" service !!!                                                                 // 15998
   *                                                                                                                   // 15999
   * @name $sniffer                                                                                                    // 16000
   * @requires $window                                                                                                 // 16001
   * @requires $document                                                                                               // 16002
   *                                                                                                                   // 16003
   * @property {boolean} history Does the browser support html5 history api ?                                          // 16004
   * @property {boolean} transitions Does the browser support CSS transition events ?                                  // 16005
   * @property {boolean} animations Does the browser support CSS animation events ?                                    // 16006
   *                                                                                                                   // 16007
   * @description                                                                                                      // 16008
   * This is very simple implementation of testing browser's features.                                                 // 16009
   */                                                                                                                  // 16010
  function $SnifferProvider() {                                                                                        // 16011
    this.$get = ['$window', '$document', function($window, $document) {                                                // 16012
      var eventSupport = {},                                                                                           // 16013
        android =                                                                                                      // 16014
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                        // 16015
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 16016
        document = $document[0] || {},                                                                                 // 16017
        vendorPrefix,                                                                                                  // 16018
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 16019
        bodyStyle = document.body && document.body.style,                                                              // 16020
        transitions = false,                                                                                           // 16021
        animations = false,                                                                                            // 16022
        match;                                                                                                         // 16023
                                                                                                                       // 16024
      if (bodyStyle) {                                                                                                 // 16025
        for (var prop in bodyStyle) {                                                                                  // 16026
          if (match = vendorRegex.exec(prop)) {                                                                        // 16027
            vendorPrefix = match[0];                                                                                   // 16028
            vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                           // 16029
            break;                                                                                                     // 16030
          }                                                                                                            // 16031
        }                                                                                                              // 16032
                                                                                                                       // 16033
        if (!vendorPrefix) {                                                                                           // 16034
          vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                   // 16035
        }                                                                                                              // 16036
                                                                                                                       // 16037
        transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                   // 16038
        animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                     // 16039
                                                                                                                       // 16040
        if (android && (!transitions ||  !animations)) {                                                               // 16041
          transitions = isString(document.body.style.webkitTransition);                                                // 16042
          animations = isString(document.body.style.webkitAnimation);                                                  // 16043
        }                                                                                                              // 16044
      }                                                                                                                // 16045
                                                                                                                       // 16046
                                                                                                                       // 16047
      return {                                                                                                         // 16048
        // Android has history.pushState, but it does not update location correctly                                    // 16049
        // so let's not use the history API at all.                                                                    // 16050
        // http://code.google.com/p/android/issues/detail?id=17471                                                     // 16051
        // https://github.com/angular/angular.js/issues/904                                                            // 16052
                                                                                                                       // 16053
        // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                       // 16054
        // so let's not use the history API also                                                                       // 16055
        // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                    // 16056
        // jshint -W018                                                                                                // 16057
        history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                         // 16058
        // jshint +W018                                                                                                // 16059
        hasEvent: function(event) {                                                                                    // 16060
          // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                  // 16061
          // it. In particular the event is not fired when backspace or delete key are pressed or                      // 16062
          // when cut operation is performed.                                                                          // 16063
          // IE10+ implements 'input' event but it erroneously fires under various situations,                         // 16064
          // e.g. when placeholder changes, or a form is focused.                                                      // 16065
          if (event === 'input' && msie <= 11) return false;                                                           // 16066
                                                                                                                       // 16067
          if (isUndefined(eventSupport[event])) {                                                                      // 16068
            var divElm = document.createElement('div');                                                                // 16069
            eventSupport[event] = 'on' + event in divElm;                                                              // 16070
          }                                                                                                            // 16071
                                                                                                                       // 16072
          return eventSupport[event];                                                                                  // 16073
        },                                                                                                             // 16074
        csp: csp(),                                                                                                    // 16075
        vendorPrefix: vendorPrefix,                                                                                    // 16076
        transitions: transitions,                                                                                      // 16077
        animations: animations,                                                                                        // 16078
        android: android                                                                                               // 16079
      };                                                                                                               // 16080
    }];                                                                                                                // 16081
  }                                                                                                                    // 16082
                                                                                                                       // 16083
  var $compileMinErr = minErr('$compile');                                                                             // 16084
                                                                                                                       // 16085
  /**                                                                                                                  // 16086
   * @ngdoc service                                                                                                    // 16087
   * @name $templateRequest                                                                                            // 16088
   *                                                                                                                   // 16089
   * @description                                                                                                      // 16090
   * The `$templateRequest` service downloads the provided template using `$http` and, upon success,                   // 16091
   * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data                    // 16092
   * of the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted                    // 16093
   * by setting the 2nd parameter of the function to true).                                                            // 16094
   *                                                                                                                   // 16095
   * @param {string} tpl The HTTP request template URL                                                                 // 16096
   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
   *                                                                                                                   // 16098
   * @return {Promise} the HTTP Promise for the given.                                                                 // 16099
   *                                                                                                                   // 16100
   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.               // 16101
   */                                                                                                                  // 16102
  function $TemplateRequestProvider() {                                                                                // 16103
    this.$get = ['$templateCache', '$http', '$q', function($templateCache, $http, $q) {                                // 16104
      function handleRequestFn(tpl, ignoreRequestError) {                                                              // 16105
        handleRequestFn.totalPendingRequests++;                                                                        // 16106
                                                                                                                       // 16107
        var transformResponse = $http.defaults && $http.defaults.transformResponse;                                    // 16108
                                                                                                                       // 16109
        if (isArray(transformResponse)) {                                                                              // 16110
          transformResponse = transformResponse.filter(function(transformer) {                                         // 16111
            return transformer !== defaultHttpResponseTransform;                                                       // 16112
          });                                                                                                          // 16113
        } else if (transformResponse === defaultHttpResponseTransform) {                                               // 16114
          transformResponse = null;                                                                                    // 16115
        }                                                                                                              // 16116
                                                                                                                       // 16117
        var httpOptions = {                                                                                            // 16118
          cache: $templateCache,                                                                                       // 16119
          transformResponse: transformResponse                                                                         // 16120
        };                                                                                                             // 16121
                                                                                                                       // 16122
        return $http.get(tpl, httpOptions)                                                                             // 16123
          ['finally'](function() {                                                                                     // 16124
          handleRequestFn.totalPendingRequests--;                                                                      // 16125
        })                                                                                                             // 16126
          .then(function(response) {                                                                                   // 16127
            return response.data;                                                                                      // 16128
          }, handleError);                                                                                             // 16129
                                                                                                                       // 16130
        function handleError(resp) {                                                                                   // 16131
          if (!ignoreRequestError) {                                                                                   // 16132
            throw $compileMinErr('tpload', 'Failed to load template: {0}', tpl);                                       // 16133
          }                                                                                                            // 16134
          return $q.reject(resp);                                                                                      // 16135
        }                                                                                                              // 16136
      }                                                                                                                // 16137
                                                                                                                       // 16138
      handleRequestFn.totalPendingRequests = 0;                                                                        // 16139
                                                                                                                       // 16140
      return handleRequestFn;                                                                                          // 16141
    }];                                                                                                                // 16142
  }                                                                                                                    // 16143
                                                                                                                       // 16144
  function $$TestabilityProvider() {                                                                                   // 16145
    this.$get = ['$rootScope', '$browser', '$location',                                                                // 16146
      function($rootScope,   $browser,   $location) {                                                                  // 16147
                                                                                                                       // 16148
        /**                                                                                                            // 16149
         * @name $testability                                                                                          // 16150
         *                                                                                                             // 16151
         * @description                                                                                                // 16152
         * The private $$testability service provides a collection of methods for use when debugging                   // 16153
         * or by automated test and debugging tools.                                                                   // 16154
         */                                                                                                            // 16155
        var testability = {};                                                                                          // 16156
                                                                                                                       // 16157
        /**                                                                                                            // 16158
         * @name $$testability#findBindings                                                                            // 16159
         *                                                                                                             // 16160
         * @description                                                                                                // 16161
         * Returns an array of elements that are bound (via ng-bind or {{}})                                           // 16162
         * to expressions matching the input.                                                                          // 16163
         *                                                                                                             // 16164
         * @param {Element} element The element root to search from.                                                   // 16165
         * @param {string} expression The binding expression to match.                                                 // 16166
         * @param {boolean} opt_exactMatch If true, only returns exact matches                                         // 16167
         *     for the expression. Filters and whitespace are ignored.                                                 // 16168
         */                                                                                                            // 16169
        testability.findBindings = function(element, expression, opt_exactMatch) {                                     // 16170
          var bindings = element.getElementsByClassName('ng-binding');                                                 // 16171
          var matches = [];                                                                                            // 16172
          forEach(bindings, function(binding) {                                                                        // 16173
            var dataBinding = angular.element(binding).data('$binding');                                               // 16174
            if (dataBinding) {                                                                                         // 16175
              forEach(dataBinding, function(bindingName) {                                                             // 16176
                if (opt_exactMatch) {                                                                                  // 16177
                  var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');                   // 16178
                  if (matcher.test(bindingName)) {                                                                     // 16179
                    matches.push(binding);                                                                             // 16180
                  }                                                                                                    // 16181
                } else {                                                                                               // 16182
                  if (bindingName.indexOf(expression) != -1) {                                                         // 16183
                    matches.push(binding);                                                                             // 16184
                  }                                                                                                    // 16185
                }                                                                                                      // 16186
              });                                                                                                      // 16187
            }                                                                                                          // 16188
          });                                                                                                          // 16189
          return matches;                                                                                              // 16190
        };                                                                                                             // 16191
                                                                                                                       // 16192
        /**                                                                                                            // 16193
         * @name $$testability#findModels                                                                              // 16194
         *                                                                                                             // 16195
         * @description                                                                                                // 16196
         * Returns an array of elements that are two-way found via ng-model to                                         // 16197
         * expressions matching the input.                                                                             // 16198
         *                                                                                                             // 16199
         * @param {Element} element The element root to search from.                                                   // 16200
         * @param {string} expression The model expression to match.                                                   // 16201
         * @param {boolean} opt_exactMatch If true, only returns exact matches                                         // 16202
         *     for the expression.                                                                                     // 16203
         */                                                                                                            // 16204
        testability.findModels = function(element, expression, opt_exactMatch) {                                       // 16205
          var prefixes = ['ng-', 'data-ng-', 'ng\\:'];                                                                 // 16206
          for (var p = 0; p < prefixes.length; ++p) {                                                                  // 16207
            var attributeEquals = opt_exactMatch ? '=' : '*=';                                                         // 16208
            var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';                    // 16209
            var elements = element.querySelectorAll(selector);                                                         // 16210
            if (elements.length) {                                                                                     // 16211
              return elements;                                                                                         // 16212
            }                                                                                                          // 16213
          }                                                                                                            // 16214
        };                                                                                                             // 16215
                                                                                                                       // 16216
        /**                                                                                                            // 16217
         * @name $$testability#getLocation                                                                             // 16218
         *                                                                                                             // 16219
         * @description                                                                                                // 16220
         * Shortcut for getting the location in a browser agnostic way. Returns                                        // 16221
         *     the path, search, and hash. (e.g. /path?a=b#hash)                                                       // 16222
         */                                                                                                            // 16223
        testability.getLocation = function() {                                                                         // 16224
          return $location.url();                                                                                      // 16225
        };                                                                                                             // 16226
                                                                                                                       // 16227
        /**                                                                                                            // 16228
         * @name $$testability#setLocation                                                                             // 16229
         *                                                                                                             // 16230
         * @description                                                                                                // 16231
         * Shortcut for navigating to a location without doing a full page reload.                                     // 16232
         *                                                                                                             // 16233
         * @param {string} url The location url (path, search and hash,                                                // 16234
         *     e.g. /path?a=b#hash) to go to.                                                                          // 16235
         */                                                                                                            // 16236
        testability.setLocation = function(url) {                                                                      // 16237
          if (url !== $location.url()) {                                                                               // 16238
            $location.url(url);                                                                                        // 16239
            $rootScope.$digest();                                                                                      // 16240
          }                                                                                                            // 16241
        };                                                                                                             // 16242
                                                                                                                       // 16243
        /**                                                                                                            // 16244
         * @name $$testability#whenStable                                                                              // 16245
         *                                                                                                             // 16246
         * @description                                                                                                // 16247
         * Calls the callback when $timeout and $http requests are completed.                                          // 16248
         *                                                                                                             // 16249
         * @param {function} callback                                                                                  // 16250
         */                                                                                                            // 16251
        testability.whenStable = function(callback) {                                                                  // 16252
          $browser.notifyWhenNoOutstandingRequests(callback);                                                          // 16253
        };                                                                                                             // 16254
                                                                                                                       // 16255
        return testability;                                                                                            // 16256
      }];                                                                                                              // 16257
  }                                                                                                                    // 16258
                                                                                                                       // 16259
  function $TimeoutProvider() {                                                                                        // 16260
    this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                           // 16261
      function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                             // 16262
        var deferreds = {};                                                                                            // 16263
                                                                                                                       // 16264
                                                                                                                       // 16265
        /**                                                                                                            // 16266
         * @ngdoc service                                                                                              // 16267
         * @name $timeout                                                                                              // 16268
         *                                                                                                             // 16269
         * @description                                                                                                // 16270
         * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                    // 16271
         * block and delegates any exceptions to                                                                       // 16272
         * {@link ng.$exceptionHandler $exceptionHandler} service.                                                     // 16273
         *                                                                                                             // 16274
         * The return value of registering a timeout function is a promise, which will be resolved when                // 16275
         * the timeout is reached and the timeout function is executed.                                                // 16276
         *                                                                                                             // 16277
         * To cancel a timeout request, call `$timeout.cancel(promise)`.                                               // 16278
         *                                                                                                             // 16279
         * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                          // 16280
         * synchronously flush the queue of deferred functions.                                                        // 16281
         *                                                                                                             // 16282
         * @param {function()} fn A function, whose execution should be delayed.                                       // 16283
         * @param {number=} [delay=0] Delay in milliseconds.                                                           // 16284
         * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                // 16285
         *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                              // 16286
         * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                // 16287
         *   promise will be resolved with is the return value of the `fn` function.                                   // 16288
         *                                                                                                             // 16289
         */                                                                                                            // 16290
        function timeout(fn, delay, invokeApply) {                                                                     // 16291
          var skipApply = (isDefined(invokeApply) && !invokeApply),                                                    // 16292
            deferred = (skipApply ? $$q : $q).defer(),                                                                 // 16293
            promise = deferred.promise,                                                                                // 16294
            timeoutId;                                                                                                 // 16295
                                                                                                                       // 16296
          timeoutId = $browser.defer(function() {                                                                      // 16297
            try {                                                                                                      // 16298
              deferred.resolve(fn());                                                                                  // 16299
            } catch (e) {                                                                                              // 16300
              deferred.reject(e);                                                                                      // 16301
              $exceptionHandler(e);                                                                                    // 16302
            }                                                                                                          // 16303
            finally {                                                                                                  // 16304
              delete deferreds[promise.$$timeoutId];                                                                   // 16305
            }                                                                                                          // 16306
                                                                                                                       // 16307
            if (!skipApply) $rootScope.$apply();                                                                       // 16308
          }, delay);                                                                                                   // 16309
                                                                                                                       // 16310
          promise.$$timeoutId = timeoutId;                                                                             // 16311
          deferreds[timeoutId] = deferred;                                                                             // 16312
                                                                                                                       // 16313
          return promise;                                                                                              // 16314
        }                                                                                                              // 16315
                                                                                                                       // 16316
                                                                                                                       // 16317
        /**                                                                                                            // 16318
         * @ngdoc method                                                                                               // 16319
         * @name $timeout#cancel                                                                                       // 16320
         *                                                                                                             // 16321
         * @description                                                                                                // 16322
         * Cancels a task associated with the `promise`. As a result of this, the promise will be                      // 16323
         * resolved with a rejection.                                                                                  // 16324
         *                                                                                                             // 16325
         * @param {Promise=} promise Promise returned by the `$timeout` function.                                      // 16326
         * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                      // 16327
         *   canceled.                                                                                                 // 16328
         */                                                                                                            // 16329
        timeout.cancel = function(promise) {                                                                           // 16330
          if (promise && promise.$$timeoutId in deferreds) {                                                           // 16331
            deferreds[promise.$$timeoutId].reject('canceled');                                                         // 16332
            delete deferreds[promise.$$timeoutId];                                                                     // 16333
            return $browser.defer.cancel(promise.$$timeoutId);                                                         // 16334
          }                                                                                                            // 16335
          return false;                                                                                                // 16336
        };                                                                                                             // 16337
                                                                                                                       // 16338
        return timeout;                                                                                                // 16339
      }];                                                                                                              // 16340
  }                                                                                                                    // 16341
                                                                                                                       // 16342
// NOTE:  The usage of window and document instead of $window and $document here is                                    // 16343
// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 16344
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 16345
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 16346
// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 16347
// exactly the behavior needed here.  There is little value is mocking these out for this                              // 16348
// service.                                                                                                            // 16349
  var urlParsingNode = document.createElement("a");                                                                    // 16350
  var originUrl = urlResolve(window.location.href);                                                                    // 16351
                                                                                                                       // 16352
                                                                                                                       // 16353
  /**                                                                                                                  // 16354
   *                                                                                                                   // 16355
   * Implementation Notes for non-IE browsers                                                                          // 16356
   * ----------------------------------------                                                                          // 16357
   * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                         // 16358
   * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                        // 16359
   * URL will be resolved into an absolute URL in the context of the application document.                             // 16360
   * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                         // 16361
   * properties are all populated to reflect the normalized URL.  This approach has wide                               // 16362
   * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                       // 16363
   * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 16364
   *                                                                                                                   // 16365
   * Implementation Notes for IE                                                                                       // 16366
   * ---------------------------                                                                                       // 16367
   * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other                        // 16368
   * browsers.  However, the parsed components will not be set if the URL assigned did not specify                     // 16369
   * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We                      // 16370
   * work around that by performing the parsing in a 2nd step by taking a previously normalized                        // 16371
   * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                    // 16372
   * properties such as protocol, hostname, port, etc.                                                                 // 16373
   *                                                                                                                   // 16374
   * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one                     // 16375
   * uses the inner HTML approach to assign the URL as part of an HTML snippet -                                       // 16376
   * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.                             // 16377
   * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.                     // 16378
   * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that                          // 16379
   * method and IE < 8 is unsupported.                                                                                 // 16380
   *                                                                                                                   // 16381
   * References:                                                                                                       // 16382
   *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                               // 16383
   *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                 // 16384
   *   http://url.spec.whatwg.org/#urlutils                                                                            // 16385
   *   https://github.com/angular/angular.js/pull/2902                                                                 // 16386
   *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                 // 16387
   *                                                                                                                   // 16388
   * @kind function                                                                                                    // 16389
   * @param {string} url The URL to be parsed.                                                                         // 16390
   * @description Normalizes and parses a URL.                                                                         // 16391
   * @returns {object} Returns the normalized URL as a dictionary.                                                     // 16392
   *                                                                                                                   // 16393
   *   | member name   | Description    |                                                                              // 16394
   *   |---------------|----------------|                                                                              // 16395
   *   | href          | A normalized version of the provided URL if it was not an absolute URL |                      // 16396
   *   | protocol      | The protocol including the trailing colon                              |                      // 16397
   *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                      // 16398
   *   | search        | The search params, minus the question mark                             |                      // 16399
   *   | hash          | The hash string, minus the hash symbol                                                        // 16400
   *   | hostname      | The hostname                                                                                  // 16401
   *   | port          | The port, without ":"                                                                         // 16402
   *   | pathname      | The pathname, beginning with "/"                                                              // 16403
   *                                                                                                                   // 16404
   */                                                                                                                  // 16405
  function urlResolve(url) {                                                                                           // 16406
    var href = url;                                                                                                    // 16407
                                                                                                                       // 16408
    if (msie) {                                                                                                        // 16409
      // Normalize before parse.  Refer Implementation Notes on why this is                                            // 16410
      // done in two steps on IE.                                                                                      // 16411
      urlParsingNode.setAttribute("href", href);                                                                       // 16412
      href = urlParsingNode.href;                                                                                      // 16413
    }                                                                                                                  // 16414
                                                                                                                       // 16415
    urlParsingNode.setAttribute('href', href);                                                                         // 16416
                                                                                                                       // 16417
    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                           // 16418
    return {                                                                                                           // 16419
      href: urlParsingNode.href,                                                                                       // 16420
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                              // 16421
      host: urlParsingNode.host,                                                                                       // 16422
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',                                   // 16423
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                          // 16424
      hostname: urlParsingNode.hostname,                                                                               // 16425
      port: urlParsingNode.port,                                                                                       // 16426
      pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                            // 16427
        ? urlParsingNode.pathname                                                                                      // 16428
        : '/' + urlParsingNode.pathname                                                                                // 16429
    };                                                                                                                 // 16430
  }                                                                                                                    // 16431
                                                                                                                       // 16432
  /**                                                                                                                  // 16433
   * Parse a request URL and determine whether this is a same-origin request as the application document.              // 16434
   *                                                                                                                   // 16435
   * @param {string|object} requestUrl The url of the request as a string that will be resolved                        // 16436
   * or a parsed URL object.                                                                                           // 16437
   * @returns {boolean} Whether the request is for the same origin as the application document.                        // 16438
   */                                                                                                                  // 16439
  function urlIsSameOrigin(requestUrl) {                                                                               // 16440
    var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                         // 16441
    return (parsed.protocol === originUrl.protocol &&                                                                  // 16442
    parsed.host === originUrl.host);                                                                                   // 16443
  }                                                                                                                    // 16444
                                                                                                                       // 16445
  /**                                                                                                                  // 16446
   * @ngdoc service                                                                                                    // 16447
   * @name $window                                                                                                     // 16448
   *                                                                                                                   // 16449
   * @description                                                                                                      // 16450
   * A reference to the browser's `window` object. While `window`                                                      // 16451
   * is globally available in JavaScript, it causes testability problems, because                                      // 16452
   * it is a global variable. In angular we always refer to it through the                                             // 16453
   * `$window` service, so it may be overridden, removed or mocked for testing.                                        // 16454
   *                                                                                                                   // 16455
   * Expressions, like the one defined for the `ngClick` directive in the example                                      // 16456
   * below, are evaluated with respect to the current scope.  Therefore, there is                                      // 16457
   * no risk of inadvertently coding in a dependency on a global value in such an                                      // 16458
   * expression.                                                                                                       // 16459
   *                                                                                                                   // 16460
   * @example                                                                                                          // 16461
   <example module="windowExample">                                                                                    // 16462
   <file name="index.html">                                                                                            // 16463
   <script>                                                                                                            // 16464
   angular.module('windowExample', [])                                                                                 // 16465
   .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                                  // 16466
             $scope.greeting = 'Hello, World!';                                                                        // 16467
             $scope.doGreeting = function(greeting) {                                                                  // 16468
               $window.alert(greeting);                                                                                // 16469
             };                                                                                                        // 16470
           }]);                                                                                                        // 16471
   </script>                                                                                                           // 16472
   <div ng-controller="ExampleController">                                                                             // 16473
   <input type="text" ng-model="greeting" />                                                                           // 16474
   <button ng-click="doGreeting(greeting)">ALERT</button>                                                              // 16475
   </div>                                                                                                              // 16476
   </file>                                                                                                             // 16477
   <file name="protractor.js" type="protractor">                                                                       // 16478
   it('should display the greeting in the input box', function() {                                                     // 16479
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 16480
       // If we click the button it will block the test runner                                                         // 16481
       // element(':button').click();                                                                                  // 16482
      });                                                                                                              // 16483
   </file>                                                                                                             // 16484
   </example>                                                                                                          // 16485
   */                                                                                                                  // 16486
  function $WindowProvider() {                                                                                         // 16487
    this.$get = valueFn(window);                                                                                       // 16488
  }                                                                                                                    // 16489
                                                                                                                       // 16490
  /* global currencyFilter: true,                                                                                      // 16491
   dateFilter: true,                                                                                                   // 16492
   filterFilter: true,                                                                                                 // 16493
   jsonFilter: true,                                                                                                   // 16494
   limitToFilter: true,                                                                                                // 16495
   lowercaseFilter: true,                                                                                              // 16496
   numberFilter: true,                                                                                                 // 16497
   orderByFilter: true,                                                                                                // 16498
   uppercaseFilter: true,                                                                                              // 16499
   */                                                                                                                  // 16500
                                                                                                                       // 16501
  /**                                                                                                                  // 16502
   * @ngdoc provider                                                                                                   // 16503
   * @name $filterProvider                                                                                             // 16504
   * @description                                                                                                      // 16505
   *                                                                                                                   // 16506
   * Filters are just functions which transform input to an output. However filters need to be                         // 16507
   * Dependency Injected. To achieve this a filter definition consists of a factory function which is                  // 16508
   * annotated with dependencies and is responsible for creating a filter function.                                    // 16509
   *                                                                                                                   // 16510
   * ```js                                                                                                             // 16511
   *   // Filter registration                                                                                          // 16512
   *   function MyModule($provide, $filterProvider) {                                                                  // 16513
 *     // create a service to demonstrate injection (not always needed)                                                // 16514
 *     $provide.value('greet', function(name){                                                                         // 16515
 *       return 'Hello ' + name + '!';                                                                                 // 16516
 *     });                                                                                                             // 16517
 *                                                                                                                     // 16518
 *     // register a filter factory which uses the                                                                     // 16519
 *     // greet service to demonstrate DI.                                                                             // 16520
 *     $filterProvider.register('greet', function(greet){                                                              // 16521
 *       // return the filter function which uses the greet service                                                    // 16522
 *       // to generate salutation                                                                                     // 16523
 *       return function(text) {                                                                                       // 16524
 *         // filters need to be forgiving so check input validity                                                     // 16525
 *         return text && greet(text) || text;                                                                         // 16526
 *       };                                                                                                            // 16527
 *     });                                                                                                             // 16528
 *   }                                                                                                                 // 16529
   * ```                                                                                                               // 16530
   *                                                                                                                   // 16531
   * The filter function is registered with the `$injector` under the filter name suffix with                          // 16532
   * `Filter`.                                                                                                         // 16533
   *                                                                                                                   // 16534
   * ```js                                                                                                             // 16535
   *   it('should be the same instance', inject(                                                                       // 16536
   *     function($filterProvider) {                                                                                   // 16537
 *       $filterProvider.register('reverse', function(){                                                               // 16538
 *         return ...;                                                                                                 // 16539
 *       });                                                                                                           // 16540
 *     },                                                                                                              // 16541
   *     function($filter, reverseFilter) {                                                                            // 16542
 *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 16543
 *     });                                                                                                             // 16544
   * ```                                                                                                               // 16545
   *                                                                                                                   // 16546
   *                                                                                                                   // 16547
   * For more information about how angular filters work, and how to create your own filters, see                      // 16548
   * {@link guide/filter Filters} in the Angular Developer Guide.                                                      // 16549
   */                                                                                                                  // 16550
                                                                                                                       // 16551
  /**                                                                                                                  // 16552
   * @ngdoc service                                                                                                    // 16553
   * @name $filter                                                                                                     // 16554
   * @kind function                                                                                                    // 16555
   * @description                                                                                                      // 16556
   * Filters are used for formatting data displayed to the user.                                                       // 16557
   *                                                                                                                   // 16558
   * The general syntax in templates is as follows:                                                                    // 16559
   *                                                                                                                   // 16560
   *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                   // 16561
   *                                                                                                                   // 16562
   * @param {String} name Name of the filter function to retrieve                                                      // 16563
   * @return {Function} the filter function                                                                            // 16564
   * @example                                                                                                          // 16565
   <example name="$filter" module="filterExample">                                                                     // 16566
   <file name="index.html">                                                                                            // 16567
   <div ng-controller="MainCtrl">                                                                                      // 16568
   <h3>{{ originalText }}</h3>                                                                                         // 16569
   <h3>{{ filteredText }}</h3>                                                                                         // 16570
   </div>                                                                                                              // 16571
   </file>                                                                                                             // 16572
                                                                                                                       // 16573
   <file name="script.js">                                                                                             // 16574
   angular.module('filterExample', [])                                                                                 // 16575
   .controller('MainCtrl', function($scope, $filter) {                                                                 // 16576
        $scope.originalText = 'hello';                                                                                 // 16577
        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 16578
      });                                                                                                              // 16579
   </file>                                                                                                             // 16580
   </example>                                                                                                          // 16581
   */                                                                                                                  // 16582
  $FilterProvider.$inject = ['$provide'];                                                                              // 16583
  function $FilterProvider($provide) {                                                                                 // 16584
    var suffix = 'Filter';                                                                                             // 16585
                                                                                                                       // 16586
    /**                                                                                                                // 16587
     * @ngdoc method                                                                                                   // 16588
     * @name $filterProvider#register                                                                                  // 16589
     * @param {string|Object} name Name of the filter function, or an object map of filters where                      // 16590
     *    the keys are the filter names and the values are the filter factories.                                       // 16591
     * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                    // 16592
     *    of the registered filter instances.                                                                          // 16593
     */                                                                                                                // 16594
    function register(name, factory) {                                                                                 // 16595
      if (isObject(name)) {                                                                                            // 16596
        var filters = {};                                                                                              // 16597
        forEach(name, function(filter, key) {                                                                          // 16598
          filters[key] = register(key, filter);                                                                        // 16599
        });                                                                                                            // 16600
        return filters;                                                                                                // 16601
      } else {                                                                                                         // 16602
        return $provide.factory(name + suffix, factory);                                                               // 16603
      }                                                                                                                // 16604
    }                                                                                                                  // 16605
    this.register = register;                                                                                          // 16606
                                                                                                                       // 16607
    this.$get = ['$injector', function($injector) {                                                                    // 16608
      return function(name) {                                                                                          // 16609
        return $injector.get(name + suffix);                                                                           // 16610
      };                                                                                                               // 16611
    }];                                                                                                                // 16612
                                                                                                                       // 16613
    ////////////////////////////////////////                                                                           // 16614
                                                                                                                       // 16615
    /* global                                                                                                          // 16616
     currencyFilter: false,                                                                                            // 16617
     dateFilter: false,                                                                                                // 16618
     filterFilter: false,                                                                                              // 16619
     jsonFilter: false,                                                                                                // 16620
     limitToFilter: false,                                                                                             // 16621
     lowercaseFilter: false,                                                                                           // 16622
     numberFilter: false,                                                                                              // 16623
     orderByFilter: false,                                                                                             // 16624
     uppercaseFilter: false,                                                                                           // 16625
     */                                                                                                                // 16626
                                                                                                                       // 16627
    register('currency', currencyFilter);                                                                              // 16628
    register('date', dateFilter);                                                                                      // 16629
    register('filter', filterFilter);                                                                                  // 16630
    register('json', jsonFilter);                                                                                      // 16631
    register('limitTo', limitToFilter);                                                                                // 16632
    register('lowercase', lowercaseFilter);                                                                            // 16633
    register('number', numberFilter);                                                                                  // 16634
    register('orderBy', orderByFilter);                                                                                // 16635
    register('uppercase', uppercaseFilter);                                                                            // 16636
  }                                                                                                                    // 16637
                                                                                                                       // 16638
  /**                                                                                                                  // 16639
   * @ngdoc filter                                                                                                     // 16640
   * @name filter                                                                                                      // 16641
   * @kind function                                                                                                    // 16642
   *                                                                                                                   // 16643
   * @description                                                                                                      // 16644
   * Selects a subset of items from `array` and returns it as a new array.                                             // 16645
   *                                                                                                                   // 16646
   * @param {Array} array The source array.                                                                            // 16647
   * @param {string|Object|function()} expression The predicate to be used for selecting items from                    // 16648
   *   `array`.                                                                                                        // 16649
   *                                                                                                                   // 16650
   *   Can be one of:                                                                                                  // 16651
   *                                                                                                                   // 16652
   *   - `string`: The string is used for matching against the contents of the `array`. All strings or                 // 16653
   *     objects with string properties in `array` that match this string will be returned. This also                  // 16654
   *     applies to nested object properties.                                                                          // 16655
   *     The predicate can be negated by prefixing the string with `!`.                                                // 16656
   *                                                                                                                   // 16657
   *   - `Object`: A pattern object can be used to filter specific properties on objects contained                     // 16658
   *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items                       // 16659
   *     which have property `name` containing "M" and property `phone` containing "1". A special                      // 16660
   *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any                              // 16661
   *     property of the object or its nested object properties. That's equivalent to the simple                       // 16662
   *     substring match with a `string` as described above. The predicate can be negated by prefixing                 // 16663
   *     the string with `!`.                                                                                          // 16664
   *     For example `{name: "!M"}` predicate will return an array of items which have property `name`                 // 16665
   *     not containing "M".                                                                                           // 16666
   *                                                                                                                   // 16667
   *     Note that a named property will match properties on the same level only, while the special                    // 16668
   *     `$` property will match properties on the same level or deeper. E.g. an array item like                       // 16669
   *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                       // 16670
   *     **will** be matched by `{$: 'John'}`.                                                                         // 16671
   *                                                                                                                   // 16672
   *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The                    // 16673
   *     function is called for each element of `array`. The final result is an array of those                         // 16674
   *     elements that the predicate returned true for.                                                                // 16675
   *                                                                                                                   // 16676
   * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                         // 16677
   *     determining if the expected value (from the filter expression) and actual value (from                         // 16678
   *     the object in the array) should be considered a match.                                                        // 16679
   *                                                                                                                   // 16680
   *   Can be one of:                                                                                                  // 16681
   *                                                                                                                   // 16682
   *   - `function(actual, expected)`:                                                                                 // 16683
   *     The function will be given the object value and the predicate value to compare and                            // 16684
   *     should return true if both values should be considered equal.                                                 // 16685
   *                                                                                                                   // 16686
   *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.              // 16687
   *     This is essentially strict comparison of expected and actual.                                                 // 16688
   *                                                                                                                   // 16689
   *   - `false|undefined`: A short hand for a function which will look for a substring match in case                  // 16690
   *     insensitive way.                                                                                              // 16691
   *                                                                                                                   // 16692
   * @example                                                                                                          // 16693
   <example>                                                                                                           // 16694
   <file name="index.html">                                                                                            // 16695
   <div ng-init="friends = [{name:'John', phone:'555-1276'},                                                           // 16696
   {name:'Mary', phone:'800-BIG-MARY'},                                                                                // 16697
   {name:'Mike', phone:'555-4321'},                                                                                    // 16698
   {name:'Adam', phone:'555-5678'},                                                                                    // 16699
   {name:'Julie', phone:'555-8765'},                                                                                   // 16700
   {name:'Juliette', phone:'555-5678'}]"></div>                                                                        // 16701
                                                                                                                       // 16702
   Search: <input ng-model="searchText">                                                                               // 16703
   <table id="searchTextResults">                                                                                      // 16704
   <tr><th>Name</th><th>Phone</th></tr>                                                                                // 16705
   <tr ng-repeat="friend in friends | filter:searchText">                                                              // 16706
   <td>{{friend.name}}</td>                                                                                            // 16707
   <td>{{friend.phone}}</td>                                                                                           // 16708
   </tr>                                                                                                               // 16709
   </table>                                                                                                            // 16710
   <hr>                                                                                                                // 16711
   Any: <input ng-model="search.$"> <br>                                                                               // 16712
   Name only <input ng-model="search.name"><br>                                                                        // 16713
   Phone only <input ng-model="search.phone"><br>                                                                      // 16714
   Equality <input type="checkbox" ng-model="strict"><br>                                                              // 16715
   <table id="searchObjResults">                                                                                       // 16716
   <tr><th>Name</th><th>Phone</th></tr>                                                                                // 16717
   <tr ng-repeat="friendObj in friends | filter:search:strict">                                                        // 16718
   <td>{{friendObj.name}}</td>                                                                                         // 16719
   <td>{{friendObj.phone}}</td>                                                                                        // 16720
   </tr>                                                                                                               // 16721
   </table>                                                                                                            // 16722
   </file>                                                                                                             // 16723
   <file name="protractor.js" type="protractor">                                                                       // 16724
   var expectFriendNames = function(expectedNames, key) {                                                              // 16725
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 16726
           arr.forEach(function(wd, i) {                                                                               // 16727
             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 16728
           });                                                                                                         // 16729
         });                                                                                                           // 16730
       };                                                                                                              // 16731
                                                                                                                       // 16732
   it('should search across all fields when filtering with a string', function() {                                     // 16733
         var searchText = element(by.model('searchText'));                                                             // 16734
         searchText.clear();                                                                                           // 16735
         searchText.sendKeys('m');                                                                                     // 16736
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 16737
                                                                                                                       // 16738
         searchText.clear();                                                                                           // 16739
         searchText.sendKeys('76');                                                                                    // 16740
         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 16741
       });                                                                                                             // 16742
                                                                                                                       // 16743
   it('should search in specific fields when filtering with a predicate object', function() {                          // 16744
         var searchAny = element(by.model('search.$'));                                                                // 16745
         searchAny.clear();                                                                                            // 16746
         searchAny.sendKeys('i');                                                                                      // 16747
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 16748
       });                                                                                                             // 16749
   it('should use a equal comparison when comparator is true', function() {                                            // 16750
         var searchName = element(by.model('search.name'));                                                            // 16751
         var strict = element(by.model('strict'));                                                                     // 16752
         searchName.clear();                                                                                           // 16753
         searchName.sendKeys('Julie');                                                                                 // 16754
         strict.click();                                                                                               // 16755
         expectFriendNames(['Julie'], 'friendObj');                                                                    // 16756
       });                                                                                                             // 16757
   </file>                                                                                                             // 16758
   </example>                                                                                                          // 16759
   */                                                                                                                  // 16760
  function filterFilter() {                                                                                            // 16761
    return function(array, expression, comparator) {                                                                   // 16762
      if (!isArray(array)) return array;                                                                               // 16763
                                                                                                                       // 16764
      var predicateFn;                                                                                                 // 16765
      var matchAgainstAnyProp;                                                                                         // 16766
                                                                                                                       // 16767
      switch (typeof expression) {                                                                                     // 16768
        case 'function':                                                                                               // 16769
          predicateFn = expression;                                                                                    // 16770
          break;                                                                                                       // 16771
        case 'boolean':                                                                                                // 16772
        case 'number':                                                                                                 // 16773
        case 'string':                                                                                                 // 16774
          matchAgainstAnyProp = true;                                                                                  // 16775
        //jshint -W086                                                                                                 // 16776
        case 'object':                                                                                                 // 16777
          //jshint +W086                                                                                               // 16778
          predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                // 16779
          break;                                                                                                       // 16780
        default:                                                                                                       // 16781
          return array;                                                                                                // 16782
      }                                                                                                                // 16783
                                                                                                                       // 16784
      return array.filter(predicateFn);                                                                                // 16785
    };                                                                                                                 // 16786
  }                                                                                                                    // 16787
                                                                                                                       // 16788
// Helper functions for `filterFilter`                                                                                 // 16789
  function createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                            // 16790
    var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                           // 16791
    var predicateFn;                                                                                                   // 16792
                                                                                                                       // 16793
    if (comparator === true) {                                                                                         // 16794
      comparator = equals;                                                                                             // 16795
    } else if (!isFunction(comparator)) {                                                                              // 16796
      comparator = function(actual, expected) {                                                                        // 16797
        if (isObject(actual) || isObject(expected)) {                                                                  // 16798
          // Prevent an object to be considered equal to a string like `'[object'`                                     // 16799
          return false;                                                                                                // 16800
        }                                                                                                              // 16801
                                                                                                                       // 16802
        actual = lowercase('' + actual);                                                                               // 16803
        expected = lowercase('' + expected);                                                                           // 16804
        return actual.indexOf(expected) !== -1;                                                                        // 16805
      };                                                                                                               // 16806
    }                                                                                                                  // 16807
                                                                                                                       // 16808
    predicateFn = function(item) {                                                                                     // 16809
      if (shouldMatchPrimitives && !isObject(item)) {                                                                  // 16810
        return deepCompare(item, expression.$, comparator, false);                                                     // 16811
      }                                                                                                                // 16812
      return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                           // 16813
    };                                                                                                                 // 16814
                                                                                                                       // 16815
    return predicateFn;                                                                                                // 16816
  }                                                                                                                    // 16817
                                                                                                                       // 16818
  function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                      // 16819
    var actualType = (actual !== null) ? typeof actual : 'null';                                                       // 16820
    var expectedType = (expected !== null) ? typeof expected : 'null';                                                 // 16821
                                                                                                                       // 16822
    if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                 // 16823
      return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                             // 16824
    } else if (isArray(actual)) {                                                                                      // 16825
      // In case `actual` is an array, consider it a match                                                             // 16826
      // if ANY of it's items matches `expected`                                                                       // 16827
      return actual.some(function(item) {                                                                              // 16828
        return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                           // 16829
      });                                                                                                              // 16830
    }                                                                                                                  // 16831
                                                                                                                       // 16832
    switch (actualType) {                                                                                              // 16833
      case 'object':                                                                                                   // 16834
        var key;                                                                                                       // 16835
        if (matchAgainstAnyProp) {                                                                                     // 16836
          for (key in actual) {                                                                                        // 16837
            if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                     // 16838
              return true;                                                                                             // 16839
            }                                                                                                          // 16840
          }                                                                                                            // 16841
          return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                      // 16842
        } else if (expectedType === 'object') {                                                                        // 16843
          for (key in expected) {                                                                                      // 16844
            var expectedVal = expected[key];                                                                           // 16845
            if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                 // 16846
              continue;                                                                                                // 16847
            }                                                                                                          // 16848
                                                                                                                       // 16849
            var matchAnyProperty = key === '$';                                                                        // 16850
            var actualVal = matchAnyProperty ? actual : actual[key];                                                   // 16851
            if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                // 16852
              return false;                                                                                            // 16853
            }                                                                                                          // 16854
          }                                                                                                            // 16855
          return true;                                                                                                 // 16856
        } else {                                                                                                       // 16857
          return comparator(actual, expected);                                                                         // 16858
        }                                                                                                              // 16859
        break;                                                                                                         // 16860
      case 'function':                                                                                                 // 16861
        return false;                                                                                                  // 16862
      default:                                                                                                         // 16863
        return comparator(actual, expected);                                                                           // 16864
    }                                                                                                                  // 16865
  }                                                                                                                    // 16866
                                                                                                                       // 16867
  /**                                                                                                                  // 16868
   * @ngdoc filter                                                                                                     // 16869
   * @name currency                                                                                                    // 16870
   * @kind function                                                                                                    // 16871
   *                                                                                                                   // 16872
   * @description                                                                                                      // 16873
   * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                       // 16874
   * symbol for current locale is used.                                                                                // 16875
   *                                                                                                                   // 16876
   * @param {number} amount Input to filter.                                                                           // 16877
   * @param {string=} symbol Currency symbol or identifier to be displayed.                                            // 16878
   * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
   * @returns {string} Formatted number.                                                                               // 16880
   *                                                                                                                   // 16881
   *                                                                                                                   // 16882
   * @example                                                                                                          // 16883
   <example module="currencyExample">                                                                                  // 16884
   <file name="index.html">                                                                                            // 16885
   <script>                                                                                                            // 16886
   angular.module('currencyExample', [])                                                                               // 16887
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 16888
             $scope.amount = 1234.56;                                                                                  // 16889
           }]);                                                                                                        // 16890
   </script>                                                                                                           // 16891
   <div ng-controller="ExampleController">                                                                             // 16892
   <input type="number" ng-model="amount"> <br>                                                                        // 16893
   default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>                           // 16894
   custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>                   // 16895
   no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>                            // 16896
   </div>                                                                                                              // 16897
   </file>                                                                                                             // 16898
   <file name="protractor.js" type="protractor">                                                                       // 16899
   it('should init with 1234.56', function() {                                                                         // 16900
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 16901
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 16902
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 16903
       });                                                                                                             // 16904
   it('should update', function() {                                                                                    // 16905
         if (browser.params.browser == 'safari') {                                                                     // 16906
           // Safari does not understand the minus key. See                                                            // 16907
           // https://github.com/angular/protractor/issues/481                                                         // 16908
           return;                                                                                                     // 16909
         }                                                                                                             // 16910
         element(by.model('amount')).clear();                                                                          // 16911
         element(by.model('amount')).sendKeys('-1234');                                                                // 16912
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');                                     // 16913
         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');                                   // 16914
         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');                                // 16915
       });                                                                                                             // 16916
   </file>                                                                                                             // 16917
   </example>                                                                                                          // 16918
   */                                                                                                                  // 16919
  currencyFilter.$inject = ['$locale'];                                                                                // 16920
  function currencyFilter($locale) {                                                                                   // 16921
    var formats = $locale.NUMBER_FORMATS;                                                                              // 16922
    return function(amount, currencySymbol, fractionSize) {                                                            // 16923
      if (isUndefined(currencySymbol)) {                                                                               // 16924
        currencySymbol = formats.CURRENCY_SYM;                                                                         // 16925
      }                                                                                                                // 16926
                                                                                                                       // 16927
      if (isUndefined(fractionSize)) {                                                                                 // 16928
        fractionSize = formats.PATTERNS[1].maxFrac;                                                                    // 16929
      }                                                                                                                // 16930
                                                                                                                       // 16931
      // if null or undefined pass it through                                                                          // 16932
      return (amount == null)                                                                                          // 16933
        ? amount                                                                                                       // 16934
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 16935
        replace(/\u00A4/g, currencySymbol);                                                                            // 16936
    };                                                                                                                 // 16937
  }                                                                                                                    // 16938
                                                                                                                       // 16939
  /**                                                                                                                  // 16940
   * @ngdoc filter                                                                                                     // 16941
   * @name number                                                                                                      // 16942
   * @kind function                                                                                                    // 16943
   *                                                                                                                   // 16944
   * @description                                                                                                      // 16945
   * Formats a number as text.                                                                                         // 16946
   *                                                                                                                   // 16947
   * If the input is not a number an empty string is returned.                                                         // 16948
   *                                                                                                                   // 16949
   * @param {number|string} number Number to format.                                                                   // 16950
   * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                           // 16951
   * If this is not provided then the fraction size is computed from the current locale's number                       // 16952
   * formatting pattern. In the case of the default locale, it will be 3.                                              // 16953
   * @returns {string} Number rounded to decimalPlaces and places a ג€,ג€ after each third digit.                    // 16954
   *                                                                                                                   // 16955
   * @example                                                                                                          // 16956
   <example module="numberFilterExample">                                                                              // 16957
   <file name="index.html">                                                                                            // 16958
   <script>                                                                                                            // 16959
   angular.module('numberFilterExample', [])                                                                           // 16960
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 16961
             $scope.val = 1234.56789;                                                                                  // 16962
           }]);                                                                                                        // 16963
   </script>                                                                                                           // 16964
   <div ng-controller="ExampleController">                                                                             // 16965
   Enter number: <input ng-model='val'><br>                                                                            // 16966
   Default formatting: <span id='number-default'>{{val | number}}</span><br>                                           // 16967
   No fractions: <span>{{val | number:0}}</span><br>                                                                   // 16968
   Negative number: <span>{{-val | number:4}}</span>                                                                   // 16969
   </div>                                                                                                              // 16970
   </file>                                                                                                             // 16971
   <file name="protractor.js" type="protractor">                                                                       // 16972
   it('should format numbers', function() {                                                                            // 16973
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 16974
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 16975
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 16976
       });                                                                                                             // 16977
                                                                                                                       // 16978
   it('should update', function() {                                                                                    // 16979
         element(by.model('val')).clear();                                                                             // 16980
         element(by.model('val')).sendKeys('3374.333');                                                                // 16981
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 16982
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 16983
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 16984
      });                                                                                                              // 16985
   </file>                                                                                                             // 16986
   </example>                                                                                                          // 16987
   */                                                                                                                  // 16988
                                                                                                                       // 16989
                                                                                                                       // 16990
  numberFilter.$inject = ['$locale'];                                                                                  // 16991
  function numberFilter($locale) {                                                                                     // 16992
    var formats = $locale.NUMBER_FORMATS;                                                                              // 16993
    return function(number, fractionSize) {                                                                            // 16994
                                                                                                                       // 16995
      // if null or undefined pass it through                                                                          // 16996
      return (number == null)                                                                                          // 16997
        ? number                                                                                                       // 16998
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 16999
        fractionSize);                                                                                                 // 17000
    };                                                                                                                 // 17001
  }                                                                                                                    // 17002
                                                                                                                       // 17003
  var DECIMAL_SEP = '.';                                                                                               // 17004
  function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                         // 17005
    if (!isFinite(number) || isObject(number)) return '';                                                              // 17006
                                                                                                                       // 17007
    var isNegative = number < 0;                                                                                       // 17008
    number = Math.abs(number);                                                                                         // 17009
    var numStr = number + '',                                                                                          // 17010
      formatedText = '',                                                                                               // 17011
      parts = [];                                                                                                      // 17012
                                                                                                                       // 17013
    var hasExponent = false;                                                                                           // 17014
    if (numStr.indexOf('e') !== -1) {                                                                                  // 17015
      var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);                                                                 // 17016
      if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                   // 17017
        number = 0;                                                                                                    // 17018
      } else {                                                                                                         // 17019
        formatedText = numStr;                                                                                         // 17020
        hasExponent = true;                                                                                            // 17021
      }                                                                                                                // 17022
    }                                                                                                                  // 17023
                                                                                                                       // 17024
    if (!hasExponent) {                                                                                                // 17025
      var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                   // 17026
                                                                                                                       // 17027
      // determine fractionSize if it is not specified                                                                 // 17028
      if (isUndefined(fractionSize)) {                                                                                 // 17029
        fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                              // 17030
      }                                                                                                                // 17031
                                                                                                                       // 17032
      // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                         // 17033
      // inspired by:                                                                                                  // 17034
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                   // 17035
      number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);              // 17036
                                                                                                                       // 17037
      var fraction = ('' + number).split(DECIMAL_SEP);                                                                 // 17038
      var whole = fraction[0];                                                                                         // 17039
      fraction = fraction[1] || '';                                                                                    // 17040
                                                                                                                       // 17041
      var i, pos = 0,                                                                                                  // 17042
        lgroup = pattern.lgSize,                                                                                       // 17043
        group = pattern.gSize;                                                                                         // 17044
                                                                                                                       // 17045
      if (whole.length >= (lgroup + group)) {                                                                          // 17046
        pos = whole.length - lgroup;                                                                                   // 17047
        for (i = 0; i < pos; i++) {                                                                                    // 17048
          if ((pos - i) % group === 0 && i !== 0) {                                                                    // 17049
            formatedText += groupSep;                                                                                  // 17050
          }                                                                                                            // 17051
          formatedText += whole.charAt(i);                                                                             // 17052
        }                                                                                                              // 17053
      }                                                                                                                // 17054
                                                                                                                       // 17055
      for (i = pos; i < whole.length; i++) {                                                                           // 17056
        if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                            // 17057
          formatedText += groupSep;                                                                                    // 17058
        }                                                                                                              // 17059
        formatedText += whole.charAt(i);                                                                               // 17060
      }                                                                                                                // 17061
                                                                                                                       // 17062
      // format fraction part.                                                                                         // 17063
      while (fraction.length < fractionSize) {                                                                         // 17064
        fraction += '0';                                                                                               // 17065
      }                                                                                                                // 17066
                                                                                                                       // 17067
      if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);         // 17068
    } else {                                                                                                           // 17069
      if (fractionSize > 0 && number < 1) {                                                                            // 17070
        formatedText = number.toFixed(fractionSize);                                                                   // 17071
        number = parseFloat(formatedText);                                                                             // 17072
      }                                                                                                                // 17073
    }                                                                                                                  // 17074
                                                                                                                       // 17075
    if (number === 0) {                                                                                                // 17076
      isNegative = false;                                                                                              // 17077
    }                                                                                                                  // 17078
                                                                                                                       // 17079
    parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                           // 17080
      formatedText,                                                                                                    // 17081
      isNegative ? pattern.negSuf : pattern.posSuf);                                                                   // 17082
    return parts.join('');                                                                                             // 17083
  }                                                                                                                    // 17084
                                                                                                                       // 17085
  function padNumber(num, digits, trim) {                                                                              // 17086
    var neg = '';                                                                                                      // 17087
    if (num < 0) {                                                                                                     // 17088
      neg =  '-';                                                                                                      // 17089
      num = -num;                                                                                                      // 17090
    }                                                                                                                  // 17091
    num = '' + num;                                                                                                    // 17092
    while (num.length < digits) num = '0' + num;                                                                       // 17093
    if (trim)                                                                                                          // 17094
      num = num.substr(num.length - digits);                                                                           // 17095
    return neg + num;                                                                                                  // 17096
  }                                                                                                                    // 17097
                                                                                                                       // 17098
                                                                                                                       // 17099
  function dateGetter(name, size, offset, trim) {                                                                      // 17100
    offset = offset || 0;                                                                                              // 17101
    return function(date) {                                                                                            // 17102
      var value = date['get' + name]();                                                                                // 17103
      if (offset > 0 || value > -offset)                                                                               // 17104
        value += offset;                                                                                               // 17105
      if (value === 0 && offset == -12) value = 12;                                                                    // 17106
      return padNumber(value, size, trim);                                                                             // 17107
    };                                                                                                                 // 17108
  }                                                                                                                    // 17109
                                                                                                                       // 17110
  function dateStrGetter(name, shortForm) {                                                                            // 17111
    return function(date, formats) {                                                                                   // 17112
      var value = date['get' + name]();                                                                                // 17113
      var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                        // 17114
                                                                                                                       // 17115
      return formats[get][value];                                                                                      // 17116
    };                                                                                                                 // 17117
  }                                                                                                                    // 17118
                                                                                                                       // 17119
  function timeZoneGetter(date) {                                                                                      // 17120
    var zone = -1 * date.getTimezoneOffset();                                                                          // 17121
    var paddedZone = (zone >= 0) ? "+" : "";                                                                           // 17122
                                                                                                                       // 17123
    paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                         // 17124
    padNumber(Math.abs(zone % 60), 2);                                                                                 // 17125
                                                                                                                       // 17126
    return paddedZone;                                                                                                 // 17127
  }                                                                                                                    // 17128
                                                                                                                       // 17129
  function getFirstThursdayOfYear(year) {                                                                              // 17130
    // 0 = index of January                                                                                            // 17131
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 17132
    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 17133
    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 17134
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 17135
  }                                                                                                                    // 17136
                                                                                                                       // 17137
  function getThursdayThisWeek(datetime) {                                                                             // 17138
    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 17139
      // 4 = index of Thursday                                                                                         // 17140
      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 17141
  }                                                                                                                    // 17142
                                                                                                                       // 17143
  function weekGetter(size) {                                                                                          // 17144
    return function(date) {                                                                                            // 17145
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 17146
        thisThurs = getThursdayThisWeek(date);                                                                         // 17147
                                                                                                                       // 17148
      var diff = +thisThurs - +firstThurs,                                                                             // 17149
        result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                                // 17150
                                                                                                                       // 17151
      return padNumber(result, size);                                                                                  // 17152
    };                                                                                                                 // 17153
  }                                                                                                                    // 17154
                                                                                                                       // 17155
  function ampmGetter(date, formats) {                                                                                 // 17156
    return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                 // 17157
  }                                                                                                                    // 17158
                                                                                                                       // 17159
  function eraGetter(date, formats) {                                                                                  // 17160
    return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                // 17161
  }                                                                                                                    // 17162
                                                                                                                       // 17163
  function longEraGetter(date, formats) {                                                                              // 17164
    return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                        // 17165
  }                                                                                                                    // 17166
                                                                                                                       // 17167
  var DATE_FORMATS = {                                                                                                 // 17168
    yyyy: dateGetter('FullYear', 4),                                                                                   // 17169
    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 17170
    y: dateGetter('FullYear', 1),                                                                                      // 17171
    MMMM: dateStrGetter('Month'),                                                                                      // 17172
    MMM: dateStrGetter('Month', true),                                                                                 // 17173
    MM: dateGetter('Month', 2, 1),                                                                                     // 17174
    M: dateGetter('Month', 1, 1),                                                                                      // 17175
    dd: dateGetter('Date', 2),                                                                                         // 17176
    d: dateGetter('Date', 1),                                                                                          // 17177
    HH: dateGetter('Hours', 2),                                                                                        // 17178
    H: dateGetter('Hours', 1),                                                                                         // 17179
    hh: dateGetter('Hours', 2, -12),                                                                                   // 17180
    h: dateGetter('Hours', 1, -12),                                                                                    // 17181
    mm: dateGetter('Minutes', 2),                                                                                      // 17182
    m: dateGetter('Minutes', 1),                                                                                       // 17183
    ss: dateGetter('Seconds', 2),                                                                                      // 17184
    s: dateGetter('Seconds', 1),                                                                                       // 17185
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                                // 17186
    // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions        // 17187
    sss: dateGetter('Milliseconds', 3),                                                                                // 17188
    EEEE: dateStrGetter('Day'),                                                                                        // 17189
    EEE: dateStrGetter('Day', true),                                                                                   // 17190
    a: ampmGetter,                                                                                                     // 17191
    Z: timeZoneGetter,                                                                                                 // 17192
    ww: weekGetter(2),                                                                                                 // 17193
    w: weekGetter(1),                                                                                                  // 17194
    G: eraGetter,                                                                                                      // 17195
    GG: eraGetter,                                                                                                     // 17196
    GGG: eraGetter,                                                                                                    // 17197
    GGGG: longEraGetter                                                                                                // 17198
  };                                                                                                                   // 17199
                                                                                                                       // 17200
  var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,     // 17201
    NUMBER_STRING = /^\-?\d+$/;                                                                                        // 17202
                                                                                                                       // 17203
  /**                                                                                                                  // 17204
   * @ngdoc filter                                                                                                     // 17205
   * @name date                                                                                                        // 17206
   * @kind function                                                                                                    // 17207
   *                                                                                                                   // 17208
   * @description                                                                                                      // 17209
   *   Formats `date` to a string based on the requested `format`.                                                     // 17210
   *                                                                                                                   // 17211
   *   `format` string can be composed of the following elements:                                                      // 17212
   *                                                                                                                   // 17213
   *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                 // 17214
   *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                   // 17215
   *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                        // 17216
   *   * `'MMMM'`: Month in year (January-December)                                                                    // 17217
   *   * `'MMM'`: Month in year (Jan-Dec)                                                                              // 17218
   *   * `'MM'`: Month in year, padded (01-12)                                                                         // 17219
   *   * `'M'`: Month in year (1-12)                                                                                   // 17220
   *   * `'dd'`: Day in month, padded (01-31)                                                                          // 17221
   *   * `'d'`: Day in month (1-31)                                                                                    // 17222
   *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                       // 17223
   *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                               // 17224
   *   * `'HH'`: Hour in day, padded (00-23)                                                                           // 17225
   *   * `'H'`: Hour in day (0-23)                                                                                     // 17226
   *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                         // 17227
   *   * `'h'`: Hour in AM/PM, (1-12)                                                                                  // 17228
   *   * `'mm'`: Minute in hour, padded (00-59)                                                                        // 17229
   *   * `'m'`: Minute in hour (0-59)                                                                                  // 17230
   *   * `'ss'`: Second in minute, padded (00-59)                                                                      // 17231
   *   * `'s'`: Second in minute (0-59)                                                                                // 17232
   *   * `'sss'`: Millisecond in second, padded (000-999)                                                              // 17233
   *   * `'a'`: AM/PM marker                                                                                           // 17234
   *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                    // 17235
   *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                 // 17236
   *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                            // 17237
   *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                    // 17238
   *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                // 17239
   *                                                                                                                   // 17240
   *   `format` string can also be one of the following predefined                                                     // 17241
   *   {@link guide/i18n localizable formats}:                                                                         // 17242
   *                                                                                                                   // 17243
   *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                             // 17244
   *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                // 17245
   *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                           // 17246
   *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                             // 17247
   *     (e.g. Friday, September 3, 2010)                                                                              // 17248
   *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                          // 17249
   *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                               // 17250
   *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                        // 17251
   *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                               // 17252
   *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                      // 17253
   *                                                                                                                   // 17254
   *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.    // 17255
   *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence   // 17256
   *   (e.g. `"h 'o''clock'"`).                                                                                        // 17257
   *                                                                                                                   // 17258
   * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                  // 17259
   *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                     // 17260
   *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                    // 17261
   *    specified in the string input, the time is considered to be in the local timezone.                             // 17262
   * @param {string=} format Formatting rules (see Description). If not specified,                                     // 17263
   *    `mediumDate` is used.                                                                                          // 17264
   * @param {string=} timezone Timezone to be used for formatting. Right now, only `'UTC'` is supported.               // 17265
   *    If not specified, the timezone of the browser will be used.                                                    // 17266
   * @returns {string} Formatted string or the input if input is not recognized as date/millis.                        // 17267
   *                                                                                                                   // 17268
   * @example                                                                                                          // 17269
   <example>                                                                                                           // 17270
   <file name="index.html">                                                                                            // 17271
   <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                     // 17272
   <span>{{1288323623006 | date:'medium'}}</span><br>                                                                  // 17273
   <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                      // 17274
   <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                                   // 17275
   <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                         // 17276
   <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                                    // 17277
   <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:                                      // 17278
   <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>                                                 // 17279
   </file>                                                                                                             // 17280
   <file name="protractor.js" type="protractor">                                                                       // 17281
   it('should format date', function() {                                                                               // 17282
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).                                       // 17283
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);                                                      // 17284
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).                        // 17285
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);                                                  // 17286
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).                         // 17287
   toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);                                                                    // 17288
   expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).                          // 17289
   toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);                                                                   // 17290
   });                                                                                                                 // 17291
   </file>                                                                                                             // 17292
   </example>                                                                                                          // 17293
   */                                                                                                                  // 17294
  dateFilter.$inject = ['$locale'];                                                                                    // 17295
  function dateFilter($locale) {                                                                                       // 17296
                                                                                                                       // 17297
                                                                                                                       // 17298
    var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    // 1        2       3         4          5          6          7          8  9     10      11                      // 17300
    function jsonStringToDate(string) {                                                                                // 17301
      var match;                                                                                                       // 17302
      if (match = string.match(R_ISO8601_STR)) {                                                                       // 17303
        var date = new Date(0),                                                                                        // 17304
          tzHour = 0,                                                                                                  // 17305
          tzMin  = 0,                                                                                                  // 17306
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 17307
          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 17308
                                                                                                                       // 17309
        if (match[9]) {                                                                                                // 17310
          tzHour = int(match[9] + match[10]);                                                                          // 17311
          tzMin = int(match[9] + match[11]);                                                                           // 17312
        }                                                                                                              // 17313
        dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));                                        // 17314
        var h = int(match[4] || 0) - tzHour;                                                                           // 17315
        var m = int(match[5] || 0) - tzMin;                                                                            // 17316
        var s = int(match[6] || 0);                                                                                    // 17317
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                // 17318
        timeSetter.call(date, h, m, s, ms);                                                                            // 17319
        return date;                                                                                                   // 17320
      }                                                                                                                // 17321
      return string;                                                                                                   // 17322
    }                                                                                                                  // 17323
                                                                                                                       // 17324
                                                                                                                       // 17325
    return function(date, format, timezone) {                                                                          // 17326
      var text = '',                                                                                                   // 17327
        parts = [],                                                                                                    // 17328
        fn, match;                                                                                                     // 17329
                                                                                                                       // 17330
      format = format || 'mediumDate';                                                                                 // 17331
      format = $locale.DATETIME_FORMATS[format] || format;                                                             // 17332
      if (isString(date)) {                                                                                            // 17333
        date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);                                          // 17334
      }                                                                                                                // 17335
                                                                                                                       // 17336
      if (isNumber(date)) {                                                                                            // 17337
        date = new Date(date);                                                                                         // 17338
      }                                                                                                                // 17339
                                                                                                                       // 17340
      if (!isDate(date)) {                                                                                             // 17341
        return date;                                                                                                   // 17342
      }                                                                                                                // 17343
                                                                                                                       // 17344
      while (format) {                                                                                                 // 17345
        match = DATE_FORMATS_SPLIT.exec(format);                                                                       // 17346
        if (match) {                                                                                                   // 17347
          parts = concat(parts, match, 1);                                                                             // 17348
          format = parts.pop();                                                                                        // 17349
        } else {                                                                                                       // 17350
          parts.push(format);                                                                                          // 17351
          format = null;                                                                                               // 17352
        }                                                                                                              // 17353
      }                                                                                                                // 17354
                                                                                                                       // 17355
      if (timezone && timezone === 'UTC') {                                                                            // 17356
        date = new Date(date.getTime());                                                                               // 17357
        date.setMinutes(date.getMinutes() + date.getTimezoneOffset());                                                 // 17358
      }                                                                                                                // 17359
      forEach(parts, function(value) {                                                                                 // 17360
        fn = DATE_FORMATS[value];                                                                                      // 17361
        text += fn ? fn(date, $locale.DATETIME_FORMATS)                                                                // 17362
          : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");                                                         // 17363
      });                                                                                                              // 17364
                                                                                                                       // 17365
      return text;                                                                                                     // 17366
    };                                                                                                                 // 17367
  }                                                                                                                    // 17368
                                                                                                                       // 17369
                                                                                                                       // 17370
  /**                                                                                                                  // 17371
   * @ngdoc filter                                                                                                     // 17372
   * @name json                                                                                                        // 17373
   * @kind function                                                                                                    // 17374
   *                                                                                                                   // 17375
   * @description                                                                                                      // 17376
   *   Allows you to convert a JavaScript object into JSON string.                                                     // 17377
   *                                                                                                                   // 17378
   *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                      // 17379
   *   the binding is automatically converted to JSON.                                                                 // 17380
   *                                                                                                                   // 17381
   * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                         // 17382
   * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                              // 17383
   * @returns {string} JSON string.                                                                                    // 17384
   *                                                                                                                   // 17385
   *                                                                                                                   // 17386
   * @example                                                                                                          // 17387
   <example>                                                                                                           // 17388
   <file name="index.html">                                                                                            // 17389
   <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>                                                       // 17390
   <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>                                                      // 17391
   </file>                                                                                                             // 17392
   <file name="protractor.js" type="protractor">                                                                       // 17393
   it('should jsonify filtered objects', function() {                                                                  // 17394
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);                     // 17395
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);                    // 17396
       });                                                                                                             // 17397
   </file>                                                                                                             // 17398
   </example>                                                                                                          // 17399
   *                                                                                                                   // 17400
   */                                                                                                                  // 17401
  function jsonFilter() {                                                                                              // 17402
    return function(object, spacing) {                                                                                 // 17403
      if (isUndefined(spacing)) {                                                                                      // 17404
        spacing = 2;                                                                                                   // 17405
      }                                                                                                                // 17406
      return toJson(object, spacing);                                                                                  // 17407
    };                                                                                                                 // 17408
  }                                                                                                                    // 17409
                                                                                                                       // 17410
                                                                                                                       // 17411
  /**                                                                                                                  // 17412
   * @ngdoc filter                                                                                                     // 17413
   * @name lowercase                                                                                                   // 17414
   * @kind function                                                                                                    // 17415
   * @description                                                                                                      // 17416
   * Converts string to lowercase.                                                                                     // 17417
   * @see angular.lowercase                                                                                            // 17418
   */                                                                                                                  // 17419
  var lowercaseFilter = valueFn(lowercase);                                                                            // 17420
                                                                                                                       // 17421
                                                                                                                       // 17422
  /**                                                                                                                  // 17423
   * @ngdoc filter                                                                                                     // 17424
   * @name uppercase                                                                                                   // 17425
   * @kind function                                                                                                    // 17426
   * @description                                                                                                      // 17427
   * Converts string to uppercase.                                                                                     // 17428
   * @see angular.uppercase                                                                                            // 17429
   */                                                                                                                  // 17430
  var uppercaseFilter = valueFn(uppercase);                                                                            // 17431
                                                                                                                       // 17432
  /**                                                                                                                  // 17433
   * @ngdoc filter                                                                                                     // 17434
   * @name limitTo                                                                                                     // 17435
   * @kind function                                                                                                    // 17436
   *                                                                                                                   // 17437
   * @description                                                                                                      // 17438
   * Creates a new array or string containing only a specified number of elements. The elements                        // 17439
   * are taken from either the beginning or the end of the source array, string or number, as specified by             // 17440
   * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                         // 17441
   * converted to a string.                                                                                            // 17442
   *                                                                                                                   // 17443
   * @param {Array|string|number} input Source array, string or number to be limited.                                  // 17444
   * @param {string|number} limit The length of the returned array or string. If the `limit` number                    // 17445
   *     is positive, `limit` number of items from the beginning of the source array/string are copied.                // 17446
   *     If the number is negative, `limit` number  of items from the end of the source array/string                   // 17447
   *     are copied. The `limit` will be trimmed if it exceeds `array.length`                                          // 17448
   * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                     // 17449
   *     had less than `limit` elements.                                                                               // 17450
   *                                                                                                                   // 17451
   * @example                                                                                                          // 17452
   <example module="limitToExample">                                                                                   // 17453
   <file name="index.html">                                                                                            // 17454
   <script>                                                                                                            // 17455
   angular.module('limitToExample', [])                                                                                // 17456
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 17457
             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 17458
             $scope.letters = "abcdefghi";                                                                             // 17459
             $scope.longNumber = 2345432342;                                                                           // 17460
             $scope.numLimit = 3;                                                                                      // 17461
             $scope.letterLimit = 3;                                                                                   // 17462
             $scope.longNumberLimit = 3;                                                                               // 17463
           }]);                                                                                                        // 17464
   </script>                                                                                                           // 17465
   <div ng-controller="ExampleController">                                                                             // 17466
   Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">                                            // 17467
   <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                             // 17468
   Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">                                         // 17469
   <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                          // 17470
   Limit {{longNumber}} to: <input type="number" step="1" ng-model="longNumberLimit">                                  // 17471
   <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                               // 17472
   </div>                                                                                                              // 17473
   </file>                                                                                                             // 17474
   <file name="protractor.js" type="protractor">                                                                       // 17475
   var numLimitInput = element(by.model('numLimit'));                                                                  // 17476
   var letterLimitInput = element(by.model('letterLimit'));                                                            // 17477
   var longNumberLimitInput = element(by.model('longNumberLimit'));                                                    // 17478
   var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                             // 17479
   var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                          // 17480
   var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                                // 17481
                                                                                                                       // 17482
   it('should limit the number array to first three items', function() {                                               // 17483
         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 17484
         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 17485
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 17486
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 17487
         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 17488
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 17489
       });                                                                                                             // 17490
                                                                                                                       // 17491
   // There is a bug in safari and protractor that doesn't like the minus key                                          // 17492
   // it('should update the output when -3 is entered', function() {                                                   // 17493
       //   numLimitInput.clear();                                                                                     // 17494
       //   numLimitInput.sendKeys('-3');                                                                              // 17495
       //   letterLimitInput.clear();                                                                                  // 17496
       //   letterLimitInput.sendKeys('-3');                                                                           // 17497
       //   longNumberLimitInput.clear();                                                                              // 17498
       //   longNumberLimitInput.sendKeys('-3');                                                                       // 17499
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 17500
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 17501
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 17502
       // });                                                                                                          // 17503
                                                                                                                       // 17504
   it('should not exceed the maximum size of input array', function() {                                                // 17505
         numLimitInput.clear();                                                                                        // 17506
         numLimitInput.sendKeys('100');                                                                                // 17507
         letterLimitInput.clear();                                                                                     // 17508
         letterLimitInput.sendKeys('100');                                                                             // 17509
         longNumberLimitInput.clear();                                                                                 // 17510
         longNumberLimitInput.sendKeys('100');                                                                         // 17511
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 17512
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 17513
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 17514
       });                                                                                                             // 17515
   </file>                                                                                                             // 17516
   </example>                                                                                                          // 17517
   */                                                                                                                  // 17518
  function limitToFilter() {                                                                                           // 17519
    return function(input, limit) {                                                                                    // 17520
      if (isNumber(input)) input = input.toString();                                                                   // 17521
      if (!isArray(input) && !isString(input)) return input;                                                           // 17522
                                                                                                                       // 17523
      if (Math.abs(Number(limit)) === Infinity) {                                                                      // 17524
        limit = Number(limit);                                                                                         // 17525
      } else {                                                                                                         // 17526
        limit = int(limit);                                                                                            // 17527
      }                                                                                                                // 17528
                                                                                                                       // 17529
      //NaN check on limit                                                                                             // 17530
      if (limit) {                                                                                                     // 17531
        return limit > 0 ? input.slice(0, limit) : input.slice(limit);                                                 // 17532
      } else {                                                                                                         // 17533
        return isString(input) ? "" : [];                                                                              // 17534
      }                                                                                                                // 17535
    };                                                                                                                 // 17536
  }                                                                                                                    // 17537
                                                                                                                       // 17538
  /**                                                                                                                  // 17539
   * @ngdoc filter                                                                                                     // 17540
   * @name orderBy                                                                                                     // 17541
   * @kind function                                                                                                    // 17542
   *                                                                                                                   // 17543
   * @description                                                                                                      // 17544
   * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                            // 17545
   * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                         // 17546
   * correctly, make sure they are actually being saved as numbers and not strings.                                    // 17547
   *                                                                                                                   // 17548
   * @param {Array} array The array to sort.                                                                           // 17549
   * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                            // 17550
   *    used by the comparator to determine the order of elements.                                                     // 17551
   *                                                                                                                   // 17552
   *    Can be one of:                                                                                                 // 17553
   *                                                                                                                   // 17554
   *    - `function`: Getter function. The result of this function will be sorted using the                            // 17555
   *      `<`, `=`, `>` operator.                                                                                      // 17556
   *    - `string`: An Angular expression. The result of this expression is used to compare elements                   // 17557
   *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                    // 17558
   *      3 first characters of a property called `name`). The result of a constant expression                         // 17559
   *      is interpreted as a property name to be used in comparisons (for example `"special name"`                    // 17560
   *      to sort object by the value of their `special name` property). An expression can be                          // 17561
   *      optionally prefixed with `+` or `-` to control ascending or descending sort order                            // 17562
   *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                   // 17563
   *      element itself is used to compare where sorting.                                                             // 17564
   *    - `Array`: An array of function or string predicates. The first predicate in the array                         // 17565
   *      is used for sorting, but when two items are equivalent, the next predicate is used.                          // 17566
   *                                                                                                                   // 17567
   *    If the predicate is missing or empty then it defaults to `'+'`.                                                // 17568
   *                                                                                                                   // 17569
   * @param {boolean=} reverse Reverse the order of the array.                                                         // 17570
   * @returns {Array} Sorted copy of the source array.                                                                 // 17571
   *                                                                                                                   // 17572
   *                                                                                                                   // 17573
   * @example                                                                                                          // 17574
   * The example below demonstrates a simple ngRepeat, where the data is sorted                                        // 17575
   * by age in descending order (predicate is set to `'-age'`).                                                        // 17576
   * `reverse` is not set, which means it defaults to `false`.                                                         // 17577
   <example module="orderByExample">                                                                                   // 17578
   <file name="index.html">                                                                                            // 17579
   <script>                                                                                                            // 17580
   angular.module('orderByExample', [])                                                                                // 17581
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 17582
             $scope.friends =                                                                                          // 17583
                 [{name:'John', phone:'555-1212', age:10},                                                             // 17584
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 17585
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 17586
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 17587
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 17588
           }]);                                                                                                        // 17589
   </script>                                                                                                           // 17590
   <div ng-controller="ExampleController">                                                                             // 17591
   <table class="friend">                                                                                              // 17592
   <tr>                                                                                                                // 17593
   <th>Name</th>                                                                                                       // 17594
   <th>Phone Number</th>                                                                                               // 17595
   <th>Age</th>                                                                                                        // 17596
   </tr>                                                                                                               // 17597
   <tr ng-repeat="friend in friends | orderBy:'-age'">                                                                 // 17598
   <td>{{friend.name}}</td>                                                                                            // 17599
   <td>{{friend.phone}}</td>                                                                                           // 17600
   <td>{{friend.age}}</td>                                                                                             // 17601
   </tr>                                                                                                               // 17602
   </table>                                                                                                            // 17603
   </div>                                                                                                              // 17604
   </file>                                                                                                             // 17605
   </example>                                                                                                          // 17606
   *                                                                                                                   // 17607
   * The predicate and reverse parameters can be controlled dynamically through scope properties,                      // 17608
   * as shown in the next example.                                                                                     // 17609
   * @example                                                                                                          // 17610
   <example module="orderByExample">                                                                                   // 17611
   <file name="index.html">                                                                                            // 17612
   <script>                                                                                                            // 17613
   angular.module('orderByExample', [])                                                                                // 17614
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 17615
             $scope.friends =                                                                                          // 17616
                 [{name:'John', phone:'555-1212', age:10},                                                             // 17617
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 17618
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 17619
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 17620
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 17621
             $scope.predicate = '-age';                                                                                // 17622
           }]);                                                                                                        // 17623
   </script>                                                                                                           // 17624
   <div ng-controller="ExampleController">                                                                             // 17625
   <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                                 // 17626
   <hr/>                                                                                                               // 17627
   [ <a href="" ng-click="predicate=''">unsorted</a> ]                                                                 // 17628
   <table class="friend">                                                                                              // 17629
   <tr>                                                                                                                // 17630
   <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>                                                // 17631
   (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>                                               // 17632
   <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>                               // 17633
   <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>                                          // 17634
   </tr>                                                                                                               // 17635
   <tr ng-repeat="friend in friends | orderBy:predicate:reverse">                                                      // 17636
   <td>{{friend.name}}</td>                                                                                            // 17637
   <td>{{friend.phone}}</td>                                                                                           // 17638
   <td>{{friend.age}}</td>                                                                                             // 17639
   </tr>                                                                                                               // 17640
   </table>                                                                                                            // 17641
   </div>                                                                                                              // 17642
   </file>                                                                                                             // 17643
   </example>                                                                                                          // 17644
   *                                                                                                                   // 17645
   * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                    // 17646
   * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                        // 17647
   * desired parameters.                                                                                               // 17648
   *                                                                                                                   // 17649
   * Example:                                                                                                          // 17650
   *                                                                                                                   // 17651
   * @example                                                                                                          // 17652
   <example module="orderByExample">                                                                                   // 17653
   <file name="index.html">                                                                                            // 17654
   <div ng-controller="ExampleController">                                                                             // 17655
   <table class="friend">                                                                                              // 17656
   <tr>                                                                                                                // 17657
   <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>                                               // 17658
   (<a href="" ng-click="order('-name',false)">^</a>)</th>                                                             // 17659
   <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>                            // 17660
   <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>                                        // 17661
   </tr>                                                                                                               // 17662
   <tr ng-repeat="friend in friends">                                                                                  // 17663
   <td>{{friend.name}}</td>                                                                                            // 17664
   <td>{{friend.phone}}</td>                                                                                           // 17665
   <td>{{friend.age}}</td>                                                                                             // 17666
   </tr>                                                                                                               // 17667
   </table>                                                                                                            // 17668
   </div>                                                                                                              // 17669
   </file>                                                                                                             // 17670
                                                                                                                       // 17671
   <file name="script.js">                                                                                             // 17672
   angular.module('orderByExample', [])                                                                                // 17673
   .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                                  // 17674
          var orderBy = $filter('orderBy');                                                                            // 17675
          $scope.friends = [                                                                                           // 17676
            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 17677
            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 17678
            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 17679
            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 17680
            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 17681
          ];                                                                                                           // 17682
          $scope.order = function(predicate, reverse) {                                                                // 17683
            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 17684
          };                                                                                                           // 17685
          $scope.order('-age',false);                                                                                  // 17686
        }]);                                                                                                           // 17687
   </file>                                                                                                             // 17688
   </example>                                                                                                          // 17689
   */                                                                                                                  // 17690
  orderByFilter.$inject = ['$parse'];                                                                                  // 17691
  function orderByFilter($parse) {                                                                                     // 17692
    return function(array, sortPredicate, reverseOrder) {                                                              // 17693
      if (!(isArrayLike(array))) return array;                                                                         // 17694
      sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];                                        // 17695
      if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                       // 17696
      sortPredicate = sortPredicate.map(function(predicate) {                                                          // 17697
        var descending = false, get = predicate || identity;                                                           // 17698
        if (isString(predicate)) {                                                                                     // 17699
          if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                            // 17700
            descending = predicate.charAt(0) == '-';                                                                   // 17701
            predicate = predicate.substring(1);                                                                        // 17702
          }                                                                                                            // 17703
          if (predicate === '') {                                                                                      // 17704
            // Effectively no predicate was passed so we compare identity                                              // 17705
            return reverseComparator(compare, descending);                                                             // 17706
          }                                                                                                            // 17707
          get = $parse(predicate);                                                                                     // 17708
          if (get.constant) {                                                                                          // 17709
            var key = get();                                                                                           // 17710
            return reverseComparator(function(a, b) {                                                                  // 17711
              return compare(a[key], b[key]);                                                                          // 17712
            }, descending);                                                                                            // 17713
          }                                                                                                            // 17714
        }                                                                                                              // 17715
        return reverseComparator(function(a, b) {                                                                      // 17716
          return compare(get(a),get(b));                                                                               // 17717
        }, descending);                                                                                                // 17718
      });                                                                                                              // 17719
      return slice.call(array).sort(reverseComparator(comparator, reverseOrder));                                      // 17720
                                                                                                                       // 17721
      function comparator(o1, o2) {                                                                                    // 17722
        for (var i = 0; i < sortPredicate.length; i++) {                                                               // 17723
          var comp = sortPredicate[i](o1, o2);                                                                         // 17724
          if (comp !== 0) return comp;                                                                                 // 17725
        }                                                                                                              // 17726
        return 0;                                                                                                      // 17727
      }                                                                                                                // 17728
      function reverseComparator(comp, descending) {                                                                   // 17729
        return descending                                                                                              // 17730
          ? function(a, b) {return comp(b,a);}                                                                         // 17731
          : comp;                                                                                                      // 17732
      }                                                                                                                // 17733
                                                                                                                       // 17734
      function isPrimitive(value) {                                                                                    // 17735
        switch (typeof value) {                                                                                        // 17736
          case 'number': /* falls through */                                                                           // 17737
          case 'boolean': /* falls through */                                                                          // 17738
          case 'string':                                                                                               // 17739
            return true;                                                                                               // 17740
          default:                                                                                                     // 17741
            return false;                                                                                              // 17742
        }                                                                                                              // 17743
      }                                                                                                                // 17744
                                                                                                                       // 17745
      function objectToString(value) {                                                                                 // 17746
        if (value === null) return 'null';                                                                             // 17747
        if (typeof value.valueOf === 'function') {                                                                     // 17748
          value = value.valueOf();                                                                                     // 17749
          if (isPrimitive(value)) return value;                                                                        // 17750
        }                                                                                                              // 17751
        if (typeof value.toString === 'function') {                                                                    // 17752
          value = value.toString();                                                                                    // 17753
          if (isPrimitive(value)) return value;                                                                        // 17754
        }                                                                                                              // 17755
        return '';                                                                                                     // 17756
      }                                                                                                                // 17757
                                                                                                                       // 17758
      function compare(v1, v2) {                                                                                       // 17759
        var t1 = typeof v1;                                                                                            // 17760
        var t2 = typeof v2;                                                                                            // 17761
        if (t1 === t2 && t1 === "object") {                                                                            // 17762
          v1 = objectToString(v1);                                                                                     // 17763
          v2 = objectToString(v2);                                                                                     // 17764
        }                                                                                                              // 17765
        if (t1 === t2) {                                                                                               // 17766
          if (t1 === "string") {                                                                                       // 17767
            v1 = v1.toLowerCase();                                                                                     // 17768
            v2 = v2.toLowerCase();                                                                                     // 17769
          }                                                                                                            // 17770
          if (v1 === v2) return 0;                                                                                     // 17771
          return v1 < v2 ? -1 : 1;                                                                                     // 17772
        } else {                                                                                                       // 17773
          return t1 < t2 ? -1 : 1;                                                                                     // 17774
        }                                                                                                              // 17775
      }                                                                                                                // 17776
    };                                                                                                                 // 17777
  }                                                                                                                    // 17778
                                                                                                                       // 17779
  function ngDirective(directive) {                                                                                    // 17780
    if (isFunction(directive)) {                                                                                       // 17781
      directive = {                                                                                                    // 17782
        link: directive                                                                                                // 17783
      };                                                                                                               // 17784
    }                                                                                                                  // 17785
    directive.restrict = directive.restrict || 'AC';                                                                   // 17786
    return valueFn(directive);                                                                                         // 17787
  }                                                                                                                    // 17788
                                                                                                                       // 17789
  /**                                                                                                                  // 17790
   * @ngdoc directive                                                                                                  // 17791
   * @name a                                                                                                           // 17792
   * @restrict E                                                                                                       // 17793
   *                                                                                                                   // 17794
   * @description                                                                                                      // 17795
   * Modifies the default behavior of the html A tag so that the default action is prevented when                      // 17796
   * the href attribute is empty.                                                                                      // 17797
   *                                                                                                                   // 17798
   * This change permits the easy creation of action links with the `ngClick` directive                                // 17799
   * without changing the location or causing page reloads, e.g.:                                                      // 17800
   * `<a href="" ng-click="list.addItem()">Add Item</a>`                                                               // 17801
   */                                                                                                                  // 17802
  var htmlAnchorDirective = valueFn({                                                                                  // 17803
    restrict: 'E',                                                                                                     // 17804
    compile: function(element, attr) {                                                                                 // 17805
      if (!attr.href && !attr.xlinkHref && !attr.name) {                                                               // 17806
        return function(scope, element) {                                                                              // 17807
          // If the linked element is not an anchor tag anymore, do nothing                                            // 17808
          if (element[0].nodeName.toLowerCase() !== 'a') return;                                                       // 17809
                                                                                                                       // 17810
          // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                        // 17811
          var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                            // 17812
            'xlink:href' : 'href';                                                                                     // 17813
          element.on('click', function(event) {                                                                        // 17814
            // if we have no href url, then don't navigate anywhere.                                                   // 17815
            if (!element.attr(href)) {                                                                                 // 17816
              event.preventDefault();                                                                                  // 17817
            }                                                                                                          // 17818
          });                                                                                                          // 17819
        };                                                                                                             // 17820
      }                                                                                                                // 17821
    }                                                                                                                  // 17822
  });                                                                                                                  // 17823
                                                                                                                       // 17824
  /**                                                                                                                  // 17825
   * @ngdoc directive                                                                                                  // 17826
   * @name ngHref                                                                                                      // 17827
   * @restrict A                                                                                                       // 17828
   * @priority 99                                                                                                      // 17829
   *                                                                                                                   // 17830
   * @description                                                                                                      // 17831
   * Using Angular markup like `{{hash}}` in an href attribute will                                                    // 17832
   * make the link go to the wrong URL if the user clicks it before                                                    // 17833
   * Angular has a chance to replace the `{{hash}}` markup with its                                                    // 17834
   * value. Until Angular replaces the markup the link will be broken                                                  // 17835
   * and will most likely return a 404 error. The `ngHref` directive                                                   // 17836
   * solves this problem.                                                                                              // 17837
   *                                                                                                                   // 17838
   * The wrong way to write it:                                                                                        // 17839
   * ```html                                                                                                           // 17840
   * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                       // 17841
   * ```                                                                                                               // 17842
   *                                                                                                                   // 17843
   * The correct way to write it:                                                                                      // 17844
   * ```html                                                                                                           // 17845
   * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                    // 17846
   * ```                                                                                                               // 17847
   *                                                                                                                   // 17848
   * @element A                                                                                                        // 17849
   * @param {template} ngHref any string which can contain `{{}}` markup.                                              // 17850
   *                                                                                                                   // 17851
   * @example                                                                                                          // 17852
   * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                            // 17853
   * in links and their different behaviors:                                                                           // 17854
   <example>                                                                                                           // 17855
   <file name="index.html">                                                                                            // 17856
   <input ng-model="value" /><br />                                                                                    // 17857
   <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />                                      // 17858
   <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />                                   // 17859
   <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />                                                // 17860
   <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />                         // 17861
   <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />                                           // 17862
   <a id="link-6" ng-href="{{value}}">link</a> (link, change location)                                                 // 17863
   </file>                                                                                                             // 17864
   <file name="protractor.js" type="protractor">                                                                       // 17865
   it('should execute ng-click but not reload when href without value', function() {                                   // 17866
          element(by.id('link-1')).click();                                                                            // 17867
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 17868
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 17869
        });                                                                                                            // 17870
                                                                                                                       // 17871
   it('should execute ng-click but not reload when href empty string', function() {                                    // 17872
          element(by.id('link-2')).click();                                                                            // 17873
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 17874
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 17875
        });                                                                                                            // 17876
                                                                                                                       // 17877
   it('should execute ng-click and change url when ng-href specified', function() {                                    // 17878
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);                                     // 17879
                                                                                                                       // 17880
          element(by.id('link-3')).click();                                                                            // 17881
                                                                                                                       // 17882
          // At this point, we navigate away from an Angular page, so we need                                          // 17883
          // to use browser.driver to get the base webdriver.                                                          // 17884
                                                                                                                       // 17885
          browser.wait(function() {                                                                                    // 17886
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 17887
              return url.match(/\/123$/);                                                                              // 17888
            });                                                                                                        // 17889
          }, 5000, 'page should navigate to /123');                                                                    // 17890
        });                                                                                                            // 17891
                                                                                                                       // 17892
   xit('should execute ng-click but not reload when href empty string and name specified', function() {                // 17893
          element(by.id('link-4')).click();                                                                            // 17894
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 17895
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 17896
        });                                                                                                            // 17897
                                                                                                                       // 17898
   it('should execute ng-click but not reload when no href but name specified', function() {                           // 17899
          element(by.id('link-5')).click();                                                                            // 17900
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 17901
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 17902
        });                                                                                                            // 17903
                                                                                                                       // 17904
   it('should only change url when only ng-href', function() {                                                         // 17905
          element(by.model('value')).clear();                                                                          // 17906
          element(by.model('value')).sendKeys('6');                                                                    // 17907
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);                                       // 17908
                                                                                                                       // 17909
          element(by.id('link-6')).click();                                                                            // 17910
                                                                                                                       // 17911
          // At this point, we navigate away from an Angular page, so we need                                          // 17912
          // to use browser.driver to get the base webdriver.                                                          // 17913
          browser.wait(function() {                                                                                    // 17914
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 17915
              return url.match(/\/6$/);                                                                                // 17916
            });                                                                                                        // 17917
          }, 5000, 'page should navigate to /6');                                                                      // 17918
        });                                                                                                            // 17919
   </file>                                                                                                             // 17920
   </example>                                                                                                          // 17921
   */                                                                                                                  // 17922
                                                                                                                       // 17923
  /**                                                                                                                  // 17924
   * @ngdoc directive                                                                                                  // 17925
   * @name ngSrc                                                                                                       // 17926
   * @restrict A                                                                                                       // 17927
   * @priority 99                                                                                                      // 17928
   *                                                                                                                   // 17929
   * @description                                                                                                      // 17930
   * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                 // 17931
   * work right: The browser will fetch from the URL with the literal                                                  // 17932
   * text `{{hash}}` until Angular replaces the expression inside                                                      // 17933
   * `{{hash}}`. The `ngSrc` directive solves this problem.                                                            // 17934
   *                                                                                                                   // 17935
   * The buggy way to write it:                                                                                        // 17936
   * ```html                                                                                                           // 17937
   * <img src="http://www.gravatar.com/avatar/{{hash}}"/>                                                              // 17938
   * ```                                                                                                               // 17939
   *                                                                                                                   // 17940
   * The correct way to write it:                                                                                      // 17941
   * ```html                                                                                                           // 17942
   * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>                                                           // 17943
   * ```                                                                                                               // 17944
   *                                                                                                                   // 17945
   * @element IMG                                                                                                      // 17946
   * @param {template} ngSrc any string which can contain `{{}}` markup.                                               // 17947
   */                                                                                                                  // 17948
                                                                                                                       // 17949
  /**                                                                                                                  // 17950
   * @ngdoc directive                                                                                                  // 17951
   * @name ngSrcset                                                                                                    // 17952
   * @restrict A                                                                                                       // 17953
   * @priority 99                                                                                                      // 17954
   *                                                                                                                   // 17955
   * @description                                                                                                      // 17956
   * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                              // 17957
   * work right: The browser will fetch from the URL with the literal                                                  // 17958
   * text `{{hash}}` until Angular replaces the expression inside                                                      // 17959
   * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                         // 17960
   *                                                                                                                   // 17961
   * The buggy way to write it:                                                                                        // 17962
   * ```html                                                                                                           // 17963
   * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>                                                        // 17964
   * ```                                                                                                               // 17965
   *                                                                                                                   // 17966
   * The correct way to write it:                                                                                      // 17967
   * ```html                                                                                                           // 17968
   * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>                                                     // 17969
   * ```                                                                                                               // 17970
   *                                                                                                                   // 17971
   * @element IMG                                                                                                      // 17972
   * @param {template} ngSrcset any string which can contain `{{}}` markup.                                            // 17973
   */                                                                                                                  // 17974
                                                                                                                       // 17975
  /**                                                                                                                  // 17976
   * @ngdoc directive                                                                                                  // 17977
   * @name ngDisabled                                                                                                  // 17978
   * @restrict A                                                                                                       // 17979
   * @priority 100                                                                                                     // 17980
   *                                                                                                                   // 17981
   * @description                                                                                                      // 17982
   *                                                                                                                   // 17983
   * This directive sets the `disabled` attribute on the element if the                                                // 17984
   * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                      // 17985
   *                                                                                                                   // 17986
   * A special directive is necessary because we cannot use interpolation inside the `disabled`                        // 17987
   * attribute.  The following example would make the button enabled on Chrome/Firefox                                 // 17988
   * but not on older IEs:                                                                                             // 17989
   *                                                                                                                   // 17990
   * ```html                                                                                                           // 17991
   * <!-- See below for an example of ng-disabled being used correctly -->                                             // 17992
   * <div ng-init="isDisabled = false">                                                                                // 17993
   *  <button disabled="{{isDisabled}}">Disabled</button>                                                              // 17994
   * </div>                                                                                                            // 17995
   * ```                                                                                                               // 17996
   *                                                                                                                   // 17997
   * This is because the HTML specification does not require browsers to preserve the values of                        // 17998
   * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                  // 17999
   * If we put an Angular interpolation expression into such an attribute then the                                     // 18000
   * binding information would be lost when the browser removes the attribute.                                         // 18001
   *                                                                                                                   // 18002
   * @example                                                                                                          // 18003
   <example>                                                                                                           // 18004
   <file name="index.html">                                                                                            // 18005
   Click me to toggle: <input type="checkbox" ng-model="checked"><br/>                                                 // 18006
   <button ng-model="button" ng-disabled="checked">Button</button>                                                     // 18007
   </file>                                                                                                             // 18008
   <file name="protractor.js" type="protractor">                                                                       // 18009
   it('should toggle button', function() {                                                                             // 18010
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 18011
          element(by.model('checked')).click();                                                                        // 18012
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 18013
        });                                                                                                            // 18014
   </file>                                                                                                             // 18015
   </example>                                                                                                          // 18016
   *                                                                                                                   // 18017
   * @element INPUT                                                                                                    // 18018
   * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                              // 18019
   *     then the `disabled` attribute will be set on the element                                                      // 18020
   */                                                                                                                  // 18021
                                                                                                                       // 18022
                                                                                                                       // 18023
  /**                                                                                                                  // 18024
   * @ngdoc directive                                                                                                  // 18025
   * @name ngChecked                                                                                                   // 18026
   * @restrict A                                                                                                       // 18027
   * @priority 100                                                                                                     // 18028
   *                                                                                                                   // 18029
   * @description                                                                                                      // 18030
   * The HTML specification does not require browsers to preserve the values of boolean attributes                     // 18031
   * such as checked. (Their presence means true and their absence means false.)                                       // 18032
   * If we put an Angular interpolation expression into such an attribute then the                                     // 18033
   * binding information would be lost when the browser removes the attribute.                                         // 18034
   * The `ngChecked` directive solves this problem for the `checked` attribute.                                        // 18035
   * This complementary directive is not removed by the browser and so provides                                        // 18036
   * a permanent reliable place to store the binding information.                                                      // 18037
   * @example                                                                                                          // 18038
   <example>                                                                                                           // 18039
   <file name="index.html">                                                                                            // 18040
   Check me to check both: <input type="checkbox" ng-model="master"><br/>                                              // 18041
   <input id="checkSlave" type="checkbox" ng-checked="master">                                                         // 18042
   </file>                                                                                                             // 18043
   <file name="protractor.js" type="protractor">                                                                       // 18044
   it('should check both checkBoxes', function() {                                                                     // 18045
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 18046
          element(by.model('master')).click();                                                                         // 18047
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 18048
        });                                                                                                            // 18049
   </file>                                                                                                             // 18050
   </example>                                                                                                          // 18051
   *                                                                                                                   // 18052
   * @element INPUT                                                                                                    // 18053
   * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                               // 18054
   *     then special attribute "checked" will be set on the element                                                   // 18055
   */                                                                                                                  // 18056
                                                                                                                       // 18057
                                                                                                                       // 18058
  /**                                                                                                                  // 18059
   * @ngdoc directive                                                                                                  // 18060
   * @name ngReadonly                                                                                                  // 18061
   * @restrict A                                                                                                       // 18062
   * @priority 100                                                                                                     // 18063
   *                                                                                                                   // 18064
   * @description                                                                                                      // 18065
   * The HTML specification does not require browsers to preserve the values of boolean attributes                     // 18066
   * such as readonly. (Their presence means true and their absence means false.)                                      // 18067
   * If we put an Angular interpolation expression into such an attribute then the                                     // 18068
   * binding information would be lost when the browser removes the attribute.                                         // 18069
   * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                      // 18070
   * This complementary directive is not removed by the browser and so provides                                        // 18071
   * a permanent reliable place to store the binding information.                                                      // 18072
   * @example                                                                                                          // 18073
   <example>                                                                                                           // 18074
   <file name="index.html">                                                                                            // 18075
   Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>                                     // 18076
   <input type="text" ng-readonly="checked" value="I'm Angular"/>                                                      // 18077
   </file>                                                                                                             // 18078
   <file name="protractor.js" type="protractor">                                                                       // 18079
   it('should toggle readonly attr', function() {                                                                      // 18080
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();                               // 18081
          element(by.model('checked')).click();                                                                        // 18082
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();                              // 18083
        });                                                                                                            // 18084
   </file>                                                                                                             // 18085
   </example>                                                                                                          // 18086
   *                                                                                                                   // 18087
   * @element INPUT                                                                                                    // 18088
   * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                              // 18089
   *     then special attribute "readonly" will be set on the element                                                  // 18090
   */                                                                                                                  // 18091
                                                                                                                       // 18092
                                                                                                                       // 18093
  /**                                                                                                                  // 18094
   * @ngdoc directive                                                                                                  // 18095
   * @name ngSelected                                                                                                  // 18096
   * @restrict A                                                                                                       // 18097
   * @priority 100                                                                                                     // 18098
   *                                                                                                                   // 18099
   * @description                                                                                                      // 18100
   * The HTML specification does not require browsers to preserve the values of boolean attributes                     // 18101
   * such as selected. (Their presence means true and their absence means false.)                                      // 18102
   * If we put an Angular interpolation expression into such an attribute then the                                     // 18103
   * binding information would be lost when the browser removes the attribute.                                         // 18104
   * The `ngSelected` directive solves this problem for the `selected` attribute.                                      // 18105
   * This complementary directive is not removed by the browser and so provides                                        // 18106
   * a permanent reliable place to store the binding information.                                                      // 18107
   *                                                                                                                   // 18108
   * @example                                                                                                          // 18109
   <example>                                                                                                           // 18110
   <file name="index.html">                                                                                            // 18111
   Check me to select: <input type="checkbox" ng-model="selected"><br/>                                                // 18112
   <select>                                                                                                            // 18113
   <option>Hello!</option>                                                                                             // 18114
   <option id="greet" ng-selected="selected">Greetings!</option>                                                       // 18115
   </select>                                                                                                           // 18116
   </file>                                                                                                             // 18117
   <file name="protractor.js" type="protractor">                                                                       // 18118
   it('should select Greetings!', function() {                                                                         // 18119
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 18120
          element(by.model('selected')).click();                                                                       // 18121
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 18122
        });                                                                                                            // 18123
   </file>                                                                                                             // 18124
   </example>                                                                                                          // 18125
   *                                                                                                                   // 18126
   * @element OPTION                                                                                                   // 18127
   * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                              // 18128
   *     then special attribute "selected" will be set on the element                                                  // 18129
   */                                                                                                                  // 18130
                                                                                                                       // 18131
  /**                                                                                                                  // 18132
   * @ngdoc directive                                                                                                  // 18133
   * @name ngOpen                                                                                                      // 18134
   * @restrict A                                                                                                       // 18135
   * @priority 100                                                                                                     // 18136
   *                                                                                                                   // 18137
   * @description                                                                                                      // 18138
   * The HTML specification does not require browsers to preserve the values of boolean attributes                     // 18139
   * such as open. (Their presence means true and their absence means false.)                                          // 18140
   * If we put an Angular interpolation expression into such an attribute then the                                     // 18141
   * binding information would be lost when the browser removes the attribute.                                         // 18142
   * The `ngOpen` directive solves this problem for the `open` attribute.                                              // 18143
   * This complementary directive is not removed by the browser and so provides                                        // 18144
   * a permanent reliable place to store the binding information.                                                      // 18145
   * @example                                                                                                          // 18146
   <example>                                                                                                           // 18147
   <file name="index.html">                                                                                            // 18148
   Check me check multiple: <input type="checkbox" ng-model="open"><br/>                                               // 18149
   <details id="details" ng-open="open">                                                                               // 18150
   <summary>Show/Hide me</summary>                                                                                     // 18151
   </details>                                                                                                          // 18152
   </file>                                                                                                             // 18153
   <file name="protractor.js" type="protractor">                                                                       // 18154
   it('should toggle open', function() {                                                                               // 18155
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 18156
           element(by.model('open')).click();                                                                          // 18157
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 18158
         });                                                                                                           // 18159
   </file>                                                                                                             // 18160
   </example>                                                                                                          // 18161
   *                                                                                                                   // 18162
   * @element DETAILS                                                                                                  // 18163
   * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                  // 18164
   *     then special attribute "open" will be set on the element                                                      // 18165
   */                                                                                                                  // 18166
                                                                                                                       // 18167
  var ngAttributeAliasDirectives = {};                                                                                 // 18168
                                                                                                                       // 18169
                                                                                                                       // 18170
// boolean attrs are evaluated                                                                                         // 18171
  forEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                 // 18172
    // binding to multiple is not supported                                                                            // 18173
    if (propName == "multiple") return;                                                                                // 18174
                                                                                                                       // 18175
    var normalized = directiveNormalize('ng-' + attrName);                                                             // 18176
    ngAttributeAliasDirectives[normalized] = function() {                                                              // 18177
      return {                                                                                                         // 18178
        restrict: 'A',                                                                                                 // 18179
        priority: 100,                                                                                                 // 18180
        link: function(scope, element, attr) {                                                                         // 18181
          scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                    // 18182
            attr.$set(attrName, !!value);                                                                              // 18183
          });                                                                                                          // 18184
        }                                                                                                              // 18185
      };                                                                                                               // 18186
    };                                                                                                                 // 18187
  });                                                                                                                  // 18188
                                                                                                                       // 18189
// aliased input attrs are evaluated                                                                                   // 18190
  forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                   // 18191
    ngAttributeAliasDirectives[ngAttr] = function() {                                                                  // 18192
      return {                                                                                                         // 18193
        priority: 100,                                                                                                 // 18194
        link: function(scope, element, attr) {                                                                         // 18195
          //special case ngPattern when a literal regular expression value                                             // 18196
          //is used as the expression (this way we don't have to watch anything).                                      // 18197
          if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {                                             // 18198
            var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                     // 18199
            if (match) {                                                                                               // 18200
              attr.$set("ngPattern", new RegExp(match[1], match[2]));                                                  // 18201
              return;                                                                                                  // 18202
            }                                                                                                          // 18203
          }                                                                                                            // 18204
                                                                                                                       // 18205
          scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                          // 18206
            attr.$set(ngAttr, value);                                                                                  // 18207
          });                                                                                                          // 18208
        }                                                                                                              // 18209
      };                                                                                                               // 18210
    };                                                                                                                 // 18211
  });                                                                                                                  // 18212
                                                                                                                       // 18213
// ng-src, ng-srcset, ng-href are interpolated                                                                         // 18214
  forEach(['src', 'srcset', 'href'], function(attrName) {                                                              // 18215
    var normalized = directiveNormalize('ng-' + attrName);                                                             // 18216
    ngAttributeAliasDirectives[normalized] = function() {                                                              // 18217
      return {                                                                                                         // 18218
        priority: 99, // it needs to run after the attributes are interpolated                                         // 18219
        link: function(scope, element, attr) {                                                                         // 18220
          var propName = attrName,                                                                                     // 18221
            name = attrName;                                                                                           // 18222
                                                                                                                       // 18223
          if (attrName === 'href' &&                                                                                   // 18224
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 18225
            name = 'xlinkHref';                                                                                        // 18226
            attr.$attr[name] = 'xlink:href';                                                                           // 18227
            propName = null;                                                                                           // 18228
          }                                                                                                            // 18229
                                                                                                                       // 18230
          attr.$observe(normalized, function(value) {                                                                  // 18231
            if (!value) {                                                                                              // 18232
              if (attrName === 'href') {                                                                               // 18233
                attr.$set(name, null);                                                                                 // 18234
              }                                                                                                        // 18235
              return;                                                                                                  // 18236
            }                                                                                                          // 18237
                                                                                                                       // 18238
            attr.$set(name, value);                                                                                    // 18239
                                                                                                                       // 18240
            // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist                      // 18241
            // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                         // 18242
            // to set the property as well to achieve the desired effect.                                              // 18243
            // we use attr[attrName] value since $set can sanitize the url.                                            // 18244
            if (msie && propName) element.prop(propName, attr[name]);                                                  // 18245
          });                                                                                                          // 18246
        }                                                                                                              // 18247
      };                                                                                                               // 18248
    };                                                                                                                 // 18249
  });                                                                                                                  // 18250
                                                                                                                       // 18251
  /* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                // 18252
   */                                                                                                                  // 18253
  var nullFormCtrl = {                                                                                                 // 18254
      $addControl: noop,                                                                                               // 18255
      $$renameControl: nullFormRenameControl,                                                                          // 18256
      $removeControl: noop,                                                                                            // 18257
      $setValidity: noop,                                                                                              // 18258
      $setDirty: noop,                                                                                                 // 18259
      $setPristine: noop,                                                                                              // 18260
      $setSubmitted: noop                                                                                              // 18261
    },                                                                                                                 // 18262
    SUBMITTED_CLASS = 'ng-submitted';                                                                                  // 18263
                                                                                                                       // 18264
  function nullFormRenameControl(control, name) {                                                                      // 18265
    control.$name = name;                                                                                              // 18266
  }                                                                                                                    // 18267
                                                                                                                       // 18268
  /**                                                                                                                  // 18269
   * @ngdoc type                                                                                                       // 18270
   * @name form.FormController                                                                                         // 18271
   *                                                                                                                   // 18272
   * @property {boolean} $pristine True if user has not interacted with the form yet.                                  // 18273
   * @property {boolean} $dirty True if user has already interacted with the form.                                     // 18274
   * @property {boolean} $valid True if all of the containing forms and controls are valid.                            // 18275
   * @property {boolean} $invalid True if at least one containing control or form is invalid.                          // 18276
   * @property {boolean} $submitted True if user has submitted the form even if its invalid.                           // 18277
   *                                                                                                                   // 18278
   * @property {Object} $error Is an object hash, containing references to controls or                                 // 18279
   *  forms with failing validators, where:                                                                            // 18280
   *                                                                                                                   // 18281
   *  - keys are validation tokens (error names),                                                                      // 18282
   *  - values are arrays of controls or forms that have a failing validator for given error name.                     // 18283
   *                                                                                                                   // 18284
   *  Built-in validation tokens:                                                                                      // 18285
   *                                                                                                                   // 18286
   *  - `email`                                                                                                        // 18287
   *  - `max`                                                                                                          // 18288
   *  - `maxlength`                                                                                                    // 18289
   *  - `min`                                                                                                          // 18290
   *  - `minlength`                                                                                                    // 18291
   *  - `number`                                                                                                       // 18292
   *  - `pattern`                                                                                                      // 18293
   *  - `required`                                                                                                     // 18294
   *  - `url`                                                                                                          // 18295
   *  - `date`                                                                                                         // 18296
   *  - `datetimelocal`                                                                                                // 18297
   *  - `time`                                                                                                         // 18298
   *  - `week`                                                                                                         // 18299
   *  - `month`                                                                                                        // 18300
   *                                                                                                                   // 18301
   * @description                                                                                                      // 18302
   * `FormController` keeps track of all its controls and nested forms as well as the state of them,                   // 18303
   * such as being valid/invalid or dirty/pristine.                                                                    // 18304
   *                                                                                                                   // 18305
   * Each {@link ng.directive:form form} directive creates an instance                                                 // 18306
   * of `FormController`.                                                                                              // 18307
   *                                                                                                                   // 18308
   */                                                                                                                  // 18309
//asks for $scope to fool the BC controller module                                                                     // 18310
  FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                               // 18311
  function FormController(element, attrs, $scope, $animate, $interpolate) {                                            // 18312
    var form = this,                                                                                                   // 18313
      controls = [];                                                                                                   // 18314
                                                                                                                       // 18315
    var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;                          // 18316
                                                                                                                       // 18317
    // init state                                                                                                      // 18318
    form.$error = {};                                                                                                  // 18319
    form.$$success = {};                                                                                               // 18320
    form.$pending = undefined;                                                                                         // 18321
    form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                               // 18322
    form.$dirty = false;                                                                                               // 18323
    form.$pristine = true;                                                                                             // 18324
    form.$valid = true;                                                                                                // 18325
    form.$invalid = false;                                                                                             // 18326
    form.$submitted = false;                                                                                           // 18327
                                                                                                                       // 18328
    parentForm.$addControl(form);                                                                                      // 18329
                                                                                                                       // 18330
    /**                                                                                                                // 18331
     * @ngdoc method                                                                                                   // 18332
     * @name form.FormController#$rollbackViewValue                                                                    // 18333
     *                                                                                                                 // 18334
     * @description                                                                                                    // 18335
     * Rollback all form controls pending updates to the `$modelValue`.                                                // 18336
     *                                                                                                                 // 18337
     * Updates may be pending by a debounced event or because the input is waiting for a some future                   // 18338
     * event defined in `ng-model-options`. This method is typically needed by the reset button of                     // 18339
     * a form that uses `ng-model-options` to pend updates.                                                            // 18340
     */                                                                                                                // 18341
    form.$rollbackViewValue = function() {                                                                             // 18342
      forEach(controls, function(control) {                                                                            // 18343
        control.$rollbackViewValue();                                                                                  // 18344
      });                                                                                                              // 18345
    };                                                                                                                 // 18346
                                                                                                                       // 18347
    /**                                                                                                                // 18348
     * @ngdoc method                                                                                                   // 18349
     * @name form.FormController#$commitViewValue                                                                      // 18350
     *                                                                                                                 // 18351
     * @description                                                                                                    // 18352
     * Commit all form controls pending updates to the `$modelValue`.                                                  // 18353
     *                                                                                                                 // 18354
     * Updates may be pending by a debounced event or because the input is waiting for a some future                   // 18355
     * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                        // 18356
     * usually handles calling this in response to input events.                                                       // 18357
     */                                                                                                                // 18358
    form.$commitViewValue = function() {                                                                               // 18359
      forEach(controls, function(control) {                                                                            // 18360
        control.$commitViewValue();                                                                                    // 18361
      });                                                                                                              // 18362
    };                                                                                                                 // 18363
                                                                                                                       // 18364
    /**                                                                                                                // 18365
     * @ngdoc method                                                                                                   // 18366
     * @name form.FormController#$addControl                                                                           // 18367
     *                                                                                                                 // 18368
     * @description                                                                                                    // 18369
     * Register a control with the form.                                                                               // 18370
     *                                                                                                                 // 18371
     * Input elements using ngModelController do this automatically when they are linked.                              // 18372
     */                                                                                                                // 18373
    form.$addControl = function(control) {                                                                             // 18374
      // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored                         // 18375
      // and not added to the scope.  Now we throw an error.                                                           // 18376
      assertNotHasOwnProperty(control.$name, 'input');                                                                 // 18377
      controls.push(control);                                                                                          // 18378
                                                                                                                       // 18379
      if (control.$name) {                                                                                             // 18380
        form[control.$name] = control;                                                                                 // 18381
      }                                                                                                                // 18382
    };                                                                                                                 // 18383
                                                                                                                       // 18384
    // Private API: rename a form control                                                                              // 18385
    form.$$renameControl = function(control, newName) {                                                                // 18386
      var oldName = control.$name;                                                                                     // 18387
                                                                                                                       // 18388
      if (form[oldName] === control) {                                                                                 // 18389
        delete form[oldName];                                                                                          // 18390
      }                                                                                                                // 18391
      form[newName] = control;                                                                                         // 18392
      control.$name = newName;                                                                                         // 18393
    };                                                                                                                 // 18394
                                                                                                                       // 18395
    /**                                                                                                                // 18396
     * @ngdoc method                                                                                                   // 18397
     * @name form.FormController#$removeControl                                                                        // 18398
     *                                                                                                                 // 18399
     * @description                                                                                                    // 18400
     * Deregister a control from the form.                                                                             // 18401
     *                                                                                                                 // 18402
     * Input elements using ngModelController do this automatically when they are destroyed.                           // 18403
     */                                                                                                                // 18404
    form.$removeControl = function(control) {                                                                          // 18405
      if (control.$name && form[control.$name] === control) {                                                          // 18406
        delete form[control.$name];                                                                                    // 18407
      }                                                                                                                // 18408
      forEach(form.$pending, function(value, name) {                                                                   // 18409
        form.$setValidity(name, null, control);                                                                        // 18410
      });                                                                                                              // 18411
      forEach(form.$error, function(value, name) {                                                                     // 18412
        form.$setValidity(name, null, control);                                                                        // 18413
      });                                                                                                              // 18414
      forEach(form.$$success, function(value, name) {                                                                  // 18415
        form.$setValidity(name, null, control);                                                                        // 18416
      });                                                                                                              // 18417
                                                                                                                       // 18418
      arrayRemove(controls, control);                                                                                  // 18419
    };                                                                                                                 // 18420
                                                                                                                       // 18421
                                                                                                                       // 18422
    /**                                                                                                                // 18423
     * @ngdoc method                                                                                                   // 18424
     * @name form.FormController#$setValidity                                                                          // 18425
     *                                                                                                                 // 18426
     * @description                                                                                                    // 18427
     * Sets the validity of a form control.                                                                            // 18428
     *                                                                                                                 // 18429
     * This method will also propagate to parent forms.                                                                // 18430
     */                                                                                                                // 18431
    addSetValidityMethod({                                                                                             // 18432
      ctrl: this,                                                                                                      // 18433
      $element: element,                                                                                               // 18434
      set: function(object, property, controller) {                                                                    // 18435
        var list = object[property];                                                                                   // 18436
        if (!list) {                                                                                                   // 18437
          object[property] = [controller];                                                                             // 18438
        } else {                                                                                                       // 18439
          var index = list.indexOf(controller);                                                                        // 18440
          if (index === -1) {                                                                                          // 18441
            list.push(controller);                                                                                     // 18442
          }                                                                                                            // 18443
        }                                                                                                              // 18444
      },                                                                                                               // 18445
      unset: function(object, property, controller) {                                                                  // 18446
        var list = object[property];                                                                                   // 18447
        if (!list) {                                                                                                   // 18448
          return;                                                                                                      // 18449
        }                                                                                                              // 18450
        arrayRemove(list, controller);                                                                                 // 18451
        if (list.length === 0) {                                                                                       // 18452
          delete object[property];                                                                                     // 18453
        }                                                                                                              // 18454
      },                                                                                                               // 18455
      parentForm: parentForm,                                                                                          // 18456
      $animate: $animate                                                                                               // 18457
    });                                                                                                                // 18458
                                                                                                                       // 18459
    /**                                                                                                                // 18460
     * @ngdoc method                                                                                                   // 18461
     * @name form.FormController#$setDirty                                                                             // 18462
     *                                                                                                                 // 18463
     * @description                                                                                                    // 18464
     * Sets the form to a dirty state.                                                                                 // 18465
     *                                                                                                                 // 18466
     * This method can be called to add the 'ng-dirty' class and set the form to a dirty                               // 18467
     * state (ng-dirty class). This method will also propagate to parent forms.                                        // 18468
     */                                                                                                                // 18469
    form.$setDirty = function() {                                                                                      // 18470
      $animate.removeClass(element, PRISTINE_CLASS);                                                                   // 18471
      $animate.addClass(element, DIRTY_CLASS);                                                                         // 18472
      form.$dirty = true;                                                                                              // 18473
      form.$pristine = false;                                                                                          // 18474
      parentForm.$setDirty();                                                                                          // 18475
    };                                                                                                                 // 18476
                                                                                                                       // 18477
    /**                                                                                                                // 18478
     * @ngdoc method                                                                                                   // 18479
     * @name form.FormController#$setPristine                                                                          // 18480
     *                                                                                                                 // 18481
     * @description                                                                                                    // 18482
     * Sets the form to its pristine state.                                                                            // 18483
     *                                                                                                                 // 18484
     * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                       // 18485
     * state (ng-pristine class). This method will also propagate to all the controls contained                        // 18486
     * in this form.                                                                                                   // 18487
     *                                                                                                                 // 18488
     * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                    // 18489
     * saving or resetting it.                                                                                         // 18490
     */                                                                                                                // 18491
    form.$setPristine = function() {                                                                                   // 18492
      $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                 // 18493
      form.$dirty = false;                                                                                             // 18494
      form.$pristine = true;                                                                                           // 18495
      form.$submitted = false;                                                                                         // 18496
      forEach(controls, function(control) {                                                                            // 18497
        control.$setPristine();                                                                                        // 18498
      });                                                                                                              // 18499
    };                                                                                                                 // 18500
                                                                                                                       // 18501
    /**                                                                                                                // 18502
     * @ngdoc method                                                                                                   // 18503
     * @name form.FormController#$setUntouched                                                                         // 18504
     *                                                                                                                 // 18505
     * @description                                                                                                    // 18506
     * Sets the form to its untouched state.                                                                           // 18507
     *                                                                                                                 // 18508
     * This method can be called to remove the 'ng-touched' class and set the form controls to their                   // 18509
     * untouched state (ng-untouched class).                                                                           // 18510
     *                                                                                                                 // 18511
     * Setting a form controls back to their untouched state is often useful when setting the form                     // 18512
     * back to its pristine state.                                                                                     // 18513
     */                                                                                                                // 18514
    form.$setUntouched = function() {                                                                                  // 18515
      forEach(controls, function(control) {                                                                            // 18516
        control.$setUntouched();                                                                                       // 18517
      });                                                                                                              // 18518
    };                                                                                                                 // 18519
                                                                                                                       // 18520
    /**                                                                                                                // 18521
     * @ngdoc method                                                                                                   // 18522
     * @name form.FormController#$setSubmitted                                                                         // 18523
     *                                                                                                                 // 18524
     * @description                                                                                                    // 18525
     * Sets the form to its submitted state.                                                                           // 18526
     */                                                                                                                // 18527
    form.$setSubmitted = function() {                                                                                  // 18528
      $animate.addClass(element, SUBMITTED_CLASS);                                                                     // 18529
      form.$submitted = true;                                                                                          // 18530
      parentForm.$setSubmitted();                                                                                      // 18531
    };                                                                                                                 // 18532
  }                                                                                                                    // 18533
                                                                                                                       // 18534
  /**                                                                                                                  // 18535
   * @ngdoc directive                                                                                                  // 18536
   * @name ngForm                                                                                                      // 18537
   * @restrict EAC                                                                                                     // 18538
   *                                                                                                                   // 18539
   * @description                                                                                                      // 18540
   * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                // 18541
   * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a             // 18542
   * sub-group of controls needs to be determined.                                                                     // 18543
   *                                                                                                                   // 18544
   * Note: the purpose of `ngForm` is to group controls,                                                               // 18545
   * but not to be a replacement for the `<form>` tag with all of its capabilities                                     // 18546
   * (e.g. posting to the server, ...).                                                                                // 18547
   *                                                                                                                   // 18548
   * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into           // 18549
   *                       related scope, under this name.                                                             // 18550
   *                                                                                                                   // 18551
   */                                                                                                                  // 18552
                                                                                                                       // 18553
  /**                                                                                                                  // 18554
   * @ngdoc directive                                                                                                  // 18555
   * @name form                                                                                                        // 18556
   * @restrict E                                                                                                       // 18557
   *                                                                                                                   // 18558
   * @description                                                                                                      // 18559
   * Directive that instantiates                                                                                       // 18560
   * {@link form.FormController FormController}.                                                                       // 18561
   *                                                                                                                   // 18562
   * If the `name` attribute is specified, the form controller is published onto the current scope under               // 18563
   * this name.                                                                                                        // 18564
   *                                                                                                                   // 18565
   * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                     // 18566
   *                                                                                                                   // 18567
   * In Angular, forms can be nested. This means that the outer form is valid when all of the child                    // 18568
   * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                          // 18569
   * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                  // 18570
   * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                      // 18571
   * using Angular validation directives in forms that are dynamically generated using the                             // 18572
   * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`              // 18573
   * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an               // 18574
   * `ngForm` directive and nest these in an outer `form` element.                                                     // 18575
   *                                                                                                                   // 18576
   *                                                                                                                   // 18577
   * # CSS classes                                                                                                     // 18578
   *  - `ng-valid` is set if the form is valid.                                                                        // 18579
   *  - `ng-invalid` is set if the form is invalid.                                                                    // 18580
   *  - `ng-pristine` is set if the form is pristine.                                                                  // 18581
   *  - `ng-dirty` is set if the form is dirty.                                                                        // 18582
   *  - `ng-submitted` is set if the form was submitted.                                                               // 18583
   *                                                                                                                   // 18584
   * Keep in mind that ngAnimate can detect each of these classes when added and removed.                              // 18585
   *                                                                                                                   // 18586
   *                                                                                                                   // 18587
   * # Submitting a form and preventing the default action                                                             // 18588
   *                                                                                                                   // 18589
   * Since the role of forms in client-side Angular applications is different than in classical                        // 18590
   * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                  // 18591
   * page reload that sends the data to the server. Instead some javascript logic should be triggered                  // 18592
   * to handle the form submission in an application-specific way.                                                     // 18593
   *                                                                                                                   // 18594
   * For this reason, Angular prevents the default action (form submission to the server) unless the                   // 18595
   * `<form>` element has an `action` attribute specified.                                                             // 18596
   *                                                                                                                   // 18597
   * You can use one of the following two ways to specify what javascript method should be called when                 // 18598
   * a form is submitted:                                                                                              // 18599
   *                                                                                                                   // 18600
   * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                            // 18601
   * - {@link ng.directive:ngClick ngClick} directive on the first                                                     // 18602
   *  button or input field of type submit (input[type=submit])                                                        // 18603
   *                                                                                                                   // 18604
   * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}            // 18605
   * or {@link ng.directive:ngClick ngClick} directives.                                                               // 18606
   * This is because of the following form submission rules in the HTML specification:                                 // 18607
   *                                                                                                                   // 18608
   * - If a form has only one input field then hitting enter in this field triggers form submit                        // 18609
   * (`ngSubmit`)                                                                                                      // 18610
   * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                           // 18611
   * doesn't trigger submit                                                                                            // 18612
   * - if a form has one or more input fields and one or more buttons or input[type=submit] then                       // 18613
   * hitting enter in any of the input fields will trigger the click handler on the *first* button or                  // 18614
   * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                          // 18615
   *                                                                                                                   // 18616
   * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                        // 18617
   * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                      // 18618
   * to have access to the updated model.                                                                              // 18619
   *                                                                                                                   // 18620
   * ## Animation Hooks                                                                                                // 18621
   *                                                                                                                   // 18622
   * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                  // 18623
   * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                      // 18624
   * other validations that are performed within the form. Animations in ngForm are similar to how                     // 18625
   * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                   // 18626
   * as JS animations.                                                                                                 // 18627
   *                                                                                                                   // 18628
   * The following example shows a simple way to utilize CSS transitions to style a form element                       // 18629
   * that has been rendered as invalid after it has been validated:                                                    // 18630
   *                                                                                                                   // 18631
   * <pre>                                                                                                             // 18632
   * //be sure to include ngAnimate as a module to hook into more                                                      // 18633
   * //advanced animations                                                                                             // 18634
   * .my-form {                                                                                                        // 18635
 *   transition:0.5s linear all;                                                                                       // 18636
 *   background: white;                                                                                                // 18637
 * }                                                                                                                   // 18638
   * .my-form.ng-invalid {                                                                                             // 18639
 *   background: red;                                                                                                  // 18640
 *   color:white;                                                                                                      // 18641
 * }                                                                                                                   // 18642
   * </pre>                                                                                                            // 18643
   *                                                                                                                   // 18644
   * @example                                                                                                          // 18645
   <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">                           // 18646
   <file name="index.html">                                                                                            // 18647
   <script>                                                                                                            // 18648
   angular.module('formExample', [])                                                                                   // 18649
   .controller('FormController', ['$scope', function($scope) {                                                         // 18650
             $scope.userType = 'guest';                                                                                // 18651
           }]);                                                                                                        // 18652
   </script>                                                                                                           // 18653
   <style>                                                                                                             // 18654
   .my-form {                                                                                                          // 18655
          -webkit-transition:all linear 0.5s;                                                                          // 18656
          transition:all linear 0.5s;                                                                                  // 18657
          background: transparent;                                                                                     // 18658
        }                                                                                                              // 18659
   .my-form.ng-invalid {                                                                                               // 18660
          background: red;                                                                                             // 18661
        }                                                                                                              // 18662
   </style>                                                                                                            // 18663
   <form name="myForm" ng-controller="FormController" class="my-form">                                                 // 18664
   userType: <input name="input" ng-model="userType" required>                                                         // 18665
   <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>                                     // 18666
   <tt>userType = {{userType}}</tt><br>                                                                                // 18667
   <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br>                                                          // 18668
   <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br>                                                          // 18669
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br>                                                                      // 18670
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>                                                  // 18671
   </form>                                                                                                             // 18672
   </file>                                                                                                             // 18673
   <file name="protractor.js" type="protractor">                                                                       // 18674
   it('should initialize to model', function() {                                                                       // 18675
          var userType = element(by.binding('userType'));                                                              // 18676
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 18677
                                                                                                                       // 18678
          expect(userType.getText()).toContain('guest');                                                               // 18679
          expect(valid.getText()).toContain('true');                                                                   // 18680
        });                                                                                                            // 18681
                                                                                                                       // 18682
   it('should be invalid if empty', function() {                                                                       // 18683
          var userType = element(by.binding('userType'));                                                              // 18684
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 18685
          var userInput = element(by.model('userType'));                                                               // 18686
                                                                                                                       // 18687
          userInput.clear();                                                                                           // 18688
          userInput.sendKeys('');                                                                                      // 18689
                                                                                                                       // 18690
          expect(userType.getText()).toEqual('userType =');                                                            // 18691
          expect(valid.getText()).toContain('false');                                                                  // 18692
        });                                                                                                            // 18693
   </file>                                                                                                             // 18694
   </example>                                                                                                          // 18695
   *                                                                                                                   // 18696
   * @param {string=} name Name of the form. If specified, the form controller will be published into                  // 18697
   *                       related scope, under this name.                                                             // 18698
   */                                                                                                                  // 18699
  var formDirectiveFactory = function(isNgForm) {                                                                      // 18700
    return ['$timeout', function($timeout) {                                                                           // 18701
      var formDirective = {                                                                                            // 18702
        name: 'form',                                                                                                  // 18703
        restrict: isNgForm ? 'EAC' : 'E',                                                                              // 18704
        controller: FormController,                                                                                    // 18705
        compile: function ngFormCompile(formElement, attr) {                                                           // 18706
          // Setup initial state of the control                                                                        // 18707
          formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                  // 18708
                                                                                                                       // 18709
          var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                            // 18710
                                                                                                                       // 18711
          return {                                                                                                     // 18712
            pre: function ngFormPreLink(scope, formElement, attr, controller) {                                        // 18713
              // if `action` attr is not present on the form, prevent the default action (submission)                  // 18714
              if (!('action' in attr)) {                                                                               // 18715
                // we can't use jq events because if a form is destroyed during submission the default                 // 18716
                // action is not prevented. see #1238                                                                  // 18717
                //                                                                                                     // 18718
                // IE 9 is not affected because it doesn't fire a submit event and try to do a full                    // 18719
                // page reload if the form was destroyed by submission of the form via a click handler                 // 18720
                // on a button in the form. Looks like an IE9 specific bug.                                            // 18721
                var handleFormSubmission = function(event) {                                                           // 18722
                  scope.$apply(function() {                                                                            // 18723
                    controller.$commitViewValue();                                                                     // 18724
                    controller.$setSubmitted();                                                                        // 18725
                  });                                                                                                  // 18726
                                                                                                                       // 18727
                  event.preventDefault();                                                                              // 18728
                };                                                                                                     // 18729
                                                                                                                       // 18730
                addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                    // 18731
                                                                                                                       // 18732
                // unregister the preventDefault listener so that we don't not leak memory but in a                    // 18733
                // way that will achieve the prevention of the default action.                                         // 18734
                formElement.on('$destroy', function() {                                                                // 18735
                  $timeout(function() {                                                                                // 18736
                    removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                             // 18737
                  }, 0, false);                                                                                        // 18738
                });                                                                                                    // 18739
              }                                                                                                        // 18740
                                                                                                                       // 18741
              var parentFormCtrl = controller.$$parentForm;                                                            // 18742
                                                                                                                       // 18743
              if (nameAttr) {                                                                                          // 18744
                setter(scope, null, controller.$name, controller, controller.$name);                                   // 18745
                attr.$observe(nameAttr, function(newValue) {                                                           // 18746
                  if (controller.$name === newValue) return;                                                           // 18747
                  setter(scope, null, controller.$name, undefined, controller.$name);                                  // 18748
                  parentFormCtrl.$$renameControl(controller, newValue);                                                // 18749
                  setter(scope, null, controller.$name, controller, controller.$name);                                 // 18750
                });                                                                                                    // 18751
              }                                                                                                        // 18752
              formElement.on('$destroy', function() {                                                                  // 18753
                parentFormCtrl.$removeControl(controller);                                                             // 18754
                if (nameAttr) {                                                                                        // 18755
                  setter(scope, null, attr[nameAttr], undefined, controller.$name);                                    // 18756
                }                                                                                                      // 18757
                extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                // 18758
              });                                                                                                      // 18759
            }                                                                                                          // 18760
          };                                                                                                           // 18761
        }                                                                                                              // 18762
      };                                                                                                               // 18763
                                                                                                                       // 18764
      return formDirective;                                                                                            // 18765
    }];                                                                                                                // 18766
  };                                                                                                                   // 18767
                                                                                                                       // 18768
  var formDirective = formDirectiveFactory();                                                                          // 18769
  var ngFormDirective = formDirectiveFactory(true);                                                                    // 18770
                                                                                                                       // 18771
  /* global VALID_CLASS: false,                                                                                        // 18772
   INVALID_CLASS: false,                                                                                               // 18773
   PRISTINE_CLASS: false,                                                                                              // 18774
   DIRTY_CLASS: false,                                                                                                 // 18775
   UNTOUCHED_CLASS: false,                                                                                             // 18776
   TOUCHED_CLASS: false,                                                                                               // 18777
   $ngModelMinErr: false,                                                                                              // 18778
   */                                                                                                                  // 18779
                                                                                                                       // 18780
// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
  var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;                    // 18782
  var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;              // 18783
  var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
  var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;                                                            // 18785
  var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;                                                                       // 18786
  var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                          // 18787
  var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;                                                                               // 18788
  var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;                                                                               // 18789
  var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                                                         // 18790
                                                                                                                       // 18791
  var inputType = {                                                                                                    // 18792
                                                                                                                       // 18793
    /**                                                                                                                // 18794
     * @ngdoc input                                                                                                    // 18795
     * @name input[text]                                                                                               // 18796
     *                                                                                                                 // 18797
     * @description                                                                                                    // 18798
     * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                  // 18799
     *                                                                                                                 // 18800
     *                                                                                                                 // 18801
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 18802
     * @param {string=} name Property name of the form under which the control is published.                           // 18803
     * @param {string=} required Adds `required` validation error key if the value is not entered.                     // 18804
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 18805
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 18806
     *    `required` when you want to data-bind to the `required` attribute.                                           // 18807
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                 // 18808
     *    minlength.                                                                                                   // 18809
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                  // 18810
     *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                   // 18811
     *    any length.                                                                                                  // 18812
     * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string            // 18813
     *    that contains the regular expression body that will be converted to a regular expression                     // 18814
     *    as in the ngPattern directive.                                                                               // 18815
     * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match              // 18816
     *    a RegExp found by evaluating the Angular expression given in the attribute value.                            // 18817
     *    If the expression evaluates to a RegExp object then this is used directly.                                   // 18818
     *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`         // 18819
     *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.                                // 18820
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 18821
     *    interaction with the input element.                                                                          // 18822
     * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                  // 18823
     *    This parameter is ignored for input[type=password] controls, which will never trim the                       // 18824
     *    input.                                                                                                       // 18825
     *                                                                                                                 // 18826
     * @example                                                                                                        // 18827
     <example name="text-input-directive" module="textInputExample">                                                   // 18828
     <file name="index.html">                                                                                          // 18829
     <script>                                                                                                          // 18830
     angular.module('textInputExample', [])                                                                            // 18831
     .controller('ExampleController', ['$scope', function($scope) {                                                    // 18832
               $scope.example = {                                                                                      // 18833
                 text: 'guest',                                                                                        // 18834
                 word: /^\s*\w*\s*$/                                                                                   // 18835
               };                                                                                                      // 18836
             }]);                                                                                                      // 18837
     </script>                                                                                                         // 18838
     <form name="myForm" ng-controller="ExampleController">                                                            // 18839
     Single word: <input type="text" name="input" ng-model="example.text"                                              // 18840
     ng-pattern="example.word" required ng-trim="false">                                                               // 18841
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 18842
     Required!</span>                                                                                                  // 18843
     <span class="error" ng-show="myForm.input.$error.pattern">                                                        // 18844
     Single word only!</span>                                                                                          // 18845
                                                                                                                       // 18846
     <tt>text = {{example.text}}</tt><br/>                                                                             // 18847
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 18848
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 18849
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 18850
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 18851
     </form>                                                                                                           // 18852
     </file>                                                                                                           // 18853
     <file name="protractor.js" type="protractor">                                                                     // 18854
     var text = element(by.binding('example.text'));                                                                   // 18855
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 18856
     var input = element(by.model('example.text'));                                                                    // 18857
                                                                                                                       // 18858
     it('should initialize to model', function() {                                                                     // 18859
            expect(text.getText()).toContain('guest');                                                                 // 18860
            expect(valid.getText()).toContain('true');                                                                 // 18861
          });                                                                                                          // 18862
                                                                                                                       // 18863
     it('should be invalid if empty', function() {                                                                     // 18864
            input.clear();                                                                                             // 18865
            input.sendKeys('');                                                                                        // 18866
                                                                                                                       // 18867
            expect(text.getText()).toEqual('text =');                                                                  // 18868
            expect(valid.getText()).toContain('false');                                                                // 18869
          });                                                                                                          // 18870
                                                                                                                       // 18871
     it('should be invalid if multi word', function() {                                                                // 18872
            input.clear();                                                                                             // 18873
            input.sendKeys('hello world');                                                                             // 18874
                                                                                                                       // 18875
            expect(valid.getText()).toContain('false');                                                                // 18876
          });                                                                                                          // 18877
     </file>                                                                                                           // 18878
     </example>                                                                                                        // 18879
     */                                                                                                                // 18880
    'text': textInputType,                                                                                             // 18881
                                                                                                                       // 18882
    /**                                                                                                                // 18883
     * @ngdoc input                                                                                                    // 18884
     * @name input[date]                                                                                               // 18885
     *                                                                                                                 // 18886
     * @description                                                                                                    // 18887
     * Input with date validation and transformation. In browsers that do not yet support                              // 18888
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 18889
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 18890
     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 18891
     * expected input format via a placeholder or label.                                                               // 18892
     *                                                                                                                 // 18893
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 18894
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 18895
     *                                                                                                                 // 18896
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 18897
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 18898
     *                                                                                                                 // 18899
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 18900
     * @param {string=} name Property name of the form under which the control is published.                           // 18901
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO date string (yyyy-MM-dd).                                                                             // 18903
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO date string (yyyy-MM-dd).                                                                           // 18905
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 18906
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 18907
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 18908
     *    `required` when you want to data-bind to the `required` attribute.                                           // 18909
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 18910
     *    interaction with the input element.                                                                          // 18911
     *                                                                                                                 // 18912
     * @example                                                                                                        // 18913
     <example name="date-input-directive" module="dateInputExample">                                                   // 18914
     <file name="index.html">                                                                                          // 18915
     <script>                                                                                                          // 18916
     angular.module('dateInputExample', [])                                                                            // 18917
     .controller('DateController', ['$scope', function($scope) {                                                       // 18918
              $scope.example = {                                                                                       // 18919
                value: new Date(2013, 9, 22)                                                                           // 18920
              };                                                                                                       // 18921
            }]);                                                                                                       // 18922
     </script>                                                                                                         // 18923
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 18924
     Pick a date in 2013:                                                                                              // 18925
     <input type="date" id="exampleInput" name="input" ng-model="example.value"                                        // 18926
     placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />                                            // 18927
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 18928
     Required!</span>                                                                                                  // 18929
     <span class="error" ng-show="myForm.input.$error.date">                                                           // 18930
     Not a valid date!</span>                                                                                          // 18931
     <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>                                                      // 18932
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 18933
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 18934
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 18935
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 18936
     </form>                                                                                                           // 18937
     </file>                                                                                                           // 18938
     <file name="protractor.js" type="protractor">                                                                     // 18939
     var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));                                            // 18940
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 18941
     var input = element(by.model('example.value'));                                                                   // 18942
                                                                                                                       // 18943
     // currently protractor/webdriver does not support                                                                // 18944
     // sending keys to all known HTML5 input controls                                                                 // 18945
     // for various browsers (see https://github.com/angular/protractor/issues/562).                                   // 18946
     function setInput(val) {                                                                                          // 18947
          // set the value of the element and force validation.                                                        // 18948
          var scr = "var ipt = document.getElementById('exampleInput'); " +                                            // 18949
          "ipt.value = '" + val + "';" +                                                                               // 18950
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";    // 18951
          browser.executeScript(scr);                                                                                  // 18952
        }                                                                                                              // 18953
                                                                                                                       // 18954
     it('should initialize to model', function() {                                                                     // 18955
          expect(value.getText()).toContain('2013-10-22');                                                             // 18956
          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 18957
        });                                                                                                            // 18958
                                                                                                                       // 18959
     it('should be invalid if empty', function() {                                                                     // 18960
          setInput('');                                                                                                // 18961
          expect(value.getText()).toEqual('value =');                                                                  // 18962
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 18963
        });                                                                                                            // 18964
                                                                                                                       // 18965
     it('should be invalid if over max', function() {                                                                  // 18966
          setInput('2015-01-01');                                                                                      // 18967
          expect(value.getText()).toContain('');                                                                       // 18968
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 18969
        });                                                                                                            // 18970
     </file>                                                                                                           // 18971
     </example>                                                                                                        // 18972
     */                                                                                                                // 18973
    'date': createDateInputType('date', DATE_REGEXP,                                                                   // 18974
      createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                             // 18975
      'yyyy-MM-dd'),                                                                                                   // 18976
                                                                                                                       // 18977
    /**                                                                                                                // 18978
     * @ngdoc input                                                                                                    // 18979
     * @name input[datetime-local]                                                                                     // 18980
     *                                                                                                                 // 18981
     * @description                                                                                                    // 18982
     * Input with datetime validation and transformation. In browsers that do not yet support                          // 18983
     * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601   // 18984
     * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                // 18985
     *                                                                                                                 // 18986
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 18987
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 18988
     *                                                                                                                 // 18989
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 18990
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 18991
     *                                                                                                                 // 18992
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 18993
     * @param {string=} name Property name of the form under which the control is published.                           // 18994
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).                                                                // 18996
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).                                                              // 18998
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 18999
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19000
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19001
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19002
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19003
     *    interaction with the input element.                                                                          // 19004
     *                                                                                                                 // 19005
     * @example                                                                                                        // 19006
     <example name="datetimelocal-input-directive" module="dateExample">                                               // 19007
     <file name="index.html">                                                                                          // 19008
     <script>                                                                                                          // 19009
     angular.module('dateExample', [])                                                                                 // 19010
     .controller('DateController', ['$scope', function($scope) {                                                       // 19011
            $scope.example = {                                                                                         // 19012
              value: new Date(2010, 11, 28, 14, 57)                                                                    // 19013
            };                                                                                                         // 19014
          }]);                                                                                                         // 19015
     </script>                                                                                                         // 19016
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 19017
     Pick a date between in 2013:                                                                                      // 19018
     <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"                              // 19019
     placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />                 // 19020
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19021
     Required!</span>                                                                                                  // 19022
     <span class="error" ng-show="myForm.input.$error.datetimelocal">                                                  // 19023
     Not a valid date!</span>                                                                                          // 19024
     <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>                                             // 19025
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19026
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19027
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19028
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19029
     </form>                                                                                                           // 19030
     </file>                                                                                                           // 19031
     <file name="protractor.js" type="protractor">                                                                     // 19032
     var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));                                   // 19033
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19034
     var input = element(by.model('example.value'));                                                                   // 19035
                                                                                                                       // 19036
     // currently protractor/webdriver does not support                                                                // 19037
     // sending keys to all known HTML5 input controls                                                                 // 19038
     // for various browsers (https://github.com/angular/protractor/issues/562).                                       // 19039
     function setInput(val) {                                                                                          // 19040
        // set the value of the element and force validation.                                                          // 19041
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 19042
        "ipt.value = '" + val + "';" +                                                                                 // 19043
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 19044
        browser.executeScript(scr);                                                                                    // 19045
      }                                                                                                                // 19046
                                                                                                                       // 19047
     it('should initialize to model', function() {                                                                     // 19048
        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 19049
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 19050
      });                                                                                                              // 19051
                                                                                                                       // 19052
     it('should be invalid if empty', function() {                                                                     // 19053
        setInput('');                                                                                                  // 19054
        expect(value.getText()).toEqual('value =');                                                                    // 19055
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19056
      });                                                                                                              // 19057
                                                                                                                       // 19058
     it('should be invalid if over max', function() {                                                                  // 19059
        setInput('2015-01-01T23:59:00');                                                                               // 19060
        expect(value.getText()).toContain('');                                                                         // 19061
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19062
      });                                                                                                              // 19063
     </file>                                                                                                           // 19064
     </example>                                                                                                        // 19065
     */                                                                                                                // 19066
    'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                       // 19067
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 19068
      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 19069
                                                                                                                       // 19070
    /**                                                                                                                // 19071
     * @ngdoc input                                                                                                    // 19072
     * @name input[time]                                                                                               // 19073
     *                                                                                                                 // 19074
     * @description                                                                                                    // 19075
     * Input with time validation and transformation. In browsers that do not yet support                              // 19076
     * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601   // 19077
     * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
     * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                  // 19079
     *                                                                                                                 // 19080
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 19081
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 19082
     *                                                                                                                 // 19083
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 19084
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 19085
     *                                                                                                                 // 19086
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19087
     * @param {string=} name Property name of the form under which the control is published.                           // 19088
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO time format (HH:mm:ss).                                                                               // 19090
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
     * valid ISO time format (HH:mm:ss).                                                                               // 19092
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 19093
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19094
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19095
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19096
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19097
     *    interaction with the input element.                                                                          // 19098
     *                                                                                                                 // 19099
     * @example                                                                                                        // 19100
     <example name="time-input-directive" module="timeExample">                                                        // 19101
     <file name="index.html">                                                                                          // 19102
     <script>                                                                                                          // 19103
     angular.module('timeExample', [])                                                                                 // 19104
     .controller('DateController', ['$scope', function($scope) {                                                       // 19105
          $scope.example = {                                                                                           // 19106
            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 19107
          };                                                                                                           // 19108
        }]);                                                                                                           // 19109
     </script>                                                                                                         // 19110
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 19111
     Pick a between 8am and 5pm:                                                                                       // 19112
     <input type="time" id="exampleInput" name="input" ng-model="example.value"                                        // 19113
     placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />                                                  // 19114
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19115
     Required!</span>                                                                                                  // 19116
     <span class="error" ng-show="myForm.input.$error.time">                                                           // 19117
     Not a valid date!</span>                                                                                          // 19118
     <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>                                                        // 19119
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19120
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19121
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19122
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19123
     </form>                                                                                                           // 19124
     </file>                                                                                                           // 19125
     <file name="protractor.js" type="protractor">                                                                     // 19126
     var value = element(by.binding('example.value | date: "HH:mm:ss"'));                                              // 19127
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19128
     var input = element(by.model('example.value'));                                                                   // 19129
                                                                                                                       // 19130
     // currently protractor/webdriver does not support                                                                // 19131
     // sending keys to all known HTML5 input controls                                                                 // 19132
     // for various browsers (https://github.com/angular/protractor/issues/562).                                       // 19133
     function setInput(val) {                                                                                          // 19134
        // set the value of the element and force validation.                                                          // 19135
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 19136
        "ipt.value = '" + val + "';" +                                                                                 // 19137
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 19138
        browser.executeScript(scr);                                                                                    // 19139
      }                                                                                                                // 19140
                                                                                                                       // 19141
     it('should initialize to model', function() {                                                                     // 19142
        expect(value.getText()).toContain('14:57:00');                                                                 // 19143
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 19144
      });                                                                                                              // 19145
                                                                                                                       // 19146
     it('should be invalid if empty', function() {                                                                     // 19147
        setInput('');                                                                                                  // 19148
        expect(value.getText()).toEqual('value =');                                                                    // 19149
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19150
      });                                                                                                              // 19151
                                                                                                                       // 19152
     it('should be invalid if over max', function() {                                                                  // 19153
        setInput('23:59:00');                                                                                          // 19154
        expect(value.getText()).toContain('');                                                                         // 19155
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19156
      });                                                                                                              // 19157
     </file>                                                                                                           // 19158
     </example>                                                                                                        // 19159
     */                                                                                                                // 19160
    'time': createDateInputType('time', TIME_REGEXP,                                                                   // 19161
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 19162
      'HH:mm:ss.sss'),                                                                                                 // 19163
                                                                                                                       // 19164
    /**                                                                                                                // 19165
     * @ngdoc input                                                                                                    // 19166
     * @name input[week]                                                                                               // 19167
     *                                                                                                                 // 19168
     * @description                                                                                                    // 19169
     * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support          // 19170
     * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601   // 19171
     * week format (yyyy-W##), for example: `2013-W02`.                                                                // 19172
     *                                                                                                                 // 19173
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 19174
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 19175
     *                                                                                                                 // 19176
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 19177
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 19178
     *                                                                                                                 // 19179
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19180
     * @param {string=} name Property name of the form under which the control is published.                           // 19181
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO week format (yyyy-W##).                                                                               // 19183
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO week format (yyyy-W##).                                                                             // 19185
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 19186
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19187
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19188
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19189
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19190
     *    interaction with the input element.                                                                          // 19191
     *                                                                                                                 // 19192
     * @example                                                                                                        // 19193
     <example name="week-input-directive" module="weekExample">                                                        // 19194
     <file name="index.html">                                                                                          // 19195
     <script>                                                                                                          // 19196
     angular.module('weekExample', [])                                                                                 // 19197
     .controller('DateController', ['$scope', function($scope) {                                                       // 19198
          $scope.example = {                                                                                           // 19199
            value: new Date(2013, 0, 3)                                                                                // 19200
          };                                                                                                           // 19201
        }]);                                                                                                           // 19202
     </script>                                                                                                         // 19203
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 19204
     Pick a date between in 2013:                                                                                      // 19205
     <input id="exampleInput" type="week" name="input" ng-model="example.value"                                        // 19206
     placeholder="YYYY-W##" min="2012-W32" max="2013-W52" required />                                                  // 19207
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19208
     Required!</span>                                                                                                  // 19209
     <span class="error" ng-show="myForm.input.$error.week">                                                           // 19210
     Not a valid date!</span>                                                                                          // 19211
     <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>                                                        // 19212
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19213
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19214
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19215
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19216
     </form>                                                                                                           // 19217
     </file>                                                                                                           // 19218
     <file name="protractor.js" type="protractor">                                                                     // 19219
     var value = element(by.binding('example.value | date: "yyyy-Www"'));                                              // 19220
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19221
     var input = element(by.model('example.value'));                                                                   // 19222
                                                                                                                       // 19223
     // currently protractor/webdriver does not support                                                                // 19224
     // sending keys to all known HTML5 input controls                                                                 // 19225
     // for various browsers (https://github.com/angular/protractor/issues/562).                                       // 19226
     function setInput(val) {                                                                                          // 19227
        // set the value of the element and force validation.                                                          // 19228
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 19229
        "ipt.value = '" + val + "';" +                                                                                 // 19230
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 19231
        browser.executeScript(scr);                                                                                    // 19232
      }                                                                                                                // 19233
                                                                                                                       // 19234
     it('should initialize to model', function() {                                                                     // 19235
        expect(value.getText()).toContain('2013-W01');                                                                 // 19236
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 19237
      });                                                                                                              // 19238
                                                                                                                       // 19239
     it('should be invalid if empty', function() {                                                                     // 19240
        setInput('');                                                                                                  // 19241
        expect(value.getText()).toEqual('value =');                                                                    // 19242
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19243
      });                                                                                                              // 19244
                                                                                                                       // 19245
     it('should be invalid if over max', function() {                                                                  // 19246
        setInput('2015-W01');                                                                                          // 19247
        expect(value.getText()).toContain('');                                                                         // 19248
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19249
      });                                                                                                              // 19250
     </file>                                                                                                           // 19251
     </example>                                                                                                        // 19252
     */                                                                                                                // 19253
    'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                          // 19254
                                                                                                                       // 19255
    /**                                                                                                                // 19256
     * @ngdoc input                                                                                                    // 19257
     * @name input[month]                                                                                              // 19258
     *                                                                                                                 // 19259
     * @description                                                                                                    // 19260
     * Input with month validation and transformation. In browsers that do not yet support                             // 19261
     * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601  // 19262
     * month format (yyyy-MM), for example: `2009-01`.                                                                 // 19263
     *                                                                                                                 // 19264
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 19265
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 19266
     * If the model is not set to the first of the month, the next view to model update will set it                    // 19267
     * to the first of the month.                                                                                      // 19268
     *                                                                                                                 // 19269
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 19270
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 19271
     *                                                                                                                 // 19272
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19273
     * @param {string=} name Property name of the form under which the control is published.                           // 19274
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be  // 19275
     * a valid ISO month format (yyyy-MM).                                                                             // 19276
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must  // 19277
     * be a valid ISO month format (yyyy-MM).                                                                          // 19278
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 19279
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19280
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19281
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19282
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19283
     *    interaction with the input element.                                                                          // 19284
     *                                                                                                                 // 19285
     * @example                                                                                                        // 19286
     <example name="month-input-directive" module="monthExample">                                                      // 19287
     <file name="index.html">                                                                                          // 19288
     <script>                                                                                                          // 19289
     angular.module('monthExample', [])                                                                                // 19290
     .controller('DateController', ['$scope', function($scope) {                                                       // 19291
          $scope.example = {                                                                                           // 19292
            value: new Date(2013, 9, 1)                                                                                // 19293
          };                                                                                                           // 19294
        }]);                                                                                                           // 19295
     </script>                                                                                                         // 19296
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 19297
     Pick a month in 2013:                                                                                             // 19298
     <input id="exampleInput" type="month" name="input" ng-model="example.value"                                       // 19299
     placeholder="yyyy-MM" min="2013-01" max="2013-12" required />                                                     // 19300
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19301
     Required!</span>                                                                                                  // 19302
     <span class="error" ng-show="myForm.input.$error.month">                                                          // 19303
     Not a valid month!</span>                                                                                         // 19304
     <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>                                                         // 19305
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19306
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19307
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19308
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19309
     </form>                                                                                                           // 19310
     </file>                                                                                                           // 19311
     <file name="protractor.js" type="protractor">                                                                     // 19312
     var value = element(by.binding('example.value | date: "yyyy-MM"'));                                               // 19313
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19314
     var input = element(by.model('example.value'));                                                                   // 19315
                                                                                                                       // 19316
     // currently protractor/webdriver does not support                                                                // 19317
     // sending keys to all known HTML5 input controls                                                                 // 19318
     // for various browsers (https://github.com/angular/protractor/issues/562).                                       // 19319
     function setInput(val) {                                                                                          // 19320
        // set the value of the element and force validation.                                                          // 19321
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 19322
        "ipt.value = '" + val + "';" +                                                                                 // 19323
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 19324
        browser.executeScript(scr);                                                                                    // 19325
      }                                                                                                                // 19326
                                                                                                                       // 19327
     it('should initialize to model', function() {                                                                     // 19328
        expect(value.getText()).toContain('2013-10');                                                                  // 19329
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 19330
      });                                                                                                              // 19331
                                                                                                                       // 19332
     it('should be invalid if empty', function() {                                                                     // 19333
        setInput('');                                                                                                  // 19334
        expect(value.getText()).toEqual('value =');                                                                    // 19335
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19336
      });                                                                                                              // 19337
                                                                                                                       // 19338
     it('should be invalid if over max', function() {                                                                  // 19339
        setInput('2015-01');                                                                                           // 19340
        expect(value.getText()).toContain('');                                                                         // 19341
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 19342
      });                                                                                                              // 19343
     </file>                                                                                                           // 19344
     </example>                                                                                                        // 19345
     */                                                                                                                // 19346
    'month': createDateInputType('month', MONTH_REGEXP,                                                                // 19347
      createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                  // 19348
      'yyyy-MM'),                                                                                                      // 19349
                                                                                                                       // 19350
    /**                                                                                                                // 19351
     * @ngdoc input                                                                                                    // 19352
     * @name input[number]                                                                                             // 19353
     *                                                                                                                 // 19354
     * @description                                                                                                    // 19355
     * Text input with number validation and transformation. Sets the `number` validation                              // 19356
     * error if not a valid number.                                                                                    // 19357
     *                                                                                                                 // 19358
     * The model must always be a number, otherwise Angular will throw an error.                                       // 19359
     *                                                                                                                 // 19360
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19361
     * @param {string=} name Property name of the form under which the control is published.                           // 19362
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.               // 19363
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.            // 19364
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 19365
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19366
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19367
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19368
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                 // 19369
     *    minlength.                                                                                                   // 19370
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                  // 19371
     *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                   // 19372
     *    any length.                                                                                                  // 19373
     * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string            // 19374
     *    that contains the regular expression body that will be converted to a regular expression                     // 19375
     *    as in the ngPattern directive.                                                                               // 19376
     * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match              // 19377
     *    a RegExp found by evaluating the Angular expression given in the attribute value.                            // 19378
     *    If the expression evaluates to a RegExp object then this is used directly.                                   // 19379
     *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`         // 19380
     *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.                                // 19381
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19382
     *    interaction with the input element.                                                                          // 19383
     *                                                                                                                 // 19384
     * @example                                                                                                        // 19385
     <example name="number-input-directive" module="numberExample">                                                    // 19386
     <file name="index.html">                                                                                          // 19387
     <script>                                                                                                          // 19388
     angular.module('numberExample', [])                                                                               // 19389
     .controller('ExampleController', ['$scope', function($scope) {                                                    // 19390
               $scope.example = {                                                                                      // 19391
                 value: 12                                                                                             // 19392
               };                                                                                                      // 19393
             }]);                                                                                                      // 19394
     </script>                                                                                                         // 19395
     <form name="myForm" ng-controller="ExampleController">                                                            // 19396
     Number: <input type="number" name="input" ng-model="example.value"                                                // 19397
     min="0" max="99" required>                                                                                        // 19398
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19399
     Required!</span>                                                                                                  // 19400
     <span class="error" ng-show="myForm.input.$error.number">                                                         // 19401
     Not valid number!</span>                                                                                          // 19402
     <tt>value = {{example.value}}</tt><br/>                                                                           // 19403
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19404
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19405
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19406
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19407
     </form>                                                                                                           // 19408
     </file>                                                                                                           // 19409
     <file name="protractor.js" type="protractor">                                                                     // 19410
     var value = element(by.binding('example.value'));                                                                 // 19411
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19412
     var input = element(by.model('example.value'));                                                                   // 19413
                                                                                                                       // 19414
     it('should initialize to model', function() {                                                                     // 19415
            expect(value.getText()).toContain('12');                                                                   // 19416
            expect(valid.getText()).toContain('true');                                                                 // 19417
          });                                                                                                          // 19418
                                                                                                                       // 19419
     it('should be invalid if empty', function() {                                                                     // 19420
            input.clear();                                                                                             // 19421
            input.sendKeys('');                                                                                        // 19422
            expect(value.getText()).toEqual('value =');                                                                // 19423
            expect(valid.getText()).toContain('false');                                                                // 19424
          });                                                                                                          // 19425
                                                                                                                       // 19426
     it('should be invalid if over max', function() {                                                                  // 19427
            input.clear();                                                                                             // 19428
            input.sendKeys('123');                                                                                     // 19429
            expect(value.getText()).toEqual('value =');                                                                // 19430
            expect(valid.getText()).toContain('false');                                                                // 19431
          });                                                                                                          // 19432
     </file>                                                                                                           // 19433
     </example>                                                                                                        // 19434
     */                                                                                                                // 19435
    'number': numberInputType,                                                                                         // 19436
                                                                                                                       // 19437
                                                                                                                       // 19438
    /**                                                                                                                // 19439
     * @ngdoc input                                                                                                    // 19440
     * @name input[url]                                                                                                // 19441
     *                                                                                                                 // 19442
     * @description                                                                                                    // 19443
     * Text input with URL validation. Sets the `url` validation error key if the content is not a                     // 19444
     * valid URL.                                                                                                      // 19445
     *                                                                                                                 // 19446
     * <div class="alert alert-warning">                                                                               // 19447
     * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                             // 19448
     * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                           // 19449
     * the built-in validators (see the {@link guide/forms Forms guide})                                               // 19450
     * </div>                                                                                                          // 19451
     *                                                                                                                 // 19452
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19453
     * @param {string=} name Property name of the form under which the control is published.                           // 19454
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 19455
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19456
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19457
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19458
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                 // 19459
     *    minlength.                                                                                                   // 19460
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                  // 19461
     *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                   // 19462
     *    any length.                                                                                                  // 19463
     * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string            // 19464
     *    that contains the regular expression body that will be converted to a regular expression                     // 19465
     *    as in the ngPattern directive.                                                                               // 19466
     * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match              // 19467
     *    a RegExp found by evaluating the Angular expression given in the attribute value.                            // 19468
     *    If the expression evaluates to a RegExp object then this is used directly.                                   // 19469
     *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`         // 19470
     *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.                                // 19471
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19472
     *    interaction with the input element.                                                                          // 19473
     *                                                                                                                 // 19474
     * @example                                                                                                        // 19475
     <example name="url-input-directive" module="urlExample">                                                          // 19476
     <file name="index.html">                                                                                          // 19477
     <script>                                                                                                          // 19478
     angular.module('urlExample', [])                                                                                  // 19479
     .controller('ExampleController', ['$scope', function($scope) {                                                    // 19480
               $scope.url = {                                                                                          // 19481
                 text: 'http://google.com'                                                                             // 19482
               };                                                                                                      // 19483
             }]);                                                                                                      // 19484
     </script>                                                                                                         // 19485
     <form name="myForm" ng-controller="ExampleController">                                                            // 19486
     URL: <input type="url" name="input" ng-model="url.text" required>                                                 // 19487
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19488
     Required!</span>                                                                                                  // 19489
     <span class="error" ng-show="myForm.input.$error.url">                                                            // 19490
     Not valid url!</span>                                                                                             // 19491
     <tt>text = {{url.text}}</tt><br/>                                                                                 // 19492
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19493
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19494
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19495
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19496
     <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                         // 19497
     </form>                                                                                                           // 19498
     </file>                                                                                                           // 19499
     <file name="protractor.js" type="protractor">                                                                     // 19500
     var text = element(by.binding('url.text'));                                                                       // 19501
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19502
     var input = element(by.model('url.text'));                                                                        // 19503
                                                                                                                       // 19504
     it('should initialize to model', function() {                                                                     // 19505
            expect(text.getText()).toContain('http://google.com');                                                     // 19506
            expect(valid.getText()).toContain('true');                                                                 // 19507
          });                                                                                                          // 19508
                                                                                                                       // 19509
     it('should be invalid if empty', function() {                                                                     // 19510
            input.clear();                                                                                             // 19511
            input.sendKeys('');                                                                                        // 19512
                                                                                                                       // 19513
            expect(text.getText()).toEqual('text =');                                                                  // 19514
            expect(valid.getText()).toContain('false');                                                                // 19515
          });                                                                                                          // 19516
                                                                                                                       // 19517
     it('should be invalid if not url', function() {                                                                   // 19518
            input.clear();                                                                                             // 19519
            input.sendKeys('box');                                                                                     // 19520
                                                                                                                       // 19521
            expect(valid.getText()).toContain('false');                                                                // 19522
          });                                                                                                          // 19523
     </file>                                                                                                           // 19524
     </example>                                                                                                        // 19525
     */                                                                                                                // 19526
    'url': urlInputType,                                                                                               // 19527
                                                                                                                       // 19528
                                                                                                                       // 19529
    /**                                                                                                                // 19530
     * @ngdoc input                                                                                                    // 19531
     * @name input[email]                                                                                              // 19532
     *                                                                                                                 // 19533
     * @description                                                                                                    // 19534
     * Text input with email validation. Sets the `email` validation error key if not a valid email                    // 19535
     * address.                                                                                                        // 19536
     *                                                                                                                 // 19537
     * <div class="alert alert-warning">                                                                               // 19538
     * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                // 19539
     * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                  // 19540
     * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                    // 19541
     * </div>                                                                                                          // 19542
     *                                                                                                                 // 19543
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19544
     * @param {string=} name Property name of the form under which the control is published.                           // 19545
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 19546
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 19547
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 19548
     *    `required` when you want to data-bind to the `required` attribute.                                           // 19549
     * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                 // 19550
     *    minlength.                                                                                                   // 19551
     * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                  // 19552
     *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                   // 19553
     *    any length.                                                                                                  // 19554
     * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string            // 19555
     *    that contains the regular expression body that will be converted to a regular expression                     // 19556
     *    as in the ngPattern directive.                                                                               // 19557
     * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match              // 19558
     *    a RegExp found by evaluating the Angular expression given in the attribute value.                            // 19559
     *    If the expression evaluates to a RegExp object then this is used directly.                                   // 19560
     *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`         // 19561
     *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.                                // 19562
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19563
     *    interaction with the input element.                                                                          // 19564
     *                                                                                                                 // 19565
     * @example                                                                                                        // 19566
     <example name="email-input-directive" module="emailExample">                                                      // 19567
     <file name="index.html">                                                                                          // 19568
     <script>                                                                                                          // 19569
     angular.module('emailExample', [])                                                                                // 19570
     .controller('ExampleController', ['$scope', function($scope) {                                                    // 19571
               $scope.email = {                                                                                        // 19572
                 text: 'me@example.com'                                                                                // 19573
     };                                                                                                                // 19574
     }]);                                                                                                              // 19575
     </script>                                                                                                         // 19576
     <form name="myForm" ng-controller="ExampleController">                                                            // 19577
     Email: <input type="email" name="input" ng-model="email.text" required>                                           // 19578
     <span class="error" ng-show="myForm.input.$error.required">                                                       // 19579
     Required!</span>                                                                                                  // 19580
     <span class="error" ng-show="myForm.input.$error.email">                                                          // 19581
     Not valid email!</span>                                                                                           // 19582
     <tt>text = {{email.text}}</tt><br/>                                                                               // 19583
     <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                       // 19584
     <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                       // 19585
     <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                   // 19586
     <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                               // 19587
     <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                                     // 19588
     </form>                                                                                                           // 19589
     </file>                                                                                                           // 19590
     <file name="protractor.js" type="protractor">                                                                     // 19591
     var text = element(by.binding('email.text'));                                                                     // 19592
     var valid = element(by.binding('myForm.input.$valid'));                                                           // 19593
     var input = element(by.model('email.text'));                                                                      // 19594
                                                                                                                       // 19595
     it('should initialize to model', function() {                                                                     // 19596
            expect(text.getText()).toContain('me@example.com');                                                        // 19597
     expect(valid.getText()).toContain('true');                                                                        // 19598
     });                                                                                                               // 19599
                                                                                                                       // 19600
     it('should be invalid if empty', function() {                                                                     // 19601
            input.clear();                                                                                             // 19602
            input.sendKeys('');                                                                                        // 19603
            expect(text.getText()).toEqual('text =');                                                                  // 19604
            expect(valid.getText()).toContain('false');                                                                // 19605
          });                                                                                                          // 19606
                                                                                                                       // 19607
     it('should be invalid if not email', function() {                                                                 // 19608
            input.clear();                                                                                             // 19609
            input.sendKeys('xxx');                                                                                     // 19610
                                                                                                                       // 19611
            expect(valid.getText()).toContain('false');                                                                // 19612
          });                                                                                                          // 19613
     </file>                                                                                                           // 19614
     </example>                                                                                                        // 19615
     */                                                                                                                // 19616
    'email': emailInputType,                                                                                           // 19617
                                                                                                                       // 19618
                                                                                                                       // 19619
    /**                                                                                                                // 19620
     * @ngdoc input                                                                                                    // 19621
     * @name input[radio]                                                                                              // 19622
     *                                                                                                                 // 19623
     * @description                                                                                                    // 19624
     * HTML radio button.                                                                                              // 19625
     *                                                                                                                 // 19626
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19627
     * @param {string} value The value to which the expression should be set when selected.                            // 19628
     * @param {string=} name Property name of the form under which the control is published.                           // 19629
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19630
     *    interaction with the input element.                                                                          // 19631
     * @param {string} ngValue Angular expression which sets the value to which the expression should                  // 19632
     *    be set when selected.                                                                                        // 19633
     *                                                                                                                 // 19634
     * @example                                                                                                        // 19635
     <example name="radio-input-directive" module="radioExample">                                                      // 19636
     <file name="index.html">                                                                                          // 19637
     <script>                                                                                                          // 19638
     angular.module('radioExample', [])                                                                                // 19639
     .controller('ExampleController', ['$scope', function($scope) {                                                    // 19640
               $scope.color = {                                                                                        // 19641
                 name: 'blue'                                                                                          // 19642
               };                                                                                                      // 19643
               $scope.specialValue = {                                                                                 // 19644
                 "id": "12345",                                                                                        // 19645
                 "value": "green"                                                                                      // 19646
               };                                                                                                      // 19647
             }]);                                                                                                      // 19648
     </script>                                                                                                         // 19649
     <form name="myForm" ng-controller="ExampleController">                                                            // 19650
     <input type="radio" ng-model="color.name" value="red">  Red <br/>                                                 // 19651
     <input type="radio" ng-model="color.name" ng-value="specialValue"> Green <br/>                                    // 19652
     <input type="radio" ng-model="color.name" value="blue"> Blue <br/>                                                // 19653
     <tt>color = {{color.name | json}}</tt><br/>                                                                       // 19654
     </form>                                                                                                           // 19655
     Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.             // 19656
     </file>                                                                                                           // 19657
     <file name="protractor.js" type="protractor">                                                                     // 19658
     it('should change state', function() {                                                                            // 19659
            var color = element(by.binding('color.name'));                                                             // 19660
                                                                                                                       // 19661
            expect(color.getText()).toContain('blue');                                                                 // 19662
                                                                                                                       // 19663
            element.all(by.model('color.name')).get(0).click();                                                        // 19664
                                                                                                                       // 19665
            expect(color.getText()).toContain('red');                                                                  // 19666
          });                                                                                                          // 19667
     </file>                                                                                                           // 19668
     </example>                                                                                                        // 19669
     */                                                                                                                // 19670
    'radio': radioInputType,                                                                                           // 19671
                                                                                                                       // 19672
                                                                                                                       // 19673
    /**                                                                                                                // 19674
     * @ngdoc input                                                                                                    // 19675
     * @name input[checkbox]                                                                                           // 19676
     *                                                                                                                 // 19677
     * @description                                                                                                    // 19678
     * HTML checkbox.                                                                                                  // 19679
     *                                                                                                                 // 19680
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 19681
     * @param {string=} name Property name of the form under which the control is published.                           // 19682
     * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                 // 19683
     * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.            // 19684
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 19685
     *    interaction with the input element.                                                                          // 19686
     *                                                                                                                 // 19687
     * @example                                                                                                        // 19688
     <example name="checkbox-input-directive" module="checkboxExample">                                                // 19689
     <file name="index.html">                                                                                          // 19690
     <script>                                                                                                          // 19691
     angular.module('checkboxExample', [])                                                                             // 19692
     .controller('ExampleController', ['$scope', function($scope) {                                                    // 19693
               $scope.checkboxModel = {                                                                                // 19694
                value1 : true,                                                                                         // 19695
                value2 : 'YES'                                                                                         // 19696
              };                                                                                                       // 19697
             }]);                                                                                                      // 19698
     </script>                                                                                                         // 19699
     <form name="myForm" ng-controller="ExampleController">                                                            // 19700
     Value1: <input type="checkbox" ng-model="checkboxModel.value1"> <br/>                                             // 19701
     Value2: <input type="checkbox" ng-model="checkboxModel.value2"                                                    // 19702
     ng-true-value="'YES'" ng-false-value="'NO'"> <br/>                                                                // 19703
     <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                                   // 19704
     <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                                   // 19705
     </form>                                                                                                           // 19706
     </file>                                                                                                           // 19707
     <file name="protractor.js" type="protractor">                                                                     // 19708
     it('should change state', function() {                                                                            // 19709
            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 19710
            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 19711
                                                                                                                       // 19712
            expect(value1.getText()).toContain('true');                                                                // 19713
            expect(value2.getText()).toContain('YES');                                                                 // 19714
                                                                                                                       // 19715
            element(by.model('checkboxModel.value1')).click();                                                         // 19716
            element(by.model('checkboxModel.value2')).click();                                                         // 19717
                                                                                                                       // 19718
            expect(value1.getText()).toContain('false');                                                               // 19719
            expect(value2.getText()).toContain('NO');                                                                  // 19720
          });                                                                                                          // 19721
     </file>                                                                                                           // 19722
     </example>                                                                                                        // 19723
     */                                                                                                                // 19724
    'checkbox': checkboxInputType,                                                                                     // 19725
                                                                                                                       // 19726
    'hidden': noop,                                                                                                    // 19727
    'button': noop,                                                                                                    // 19728
    'submit': noop,                                                                                                    // 19729
    'reset': noop,                                                                                                     // 19730
    'file': noop                                                                                                       // 19731
  };                                                                                                                   // 19732
                                                                                                                       // 19733
  function stringBasedInputType(ctrl) {                                                                                // 19734
    ctrl.$formatters.push(function(value) {                                                                            // 19735
      return ctrl.$isEmpty(value) ? value : value.toString();                                                          // 19736
    });                                                                                                                // 19737
  }                                                                                                                    // 19738
                                                                                                                       // 19739
  function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 19740
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 19741
    stringBasedInputType(ctrl);                                                                                        // 19742
  }                                                                                                                    // 19743
                                                                                                                       // 19744
  function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 19745
    var type = lowercase(element[0].type);                                                                             // 19746
                                                                                                                       // 19747
    // In composition mode, users are still inputing intermediate text buffer,                                         // 19748
    // hold the listener until composition is done.                                                                    // 19749
    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                // 19750
    if (!$sniffer.android) {                                                                                           // 19751
      var composing = false;                                                                                           // 19752
                                                                                                                       // 19753
      element.on('compositionstart', function(data) {                                                                  // 19754
        composing = true;                                                                                              // 19755
      });                                                                                                              // 19756
                                                                                                                       // 19757
      element.on('compositionend', function() {                                                                        // 19758
        composing = false;                                                                                             // 19759
        listener();                                                                                                    // 19760
      });                                                                                                              // 19761
    }                                                                                                                  // 19762
                                                                                                                       // 19763
    var listener = function(ev) {                                                                                      // 19764
      if (timeout) {                                                                                                   // 19765
        $browser.defer.cancel(timeout);                                                                                // 19766
        timeout = null;                                                                                                // 19767
      }                                                                                                                // 19768
      if (composing) return;                                                                                           // 19769
      var value = element.val(),                                                                                       // 19770
        event = ev && ev.type;                                                                                         // 19771
                                                                                                                       // 19772
      // By default we will trim the value                                                                             // 19773
      // If the attribute ng-trim exists we will avoid trimming                                                        // 19774
      // If input type is 'password', the value is never trimmed                                                       // 19775
      if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                          // 19776
        value = trim(value);                                                                                           // 19777
      }                                                                                                                // 19778
                                                                                                                       // 19779
      // If a control is suffering from bad input (due to native validators), browsers discard its                     // 19780
      // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                      // 19781
      // control's value is the same empty value twice in a row.                                                       // 19782
      if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                 // 19783
        ctrl.$setViewValue(value, event);                                                                              // 19784
      }                                                                                                                // 19785
    };                                                                                                                 // 19786
                                                                                                                       // 19787
    // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the                   // 19788
    // input event on backspace, delete or cut                                                                         // 19789
    if ($sniffer.hasEvent('input')) {                                                                                  // 19790
      element.on('input', listener);                                                                                   // 19791
    } else {                                                                                                           // 19792
      var timeout;                                                                                                     // 19793
                                                                                                                       // 19794
      var deferListener = function(ev, input, origValue) {                                                             // 19795
        if (!timeout) {                                                                                                // 19796
          timeout = $browser.defer(function() {                                                                        // 19797
            timeout = null;                                                                                            // 19798
            if (!input || input.value !== origValue) {                                                                 // 19799
              listener(ev);                                                                                            // 19800
            }                                                                                                          // 19801
          });                                                                                                          // 19802
        }                                                                                                              // 19803
      };                                                                                                               // 19804
                                                                                                                       // 19805
      element.on('keydown', function(event) {                                                                          // 19806
        var key = event.keyCode;                                                                                       // 19807
                                                                                                                       // 19808
        // ignore                                                                                                      // 19809
        //    command            modifiers                   arrows                                                    // 19810
        if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                  // 19811
                                                                                                                       // 19812
        deferListener(event, this, this.value);                                                                        // 19813
      });                                                                                                              // 19814
                                                                                                                       // 19815
      // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it           // 19816
      if ($sniffer.hasEvent('paste')) {                                                                                // 19817
        element.on('paste cut', deferListener);                                                                        // 19818
      }                                                                                                                // 19819
    }                                                                                                                  // 19820
                                                                                                                       // 19821
    // if user paste into input using mouse on older browser                                                           // 19822
    // or form autocomplete on newer browser, we need "change" event to catch it                                       // 19823
    element.on('change', listener);                                                                                    // 19824
                                                                                                                       // 19825
    ctrl.$render = function() {                                                                                        // 19826
      element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);                                              // 19827
    };                                                                                                                 // 19828
  }                                                                                                                    // 19829
                                                                                                                       // 19830
  function weekParser(isoWeek, existingDate) {                                                                         // 19831
    if (isDate(isoWeek)) {                                                                                             // 19832
      return isoWeek;                                                                                                  // 19833
    }                                                                                                                  // 19834
                                                                                                                       // 19835
    if (isString(isoWeek)) {                                                                                           // 19836
      WEEK_REGEXP.lastIndex = 0;                                                                                       // 19837
      var parts = WEEK_REGEXP.exec(isoWeek);                                                                           // 19838
      if (parts) {                                                                                                     // 19839
        var year = +parts[1],                                                                                          // 19840
          week = +parts[2],                                                                                            // 19841
          hours = 0,                                                                                                   // 19842
          minutes = 0,                                                                                                 // 19843
          seconds = 0,                                                                                                 // 19844
          milliseconds = 0,                                                                                            // 19845
          firstThurs = getFirstThursdayOfYear(year),                                                                   // 19846
          addDays = (week - 1) * 7;                                                                                    // 19847
                                                                                                                       // 19848
        if (existingDate) {                                                                                            // 19849
          hours = existingDate.getHours();                                                                             // 19850
          minutes = existingDate.getMinutes();                                                                         // 19851
          seconds = existingDate.getSeconds();                                                                         // 19852
          milliseconds = existingDate.getMilliseconds();                                                               // 19853
        }                                                                                                              // 19854
                                                                                                                       // 19855
        return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);               // 19856
      }                                                                                                                // 19857
    }                                                                                                                  // 19858
                                                                                                                       // 19859
    return NaN;                                                                                                        // 19860
  }                                                                                                                    // 19861
                                                                                                                       // 19862
  function createDateParser(regexp, mapping) {                                                                         // 19863
    return function(iso, date) {                                                                                       // 19864
      var parts, map;                                                                                                  // 19865
                                                                                                                       // 19866
      if (isDate(iso)) {                                                                                               // 19867
        return iso;                                                                                                    // 19868
      }                                                                                                                // 19869
                                                                                                                       // 19870
      if (isString(iso)) {                                                                                             // 19871
        // When a date is JSON'ified to wraps itself inside of an extra                                                // 19872
        // set of double quotes. This makes the date parsing code unable                                               // 19873
        // to match the date string and parse it as a date.                                                            // 19874
        if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {                                               // 19875
          iso = iso.substring(1, iso.length - 1);                                                                      // 19876
        }                                                                                                              // 19877
        if (ISO_DATE_REGEXP.test(iso)) {                                                                               // 19878
          return new Date(iso);                                                                                        // 19879
        }                                                                                                              // 19880
        regexp.lastIndex = 0;                                                                                          // 19881
        parts = regexp.exec(iso);                                                                                      // 19882
                                                                                                                       // 19883
        if (parts) {                                                                                                   // 19884
          parts.shift();                                                                                               // 19885
          if (date) {                                                                                                  // 19886
            map = {                                                                                                    // 19887
              yyyy: date.getFullYear(),                                                                                // 19888
              MM: date.getMonth() + 1,                                                                                 // 19889
              dd: date.getDate(),                                                                                      // 19890
              HH: date.getHours(),                                                                                     // 19891
              mm: date.getMinutes(),                                                                                   // 19892
              ss: date.getSeconds(),                                                                                   // 19893
              sss: date.getMilliseconds() / 1000                                                                       // 19894
            };                                                                                                         // 19895
          } else {                                                                                                     // 19896
            map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                           // 19897
          }                                                                                                            // 19898
                                                                                                                       // 19899
          forEach(parts, function(part, index) {                                                                       // 19900
            if (index < mapping.length) {                                                                              // 19901
              map[mapping[index]] = +part;                                                                             // 19902
            }                                                                                                          // 19903
          });                                                                                                          // 19904
          return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);             // 19905
        }                                                                                                              // 19906
      }                                                                                                                // 19907
                                                                                                                       // 19908
      return NaN;                                                                                                      // 19909
    };                                                                                                                 // 19910
  }                                                                                                                    // 19911
                                                                                                                       // 19912
  function createDateInputType(type, regexp, parseDate, format) {                                                      // 19913
    return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                    // 19914
      badInputChecker(scope, element, attr, ctrl);                                                                     // 19915
      baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                   // 19916
      var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                  // 19917
      var previousDate;                                                                                                // 19918
                                                                                                                       // 19919
      ctrl.$$parserName = type;                                                                                        // 19920
      ctrl.$parsers.push(function(value) {                                                                             // 19921
        if (ctrl.$isEmpty(value)) return null;                                                                         // 19922
        if (regexp.test(value)) {                                                                                      // 19923
          // Note: We cannot read ctrl.$modelValue, as there might be a different                                      // 19924
          // parser/formatter in the processing chain so that the model                                                // 19925
          // contains some different data format!                                                                      // 19926
          var parsedDate = parseDate(value, previousDate);                                                             // 19927
          if (timezone === 'UTC') {                                                                                    // 19928
            parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());                           // 19929
          }                                                                                                            // 19930
          return parsedDate;                                                                                           // 19931
        }                                                                                                              // 19932
        return undefined;                                                                                              // 19933
      });                                                                                                              // 19934
                                                                                                                       // 19935
      ctrl.$formatters.push(function(value) {                                                                          // 19936
        if (value && !isDate(value)) {                                                                                 // 19937
          throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                       // 19938
        }                                                                                                              // 19939
        if (isValidDate(value)) {                                                                                      // 19940
          previousDate = value;                                                                                        // 19941
          if (previousDate && timezone === 'UTC') {                                                                    // 19942
            var timezoneOffset = 60000 * previousDate.getTimezoneOffset();                                             // 19943
            previousDate = new Date(previousDate.getTime() + timezoneOffset);                                          // 19944
          }                                                                                                            // 19945
          return $filter('date')(value, format, timezone);                                                             // 19946
        } else {                                                                                                       // 19947
          previousDate = null;                                                                                         // 19948
          return '';                                                                                                   // 19949
        }                                                                                                              // 19950
      });                                                                                                              // 19951
                                                                                                                       // 19952
      if (isDefined(attr.min) || attr.ngMin) {                                                                         // 19953
        var minVal;                                                                                                    // 19954
        ctrl.$validators.min = function(value) {                                                                       // 19955
          return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                             // 19956
        };                                                                                                             // 19957
        attr.$observe('min', function(val) {                                                                           // 19958
          minVal = parseObservedDateValue(val);                                                                        // 19959
          ctrl.$validate();                                                                                            // 19960
        });                                                                                                            // 19961
      }                                                                                                                // 19962
                                                                                                                       // 19963
      if (isDefined(attr.max) || attr.ngMax) {                                                                         // 19964
        var maxVal;                                                                                                    // 19965
        ctrl.$validators.max = function(value) {                                                                       // 19966
          return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                             // 19967
        };                                                                                                             // 19968
        attr.$observe('max', function(val) {                                                                           // 19969
          maxVal = parseObservedDateValue(val);                                                                        // 19970
          ctrl.$validate();                                                                                            // 19971
        });                                                                                                            // 19972
      }                                                                                                                // 19973
                                                                                                                       // 19974
      function isValidDate(value) {                                                                                    // 19975
        // Invalid Date: getTime() returns NaN                                                                         // 19976
        return value && !(value.getTime && value.getTime() !== value.getTime());                                       // 19977
      }                                                                                                                // 19978
                                                                                                                       // 19979
      function parseObservedDateValue(val) {                                                                           // 19980
        return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;                                      // 19981
      }                                                                                                                // 19982
    };                                                                                                                 // 19983
  }                                                                                                                    // 19984
                                                                                                                       // 19985
  function badInputChecker(scope, element, attr, ctrl) {                                                               // 19986
    var node = element[0];                                                                                             // 19987
    var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                       // 19988
    if (nativeValidation) {                                                                                            // 19989
      ctrl.$parsers.push(function(value) {                                                                             // 19990
        var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                    // 19991
        // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                 // 19992
        // - also sets validity.badInput (should only be validity.typeMismatch).                                       // 19993
        // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)      // 19994
        // - can ignore this case as we can still read out the erroneous email...                                      // 19995
        return validity.badInput && !validity.typeMismatch ? undefined : value;                                        // 19996
      });                                                                                                              // 19997
    }                                                                                                                  // 19998
  }                                                                                                                    // 19999
                                                                                                                       // 20000
  function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                           // 20001
    badInputChecker(scope, element, attr, ctrl);                                                                       // 20002
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 20003
                                                                                                                       // 20004
    ctrl.$$parserName = 'number';                                                                                      // 20005
    ctrl.$parsers.push(function(value) {                                                                               // 20006
      if (ctrl.$isEmpty(value))      return null;                                                                      // 20007
      if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                         // 20008
      return undefined;                                                                                                // 20009
    });                                                                                                                // 20010
                                                                                                                       // 20011
    ctrl.$formatters.push(function(value) {                                                                            // 20012
      if (!ctrl.$isEmpty(value)) {                                                                                     // 20013
        if (!isNumber(value)) {                                                                                        // 20014
          throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                      // 20015
        }                                                                                                              // 20016
        value = value.toString();                                                                                      // 20017
      }                                                                                                                // 20018
      return value;                                                                                                    // 20019
    });                                                                                                                // 20020
                                                                                                                       // 20021
    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 20022
      var minVal;                                                                                                      // 20023
      ctrl.$validators.min = function(value) {                                                                         // 20024
        return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                         // 20025
      };                                                                                                               // 20026
                                                                                                                       // 20027
      attr.$observe('min', function(val) {                                                                             // 20028
        if (isDefined(val) && !isNumber(val)) {                                                                        // 20029
          val = parseFloat(val, 10);                                                                                   // 20030
        }                                                                                                              // 20031
        minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                       // 20032
        // TODO(matsko): implement validateLater to reduce number of validations                                       // 20033
        ctrl.$validate();                                                                                              // 20034
      });                                                                                                              // 20035
    }                                                                                                                  // 20036
                                                                                                                       // 20037
    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 20038
      var maxVal;                                                                                                      // 20039
      ctrl.$validators.max = function(value) {                                                                         // 20040
        return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                         // 20041
      };                                                                                                               // 20042
                                                                                                                       // 20043
      attr.$observe('max', function(val) {                                                                             // 20044
        if (isDefined(val) && !isNumber(val)) {                                                                        // 20045
          val = parseFloat(val, 10);                                                                                   // 20046
        }                                                                                                              // 20047
        maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                       // 20048
        // TODO(matsko): implement validateLater to reduce number of validations                                       // 20049
        ctrl.$validate();                                                                                              // 20050
      });                                                                                                              // 20051
    }                                                                                                                  // 20052
  }                                                                                                                    // 20053
                                                                                                                       // 20054
  function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 20055
    // Note: no badInputChecker here by purpose as `url` is only a validation                                          // 20056
    // in browsers, i.e. we can always read out input.value even if it is not valid!                                   // 20057
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 20058
    stringBasedInputType(ctrl);                                                                                        // 20059
                                                                                                                       // 20060
    ctrl.$$parserName = 'url';                                                                                         // 20061
    ctrl.$validators.url = function(modelValue, viewValue) {                                                           // 20062
      var value = modelValue || viewValue;                                                                             // 20063
      return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                           // 20064
    };                                                                                                                 // 20065
  }                                                                                                                    // 20066
                                                                                                                       // 20067
  function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                            // 20068
    // Note: no badInputChecker here by purpose as `url` is only a validation                                          // 20069
    // in browsers, i.e. we can always read out input.value even if it is not valid!                                   // 20070
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 20071
    stringBasedInputType(ctrl);                                                                                        // 20072
                                                                                                                       // 20073
    ctrl.$$parserName = 'email';                                                                                       // 20074
    ctrl.$validators.email = function(modelValue, viewValue) {                                                         // 20075
      var value = modelValue || viewValue;                                                                             // 20076
      return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                         // 20077
    };                                                                                                                 // 20078
  }                                                                                                                    // 20079
                                                                                                                       // 20080
  function radioInputType(scope, element, attr, ctrl) {                                                                // 20081
    // make the name unique, if not defined                                                                            // 20082
    if (isUndefined(attr.name)) {                                                                                      // 20083
      element.attr('name', nextUid());                                                                                 // 20084
    }                                                                                                                  // 20085
                                                                                                                       // 20086
    var listener = function(ev) {                                                                                      // 20087
      if (element[0].checked) {                                                                                        // 20088
        ctrl.$setViewValue(attr.value, ev && ev.type);                                                                 // 20089
      }                                                                                                                // 20090
    };                                                                                                                 // 20091
                                                                                                                       // 20092
    element.on('click', listener);                                                                                     // 20093
                                                                                                                       // 20094
    ctrl.$render = function() {                                                                                        // 20095
      var value = attr.value;                                                                                          // 20096
      element[0].checked = (value == ctrl.$viewValue);                                                                 // 20097
    };                                                                                                                 // 20098
                                                                                                                       // 20099
    attr.$observe('value', ctrl.$render);                                                                              // 20100
  }                                                                                                                    // 20101
                                                                                                                       // 20102
  function parseConstantExpr($parse, context, name, expression, fallback) {                                            // 20103
    var parseFn;                                                                                                       // 20104
    if (isDefined(expression)) {                                                                                       // 20105
      parseFn = $parse(expression);                                                                                    // 20106
      if (!parseFn.constant) {                                                                                         // 20107
        throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +                      // 20108
        '`{1}`.', name, expression);                                                                                   // 20109
      }                                                                                                                // 20110
      return parseFn(context);                                                                                         // 20111
    }                                                                                                                  // 20112
    return fallback;                                                                                                   // 20113
  }                                                                                                                    // 20114
                                                                                                                       // 20115
  function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                        // 20116
    var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                           // 20117
    var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                       // 20118
                                                                                                                       // 20119
    var listener = function(ev) {                                                                                      // 20120
      ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                           // 20121
    };                                                                                                                 // 20122
                                                                                                                       // 20123
    element.on('click', listener);                                                                                     // 20124
                                                                                                                       // 20125
    ctrl.$render = function() {                                                                                        // 20126
      element[0].checked = ctrl.$viewValue;                                                                            // 20127
    };                                                                                                                 // 20128
                                                                                                                       // 20129
    // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`           // 20130
    // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert               // 20131
    // it to a boolean.                                                                                                // 20132
    ctrl.$isEmpty = function(value) {                                                                                  // 20133
      return value === false;                                                                                          // 20134
    };                                                                                                                 // 20135
                                                                                                                       // 20136
    ctrl.$formatters.push(function(value) {                                                                            // 20137
      return equals(value, trueValue);                                                                                 // 20138
    });                                                                                                                // 20139
                                                                                                                       // 20140
    ctrl.$parsers.push(function(value) {                                                                               // 20141
      return value ? trueValue : falseValue;                                                                           // 20142
    });                                                                                                                // 20143
  }                                                                                                                    // 20144
                                                                                                                       // 20145
                                                                                                                       // 20146
  /**                                                                                                                  // 20147
   * @ngdoc directive                                                                                                  // 20148
   * @name textarea                                                                                                    // 20149
   * @restrict E                                                                                                       // 20150
   *                                                                                                                   // 20151
   * @description                                                                                                      // 20152
   * HTML textarea element control with angular data-binding. The data-binding and validation                          // 20153
   * properties of this element are exactly the same as those of the                                                   // 20154
   * {@link ng.directive:input input element}.                                                                         // 20155
   *                                                                                                                   // 20156
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20157
   * @param {string=} name Property name of the form under which the control is published.                             // 20158
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20159
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20160
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20161
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20162
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20163
   *    minlength.                                                                                                     // 20164
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20165
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                 // 20166
   *    length.                                                                                                        // 20167
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the                    // 20168
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for                    // 20169
   *    patterns defined as scope expressions.                                                                         // 20170
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20171
   *    interaction with the input element.                                                                            // 20172
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20173
   */                                                                                                                  // 20174
                                                                                                                       // 20175
                                                                                                                       // 20176
  /**                                                                                                                  // 20177
   * @ngdoc directive                                                                                                  // 20178
   * @name input                                                                                                       // 20179
   * @restrict E                                                                                                       // 20180
   *                                                                                                                   // 20181
   * @description                                                                                                      // 20182
   * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,          // 20183
   * input state control, and validation.                                                                              // 20184
   * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.           // 20185
   *                                                                                                                   // 20186
   * <div class="alert alert-warning">                                                                                 // 20187
   * **Note:** Not every feature offered is available for all input types.                                             // 20188
   * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                    // 20189
   * </div>                                                                                                            // 20190
   *                                                                                                                   // 20191
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20192
   * @param {string=} name Property name of the form under which the control is published.                             // 20193
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20194
   * @param {boolean=} ngRequired Sets `required` attribute if set to true                                             // 20195
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20196
   *    minlength.                                                                                                     // 20197
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20198
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                 // 20199
   *    length.                                                                                                        // 20200
   * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the                    // 20201
   *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for                    // 20202
   *    patterns defined as scope expressions.                                                                         // 20203
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20204
   *    interaction with the input element.                                                                            // 20205
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20206
   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20207
   *    input.                                                                                                         // 20208
   *                                                                                                                   // 20209
   * @example                                                                                                          // 20210
   <example name="input-directive" module="inputExample">                                                              // 20211
   <file name="index.html">                                                                                            // 20212
   <script>                                                                                                            // 20213
   angular.module('inputExample', [])                                                                                  // 20214
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 20215
              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 20216
            }]);                                                                                                       // 20217
   </script>                                                                                                           // 20218
   <div ng-controller="ExampleController">                                                                             // 20219
   <form name="myForm">                                                                                                // 20220
   User name: <input type="text" name="userName" ng-model="user.name" required>                                        // 20221
   <span class="error" ng-show="myForm.userName.$error.required">                                                      // 20222
   Required!</span><br>                                                                                                // 20223
   Last name: <input type="text" name="lastName" ng-model="user.last"                                                  // 20224
   ng-minlength="3" ng-maxlength="10">                                                                                 // 20225
   <span class="error" ng-show="myForm.lastName.$error.minlength">                                                     // 20226
   Too short!</span>                                                                                                   // 20227
   <span class="error" ng-show="myForm.lastName.$error.maxlength">                                                     // 20228
   Too long!</span><br>                                                                                                // 20229
   </form>                                                                                                             // 20230
   <hr>                                                                                                                // 20231
   <tt>user = {{user}}</tt><br/>                                                                                       // 20232
   <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>                                                    // 20233
   <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>                                                    // 20234
   <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>                                                    // 20235
   <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>                                                    // 20236
   <tt>myForm.$valid = {{myForm.$valid}}</tt><br>                                                                      // 20237
   <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>                                                  // 20238
   <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>                                                // 20239
   <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>                                                // 20240
   </div>                                                                                                              // 20241
   </file>                                                                                                             // 20242
   <file name="protractor.js" type="protractor">                                                                       // 20243
   var user = element(by.exactBinding('user'));                                                                        // 20244
   var userNameValid = element(by.binding('myForm.userName.$valid'));                                                  // 20245
   var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                                  // 20246
   var lastNameError = element(by.binding('myForm.lastName.$error'));                                                  // 20247
   var formValid = element(by.binding('myForm.$valid'));                                                               // 20248
   var userNameInput = element(by.model('user.name'));                                                                 // 20249
   var userLastInput = element(by.model('user.last'));                                                                 // 20250
                                                                                                                       // 20251
   it('should initialize to model', function() {                                                                       // 20252
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');                                       // 20253
          expect(userNameValid.getText()).toContain('true');                                                           // 20254
          expect(formValid.getText()).toContain('true');                                                               // 20255
        });                                                                                                            // 20256
                                                                                                                       // 20257
   it('should be invalid if empty when required', function() {                                                         // 20258
          userNameInput.clear();                                                                                       // 20259
          userNameInput.sendKeys('');                                                                                  // 20260
                                                                                                                       // 20261
          expect(user.getText()).toContain('{"last":"visitor"}');                                                      // 20262
          expect(userNameValid.getText()).toContain('false');                                                          // 20263
          expect(formValid.getText()).toContain('false');                                                              // 20264
        });                                                                                                            // 20265
                                                                                                                       // 20266
   it('should be valid if empty when min length is set', function() {                                                  // 20267
          userLastInput.clear();                                                                                       // 20268
          userLastInput.sendKeys('');                                                                                  // 20269
                                                                                                                       // 20270
          expect(user.getText()).toContain('{"name":"guest","last":""}');                                              // 20271
          expect(lastNameValid.getText()).toContain('true');                                                           // 20272
          expect(formValid.getText()).toContain('true');                                                               // 20273
        });                                                                                                            // 20274
                                                                                                                       // 20275
   it('should be invalid if less than required min length', function() {                                               // 20276
          userLastInput.clear();                                                                                       // 20277
          userLastInput.sendKeys('xx');                                                                                // 20278
                                                                                                                       // 20279
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 20280
          expect(lastNameValid.getText()).toContain('false');                                                          // 20281
          expect(lastNameError.getText()).toContain('minlength');                                                      // 20282
          expect(formValid.getText()).toContain('false');                                                              // 20283
        });                                                                                                            // 20284
                                                                                                                       // 20285
   it('should be invalid if longer than max length', function() {                                                      // 20286
          userLastInput.clear();                                                                                       // 20287
          userLastInput.sendKeys('some ridiculously long name');                                                       // 20288
                                                                                                                       // 20289
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 20290
          expect(lastNameValid.getText()).toContain('false');                                                          // 20291
          expect(lastNameError.getText()).toContain('maxlength');                                                      // 20292
          expect(formValid.getText()).toContain('false');                                                              // 20293
        });                                                                                                            // 20294
   </file>                                                                                                             // 20295
   </example>                                                                                                          // 20296
   */                                                                                                                  // 20297
  var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                   // 20298
    function($browser, $sniffer, $filter, $parse) {                                                                    // 20299
      return {                                                                                                         // 20300
        restrict: 'E',                                                                                                 // 20301
        require: ['?ngModel'],                                                                                         // 20302
        link: {                                                                                                        // 20303
          pre: function(scope, element, attr, ctrls) {                                                                 // 20304
            if (ctrls[0]) {                                                                                            // 20305
              (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,            // 20306
                $browser, $filter, $parse);                                                                            // 20307
            }                                                                                                          // 20308
          }                                                                                                            // 20309
        }                                                                                                              // 20310
      };                                                                                                               // 20311
    }];                                                                                                                // 20312
                                                                                                                       // 20313
                                                                                                                       // 20314
                                                                                                                       // 20315
  var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;                                                                    // 20316
  /**                                                                                                                  // 20317
   * @ngdoc directive                                                                                                  // 20318
   * @name ngValue                                                                                                     // 20319
   *                                                                                                                   // 20320
   * @description                                                                                                      // 20321
   * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                     // 20322
   * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                     // 20323
   * the bound value.                                                                                                  // 20324
   *                                                                                                                   // 20325
   * `ngValue` is useful when dynamically generating lists of radio buttons using                                      // 20326
   * {@link ngRepeat `ngRepeat`}, as shown below.                                                                      // 20327
   *                                                                                                                   // 20328
   * Likewise, `ngValue` can be used to generate `<option>` elements for                                               // 20329
   * the {@link select `select`} element. In that case however, only strings are supported                             // 20330
   * for the `value `attribute, so the resulting `ngModel` will always be a string.                                    // 20331
   * Support for `select` models with non-string values is available via `ngOptions`.                                  // 20332
   *                                                                                                                   // 20333
   * @element input                                                                                                    // 20334
   * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                   // 20335
   *   of the `input` element                                                                                          // 20336
   *                                                                                                                   // 20337
   * @example                                                                                                          // 20338
   <example name="ngValue-directive" module="valueExample">                                                            // 20339
   <file name="index.html">                                                                                            // 20340
   <script>                                                                                                            // 20341
   angular.module('valueExample', [])                                                                                  // 20342
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 20343
              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 20344
              $scope.my = { favorite: 'unicorns' };                                                                    // 20345
            }]);                                                                                                       // 20346
   </script>                                                                                                           // 20347
   <form ng-controller="ExampleController">                                                                            // 20348
   <h2>Which is your favorite?</h2>                                                                                    // 20349
   <label ng-repeat="name in names" for="{{name}}">                                                                    // 20350
   {{name}}                                                                                                            // 20351
   <input type="radio"                                                                                                 // 20352
   ng-model="my.favorite"                                                                                              // 20353
   ng-value="name"                                                                                                     // 20354
   id="{{name}}"                                                                                                       // 20355
   name="favorite">                                                                                                    // 20356
   </label>                                                                                                            // 20357
   <div>You chose {{my.favorite}}</div>                                                                                // 20358
   </form>                                                                                                             // 20359
   </file>                                                                                                             // 20360
   <file name="protractor.js" type="protractor">                                                                       // 20361
   var favorite = element(by.binding('my.favorite'));                                                                  // 20362
                                                                                                                       // 20363
   it('should initialize to model', function() {                                                                       // 20364
          expect(favorite.getText()).toContain('unicorns');                                                            // 20365
        });                                                                                                            // 20366
   it('should bind the values to the inputs', function() {                                                             // 20367
          element.all(by.model('my.favorite')).get(0).click();                                                         // 20368
          expect(favorite.getText()).toContain('pizza');                                                               // 20369
        });                                                                                                            // 20370
   </file>                                                                                                             // 20371
   </example>                                                                                                          // 20372
   */                                                                                                                  // 20373
  var ngValueDirective = function() {                                                                                  // 20374
    return {                                                                                                           // 20375
      restrict: 'A',                                                                                                   // 20376
      priority: 100,                                                                                                   // 20377
      compile: function(tpl, tplAttr) {                                                                                // 20378
        if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                             // 20379
          return function ngValueConstantLink(scope, elm, attr) {                                                      // 20380
            attr.$set('value', scope.$eval(attr.ngValue));                                                             // 20381
          };                                                                                                           // 20382
        } else {                                                                                                       // 20383
          return function ngValueLink(scope, elm, attr) {                                                              // 20384
            scope.$watch(attr.ngValue, function valueWatchAction(value) {                                              // 20385
              attr.$set('value', value);                                                                               // 20386
            });                                                                                                        // 20387
          };                                                                                                           // 20388
        }                                                                                                              // 20389
      }                                                                                                                // 20390
    };                                                                                                                 // 20391
  };                                                                                                                   // 20392
                                                                                                                       // 20393
  /**                                                                                                                  // 20394
   * @ngdoc directive                                                                                                  // 20395
   * @name ngBind                                                                                                      // 20396
   * @restrict AC                                                                                                      // 20397
   *                                                                                                                   // 20398
   * @description                                                                                                      // 20399
   * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                    // 20400
   * with the value of a given expression, and to update the text content when the value of that                       // 20401
   * expression changes.                                                                                               // 20402
   *                                                                                                                   // 20403
   * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                      // 20404
   * `{{ expression }}` which is similar but less verbose.                                                             // 20405
   *                                                                                                                   // 20406
   * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                       // 20407
   * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                        // 20408
   * element attribute, it makes the bindings invisible to the user while the page is loading.                         // 20409
   *                                                                                                                   // 20410
   * An alternative solution to this problem would be using the                                                        // 20411
   * {@link ng.directive:ngCloak ngCloak} directive.                                                                   // 20412
   *                                                                                                                   // 20413
   *                                                                                                                   // 20414
   * @element ANY                                                                                                      // 20415
   * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                       // 20416
   *                                                                                                                   // 20417
   * @example                                                                                                          // 20418
   * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                     // 20419
   <example module="bindExample">                                                                                      // 20420
   <file name="index.html">                                                                                            // 20421
   <script>                                                                                                            // 20422
   angular.module('bindExample', [])                                                                                   // 20423
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 20424
             $scope.name = 'Whirled';                                                                                  // 20425
           }]);                                                                                                        // 20426
   </script>                                                                                                           // 20427
   <div ng-controller="ExampleController">                                                                             // 20428
   Enter name: <input type="text" ng-model="name"><br>                                                                 // 20429
   Hello <span ng-bind="name"></span>!                                                                                 // 20430
   </div>                                                                                                              // 20431
   </file>                                                                                                             // 20432
   <file name="protractor.js" type="protractor">                                                                       // 20433
   it('should check ng-bind', function() {                                                                             // 20434
         var nameInput = element(by.model('name'));                                                                    // 20435
                                                                                                                       // 20436
         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 20437
         nameInput.clear();                                                                                            // 20438
         nameInput.sendKeys('world');                                                                                  // 20439
         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 20440
       });                                                                                                             // 20441
   </file>                                                                                                             // 20442
   </example>                                                                                                          // 20443
   */                                                                                                                  // 20444
  var ngBindDirective = ['$compile', function($compile) {                                                              // 20445
    return {                                                                                                           // 20446
      restrict: 'AC',                                                                                                  // 20447
      compile: function ngBindCompile(templateElement) {                                                               // 20448
        $compile.$$addBindingClass(templateElement);                                                                   // 20449
        return function ngBindLink(scope, element, attr) {                                                             // 20450
          $compile.$$addBindingInfo(element, attr.ngBind);                                                             // 20451
          element = element[0];                                                                                        // 20452
          scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                // 20453
            element.textContent = value === undefined ? '' : value;                                                    // 20454
          });                                                                                                          // 20455
        };                                                                                                             // 20456
      }                                                                                                                // 20457
    };                                                                                                                 // 20458
  }];                                                                                                                  // 20459
                                                                                                                       // 20460
                                                                                                                       // 20461
  /**                                                                                                                  // 20462
   * @ngdoc directive                                                                                                  // 20463
   * @name ngBindTemplate                                                                                              // 20464
   *                                                                                                                   // 20465
   * @description                                                                                                      // 20466
   * The `ngBindTemplate` directive specifies that the element                                                         // 20467
   * text content should be replaced with the interpolation of the template                                            // 20468
   * in the `ngBindTemplate` attribute.                                                                                // 20469
   * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                              // 20470
   * expressions. This directive is needed since some HTML elements                                                    // 20471
   * (such as TITLE and OPTION) cannot contain SPAN elements.                                                          // 20472
   *                                                                                                                   // 20473
   * @element ANY                                                                                                      // 20474
   * @param {string} ngBindTemplate template of form                                                                   // 20475
   *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                            // 20476
   *                                                                                                                   // 20477
   * @example                                                                                                          // 20478
   * Try it here: enter text in text box and watch the greeting change.                                                // 20479
   <example module="bindExample">                                                                                      // 20480
   <file name="index.html">                                                                                            // 20481
   <script>                                                                                                            // 20482
   angular.module('bindExample', [])                                                                                   // 20483
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 20484
             $scope.salutation = 'Hello';                                                                              // 20485
             $scope.name = 'World';                                                                                    // 20486
           }]);                                                                                                        // 20487
   </script>                                                                                                           // 20488
   <div ng-controller="ExampleController">                                                                             // 20489
   Salutation: <input type="text" ng-model="salutation"><br>                                                           // 20490
   Name: <input type="text" ng-model="name"><br>                                                                       // 20491
   <pre ng-bind-template="{{salutation}} {{name}}!"></pre>                                                             // 20492
   </div>                                                                                                              // 20493
   </file>                                                                                                             // 20494
   <file name="protractor.js" type="protractor">                                                                       // 20495
   it('should check ng-bind', function() {                                                                             // 20496
         var salutationElem = element(by.binding('salutation'));                                                       // 20497
         var salutationInput = element(by.model('salutation'));                                                        // 20498
         var nameInput = element(by.model('name'));                                                                    // 20499
                                                                                                                       // 20500
         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 20501
                                                                                                                       // 20502
         salutationInput.clear();                                                                                      // 20503
         salutationInput.sendKeys('Greetings');                                                                        // 20504
         nameInput.clear();                                                                                            // 20505
         nameInput.sendKeys('user');                                                                                   // 20506
                                                                                                                       // 20507
         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 20508
       });                                                                                                             // 20509
   </file>                                                                                                             // 20510
   </example>                                                                                                          // 20511
   */                                                                                                                  // 20512
  var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                        // 20513
    return {                                                                                                           // 20514
      compile: function ngBindTemplateCompile(templateElement) {                                                       // 20515
        $compile.$$addBindingClass(templateElement);                                                                   // 20516
        return function ngBindTemplateLink(scope, element, attr) {                                                     // 20517
          var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                   // 20518
          $compile.$$addBindingInfo(element, interpolateFn.expressions);                                               // 20519
          element = element[0];                                                                                        // 20520
          attr.$observe('ngBindTemplate', function(value) {                                                            // 20521
            element.textContent = value === undefined ? '' : value;                                                    // 20522
          });                                                                                                          // 20523
        };                                                                                                             // 20524
      }                                                                                                                // 20525
    };                                                                                                                 // 20526
  }];                                                                                                                  // 20527
                                                                                                                       // 20528
                                                                                                                       // 20529
  /**                                                                                                                  // 20530
   * @ngdoc directive                                                                                                  // 20531
   * @name ngBindHtml                                                                                                  // 20532
   *                                                                                                                   // 20533
   * @description                                                                                                      // 20534
   * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,             // 20535
   * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.            // 20536
   * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link             // 20537
    * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}              // 20538
   * in your module's dependencies, you need to include "angular-sanitize.js" in your application.                     // 20539
   *                                                                                                                   // 20540
   * You may also bypass sanitization for values you know are safe. To do so, bind to                                  // 20541
   * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                    // 20542
   * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                             // 20543
   *                                                                                                                   // 20544
   * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                   // 20545
   * will have an exception (instead of an exploit.)                                                                   // 20546
   *                                                                                                                   // 20547
   * @element ANY                                                                                                      // 20548
   * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                   // 20549
   *                                                                                                                   // 20550
   * @example                                                                                                          // 20551
                                                                                                                       // 20552
   <example module="bindHtmlExample" deps="angular-sanitize.js">                                                       // 20553
   <file name="index.html">                                                                                            // 20554
   <div ng-controller="ExampleController">                                                                             // 20555
   <p ng-bind-html="myHTML"></p>                                                                                       // 20556
   </div>                                                                                                              // 20557
   </file>                                                                                                             // 20558
                                                                                                                       // 20559
   <file name="script.js">                                                                                             // 20560
   angular.module('bindHtmlExample', ['ngSanitize'])                                                                   // 20561
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 20562
           $scope.myHTML =                                                                                             // 20563
              'I am an <code>HTML</code>string with ' +                                                                // 20564
              '<a href="#">links!</a> and other <em>stuff</em>';                                                       // 20565
         }]);                                                                                                          // 20566
   </file>                                                                                                             // 20567
                                                                                                                       // 20568
   <file name="protractor.js" type="protractor">                                                                       // 20569
   it('should check ng-bind-html', function() {                                                                        // 20570
         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 20571
             'I am an HTMLstring with links! and other stuff');                                                        // 20572
       });                                                                                                             // 20573
   </file>                                                                                                             // 20574
   </example>                                                                                                          // 20575
   */                                                                                                                  // 20576
  var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                          // 20577
    return {                                                                                                           // 20578
      restrict: 'A',                                                                                                   // 20579
      compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                          // 20580
        var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                              // 20581
        var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                               // 20582
          return (value || '').toString();                                                                             // 20583
        });                                                                                                            // 20584
        $compile.$$addBindingClass(tElement);                                                                          // 20585
                                                                                                                       // 20586
        return function ngBindHtmlLink(scope, element, attr) {                                                         // 20587
          $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                         // 20588
                                                                                                                       // 20589
          scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                             // 20590
            // we re-evaluate the expr because we want a TrustedValueHolderType                                        // 20591
            // for $sce, not a string                                                                                  // 20592
            element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                          // 20593
          });                                                                                                          // 20594
        };                                                                                                             // 20595
      }                                                                                                                // 20596
    };                                                                                                                 // 20597
  }];                                                                                                                  // 20598
                                                                                                                       // 20599
  /**                                                                                                                  // 20600
   * @ngdoc directive                                                                                                  // 20601
   * @name ngChange                                                                                                    // 20602
   *                                                                                                                   // 20603
   * @description                                                                                                      // 20604
   * Evaluate the given expression when the user changes the input.                                                    // 20605
   * The expression is evaluated immediately, unlike the JavaScript onchange event                                     // 20606
   * which only triggers at the end of a change (usually, when the user leaves the                                     // 20607
   * form element or presses the return key).                                                                          // 20608
   *                                                                                                                   // 20609
   * The `ngChange` expression is only evaluated when a change in the input value causes                               // 20610
   * a new value to be committed to the model.                                                                         // 20611
   *                                                                                                                   // 20612
   * It will not be evaluated:                                                                                         // 20613
   * * if the value returned from the `$parsers` transformation pipeline has not changed                               // 20614
   * * if the input has continued to be invalid since the model will stay `null`                                       // 20615
   * * if the model is changed programmatically and not by a change to the input value                                 // 20616
   *                                                                                                                   // 20617
   *                                                                                                                   // 20618
   * Note, this directive requires `ngModel` to be present.                                                            // 20619
   *                                                                                                                   // 20620
   * @element input                                                                                                    // 20621
   * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                          // 20622
   * in input value.                                                                                                   // 20623
   *                                                                                                                   // 20624
   * @example                                                                                                          // 20625
   * <example name="ngChange-directive" module="changeExample">                                                        // 20626
   *   <file name="index.html">                                                                                        // 20627
   *     <script>                                                                                                      // 20628
   *       angular.module('changeExample', [])                                                                         // 20629
   *         .controller('ExampleController', ['$scope', function($scope) {                                            // 20630
 *           $scope.counter = 0;                                                                                       // 20631
 *           $scope.change = function() {                                                                              // 20632
 *             $scope.counter++;                                                                                       // 20633
 *           };                                                                                                        // 20634
 *         }]);                                                                                                        // 20635
   *     </script>                                                                                                     // 20636
   *     <div ng-controller="ExampleController">                                                                       // 20637
   *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />                 // 20638
   *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />                                      // 20639
   *       <label for="ng-change-example2">Confirmed</label><br />                                                     // 20640
   *       <tt>debug = {{confirmed}}</tt><br/>                                                                         // 20641
   *       <tt>counter = {{counter}}</tt><br/>                                                                         // 20642
   *     </div>                                                                                                        // 20643
   *   </file>                                                                                                         // 20644
   *   <file name="protractor.js" type="protractor">                                                                   // 20645
   *     var counter = element(by.binding('counter'));                                                                 // 20646
   *     var debug = element(by.binding('confirmed'));                                                                 // 20647
   *                                                                                                                   // 20648
   *     it('should evaluate the expression if changing from view', function() {                                       // 20649
 *       expect(counter.getText()).toContain('0');                                                                     // 20650
 *                                                                                                                     // 20651
 *       element(by.id('ng-change-example1')).click();                                                                 // 20652
 *                                                                                                                     // 20653
 *       expect(counter.getText()).toContain('1');                                                                     // 20654
 *       expect(debug.getText()).toContain('true');                                                                    // 20655
 *     });                                                                                                             // 20656
   *                                                                                                                   // 20657
   *     it('should not evaluate the expression if changing from model', function() {                                  // 20658
 *       element(by.id('ng-change-example2')).click();                                                                 // 20659
                                                                                                                       // 20660
 *       expect(counter.getText()).toContain('0');                                                                     // 20661
 *       expect(debug.getText()).toContain('true');                                                                    // 20662
 *     });                                                                                                             // 20663
   *   </file>                                                                                                         // 20664
   * </example>                                                                                                        // 20665
   */                                                                                                                  // 20666
  var ngChangeDirective = valueFn({                                                                                    // 20667
    restrict: 'A',                                                                                                     // 20668
    require: 'ngModel',                                                                                                // 20669
    link: function(scope, element, attr, ctrl) {                                                                       // 20670
      ctrl.$viewChangeListeners.push(function() {                                                                      // 20671
        scope.$eval(attr.ngChange);                                                                                    // 20672
      });                                                                                                              // 20673
    }                                                                                                                  // 20674
  });                                                                                                                  // 20675
                                                                                                                       // 20676
  function classDirective(name, selector) {                                                                            // 20677
    name = 'ngClass' + name;                                                                                           // 20678
    return ['$animate', function($animate) {                                                                           // 20679
      return {                                                                                                         // 20680
        restrict: 'AC',                                                                                                // 20681
        link: function(scope, element, attr) {                                                                         // 20682
          var oldVal;                                                                                                  // 20683
                                                                                                                       // 20684
          scope.$watch(attr[name], ngClassWatchAction, true);                                                          // 20685
                                                                                                                       // 20686
          attr.$observe('class', function(value) {                                                                     // 20687
            ngClassWatchAction(scope.$eval(attr[name]));                                                               // 20688
          });                                                                                                          // 20689
                                                                                                                       // 20690
                                                                                                                       // 20691
          if (name !== 'ngClass') {                                                                                    // 20692
            scope.$watch('$index', function($index, old$index) {                                                       // 20693
              // jshint bitwise: false                                                                                 // 20694
              var mod = $index & 1;                                                                                    // 20695
              if (mod !== (old$index & 1)) {                                                                           // 20696
                var classes = arrayClasses(scope.$eval(attr[name]));                                                   // 20697
                mod === selector ?                                                                                     // 20698
                  addClasses(classes) :                                                                                // 20699
                  removeClasses(classes);                                                                              // 20700
              }                                                                                                        // 20701
            });                                                                                                        // 20702
          }                                                                                                            // 20703
                                                                                                                       // 20704
          function addClasses(classes) {                                                                               // 20705
            var newClasses = digestClassCounts(classes, 1);                                                            // 20706
            attr.$addClass(newClasses);                                                                                // 20707
          }                                                                                                            // 20708
                                                                                                                       // 20709
          function removeClasses(classes) {                                                                            // 20710
            var newClasses = digestClassCounts(classes, -1);                                                           // 20711
            attr.$removeClass(newClasses);                                                                             // 20712
          }                                                                                                            // 20713
                                                                                                                       // 20714
          function digestClassCounts(classes, count) {                                                                 // 20715
            var classCounts = element.data('$classCounts') || {};                                                      // 20716
            var classesToUpdate = [];                                                                                  // 20717
            forEach(classes, function(className) {                                                                     // 20718
              if (count > 0 || classCounts[className]) {                                                               // 20719
                classCounts[className] = (classCounts[className] || 0) + count;                                        // 20720
                if (classCounts[className] === +(count > 0)) {                                                         // 20721
                  classesToUpdate.push(className);                                                                     // 20722
                }                                                                                                      // 20723
              }                                                                                                        // 20724
            });                                                                                                        // 20725
            element.data('$classCounts', classCounts);                                                                 // 20726
            return classesToUpdate.join(' ');                                                                          // 20727
          }                                                                                                            // 20728
                                                                                                                       // 20729
          function updateClasses(oldClasses, newClasses) {                                                             // 20730
            var toAdd = arrayDifference(newClasses, oldClasses);                                                       // 20731
            var toRemove = arrayDifference(oldClasses, newClasses);                                                    // 20732
            toAdd = digestClassCounts(toAdd, 1);                                                                       // 20733
            toRemove = digestClassCounts(toRemove, -1);                                                                // 20734
            if (toAdd && toAdd.length) {                                                                               // 20735
              $animate.addClass(element, toAdd);                                                                       // 20736
            }                                                                                                          // 20737
            if (toRemove && toRemove.length) {                                                                         // 20738
              $animate.removeClass(element, toRemove);                                                                 // 20739
            }                                                                                                          // 20740
          }                                                                                                            // 20741
                                                                                                                       // 20742
          function ngClassWatchAction(newVal) {                                                                        // 20743
            if (selector === true || scope.$index % 2 === selector) {                                                  // 20744
              var newClasses = arrayClasses(newVal || []);                                                             // 20745
              if (!oldVal) {                                                                                           // 20746
                addClasses(newClasses);                                                                                // 20747
              } else if (!equals(newVal,oldVal)) {                                                                     // 20748
                var oldClasses = arrayClasses(oldVal);                                                                 // 20749
                updateClasses(oldClasses, newClasses);                                                                 // 20750
              }                                                                                                        // 20751
            }                                                                                                          // 20752
            oldVal = shallowCopy(newVal);                                                                              // 20753
          }                                                                                                            // 20754
        }                                                                                                              // 20755
      };                                                                                                               // 20756
                                                                                                                       // 20757
      function arrayDifference(tokens1, tokens2) {                                                                     // 20758
        var values = [];                                                                                               // 20759
                                                                                                                       // 20760
        outer:                                                                                                         // 20761
          for (var i = 0; i < tokens1.length; i++) {                                                                   // 20762
            var token = tokens1[i];                                                                                    // 20763
            for (var j = 0; j < tokens2.length; j++) {                                                                 // 20764
              if (token == tokens2[j]) continue outer;                                                                 // 20765
            }                                                                                                          // 20766
            values.push(token);                                                                                        // 20767
          }                                                                                                            // 20768
        return values;                                                                                                 // 20769
      }                                                                                                                // 20770
                                                                                                                       // 20771
      function arrayClasses(classVal) {                                                                                // 20772
        if (isArray(classVal)) {                                                                                       // 20773
          return classVal;                                                                                             // 20774
        } else if (isString(classVal)) {                                                                               // 20775
          return classVal.split(' ');                                                                                  // 20776
        } else if (isObject(classVal)) {                                                                               // 20777
          var classes = [];                                                                                            // 20778
          forEach(classVal, function(v, k) {                                                                           // 20779
            if (v) {                                                                                                   // 20780
              classes = classes.concat(k.split(' '));                                                                  // 20781
            }                                                                                                          // 20782
          });                                                                                                          // 20783
          return classes;                                                                                              // 20784
        }                                                                                                              // 20785
        return classVal;                                                                                               // 20786
      }                                                                                                                // 20787
    }];                                                                                                                // 20788
  }                                                                                                                    // 20789
                                                                                                                       // 20790
  /**                                                                                                                  // 20791
   * @ngdoc directive                                                                                                  // 20792
   * @name ngClass                                                                                                     // 20793
   * @restrict AC                                                                                                      // 20794
   *                                                                                                                   // 20795
   * @description                                                                                                      // 20796
   * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding               // 20797
   * an expression that represents all classes to be added.                                                            // 20798
   *                                                                                                                   // 20799
   * The directive operates in three different ways, depending on which of three types the expression                  // 20800
   * evaluates to:                                                                                                     // 20801
   *                                                                                                                   // 20802
   * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                // 20803
   * names.                                                                                                            // 20804
   *                                                                                                                   // 20805
   * 2. If the expression evaluates to an array, each element of the array should be a string that is                  // 20806
   * one or more space-delimited class names.                                                                          // 20807
   *                                                                                                                   // 20808
   * 3. If the expression evaluates to an object, then for each key-value pair of the                                  // 20809
   * object with a truthy value the corresponding key is used as a class name.                                         // 20810
   *                                                                                                                   // 20811
   * The directive won't add duplicate classes if a particular class was already set.                                  // 20812
   *                                                                                                                   // 20813
   * When the expression changes, the previously added classes are removed and only then the                           // 20814
   * new classes are added.                                                                                            // 20815
   *                                                                                                                   // 20816
   * @animations                                                                                                       // 20817
   * **add** - happens just before the class is applied to the elements                                                // 20818
   *                                                                                                                   // 20819
   * **remove** - happens just before the class is removed from the element                                            // 20820
   *                                                                                                                   // 20821
   * @element ANY                                                                                                      // 20822
   * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                               // 20823
   *   of the evaluation can be a string representing space delimited class                                            // 20824
   *   names, an array, or a map of class names to boolean values. In the case of a map, the                           // 20825
   *   names of the properties whose values are truthy will be added as css classes to the                             // 20826
   *   element.                                                                                                        // 20827
   *                                                                                                                   // 20828
   * @example Example that demonstrates basic bindings via ngClass directive.                                          // 20829
   <example>                                                                                                           // 20830
   <file name="index.html">                                                                                            // 20831
   <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>                                 // 20832
   <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>                                       // 20833
   <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>                                     // 20834
   <input type="checkbox" ng-model="error"> error (apply "red" class)                                                  // 20835
   <hr>                                                                                                                // 20836
   <p ng-class="style">Using String Syntax</p>                                                                         // 20837
   <input type="text" ng-model="style" placeholder="Type: bold strike red">                                            // 20838
   <hr>                                                                                                                // 20839
   <p ng-class="[style1, style2, style3]">Using Array Syntax</p>                                                       // 20840
   <input ng-model="style1" placeholder="Type: bold, strike or red"><br>                                               // 20841
   <input ng-model="style2" placeholder="Type: bold, strike or red"><br>                                               // 20842
   <input ng-model="style3" placeholder="Type: bold, strike or red"><br>                                               // 20843
   </file>                                                                                                             // 20844
   <file name="style.css">                                                                                             // 20845
   .strike {                                                                                                           // 20846
         text-decoration: line-through;                                                                                // 20847
       }                                                                                                               // 20848
   .bold {                                                                                                             // 20849
           font-weight: bold;                                                                                          // 20850
       }                                                                                                               // 20851
   .red {                                                                                                              // 20852
           color: red;                                                                                                 // 20853
       }                                                                                                               // 20854
   </file>                                                                                                             // 20855
   <file name="protractor.js" type="protractor">                                                                       // 20856
   var ps = element.all(by.css('p'));                                                                                  // 20857
                                                                                                                       // 20858
   it('should let you toggle the class', function() {                                                                  // 20859
                                                                                                                       // 20860
         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 20861
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);                                                  // 20862
                                                                                                                       // 20863
         element(by.model('important')).click();                                                                       // 20864
         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 20865
                                                                                                                       // 20866
         element(by.model('error')).click();                                                                           // 20867
         expect(ps.first().getAttribute('class')).toMatch(/red/);                                                      // 20868
       });                                                                                                             // 20869
                                                                                                                       // 20870
   it('should let you toggle string example', function() {                                                             // 20871
         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 20872
         element(by.model('style')).clear();                                                                           // 20873
         element(by.model('style')).sendKeys('red');                                                                   // 20874
         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 20875
       });                                                                                                             // 20876
                                                                                                                       // 20877
   it('array example should have 3 classes', function() {                                                              // 20878
         expect(ps.last().getAttribute('class')).toBe('');                                                             // 20879
         element(by.model('style1')).sendKeys('bold');                                                                 // 20880
         element(by.model('style2')).sendKeys('strike');                                                               // 20881
         element(by.model('style3')).sendKeys('red');                                                                  // 20882
         expect(ps.last().getAttribute('class')).toBe('bold strike red');                                              // 20883
       });                                                                                                             // 20884
   </file>                                                                                                             // 20885
   </example>                                                                                                          // 20886
                                                                                                                       // 20887
   ## Animations                                                                                                       // 20888
                                                                                                                       // 20889
   The example below demonstrates how to perform animations using ngClass.                                             // 20890
                                                                                                                       // 20891
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 20892
   <file name="index.html">                                                                                            // 20893
   <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">                                           // 20894
   <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">                                               // 20895
   <br>                                                                                                                // 20896
   <span class="base-class" ng-class="myVar">Sample Text</span>                                                        // 20897
   </file>                                                                                                             // 20898
   <file name="style.css">                                                                                             // 20899
   .base-class {                                                                                                       // 20900
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                         // 20901
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 20902
       }                                                                                                               // 20903
                                                                                                                       // 20904
   .base-class.my-class {                                                                                              // 20905
         color: red;                                                                                                   // 20906
         font-size:3em;                                                                                                // 20907
       }                                                                                                               // 20908
   </file>                                                                                                             // 20909
   <file name="protractor.js" type="protractor">                                                                       // 20910
   it('should check ng-class', function() {                                                                            // 20911
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 20912
           toMatch(/my-class/);                                                                                        // 20913
                                                                                                                       // 20914
         element(by.id('setbtn')).click();                                                                             // 20915
                                                                                                                       // 20916
         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 20917
           toMatch(/my-class/);                                                                                        // 20918
                                                                                                                       // 20919
         element(by.id('clearbtn')).click();                                                                           // 20920
                                                                                                                       // 20921
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 20922
           toMatch(/my-class/);                                                                                        // 20923
       });                                                                                                             // 20924
   </file>                                                                                                             // 20925
   </example>                                                                                                          // 20926
                                                                                                                       // 20927
                                                                                                                       // 20928
   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 20929
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and                              // 20933
   {@link ng.$animate#removeClass $animate.removeClass}.                                                               // 20934
   */                                                                                                                  // 20935
  var ngClassDirective = classDirective('', true);                                                                     // 20936
                                                                                                                       // 20937
  /**                                                                                                                  // 20938
   * @ngdoc directive                                                                                                  // 20939
   * @name ngClassOdd                                                                                                  // 20940
   * @restrict AC                                                                                                      // 20941
   *                                                                                                                   // 20942
   * @description                                                                                                      // 20943
   * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                     // 20944
   * {@link ng.directive:ngClass ngClass}, except they work in                                                         // 20945
   * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                              // 20946
   *                                                                                                                   // 20947
   * This directive can be applied only within the scope of an                                                         // 20948
   * {@link ng.directive:ngRepeat ngRepeat}.                                                                           // 20949
   *                                                                                                                   // 20950
   * @element ANY                                                                                                      // 20951
   * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                            // 20952
   *   of the evaluation can be a string representing space delimited class names or an array.                         // 20953
   *                                                                                                                   // 20954
   * @example                                                                                                          // 20955
   <example>                                                                                                           // 20956
   <file name="index.html">                                                                                            // 20957
   <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                                // 20958
   <li ng-repeat="name in names">                                                                                      // 20959
   <span ng-class-odd="'odd'" ng-class-even="'even'">                                                                  // 20960
   {{name}}                                                                                                            // 20961
   </span>                                                                                                             // 20962
   </li>                                                                                                               // 20963
   </ol>                                                                                                               // 20964
   </file>                                                                                                             // 20965
   <file name="style.css">                                                                                             // 20966
   .odd {                                                                                                              // 20967
         color: red;                                                                                                   // 20968
       }                                                                                                               // 20969
   .even {                                                                                                             // 20970
         color: blue;                                                                                                  // 20971
       }                                                                                                               // 20972
   </file>                                                                                                             // 20973
   <file name="protractor.js" type="protractor">                                                                       // 20974
   it('should check ng-class-odd and ng-class-even', function() {                                                      // 20975
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 20976
           toMatch(/odd/);                                                                                             // 20977
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 20978
           toMatch(/even/);                                                                                            // 20979
       });                                                                                                             // 20980
   </file>                                                                                                             // 20981
   </example>                                                                                                          // 20982
   */                                                                                                                  // 20983
  var ngClassOddDirective = classDirective('Odd', 0);                                                                  // 20984
                                                                                                                       // 20985
  /**                                                                                                                  // 20986
   * @ngdoc directive                                                                                                  // 20987
   * @name ngClassEven                                                                                                 // 20988
   * @restrict AC                                                                                                      // 20989
   *                                                                                                                   // 20990
   * @description                                                                                                      // 20991
   * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                     // 20992
   * {@link ng.directive:ngClass ngClass}, except they work in                                                         // 20993
   * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                              // 20994
   *                                                                                                                   // 20995
   * This directive can be applied only within the scope of an                                                         // 20996
   * {@link ng.directive:ngRepeat ngRepeat}.                                                                           // 20997
   *                                                                                                                   // 20998
   * @element ANY                                                                                                      // 20999
   * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                  // 21000
   *   result of the evaluation can be a string representing space delimited class names or an array.                  // 21001
   *                                                                                                                   // 21002
   * @example                                                                                                          // 21003
   <example>                                                                                                           // 21004
   <file name="index.html">                                                                                            // 21005
   <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                                // 21006
   <li ng-repeat="name in names">                                                                                      // 21007
   <span ng-class-odd="'odd'" ng-class-even="'even'">                                                                  // 21008
   {{name}} &nbsp; &nbsp; &nbsp;                                                                                       // 21009
   </span>                                                                                                             // 21010
   </li>                                                                                                               // 21011
   </ol>                                                                                                               // 21012
   </file>                                                                                                             // 21013
   <file name="style.css">                                                                                             // 21014
   .odd {                                                                                                              // 21015
         color: red;                                                                                                   // 21016
       }                                                                                                               // 21017
   .even {                                                                                                             // 21018
         color: blue;                                                                                                  // 21019
       }                                                                                                               // 21020
   </file>                                                                                                             // 21021
   <file name="protractor.js" type="protractor">                                                                       // 21022
   it('should check ng-class-odd and ng-class-even', function() {                                                      // 21023
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 21024
           toMatch(/odd/);                                                                                             // 21025
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 21026
           toMatch(/even/);                                                                                            // 21027
       });                                                                                                             // 21028
   </file>                                                                                                             // 21029
   </example>                                                                                                          // 21030
   */                                                                                                                  // 21031
  var ngClassEvenDirective = classDirective('Even', 1);                                                                // 21032
                                                                                                                       // 21033
  /**                                                                                                                  // 21034
   * @ngdoc directive                                                                                                  // 21035
   * @name ngCloak                                                                                                     // 21036
   * @restrict AC                                                                                                      // 21037
   *                                                                                                                   // 21038
   * @description                                                                                                      // 21039
   * The `ngCloak` directive is used to prevent the Angular html template from being briefly                           // 21040
   * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                 // 21041
   * directive to avoid the undesirable flicker effect caused by the html template display.                            // 21042
   *                                                                                                                   // 21043
   * The directive can be applied to the `<body>` element, but the preferred usage is to apply                         // 21044
   * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                       // 21045
   * of the browser view.                                                                                              // 21046
   *                                                                                                                   // 21047
   * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                       // 21048
   * `angular.min.js`.                                                                                                 // 21049
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).               // 21050
   *                                                                                                                   // 21051
   * ```css                                                                                                            // 21052
   * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                  // 21053
 *   display: none !important;                                                                                         // 21054
 * }                                                                                                                   // 21055
   * ```                                                                                                               // 21056
   *                                                                                                                   // 21057
   * When this css rule is loaded by the browser, all html elements (including their children) that                    // 21058
   * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                        // 21059
   * during the compilation of the template it deletes the `ngCloak` element attribute, making                         // 21060
   * the compiled element visible.                                                                                     // 21061
   *                                                                                                                   // 21062
   * For the best result, the `angular.js` script must be loaded in the head section of the html                       // 21063
   * document; alternatively, the css rule above must be included in the external stylesheet of the                    // 21064
   * application.                                                                                                      // 21065
   *                                                                                                                   // 21066
   * Legacy browsers, like IE7, do not provide attribute selector support (added in CSS 2.1) so they                   // 21067
   * cannot match the `[ng\:cloak]` selector. To work around this limitation, you must add the css                     // 21068
   * class `ng-cloak` in addition to the `ngCloak` directive as shown in the example below.                            // 21069
   *                                                                                                                   // 21070
   * @element ANY                                                                                                      // 21071
   *                                                                                                                   // 21072
   * @example                                                                                                          // 21073
   <example>                                                                                                           // 21074
   <file name="index.html">                                                                                            // 21075
   <div id="template1" ng-cloak>{{ 'hello' }}</div>                                                                    // 21076
   <div id="template2" ng-cloak class="ng-cloak">{{ 'hello IE7' }}</div>                                               // 21077
   </file>                                                                                                             // 21078
   <file name="protractor.js" type="protractor">                                                                       // 21079
   it('should remove the template directive and css class', function() {                                               // 21080
         expect($('#template1').getAttribute('ng-cloak')).                                                             // 21081
           toBeNull();                                                                                                 // 21082
         expect($('#template2').getAttribute('ng-cloak')).                                                             // 21083
           toBeNull();                                                                                                 // 21084
       });                                                                                                             // 21085
   </file>                                                                                                             // 21086
   </example>                                                                                                          // 21087
   *                                                                                                                   // 21088
   */                                                                                                                  // 21089
  var ngCloakDirective = ngDirective({                                                                                 // 21090
    compile: function(element, attr) {                                                                                 // 21091
      attr.$set('ngCloak', undefined);                                                                                 // 21092
      element.removeClass('ng-cloak');                                                                                 // 21093
    }                                                                                                                  // 21094
  });                                                                                                                  // 21095
                                                                                                                       // 21096
  /**                                                                                                                  // 21097
   * @ngdoc directive                                                                                                  // 21098
   * @name ngController                                                                                                // 21099
   *                                                                                                                   // 21100
   * @description                                                                                                      // 21101
   * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular         // 21102
   * supports the principles behind the Model-View-Controller design pattern.                                          // 21103
   *                                                                                                                   // 21104
   * MVC components in angular:                                                                                        // 21105
   *                                                                                                                   // 21106
   * * Model ג€” Models are the properties of a scope; scopes are attached to the DOM where scope properties           // 21107
   *   are accessed through bindings.                                                                                  // 21108
   * * View ג€” The template (HTML with data bindings) that is rendered into the View.                                 // 21109
   * * Controller ג€” The `ngController` directive specifies a Controller class; the class contains business           // 21110
   *   logic behind the application to decorate the scope with functions and values                                    // 21111
   *                                                                                                                   // 21112
   * Note that you can also attach controllers to the DOM by declaring it in a route definition                        // 21113
   * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                      // 21114
   * again using `ng-controller` in the template itself.  This will cause the controller to be attached                // 21115
   * and executed twice.                                                                                               // 21116
   *                                                                                                                   // 21117
   * @element ANY                                                                                                      // 21118
   * @scope                                                                                                            // 21119
   * @priority 500                                                                                                     // 21120
   * @param {expression} ngController Name of a constructor function registered with the current                       // 21121
   * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                      // 21122
   * that on the current scope evaluates to a constructor function.                                                    // 21123
   *                                                                                                                   // 21124
   * The controller instance can be published into a scope property by specifying                                      // 21125
   * `ng-controller="as propertyName"`.                                                                                // 21126
   *                                                                                                                   // 21127
   * If the current `$controllerProvider` is configured to use globals (via                                            // 21128
   * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                      // 21129
   * also be the name of a globally accessible constructor function (not recommended).                                 // 21130
   *                                                                                                                   // 21131
   * @example                                                                                                          // 21132
   * Here is a simple form for editing user contact information. Adding, removing, clearing, and                       // 21133
   * greeting are methods declared on the controller (see source tab). These methods can                               // 21134
   * easily be called from the angular markup. Any changes to the data are automatically reflected                     // 21135
   * in the View without the need for a manual update.                                                                 // 21136
   *                                                                                                                   // 21137
   * Two different declaration styles are included below:                                                              // 21138
   *                                                                                                                   // 21139
   * * one binds methods and properties directly onto the controller using `this`:                                     // 21140
   * `ng-controller="SettingsController1 as settings"`                                                                 // 21141
   * * one injects `$scope` into the controller:                                                                       // 21142
   * `ng-controller="SettingsController2"`                                                                             // 21143
   *                                                                                                                   // 21144
   * The second option is more common in the Angular community, and is generally used in boilerplates                  // 21145
   * and in this guide. However, there are advantages to binding properties directly to the controller                 // 21146
   * and avoiding scope.                                                                                               // 21147
   *                                                                                                                   // 21148
   * * Using `controller as` makes it obvious which controller you are accessing in the template when                  // 21149
   * multiple controllers apply to an element.                                                                         // 21150
   * * If you are writing your controllers as classes you have easier access to the properties and                     // 21151
   * methods, which will appear on the scope, from inside the controller code.                                         // 21152
   * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                           // 21153
   * inheritance masking primitives.                                                                                   // 21154
   *                                                                                                                   // 21155
   * This example demonstrates the `controller as` syntax.                                                             // 21156
   *                                                                                                                   // 21157
   * <example name="ngControllerAs" module="controllerAsExample">                                                      // 21158
   *   <file name="index.html">                                                                                        // 21159
   *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">                                       // 21160
   *      Name: <input type="text" ng-model="settings.name"/>                                                          // 21161
   *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>                                                    // 21162
   *      Contact:                                                                                                     // 21163
   *      <ul>                                                                                                         // 21164
   *        <li ng-repeat="contact in settings.contacts">                                                              // 21165
   *          <select ng-model="contact.type">                                                                         // 21166
   *             <option>phone</option>                                                                                // 21167
   *             <option>email</option>                                                                                // 21168
   *          </select>                                                                                                // 21169
   *          <input type="text" ng-model="contact.value"/>                                                            // 21170
   *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>                                         // 21171
   *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]                                          // 21172
   *        </li>                                                                                                      // 21173
   *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>                                           // 21174
   *     </ul>                                                                                                         // 21175
   *    </div>                                                                                                         // 21176
   *   </file>                                                                                                         // 21177
   *   <file name="app.js">                                                                                            // 21178
   *    angular.module('controllerAsExample', [])                                                                      // 21179
   *      .controller('SettingsController1', SettingsController1);                                                     // 21180
   *                                                                                                                   // 21181
   *    function SettingsController1() {                                                                               // 21182
 *      this.name = "John Smith";                                                                                      // 21183
 *      this.contacts = [                                                                                              // 21184
 *        {type: 'phone', value: '408 555 1212'},                                                                      // 21185
 *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 21186
   *    }                                                                                                              // 21187
   *                                                                                                                   // 21188
   *    SettingsController1.prototype.greet = function() {                                                             // 21189
 *      alert(this.name);                                                                                              // 21190
 *    };                                                                                                               // 21191
   *                                                                                                                   // 21192
   *    SettingsController1.prototype.addContact = function() {                                                        // 21193
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 21194
   *    };                                                                                                             // 21195
   *                                                                                                                   // 21196
   *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                      // 21197
 *     var index = this.contacts.indexOf(contactToRemove);                                                             // 21198
 *      this.contacts.splice(index, 1);                                                                                // 21199
 *    };                                                                                                               // 21200
   *                                                                                                                   // 21201
   *    SettingsController1.prototype.clearContact = function(contact) {                                               // 21202
 *      contact.type = 'phone';                                                                                        // 21203
 *      contact.value = '';                                                                                            // 21204
 *    };                                                                                                               // 21205
   *   </file>                                                                                                         // 21206
   *   <file name="protractor.js" type="protractor">                                                                   // 21207
   *     it('should check controller as', function() {                                                                 // 21208
 *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 21209
 *         expect(container.element(by.model('settings.name'))                                                         // 21210
 *           .getAttribute('value')).toBe('John Smith');                                                               // 21211
 *                                                                                                                     // 21212
 *       var firstRepeat =                                                                                             // 21213
 *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 21214
 *       var secondRepeat =                                                                                            // 21215
 *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 21216
 *                                                                                                                     // 21217
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 21218
 *           .toBe('408 555 1212');                                                                                    // 21219
 *                                                                                                                     // 21220
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 21221
 *           .toBe('john.smith@example.org');                                                                          // 21222
   *                                                                                                                   // 21223
   *       firstRepeat.element(by.linkText('clear')).click();                                                          // 21224
   *                                                                                                                   // 21225
   *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                // 21226
   *           .toBe('');                                                                                              // 21227
   *                                                                                                                   // 21228
   *       container.element(by.linkText('add')).click();                                                              // 21229
   *                                                                                                                   // 21230
   *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                // 21231
   *           .element(by.model('contact.value'))                                                                     // 21232
   *           .getAttribute('value'))                                                                                 // 21233
   *           .toBe('yourname@example.org');                                                                          // 21234
   *     });                                                                                                           // 21235
   *   </file>                                                                                                         // 21236
   * </example>                                                                                                        // 21237
   *                                                                                                                   // 21238
   * This example demonstrates the "attach to `$scope`" style of controller.                                           // 21239
   *                                                                                                                   // 21240
   * <example name="ngController" module="controllerExample">                                                          // 21241
   *  <file name="index.html">                                                                                         // 21242
   *   <div id="ctrl-exmpl" ng-controller="SettingsController2">                                                       // 21243
   *     Name: <input type="text" ng-model="name"/>                                                                    // 21244
   *     [ <a href="" ng-click="greet()">greet</a> ]<br/>                                                              // 21245
   *     Contact:                                                                                                      // 21246
   *     <ul>                                                                                                          // 21247
   *       <li ng-repeat="contact in contacts">                                                                        // 21248
   *         <select ng-model="contact.type">                                                                          // 21249
   *            <option>phone</option>                                                                                 // 21250
   *            <option>email</option>                                                                                 // 21251
   *         </select>                                                                                                 // 21252
   *         <input type="text" ng-model="contact.value"/>                                                             // 21253
   *         [ <a href="" ng-click="clearContact(contact)">clear</a>                                                   // 21254
   *         | <a href="" ng-click="removeContact(contact)">X</a> ]                                                    // 21255
   *       </li>                                                                                                       // 21256
   *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>                                                     // 21257
   *    </ul>                                                                                                          // 21258
   *   </div>                                                                                                          // 21259
   *  </file>                                                                                                          // 21260
   *  <file name="app.js">                                                                                             // 21261
   *   angular.module('controllerExample', [])                                                                         // 21262
   *     .controller('SettingsController2', ['$scope', SettingsController2]);                                          // 21263
   *                                                                                                                   // 21264
   *   function SettingsController2($scope) {                                                                          // 21265
 *     $scope.name = "John Smith";                                                                                     // 21266
 *     $scope.contacts = [                                                                                             // 21267
 *       {type:'phone', value:'408 555 1212'},                                                                         // 21268
 *       {type:'email', value:'john.smith@example.org'} ];                                                             // 21269
   *                                                                                                                   // 21270
   *     $scope.greet = function() {                                                                                   // 21271
 *       alert($scope.name);                                                                                           // 21272
 *     };                                                                                                              // 21273
   *                                                                                                                   // 21274
   *     $scope.addContact = function() {                                                                              // 21275
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 21276
   *     };                                                                                                            // 21277
   *                                                                                                                   // 21278
   *     $scope.removeContact = function(contactToRemove) {                                                            // 21279
 *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 21280
 *       $scope.contacts.splice(index, 1);                                                                             // 21281
 *     };                                                                                                              // 21282
   *                                                                                                                   // 21283
   *     $scope.clearContact = function(contact) {                                                                     // 21284
 *       contact.type = 'phone';                                                                                       // 21285
 *       contact.value = '';                                                                                           // 21286
 *     };                                                                                                              // 21287
   *   }                                                                                                               // 21288
   *  </file>                                                                                                          // 21289
   *  <file name="protractor.js" type="protractor">                                                                    // 21290
   *    it('should check controller', function() {                                                                     // 21291
 *      var container = element(by.id('ctrl-exmpl'));                                                                  // 21292
 *                                                                                                                     // 21293
 *      expect(container.element(by.model('name'))                                                                     // 21294
 *          .getAttribute('value')).toBe('John Smith');                                                                // 21295
 *                                                                                                                     // 21296
 *      var firstRepeat =                                                                                              // 21297
 *          container.element(by.repeater('contact in contacts').row(0));                                              // 21298
 *      var secondRepeat =                                                                                             // 21299
 *          container.element(by.repeater('contact in contacts').row(1));                                              // 21300
 *                                                                                                                     // 21301
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 21302
 *          .toBe('408 555 1212');                                                                                     // 21303
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 21304
 *          .toBe('john.smith@example.org');                                                                           // 21305
   *                                                                                                                   // 21306
   *      firstRepeat.element(by.linkText('clear')).click();                                                           // 21307
   *                                                                                                                   // 21308
   *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 21309
   *          .toBe('');                                                                                               // 21310
   *                                                                                                                   // 21311
   *      container.element(by.linkText('add')).click();                                                               // 21312
   *                                                                                                                   // 21313
   *      expect(container.element(by.repeater('contact in contacts').row(2))                                          // 21314
   *          .element(by.model('contact.value'))                                                                      // 21315
   *          .getAttribute('value'))                                                                                  // 21316
   *          .toBe('yourname@example.org');                                                                           // 21317
   *    });                                                                                                            // 21318
   *  </file>                                                                                                          // 21319
   *</example>                                                                                                         // 21320
                                                                                                                       // 21321
   */                                                                                                                  // 21322
  var ngControllerDirective = [function() {                                                                            // 21323
    return {                                                                                                           // 21324
      restrict: 'A',                                                                                                   // 21325
      scope: true,                                                                                                     // 21326
      controller: '@',                                                                                                 // 21327
      priority: 500                                                                                                    // 21328
    };                                                                                                                 // 21329
  }];                                                                                                                  // 21330
                                                                                                                       // 21331
  /**                                                                                                                  // 21332
   * @ngdoc directive                                                                                                  // 21333
   * @name ngCsp                                                                                                       // 21334
   *                                                                                                                   // 21335
   * @element html                                                                                                     // 21336
   * @description                                                                                                      // 21337
   * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.                   // 21338
   *                                                                                                                   // 21339
   * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                 // 21340
   *                                                                                                                   // 21341
   * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).                    // 21342
   * For Angular to be CSP compatible there are only two things that we need to do differently:                        // 21343
   *                                                                                                                   // 21344
   * - don't use `Function` constructor to generate optimized value getters                                            // 21345
   * - don't inject custom stylesheet into the document                                                                // 21346
   *                                                                                                                   // 21347
   * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`               // 21348
   * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will                   // 21349
   * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will                   // 21350
   * be raised.                                                                                                        // 21351
   *                                                                                                                   // 21352
   * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically                          // 21353
   * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).                                              // 21354
   * To make those directives work in CSP mode, include the `angular-csp.css` manually.                                // 21355
   *                                                                                                                   // 21356
   * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This                    // 21357
   * autodetection however triggers a CSP error to be logged in the console:                                           // 21358
   *                                                                                                                   // 21359
   * ```                                                                                                               // 21360
   * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                      // 21361
   * script in the following Content Security Policy directive: "default-src 'self'". Note that                        // 21362
   * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                      // 21363
   * ```                                                                                                               // 21364
   *                                                                                                                   // 21365
   * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                        // 21366
   * directive on the root element of the application or on the `angular.js` script tag, whichever                     // 21367
   * appears first in the html document.                                                                               // 21368
   *                                                                                                                   // 21369
   * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                        // 21370
   *                                                                                                                   // 21371
   * @example                                                                                                          // 21372
   * This example shows how to apply the `ngCsp` directive to the `html` tag.                                          // 21373
   ```html                                                                                                             // 21374
   <!doctype html>                                                                                                     // 21375
   <html ng-app ng-csp>                                                                                                // 21376
   ...                                                                                                                 // 21377
   ...                                                                                                                 // 21378
   </html>                                                                                                             // 21379
   ```                                                                                                                 // 21380
   * @example                                                                                                          // 21381
   // Note: the suffix `.csp` in the example name triggers                                                             // 21382
   // csp mode in our http server!                                                                                     // 21383
   <example name="example.csp" module="cspExample" ng-csp="true">                                                      // 21384
   <file name="index.html">                                                                                            // 21385
   <div ng-controller="MainController as ctrl">                                                                        // 21386
   <div>                                                                                                               // 21387
   <button ng-click="ctrl.inc()" id="inc">Increment</button>                                                           // 21388
   <span id="counter">                                                                                                 // 21389
   {{ctrl.counter}}                                                                                                    // 21390
   </span>                                                                                                             // 21391
   </div>                                                                                                              // 21392
                                                                                                                       // 21393
   <div>                                                                                                               // 21394
   <button ng-click="ctrl.evil()" id="evil">Evil</button>                                                              // 21395
   <span id="evilError">                                                                                               // 21396
   {{ctrl.evilError}}                                                                                                  // 21397
   </span>                                                                                                             // 21398
   </div>                                                                                                              // 21399
   </div>                                                                                                              // 21400
   </file>                                                                                                             // 21401
   <file name="script.js">                                                                                             // 21402
   angular.module('cspExample', [])                                                                                    // 21403
   .controller('MainController', function() {                                                                          // 21404
                this.counter = 0;                                                                                      // 21405
                this.inc = function() {                                                                                // 21406
                  this.counter++;                                                                                      // 21407
                };                                                                                                     // 21408
                this.evil = function() {                                                                               // 21409
                  // jshint evil:true                                                                                  // 21410
                  try {                                                                                                // 21411
                    eval('1+2');                                                                                       // 21412
                  } catch (e) {                                                                                        // 21413
                    this.evilError = e.message;                                                                        // 21414
                  }                                                                                                    // 21415
                };                                                                                                     // 21416
              });                                                                                                      // 21417
   </file>                                                                                                             // 21418
   <file name="protractor.js" type="protractor">                                                                       // 21419
   var util, webdriver;                                                                                                // 21420
                                                                                                                       // 21421
   var incBtn = element(by.id('inc'));                                                                                 // 21422
   var counter = element(by.id('counter'));                                                                            // 21423
   var evilBtn = element(by.id('evil'));                                                                               // 21424
   var evilError = element(by.id('evilError'));                                                                        // 21425
                                                                                                                       // 21426
   function getAndClearSevereErrors() {                                                                                // 21427
            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 21428
              return browserLog.filter(function(logEntry) {                                                            // 21429
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 21430
              });                                                                                                      // 21431
            });                                                                                                        // 21432
          }                                                                                                            // 21433
                                                                                                                       // 21434
   function clearErrors() {                                                                                            // 21435
            getAndClearSevereErrors();                                                                                 // 21436
          }                                                                                                            // 21437
                                                                                                                       // 21438
   function expectNoErrors() {                                                                                         // 21439
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 21440
              expect(filteredLog.length).toEqual(0);                                                                   // 21441
              if (filteredLog.length) {                                                                                // 21442
                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 21443
              }                                                                                                        // 21444
            });                                                                                                        // 21445
          }                                                                                                            // 21446
                                                                                                                       // 21447
   function expectError(regex) {                                                                                       // 21448
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 21449
              var found = false;                                                                                       // 21450
              filteredLog.forEach(function(log) {                                                                      // 21451
                if (log.message.match(regex)) {                                                                        // 21452
                  found = true;                                                                                        // 21453
                }                                                                                                      // 21454
              });                                                                                                      // 21455
              if (!found) {                                                                                            // 21456
                throw new Error('expected an error that matches ' + regex);                                            // 21457
              }                                                                                                        // 21458
            });                                                                                                        // 21459
          }                                                                                                            // 21460
                                                                                                                       // 21461
   beforeEach(function() {                                                                                             // 21462
            util = require('util');                                                                                    // 21463
            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 21464
          });                                                                                                          // 21465
                                                                                                                       // 21466
   // For now, we only test on Chrome,                                                                                 // 21467
   // as Safari does not load the page with Protractor's injected scripts,                                             // 21468
   // and Firefox webdriver always disables content security policy (#6358)                                            // 21469
   if (browser.params.browser !== 'chrome') {                                                                          // 21470
            return;                                                                                                    // 21471
          }                                                                                                            // 21472
                                                                                                                       // 21473
   it('should not report errors when the page is loaded', function() {                                                 // 21474
            // clear errors so we are not dependent on previous tests                                                  // 21475
            clearErrors();                                                                                             // 21476
            // Need to reload the page as the page is already loaded when                                              // 21477
            // we come here                                                                                            // 21478
            browser.driver.getCurrentUrl().then(function(url) {                                                        // 21479
              browser.get(url);                                                                                        // 21480
            });                                                                                                        // 21481
            expectNoErrors();                                                                                          // 21482
          });                                                                                                          // 21483
                                                                                                                       // 21484
   it('should evaluate expressions', function() {                                                                      // 21485
            expect(counter.getText()).toEqual('0');                                                                    // 21486
            incBtn.click();                                                                                            // 21487
            expect(counter.getText()).toEqual('1');                                                                    // 21488
            expectNoErrors();                                                                                          // 21489
          });                                                                                                          // 21490
                                                                                                                       // 21491
   it('should throw and report an error when using "eval"', function() {                                               // 21492
            evilBtn.click();                                                                                           // 21493
            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 21494
            expectError(/Content Security Policy/);                                                                    // 21495
          });                                                                                                          // 21496
   </file>                                                                                                             // 21497
   </example>                                                                                                          // 21498
   */                                                                                                                  // 21499
                                                                                                                       // 21500
// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 21501
// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 21502
// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc                                   // 21503
                                                                                                                       // 21504
  /**                                                                                                                  // 21505
   * @ngdoc directive                                                                                                  // 21506
   * @name ngClick                                                                                                     // 21507
   *                                                                                                                   // 21508
   * @description                                                                                                      // 21509
   * The ngClick directive allows you to specify custom behavior when                                                  // 21510
   * an element is clicked.                                                                                            // 21511
   *                                                                                                                   // 21512
   * @element ANY                                                                                                      // 21513
   * @priority 0                                                                                                       // 21514
   * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                  // 21515
   * click. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 21516
   *                                                                                                                   // 21517
   * @example                                                                                                          // 21518
   <example>                                                                                                           // 21519
   <file name="index.html">                                                                                            // 21520
   <button ng-click="count = count + 1" ng-init="count=0">                                                             // 21521
   Increment                                                                                                           // 21522
   </button>                                                                                                           // 21523
   <span>                                                                                                              // 21524
   count: {{count}}                                                                                                    // 21525
   </span>                                                                                                             // 21526
   </file>                                                                                                             // 21527
   <file name="protractor.js" type="protractor">                                                                       // 21528
   it('should check ng-click', function() {                                                                            // 21529
         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 21530
         element(by.css('button')).click();                                                                            // 21531
         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 21532
       });                                                                                                             // 21533
   </file>                                                                                                             // 21534
   </example>                                                                                                          // 21535
   */                                                                                                                  // 21536
  /*                                                                                                                   // 21537
   * A collection of directives that allows creation of custom event handlers that are defined as                      // 21538
   * angular expressions and are compiled and executed within the current scope.                                       // 21539
   */                                                                                                                  // 21540
  var ngEventDirectives = {};                                                                                          // 21541
                                                                                                                       // 21542
// For events that might fire synchronously during DOM manipulation                                                    // 21543
// we need to execute their event handlers asynchronously using $evalAsync,                                            // 21544
// so that they are not executed in an inconsistent state.                                                             // 21545
  var forceAsyncEvents = {                                                                                             // 21546
    'blur': true,                                                                                                      // 21547
    'focus': true                                                                                                      // 21548
  };                                                                                                                   // 21549
  forEach(                                                                                                             // 21550
    'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
    function(eventName) {                                                                                              // 21552
      var directiveName = directiveNormalize('ng-' + eventName);                                                       // 21553
      ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                       // 21554
        return {                                                                                                       // 21555
          restrict: 'A',                                                                                               // 21556
          compile: function($element, attr) {                                                                          // 21557
            // We expose the powerful $event object on the scope that provides access to the Window,                   // 21558
            // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                    // 21559
            // checks at the cost of speed since event handler expressions are not executed as                         // 21560
            // frequently as regular change detection.                                                                 // 21561
            var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                // 21562
            return function ngEventHandler(scope, element) {                                                           // 21563
              element.on(eventName, function(event) {                                                                  // 21564
                var callback = function() {                                                                            // 21565
                  fn(scope, {$event:event});                                                                           // 21566
                };                                                                                                     // 21567
                if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                               // 21568
                  scope.$evalAsync(callback);                                                                          // 21569
                } else {                                                                                               // 21570
                  scope.$apply(callback);                                                                              // 21571
                }                                                                                                      // 21572
              });                                                                                                      // 21573
            };                                                                                                         // 21574
          }                                                                                                            // 21575
        };                                                                                                             // 21576
      }];                                                                                                              // 21577
    }                                                                                                                  // 21578
  );                                                                                                                   // 21579
                                                                                                                       // 21580
  /**                                                                                                                  // 21581
   * @ngdoc directive                                                                                                  // 21582
   * @name ngDblclick                                                                                                  // 21583
   *                                                                                                                   // 21584
   * @description                                                                                                      // 21585
   * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                             // 21586
   *                                                                                                                   // 21587
   * @element ANY                                                                                                      // 21588
   * @priority 0                                                                                                       // 21589
   * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                               // 21590
   * a dblclick. (The Event object is available as `$event`)                                                           // 21591
   *                                                                                                                   // 21592
   * @example                                                                                                          // 21593
   <example>                                                                                                           // 21594
   <file name="index.html">                                                                                            // 21595
   <button ng-dblclick="count = count + 1" ng-init="count=0">                                                          // 21596
   Increment (on double click)                                                                                         // 21597
   </button>                                                                                                           // 21598
   count: {{count}}                                                                                                    // 21599
   </file>                                                                                                             // 21600
   </example>                                                                                                          // 21601
   */                                                                                                                  // 21602
                                                                                                                       // 21603
                                                                                                                       // 21604
  /**                                                                                                                  // 21605
   * @ngdoc directive                                                                                                  // 21606
   * @name ngMousedown                                                                                                 // 21607
   *                                                                                                                   // 21608
   * @description                                                                                                      // 21609
   * The ngMousedown directive allows you to specify custom behavior on mousedown event.                               // 21610
   *                                                                                                                   // 21611
   * @element ANY                                                                                                      // 21612
   * @priority 0                                                                                                       // 21613
   * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                              // 21614
   * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                               // 21615
   *                                                                                                                   // 21616
   * @example                                                                                                          // 21617
   <example>                                                                                                           // 21618
   <file name="index.html">                                                                                            // 21619
   <button ng-mousedown="count = count + 1" ng-init="count=0">                                                         // 21620
   Increment (on mouse down)                                                                                           // 21621
   </button>                                                                                                           // 21622
   count: {{count}}                                                                                                    // 21623
   </file>                                                                                                             // 21624
   </example>                                                                                                          // 21625
   */                                                                                                                  // 21626
                                                                                                                       // 21627
                                                                                                                       // 21628
  /**                                                                                                                  // 21629
   * @ngdoc directive                                                                                                  // 21630
   * @name ngMouseup                                                                                                   // 21631
   *                                                                                                                   // 21632
   * @description                                                                                                      // 21633
   * Specify custom behavior on mouseup event.                                                                         // 21634
   *                                                                                                                   // 21635
   * @element ANY                                                                                                      // 21636
   * @priority 0                                                                                                       // 21637
   * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                // 21638
   * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 21639
   *                                                                                                                   // 21640
   * @example                                                                                                          // 21641
   <example>                                                                                                           // 21642
   <file name="index.html">                                                                                            // 21643
   <button ng-mouseup="count = count + 1" ng-init="count=0">                                                           // 21644
   Increment (on mouse up)                                                                                             // 21645
   </button>                                                                                                           // 21646
   count: {{count}}                                                                                                    // 21647
   </file>                                                                                                             // 21648
   </example>                                                                                                          // 21649
   */                                                                                                                  // 21650
                                                                                                                       // 21651
  /**                                                                                                                  // 21652
   * @ngdoc directive                                                                                                  // 21653
   * @name ngMouseover                                                                                                 // 21654
   *                                                                                                                   // 21655
   * @description                                                                                                      // 21656
   * Specify custom behavior on mouseover event.                                                                       // 21657
   *                                                                                                                   // 21658
   * @element ANY                                                                                                      // 21659
   * @priority 0                                                                                                       // 21660
   * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                              // 21661
   * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                               // 21662
   *                                                                                                                   // 21663
   * @example                                                                                                          // 21664
   <example>                                                                                                           // 21665
   <file name="index.html">                                                                                            // 21666
   <button ng-mouseover="count = count + 1" ng-init="count=0">                                                         // 21667
   Increment (when mouse is over)                                                                                      // 21668
   </button>                                                                                                           // 21669
   count: {{count}}                                                                                                    // 21670
   </file>                                                                                                             // 21671
   </example>                                                                                                          // 21672
   */                                                                                                                  // 21673
                                                                                                                       // 21674
                                                                                                                       // 21675
  /**                                                                                                                  // 21676
   * @ngdoc directive                                                                                                  // 21677
   * @name ngMouseenter                                                                                                // 21678
   *                                                                                                                   // 21679
   * @description                                                                                                      // 21680
   * Specify custom behavior on mouseenter event.                                                                      // 21681
   *                                                                                                                   // 21682
   * @element ANY                                                                                                      // 21683
   * @priority 0                                                                                                       // 21684
   * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                             // 21685
   * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                              // 21686
   *                                                                                                                   // 21687
   * @example                                                                                                          // 21688
   <example>                                                                                                           // 21689
   <file name="index.html">                                                                                            // 21690
   <button ng-mouseenter="count = count + 1" ng-init="count=0">                                                        // 21691
   Increment (when mouse enters)                                                                                       // 21692
   </button>                                                                                                           // 21693
   count: {{count}}                                                                                                    // 21694
   </file>                                                                                                             // 21695
   </example>                                                                                                          // 21696
   */                                                                                                                  // 21697
                                                                                                                       // 21698
                                                                                                                       // 21699
  /**                                                                                                                  // 21700
   * @ngdoc directive                                                                                                  // 21701
   * @name ngMouseleave                                                                                                // 21702
   *                                                                                                                   // 21703
   * @description                                                                                                      // 21704
   * Specify custom behavior on mouseleave event.                                                                      // 21705
   *                                                                                                                   // 21706
   * @element ANY                                                                                                      // 21707
   * @priority 0                                                                                                       // 21708
   * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                             // 21709
   * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                              // 21710
   *                                                                                                                   // 21711
   * @example                                                                                                          // 21712
   <example>                                                                                                           // 21713
   <file name="index.html">                                                                                            // 21714
   <button ng-mouseleave="count = count + 1" ng-init="count=0">                                                        // 21715
   Increment (when mouse leaves)                                                                                       // 21716
   </button>                                                                                                           // 21717
   count: {{count}}                                                                                                    // 21718
   </file>                                                                                                             // 21719
   </example>                                                                                                          // 21720
   */                                                                                                                  // 21721
                                                                                                                       // 21722
                                                                                                                       // 21723
  /**                                                                                                                  // 21724
   * @ngdoc directive                                                                                                  // 21725
   * @name ngMousemove                                                                                                 // 21726
   *                                                                                                                   // 21727
   * @description                                                                                                      // 21728
   * Specify custom behavior on mousemove event.                                                                       // 21729
   *                                                                                                                   // 21730
   * @element ANY                                                                                                      // 21731
   * @priority 0                                                                                                       // 21732
   * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                              // 21733
   * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                               // 21734
   *                                                                                                                   // 21735
   * @example                                                                                                          // 21736
   <example>                                                                                                           // 21737
   <file name="index.html">                                                                                            // 21738
   <button ng-mousemove="count = count + 1" ng-init="count=0">                                                         // 21739
   Increment (when mouse moves)                                                                                        // 21740
   </button>                                                                                                           // 21741
   count: {{count}}                                                                                                    // 21742
   </file>                                                                                                             // 21743
   </example>                                                                                                          // 21744
   */                                                                                                                  // 21745
                                                                                                                       // 21746
                                                                                                                       // 21747
  /**                                                                                                                  // 21748
   * @ngdoc directive                                                                                                  // 21749
   * @name ngKeydown                                                                                                   // 21750
   *                                                                                                                   // 21751
   * @description                                                                                                      // 21752
   * Specify custom behavior on keydown event.                                                                         // 21753
   *                                                                                                                   // 21754
   * @element ANY                                                                                                      // 21755
   * @priority 0                                                                                                       // 21756
   * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                // 21757
   * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                // 21758
   *                                                                                                                   // 21759
   * @example                                                                                                          // 21760
   <example>                                                                                                           // 21761
   <file name="index.html">                                                                                            // 21762
   <input ng-keydown="count = count + 1" ng-init="count=0">                                                            // 21763
   key down count: {{count}}                                                                                           // 21764
   </file>                                                                                                             // 21765
   </example>                                                                                                          // 21766
   */                                                                                                                  // 21767
                                                                                                                       // 21768
                                                                                                                       // 21769
  /**                                                                                                                  // 21770
   * @ngdoc directive                                                                                                  // 21771
   * @name ngKeyup                                                                                                     // 21772
   *                                                                                                                   // 21773
   * @description                                                                                                      // 21774
   * Specify custom behavior on keyup event.                                                                           // 21775
   *                                                                                                                   // 21776
   * @element ANY                                                                                                      // 21777
   * @priority 0                                                                                                       // 21778
   * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                  // 21779
   * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 21780
   *                                                                                                                   // 21781
   * @example                                                                                                          // 21782
   <example>                                                                                                           // 21783
   <file name="index.html">                                                                                            // 21784
   <p>Typing in the input box below updates the key count</p>                                                          // 21785
   <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}                                      // 21786
                                                                                                                       // 21787
   <p>Typing in the input box below updates the keycode</p>                                                            // 21788
   <input ng-keyup="event=$event">                                                                                     // 21789
   <p>event keyCode: {{ event.keyCode }}</p>                                                                           // 21790
   <p>event altKey: {{ event.altKey }}</p>                                                                             // 21791
   </file>                                                                                                             // 21792
   </example>                                                                                                          // 21793
   */                                                                                                                  // 21794
                                                                                                                       // 21795
                                                                                                                       // 21796
  /**                                                                                                                  // 21797
   * @ngdoc directive                                                                                                  // 21798
   * @name ngKeypress                                                                                                  // 21799
   *                                                                                                                   // 21800
   * @description                                                                                                      // 21801
   * Specify custom behavior on keypress event.                                                                        // 21802
   *                                                                                                                   // 21803
   * @element ANY                                                                                                      // 21804
   * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                               // 21805
   * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                 // 21806
   * and can be interrogated for keyCode, altKey, etc.)                                                                // 21807
   *                                                                                                                   // 21808
   * @example                                                                                                          // 21809
   <example>                                                                                                           // 21810
   <file name="index.html">                                                                                            // 21811
   <input ng-keypress="count = count + 1" ng-init="count=0">                                                           // 21812
   key press count: {{count}}                                                                                          // 21813
   </file>                                                                                                             // 21814
   </example>                                                                                                          // 21815
   */                                                                                                                  // 21816
                                                                                                                       // 21817
                                                                                                                       // 21818
  /**                                                                                                                  // 21819
   * @ngdoc directive                                                                                                  // 21820
   * @name ngSubmit                                                                                                    // 21821
   *                                                                                                                   // 21822
   * @description                                                                                                      // 21823
   * Enables binding angular expressions to onsubmit events.                                                           // 21824
   *                                                                                                                   // 21825
   * Additionally it prevents the default action (which for form means sending the request to the                      // 21826
   * server and reloading the current page), but only if the form does not contain `action`,                           // 21827
   * `data-action`, or `x-action` attributes.                                                                          // 21828
   *                                                                                                                   // 21829
   * <div class="alert alert-warning">                                                                                 // 21830
   * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and                          // 21831
   * `ngSubmit` handlers together. See the                                                                             // 21832
   * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                   // 21833
   * for a detailed discussion of when `ngSubmit` may be triggered.                                                    // 21834
   * </div>                                                                                                            // 21835
   *                                                                                                                   // 21836
   * @element form                                                                                                     // 21837
   * @priority 0                                                                                                       // 21838
   * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                         // 21839
   * ({@link guide/expression#-event- Event object is available as `$event`})                                          // 21840
   *                                                                                                                   // 21841
   * @example                                                                                                          // 21842
   <example module="submitExample">                                                                                    // 21843
   <file name="index.html">                                                                                            // 21844
   <script>                                                                                                            // 21845
   angular.module('submitExample', [])                                                                                 // 21846
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 21847
            $scope.list = [];                                                                                          // 21848
            $scope.text = 'hello';                                                                                     // 21849
            $scope.submit = function() {                                                                               // 21850
              if ($scope.text) {                                                                                       // 21851
                $scope.list.push(this.text);                                                                           // 21852
                $scope.text = '';                                                                                      // 21853
              }                                                                                                        // 21854
            };                                                                                                         // 21855
          }]);                                                                                                         // 21856
   </script>                                                                                                           // 21857
   <form ng-submit="submit()" ng-controller="ExampleController">                                                       // 21858
   Enter text and hit enter:                                                                                           // 21859
   <input type="text" ng-model="text" name="text" />                                                                   // 21860
   <input type="submit" id="submit" value="Submit" />                                                                  // 21861
   <pre>list={{list}}</pre>                                                                                            // 21862
   </form>                                                                                                             // 21863
   </file>                                                                                                             // 21864
   <file name="protractor.js" type="protractor">                                                                       // 21865
   it('should check ng-submit', function() {                                                                           // 21866
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 21867
         element(by.css('#submit')).click();                                                                           // 21868
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 21869
         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 21870
       });                                                                                                             // 21871
   it('should ignore empty strings', function() {                                                                      // 21872
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 21873
         element(by.css('#submit')).click();                                                                           // 21874
         element(by.css('#submit')).click();                                                                           // 21875
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 21876
        });                                                                                                            // 21877
   </file>                                                                                                             // 21878
   </example>                                                                                                          // 21879
   */                                                                                                                  // 21880
                                                                                                                       // 21881
  /**                                                                                                                  // 21882
   * @ngdoc directive                                                                                                  // 21883
   * @name ngFocus                                                                                                     // 21884
   *                                                                                                                   // 21885
   * @description                                                                                                      // 21886
   * Specify custom behavior on focus event.                                                                           // 21887
   *                                                                                                                   // 21888
   * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                 // 21889
   * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                  // 21890
   * during an `$apply` to ensure a consistent state.                                                                  // 21891
   *                                                                                                                   // 21892
   * @element window, input, select, textarea, a                                                                       // 21893
   * @priority 0                                                                                                       // 21894
   * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                  // 21895
   * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 21896
   *                                                                                                                   // 21897
   * @example                                                                                                          // 21898
   * See {@link ng.directive:ngClick ngClick}                                                                          // 21899
   */                                                                                                                  // 21900
                                                                                                                       // 21901
  /**                                                                                                                  // 21902
   * @ngdoc directive                                                                                                  // 21903
   * @name ngBlur                                                                                                      // 21904
   *                                                                                                                   // 21905
   * @description                                                                                                      // 21906
   * Specify custom behavior on blur event.                                                                            // 21907
   *                                                                                                                   // 21908
   * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                               // 21909
   * an element has lost focus.                                                                                        // 21910
   *                                                                                                                   // 21911
   * Note: As the `blur` event is executed synchronously also during DOM manipulations                                 // 21912
   * (e.g. removing a focussed input),                                                                                 // 21913
   * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                  // 21914
   * during an `$apply` to ensure a consistent state.                                                                  // 21915
   *                                                                                                                   // 21916
   * @element window, input, select, textarea, a                                                                       // 21917
   * @priority 0                                                                                                       // 21918
   * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                   // 21919
   * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                    // 21920
   *                                                                                                                   // 21921
   * @example                                                                                                          // 21922
   * See {@link ng.directive:ngClick ngClick}                                                                          // 21923
   */                                                                                                                  // 21924
                                                                                                                       // 21925
  /**                                                                                                                  // 21926
   * @ngdoc directive                                                                                                  // 21927
   * @name ngCopy                                                                                                      // 21928
   *                                                                                                                   // 21929
   * @description                                                                                                      // 21930
   * Specify custom behavior on copy event.                                                                            // 21931
   *                                                                                                                   // 21932
   * @element window, input, select, textarea, a                                                                       // 21933
   * @priority 0                                                                                                       // 21934
   * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                   // 21935
   * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                    // 21936
   *                                                                                                                   // 21937
   * @example                                                                                                          // 21938
   <example>                                                                                                           // 21939
   <file name="index.html">                                                                                            // 21940
   <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">                              // 21941
   copied: {{copied}}                                                                                                  // 21942
   </file>                                                                                                             // 21943
   </example>                                                                                                          // 21944
   */                                                                                                                  // 21945
                                                                                                                       // 21946
  /**                                                                                                                  // 21947
   * @ngdoc directive                                                                                                  // 21948
   * @name ngCut                                                                                                       // 21949
   *                                                                                                                   // 21950
   * @description                                                                                                      // 21951
   * Specify custom behavior on cut event.                                                                             // 21952
   *                                                                                                                   // 21953
   * @element window, input, select, textarea, a                                                                       // 21954
   * @priority 0                                                                                                       // 21955
   * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                    // 21956
   * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 21957
   *                                                                                                                   // 21958
   * @example                                                                                                          // 21959
   <example>                                                                                                           // 21960
   <file name="index.html">                                                                                            // 21961
   <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">                                      // 21962
   cut: {{cut}}                                                                                                        // 21963
   </file>                                                                                                             // 21964
   </example>                                                                                                          // 21965
   */                                                                                                                  // 21966
                                                                                                                       // 21967
  /**                                                                                                                  // 21968
   * @ngdoc directive                                                                                                  // 21969
   * @name ngPaste                                                                                                     // 21970
   *                                                                                                                   // 21971
   * @description                                                                                                      // 21972
   * Specify custom behavior on paste event.                                                                           // 21973
   *                                                                                                                   // 21974
   * @element window, input, select, textarea, a                                                                       // 21975
   * @priority 0                                                                                                       // 21976
   * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                  // 21977
   * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 21978
   *                                                                                                                   // 21979
   * @example                                                                                                          // 21980
   <example>                                                                                                           // 21981
   <file name="index.html">                                                                                            // 21982
   <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>                                        // 21983
   pasted: {{paste}}                                                                                                   // 21984
   </file>                                                                                                             // 21985
   </example>                                                                                                          // 21986
   */                                                                                                                  // 21987
                                                                                                                       // 21988
  /**                                                                                                                  // 21989
   * @ngdoc directive                                                                                                  // 21990
   * @name ngIf                                                                                                        // 21991
   * @restrict A                                                                                                       // 21992
   *                                                                                                                   // 21993
   * @description                                                                                                      // 21994
   * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                   // 21995
   * {expression}. If the expression assigned to `ngIf` evaluates to a false                                           // 21996
   * value then the element is removed from the DOM, otherwise a clone of the                                          // 21997
   * element is reinserted into the DOM.                                                                               // 21998
   *                                                                                                                   // 21999
   * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                     // 22000
   * element in the DOM rather than changing its visibility via the `display` css property.  A common                  // 22001
   * case when this difference is significant is when using css selectors that rely on an element's                    // 22002
   * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                              // 22003
   *                                                                                                                   // 22004
   * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                          // 22005
   * is created when the element is restored.  The scope created within `ngIf` inherits from                           // 22006
   * its parent scope using                                                                                            // 22007
   * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
   * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                 // 22009
   * a javascript primitive defined in the parent scope. In this case any modifications made to the                    // 22010
   * variable within the child scope will override (hide) the value in the parent scope.                               // 22011
   *                                                                                                                   // 22012
   * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                           // 22013
   * is if an element's class attribute is directly modified after it's compiled, using something like                 // 22014
   * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                // 22015
   * the added class will be lost because the original compiled state is used to regenerate the element.               // 22016
   *                                                                                                                   // 22017
   * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                        // 22018
   * and `leave` effects.                                                                                              // 22019
   *                                                                                                                   // 22020
   * @animations                                                                                                       // 22021
   * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
   * leave - happens just before the `ngIf` contents are removed from the DOM                                          // 22023
   *                                                                                                                   // 22024
   * @element ANY                                                                                                      // 22025
   * @scope                                                                                                            // 22026
   * @priority 600                                                                                                     // 22027
   * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                 // 22028
   *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                              // 22029
   *     element is added to the DOM tree.                                                                             // 22030
   *                                                                                                                   // 22031
   * @example                                                                                                          // 22032
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 22033
   <file name="index.html">                                                                                            // 22034
   Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>                                  // 22035
   Show when checked:                                                                                                  // 22036
   <span ng-if="checked" class="animate-if">                                                                           // 22037
   This is removed when the checkbox is unchecked.                                                                     // 22038
   </span>                                                                                                             // 22039
   </file>                                                                                                             // 22040
   <file name="animations.css">                                                                                        // 22041
   .animate-if {                                                                                                       // 22042
        background:white;                                                                                              // 22043
        border:1px solid black;                                                                                        // 22044
        padding:10px;                                                                                                  // 22045
      }                                                                                                                // 22046
                                                                                                                       // 22047
   .animate-if.ng-enter, .animate-if.ng-leave {                                                                        // 22048
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                          // 22049
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 22050
      }                                                                                                                // 22051
                                                                                                                       // 22052
   .animate-if.ng-enter,                                                                                               // 22053
   .animate-if.ng-leave.ng-leave-active {                                                                              // 22054
        opacity:0;                                                                                                     // 22055
      }                                                                                                                // 22056
                                                                                                                       // 22057
   .animate-if.ng-leave,                                                                                               // 22058
   .animate-if.ng-enter.ng-enter-active {                                                                              // 22059
        opacity:1;                                                                                                     // 22060
      }                                                                                                                // 22061
   </file>                                                                                                             // 22062
   </example>                                                                                                          // 22063
   */                                                                                                                  // 22064
  var ngIfDirective = ['$animate', function($animate) {                                                                // 22065
    return {                                                                                                           // 22066
      multiElement: true,                                                                                              // 22067
      transclude: 'element',                                                                                           // 22068
      priority: 600,                                                                                                   // 22069
      terminal: true,                                                                                                  // 22070
      restrict: 'A',                                                                                                   // 22071
      $$tlb: true,                                                                                                     // 22072
      link: function($scope, $element, $attr, ctrl, $transclude) {                                                     // 22073
        var block, childScope, previousElements;                                                                       // 22074
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 22075
                                                                                                                       // 22076
          if (value) {                                                                                                 // 22077
            if (!childScope) {                                                                                         // 22078
              $transclude(function(clone, newScope) {                                                                  // 22079
                childScope = newScope;                                                                                 // 22080
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 22081
                // Note: We only need the first/last node of the cloned nodes.                                         // 22082
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 22083
                // by a directive with templateUrl when its template arrives.                                          // 22084
                block = {                                                                                              // 22085
                  clone: clone                                                                                         // 22086
                };                                                                                                     // 22087
                $animate.enter(clone, $element.parent(), $element);                                                    // 22088
              });                                                                                                      // 22089
            }                                                                                                          // 22090
          } else {                                                                                                     // 22091
            if (previousElements) {                                                                                    // 22092
              previousElements.remove();                                                                               // 22093
              previousElements = null;                                                                                 // 22094
            }                                                                                                          // 22095
            if (childScope) {                                                                                          // 22096
              childScope.$destroy();                                                                                   // 22097
              childScope = null;                                                                                       // 22098
            }                                                                                                          // 22099
            if (block) {                                                                                               // 22100
              previousElements = getBlockNodes(block.clone);                                                           // 22101
              $animate.leave(previousElements).then(function() {                                                       // 22102
                previousElements = null;                                                                               // 22103
              });                                                                                                      // 22104
              block = null;                                                                                            // 22105
            }                                                                                                          // 22106
          }                                                                                                            // 22107
        });                                                                                                            // 22108
      }                                                                                                                // 22109
    };                                                                                                                 // 22110
  }];                                                                                                                  // 22111
                                                                                                                       // 22112
  /**                                                                                                                  // 22113
   * @ngdoc directive                                                                                                  // 22114
   * @name ngInclude                                                                                                   // 22115
   * @restrict ECA                                                                                                     // 22116
   *                                                                                                                   // 22117
   * @description                                                                                                      // 22118
   * Fetches, compiles and includes an external HTML fragment.                                                         // 22119
   *                                                                                                                   // 22120
   * By default, the template URL is restricted to the same domain and protocol as the                                 // 22121
   * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                   // 22122
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 22123
   * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                             // 22124
   * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                            // 22125
    * ng.$sce Strict Contextual Escaping}.                                                                             // 22126
   *                                                                                                                   // 22127
   * In addition, the browser's                                                                                        // 22128
   * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)       // 22129
   * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                            // 22130
   * policy may further restrict whether the template is successfully loaded.                                          // 22131
   * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                   // 22132
   * access on some browsers.                                                                                          // 22133
   *                                                                                                                   // 22134
   * @animations                                                                                                       // 22135
   * enter - animation is used to bring new content into the browser.                                                  // 22136
   * leave - animation is used to animate existing content away.                                                       // 22137
   *                                                                                                                   // 22138
   * The enter and leave animation occur concurrently.                                                                 // 22139
   *                                                                                                                   // 22140
   * @scope                                                                                                            // 22141
   * @priority 400                                                                                                     // 22142
   *                                                                                                                   // 22143
   * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,           // 22144
   *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.                // 22145
   * @param {string=} onload Expression to evaluate when a new partial is loaded.                                      // 22146
   *                                                                                                                   // 22147
   * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                               // 22148
 *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 22149
   *                                                                                                                   // 22150
   *                  - If the attribute is not set, disable scrolling.                                                // 22151
   *                  - If the attribute is set without value, enable scrolling.                                       // 22152
   *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                   // 22153
   *                                                                                                                   // 22154
   * @example                                                                                                          // 22155
   <example module="includeExample" deps="angular-animate.js" animations="true">                                       // 22156
   <file name="index.html">                                                                                            // 22157
   <div ng-controller="ExampleController">                                                                             // 22158
   <select ng-model="template" ng-options="t.name for t in templates">                                                 // 22159
   <option value="">(blank)</option>                                                                                   // 22160
   </select>                                                                                                           // 22161
   url of the template: <code>{{template.url}}</code>                                                                  // 22162
   <hr/>                                                                                                               // 22163
   <div class="slide-animate-container">                                                                               // 22164
   <div class="slide-animate" ng-include="template.url"></div>                                                         // 22165
   </div>                                                                                                              // 22166
   </div>                                                                                                              // 22167
   </file>                                                                                                             // 22168
   <file name="script.js">                                                                                             // 22169
   angular.module('includeExample', ['ngAnimate'])                                                                     // 22170
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 22171
          $scope.templates =                                                                                           // 22172
            [ { name: 'template1.html', url: 'template1.html'},                                                        // 22173
              { name: 'template2.html', url: 'template2.html'} ];                                                      // 22174
          $scope.template = $scope.templates[0];                                                                       // 22175
        }]);                                                                                                           // 22176
   </file>                                                                                                             // 22177
   <file name="template1.html">                                                                                        // 22178
   Content of template1.html                                                                                           // 22179
   </file>                                                                                                             // 22180
   <file name="template2.html">                                                                                        // 22181
   Content of template2.html                                                                                           // 22182
   </file>                                                                                                             // 22183
   <file name="animations.css">                                                                                        // 22184
   .slide-animate-container {                                                                                          // 22185
        position:relative;                                                                                             // 22186
        background:white;                                                                                              // 22187
        border:1px solid black;                                                                                        // 22188
        height:40px;                                                                                                   // 22189
        overflow:hidden;                                                                                               // 22190
      }                                                                                                                // 22191
                                                                                                                       // 22192
   .slide-animate {                                                                                                    // 22193
        padding:10px;                                                                                                  // 22194
      }                                                                                                                // 22195
                                                                                                                       // 22196
   .slide-animate.ng-enter, .slide-animate.ng-leave {                                                                  // 22197
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                          // 22198
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 22199
                                                                                                                       // 22200
        position:absolute;                                                                                             // 22201
        top:0;                                                                                                         // 22202
        left:0;                                                                                                        // 22203
        right:0;                                                                                                       // 22204
        bottom:0;                                                                                                      // 22205
        display:block;                                                                                                 // 22206
        padding:10px;                                                                                                  // 22207
      }                                                                                                                // 22208
                                                                                                                       // 22209
   .slide-animate.ng-enter {                                                                                           // 22210
        top:-50px;                                                                                                     // 22211
      }                                                                                                                // 22212
   .slide-animate.ng-enter.ng-enter-active {                                                                           // 22213
        top:0;                                                                                                         // 22214
      }                                                                                                                // 22215
                                                                                                                       // 22216
   .slide-animate.ng-leave {                                                                                           // 22217
        top:0;                                                                                                         // 22218
      }                                                                                                                // 22219
   .slide-animate.ng-leave.ng-leave-active {                                                                           // 22220
        top:50px;                                                                                                      // 22221
      }                                                                                                                // 22222
   </file>                                                                                                             // 22223
   <file name="protractor.js" type="protractor">                                                                       // 22224
   var templateSelect = element(by.model('template'));                                                                 // 22225
   var includeElem = element(by.css('[ng-include]'));                                                                  // 22226
                                                                                                                       // 22227
   it('should load template1.html', function() {                                                                       // 22228
        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 22229
      });                                                                                                              // 22230
                                                                                                                       // 22231
   it('should load template2.html', function() {                                                                       // 22232
        if (browser.params.browser == 'firefox') {                                                                     // 22233
          // Firefox can't handle using selects                                                                        // 22234
          // See https://github.com/angular/protractor/issues/480                                                      // 22235
          return;                                                                                                      // 22236
        }                                                                                                              // 22237
        templateSelect.click();                                                                                        // 22238
        templateSelect.all(by.css('option')).get(2).click();                                                           // 22239
        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 22240
      });                                                                                                              // 22241
                                                                                                                       // 22242
   it('should change to blank', function() {                                                                           // 22243
        if (browser.params.browser == 'firefox') {                                                                     // 22244
          // Firefox can't handle using selects                                                                        // 22245
          return;                                                                                                      // 22246
        }                                                                                                              // 22247
        templateSelect.click();                                                                                        // 22248
        templateSelect.all(by.css('option')).get(0).click();                                                           // 22249
        expect(includeElem.isPresent()).toBe(false);                                                                   // 22250
      });                                                                                                              // 22251
   </file>                                                                                                             // 22252
   </example>                                                                                                          // 22253
   */                                                                                                                  // 22254
                                                                                                                       // 22255
                                                                                                                       // 22256
  /**                                                                                                                  // 22257
   * @ngdoc event                                                                                                      // 22258
   * @name ngInclude#$includeContentRequested                                                                          // 22259
   * @eventType emit on the scope ngInclude was declared in                                                            // 22260
   * @description                                                                                                      // 22261
   * Emitted every time the ngInclude content is requested.                                                            // 22262
   *                                                                                                                   // 22263
   * @param {Object} angularEvent Synthetic event object.                                                              // 22264
   * @param {String} src URL of content to load.                                                                       // 22265
   */                                                                                                                  // 22266
                                                                                                                       // 22267
                                                                                                                       // 22268
  /**                                                                                                                  // 22269
   * @ngdoc event                                                                                                      // 22270
   * @name ngInclude#$includeContentLoaded                                                                             // 22271
   * @eventType emit on the current ngInclude scope                                                                    // 22272
   * @description                                                                                                      // 22273
   * Emitted every time the ngInclude content is reloaded.                                                             // 22274
   *                                                                                                                   // 22275
   * @param {Object} angularEvent Synthetic event object.                                                              // 22276
   * @param {String} src URL of content to load.                                                                       // 22277
   */                                                                                                                  // 22278
                                                                                                                       // 22279
                                                                                                                       // 22280
  /**                                                                                                                  // 22281
   * @ngdoc event                                                                                                      // 22282
   * @name ngInclude#$includeContentError                                                                              // 22283
   * @eventType emit on the scope ngInclude was declared in                                                            // 22284
   * @description                                                                                                      // 22285
   * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                  // 22286
   *                                                                                                                   // 22287
   * @param {Object} angularEvent Synthetic event object.                                                              // 22288
   * @param {String} src URL of content to load.                                                                       // 22289
   */                                                                                                                  // 22290
  var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', '$sce',                                   // 22291
    function($templateRequest,   $anchorScroll,   $animate,   $sce) {                                                  // 22292
      return {                                                                                                         // 22293
        restrict: 'ECA',                                                                                               // 22294
        priority: 400,                                                                                                 // 22295
        terminal: true,                                                                                                // 22296
        transclude: 'element',                                                                                         // 22297
        controller: angular.noop,                                                                                      // 22298
        compile: function(element, attr) {                                                                             // 22299
          var srcExp = attr.ngInclude || attr.src,                                                                     // 22300
            onloadExp = attr.onload || '',                                                                             // 22301
            autoScrollExp = attr.autoscroll;                                                                           // 22302
                                                                                                                       // 22303
          return function(scope, $element, $attr, ctrl, $transclude) {                                                 // 22304
            var changeCounter = 0,                                                                                     // 22305
              currentScope,                                                                                            // 22306
              previousElement,                                                                                         // 22307
              currentElement;                                                                                          // 22308
                                                                                                                       // 22309
            var cleanupLastIncludeContent = function() {                                                               // 22310
              if (previousElement) {                                                                                   // 22311
                previousElement.remove();                                                                              // 22312
                previousElement = null;                                                                                // 22313
              }                                                                                                        // 22314
              if (currentScope) {                                                                                      // 22315
                currentScope.$destroy();                                                                               // 22316
                currentScope = null;                                                                                   // 22317
              }                                                                                                        // 22318
              if (currentElement) {                                                                                    // 22319
                $animate.leave(currentElement).then(function() {                                                       // 22320
                  previousElement = null;                                                                              // 22321
                });                                                                                                    // 22322
                previousElement = currentElement;                                                                      // 22323
                currentElement = null;                                                                                 // 22324
              }                                                                                                        // 22325
            };                                                                                                         // 22326
                                                                                                                       // 22327
            scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {                         // 22328
              var afterAnimation = function() {                                                                        // 22329
                if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                      // 22330
                  $anchorScroll();                                                                                     // 22331
                }                                                                                                      // 22332
              };                                                                                                       // 22333
              var thisChangeId = ++changeCounter;                                                                      // 22334
                                                                                                                       // 22335
              if (src) {                                                                                               // 22336
                //set the 2nd param to true to ignore the template request error so that the inner                     // 22337
                //contents and scope can be cleaned up.                                                                // 22338
                $templateRequest(src, true).then(function(response) {                                                  // 22339
                  if (thisChangeId !== changeCounter) return;                                                          // 22340
                  var newScope = scope.$new();                                                                         // 22341
                  ctrl.template = response;                                                                            // 22342
                                                                                                                       // 22343
                  // Note: This will also link all children of ng-include that were contained in the original          // 22344
                  // html. If that content contains controllers, ... they could pollute/change the scope.              // 22345
                  // However, using ng-include on an element with additional content does not make sense...            // 22346
                  // Note: We can't remove them in the cloneAttchFn of $transclude as that                             // 22347
                  // function is called before linking the content, which would apply child                            // 22348
                  // directives to non existing elements.                                                              // 22349
                  var clone = $transclude(newScope, function(clone) {                                                  // 22350
                    cleanupLastIncludeContent();                                                                       // 22351
                    $animate.enter(clone, null, $element).then(afterAnimation);                                        // 22352
                  });                                                                                                  // 22353
                                                                                                                       // 22354
                  currentScope = newScope;                                                                             // 22355
                  currentElement = clone;                                                                              // 22356
                                                                                                                       // 22357
                  currentScope.$emit('$includeContentLoaded', src);                                                    // 22358
                  scope.$eval(onloadExp);                                                                              // 22359
                }, function() {                                                                                        // 22360
                  if (thisChangeId === changeCounter) {                                                                // 22361
                    cleanupLastIncludeContent();                                                                       // 22362
                    scope.$emit('$includeContentError', src);                                                          // 22363
                  }                                                                                                    // 22364
                });                                                                                                    // 22365
                scope.$emit('$includeContentRequested', src);                                                          // 22366
              } else {                                                                                                 // 22367
                cleanupLastIncludeContent();                                                                           // 22368
                ctrl.template = null;                                                                                  // 22369
              }                                                                                                        // 22370
            });                                                                                                        // 22371
          };                                                                                                           // 22372
        }                                                                                                              // 22373
      };                                                                                                               // 22374
    }];                                                                                                                // 22375
                                                                                                                       // 22376
// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 22377
// It will replace and compile the content of the element with the loaded template.                                    // 22378
// We need this directive so that the element content is already filled when                                           // 22379
// the link function of another directive on the same element as ngInclude                                             // 22380
// is called.                                                                                                          // 22381
  var ngIncludeFillContentDirective = ['$compile',                                                                     // 22382
    function($compile) {                                                                                               // 22383
      return {                                                                                                         // 22384
        restrict: 'ECA',                                                                                               // 22385
        priority: -400,                                                                                                // 22386
        require: 'ngInclude',                                                                                          // 22387
        link: function(scope, $element, $attr, ctrl) {                                                                 // 22388
          if (/SVG/.test($element[0].toString())) {                                                                    // 22389
            // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                          // 22390
            // support innerHTML, so detect this here and try to generate the contents                                 // 22391
            // specially.                                                                                              // 22392
            $element.empty();                                                                                          // 22393
            $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                   // 22394
              function namespaceAdaptedClone(clone) {                                                                  // 22395
                $element.append(clone);                                                                                // 22396
              }, {futureParentElement: $element});                                                                     // 22397
            return;                                                                                                    // 22398
          }                                                                                                            // 22399
                                                                                                                       // 22400
          $element.html(ctrl.template);                                                                                // 22401
          $compile($element.contents())(scope);                                                                        // 22402
        }                                                                                                              // 22403
      };                                                                                                               // 22404
    }];                                                                                                                // 22405
                                                                                                                       // 22406
  /**                                                                                                                  // 22407
   * @ngdoc directive                                                                                                  // 22408
   * @name ngInit                                                                                                      // 22409
   * @restrict AC                                                                                                      // 22410
   *                                                                                                                   // 22411
   * @description                                                                                                      // 22412
   * The `ngInit` directive allows you to evaluate an expression in the                                                // 22413
   * current scope.                                                                                                    // 22414
   *                                                                                                                   // 22415
   * <div class="alert alert-error">                                                                                   // 22416
   * The only appropriate use of `ngInit` is for aliasing special properties of                                        // 22417
   * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you                       // 22418
   * should use {@link guide/controller controllers} rather than `ngInit`                                              // 22419
   * to initialize values on a scope.                                                                                  // 22420
   * </div>                                                                                                            // 22421
   * <div class="alert alert-warning">                                                                                 // 22422
   * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make                        // 22423
   * sure you have parenthesis for correct precedence:                                                                 // 22424
   * <pre class="prettyprint">                                                                                         // 22425
   * `<div ng-init="test1 = (data | orderBy:'name')"></div>`                                                           // 22426
   * </pre>                                                                                                            // 22427
   * </div>                                                                                                            // 22428
   *                                                                                                                   // 22429
   * @priority 450                                                                                                     // 22430
   *                                                                                                                   // 22431
   * @element ANY                                                                                                      // 22432
   * @param {expression} ngInit {@link guide/expression Expression} to eval.                                           // 22433
   *                                                                                                                   // 22434
   * @example                                                                                                          // 22435
   <example module="initExample">                                                                                      // 22436
   <file name="index.html">                                                                                            // 22437
   <script>                                                                                                            // 22438
   angular.module('initExample', [])                                                                                   // 22439
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 22440
         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 22441
       }]);                                                                                                            // 22442
   </script>                                                                                                           // 22443
   <div ng-controller="ExampleController">                                                                             // 22444
   <div ng-repeat="innerList in list" ng-init="outerIndex = $index">                                                   // 22445
   <div ng-repeat="value in innerList" ng-init="innerIndex = $index">                                                  // 22446
   <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                             // 22447
   </div>                                                                                                              // 22448
   </div>                                                                                                              // 22449
   </div>                                                                                                              // 22450
   </file>                                                                                                             // 22451
   <file name="protractor.js" type="protractor">                                                                       // 22452
   it('should alias index positions', function() {                                                                     // 22453
         var elements = element.all(by.css('.example-init'));                                                          // 22454
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 22455
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 22456
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 22457
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 22458
       });                                                                                                             // 22459
   </file>                                                                                                             // 22460
   </example>                                                                                                          // 22461
   */                                                                                                                  // 22462
  var ngInitDirective = ngDirective({                                                                                  // 22463
    priority: 450,                                                                                                     // 22464
    compile: function() {                                                                                              // 22465
      return {                                                                                                         // 22466
        pre: function(scope, element, attrs) {                                                                         // 22467
          scope.$eval(attrs.ngInit);                                                                                   // 22468
        }                                                                                                              // 22469
      };                                                                                                               // 22470
    }                                                                                                                  // 22471
  });                                                                                                                  // 22472
                                                                                                                       // 22473
  /**                                                                                                                  // 22474
   * @ngdoc directive                                                                                                  // 22475
   * @name ngList                                                                                                      // 22476
   *                                                                                                                   // 22477
   * @description                                                                                                      // 22478
   * Text input that converts between a delimited string and an array of strings. The default                          // 22479
   * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom                 // 22480
   * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.                                  // 22481
   *                                                                                                                   // 22482
   * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                  // 22483
   * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each                              // 22484
   *   list item is respected. This implies that the user of the directive is responsible for                          // 22485
   *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                         // 22486
   *   tab or newline character.                                                                                       // 22487
   * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                   // 22488
   *   when joining the list items back together) and whitespace around each list item is stripped                     // 22489
   *   before it is added to the model.                                                                                // 22490
   *                                                                                                                   // 22491
   * ### Example with Validation                                                                                       // 22492
   *                                                                                                                   // 22493
   * <example name="ngList-directive" module="listExample">                                                            // 22494
   *   <file name="app.js">                                                                                            // 22495
   *      angular.module('listExample', [])                                                                            // 22496
   *        .controller('ExampleController', ['$scope', function($scope) {                                             // 22497
 *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 22498
 *        }]);                                                                                                         // 22499
   *   </file>                                                                                                         // 22500
   *   <file name="index.html">                                                                                        // 22501
   *    <form name="myForm" ng-controller="ExampleController">                                                         // 22502
   *      List: <input name="namesInput" ng-model="names" ng-list required>                                            // 22503
   *      <span class="error" ng-show="myForm.namesInput.$error.required">                                             // 22504
   *        Required!</span>                                                                                           // 22505
   *      <br>                                                                                                         // 22506
   *      <tt>names = {{names}}</tt><br/>                                                                              // 22507
   *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                        // 22508
   *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                        // 22509
   *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                              // 22510
   *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                          // 22511
   *     </form>                                                                                                       // 22512
   *   </file>                                                                                                         // 22513
   *   <file name="protractor.js" type="protractor">                                                                   // 22514
   *     var listInput = element(by.model('names'));                                                                   // 22515
   *     var names = element(by.exactBinding('names'));                                                                // 22516
   *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                  // 22517
   *     var error = element(by.css('span.error'));                                                                    // 22518
   *                                                                                                                   // 22519
   *     it('should initialize to model', function() {                                                                 // 22520
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');                                            // 22521
 *       expect(valid.getText()).toContain('true');                                                                    // 22522
 *       expect(error.getCssValue('display')).toBe('none');                                                            // 22523
 *     });                                                                                                             // 22524
   *                                                                                                                   // 22525
   *     it('should be invalid if empty', function() {                                                                 // 22526
 *       listInput.clear();                                                                                            // 22527
 *       listInput.sendKeys('');                                                                                       // 22528
 *                                                                                                                     // 22529
 *       expect(names.getText()).toContain('');                                                                        // 22530
 *       expect(valid.getText()).toContain('false');                                                                   // 22531
 *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 22532
 *     });                                                                                                             // 22533
   *   </file>                                                                                                         // 22534
   * </example>                                                                                                        // 22535
   *                                                                                                                   // 22536
   * ### Example - splitting on whitespace                                                                             // 22537
   * <example name="ngList-directive-newlines">                                                                        // 22538
   *   <file name="index.html">                                                                                        // 22539
   *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>                                          // 22540
   *    <pre>{{ list | json }}</pre>                                                                                   // 22541
   *   </file>                                                                                                         // 22542
   *   <file name="protractor.js" type="protractor">                                                                   // 22543
   *     it("should split the text by newlines", function() {                                                          // 22544
 *       var listInput = element(by.model('list'));                                                                    // 22545
 *       var output = element(by.binding('list | json'));                                                              // 22546
 *       listInput.sendKeys('abc\ndef\nghi');                                                                          // 22547
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');                                      // 22548
 *     });                                                                                                             // 22549
   *   </file>                                                                                                         // 22550
   * </example>                                                                                                        // 22551
   *                                                                                                                   // 22552
   * @element input                                                                                                    // 22553
   * @param {string=} ngList optional delimiter that should be used to split the value.                                // 22554
   */                                                                                                                  // 22555
  var ngListDirective = function() {                                                                                   // 22556
    return {                                                                                                           // 22557
      restrict: 'A',                                                                                                   // 22558
      priority: 100,                                                                                                   // 22559
      require: 'ngModel',                                                                                              // 22560
      link: function(scope, element, attr, ctrl) {                                                                     // 22561
        // We want to control whitespace trimming so we use this convoluted approach                                   // 22562
        // to access the ngList attribute, which doesn't pre-trim the attribute                                        // 22563
        var ngList = element.attr(attr.$attr.ngList) || ', ';                                                          // 22564
        var trimValues = attr.ngTrim !== 'false';                                                                      // 22565
        var separator = trimValues ? trim(ngList) : ngList;                                                            // 22566
                                                                                                                       // 22567
        var parse = function(viewValue) {                                                                              // 22568
          // If the viewValue is invalid (say required but empty) it will be `undefined`                               // 22569
          if (isUndefined(viewValue)) return;                                                                          // 22570
                                                                                                                       // 22571
          var list = [];                                                                                               // 22572
                                                                                                                       // 22573
          if (viewValue) {                                                                                             // 22574
            forEach(viewValue.split(separator), function(value) {                                                      // 22575
              if (value) list.push(trimValues ? trim(value) : value);                                                  // 22576
            });                                                                                                        // 22577
          }                                                                                                            // 22578
                                                                                                                       // 22579
          return list;                                                                                                 // 22580
        };                                                                                                             // 22581
                                                                                                                       // 22582
        ctrl.$parsers.push(parse);                                                                                     // 22583
        ctrl.$formatters.push(function(value) {                                                                        // 22584
          if (isArray(value)) {                                                                                        // 22585
            return value.join(ngList);                                                                                 // 22586
          }                                                                                                            // 22587
                                                                                                                       // 22588
          return undefined;                                                                                            // 22589
        });                                                                                                            // 22590
                                                                                                                       // 22591
        // Override the standard $isEmpty because an empty array means the input is empty.                             // 22592
        ctrl.$isEmpty = function(value) {                                                                              // 22593
          return !value || !value.length;                                                                              // 22594
        };                                                                                                             // 22595
      }                                                                                                                // 22596
    };                                                                                                                 // 22597
  };                                                                                                                   // 22598
                                                                                                                       // 22599
  /* global VALID_CLASS: true,                                                                                         // 22600
   INVALID_CLASS: true,                                                                                                // 22601
   PRISTINE_CLASS: true,                                                                                               // 22602
   DIRTY_CLASS: true,                                                                                                  // 22603
   UNTOUCHED_CLASS: true,                                                                                              // 22604
   TOUCHED_CLASS: true,                                                                                                // 22605
   */                                                                                                                  // 22606
                                                                                                                       // 22607
  var VALID_CLASS = 'ng-valid',                                                                                        // 22608
    INVALID_CLASS = 'ng-invalid',                                                                                      // 22609
    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 22610
    DIRTY_CLASS = 'ng-dirty',                                                                                          // 22611
    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 22612
    TOUCHED_CLASS = 'ng-touched',                                                                                      // 22613
    PENDING_CLASS = 'ng-pending';                                                                                      // 22614
                                                                                                                       // 22615
                                                                                                                       // 22616
  var $ngModelMinErr = new minErr('ngModel');                                                                          // 22617
                                                                                                                       // 22618
  /**                                                                                                                  // 22619
   * @ngdoc type                                                                                                       // 22620
   * @name ngModel.NgModelController                                                                                   // 22621
   *                                                                                                                   // 22622
   * @property {string} $viewValue Actual string value in the view.                                                    // 22623
   * @property {*} $modelValue The value in the model that the control is bound to.                                    // 22624
   * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                      // 22625
   the control reads value from the DOM. The functions are called in array order, each passing                         // 22626
   its return value through to the next. The last return value is forwarded to the                                     // 22627
   {@link ngModel.NgModelController#$validators `$validators`} collection.                                             // 22628
                                                                                                                       // 22629
   Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                              // 22630
`$viewValue`}.                                                                                                         // 22631
                                                                                                                       // 22632
   Returning `undefined` from a parser means a parse error occurred. In that case,                                     // 22633
   no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                           // 22634
   will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                              // 22635
   is set to `true`. The parse error is stored in `ngModel.$error.parse`.                                              // 22636
                                                                                                                       // 22637
   *                                                                                                                   // 22638
   * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                   // 22639
   the model value changes. The functions are called in reverse array order, each passing the value through to the     // 22640
   next. The last return value is used as the actual DOM value.                                                        // 22641
   Used to format / convert values for display in the control.                                                         // 22642
   * ```js                                                                                                             // 22643
   * function formatter(value) {                                                                                       // 22644
 *   if (value) {                                                                                                      // 22645
 *     return value.toUpperCase();                                                                                     // 22646
 *   }                                                                                                                 // 22647
 * }                                                                                                                   // 22648
   * ngModel.$formatters.push(formatter);                                                                              // 22649
   * ```                                                                                                               // 22650
   *                                                                                                                   // 22651
   * @property {Object.<string, function>} $validators A collection of validators that are applied                     // 22652
   *      whenever the model value changes. The key value within the object refers to the name of the                  // 22653
   *      validator while the function refers to the validation operation. The validation operation is                 // 22654
   *      provided with the model value as an argument and must return a true or false value depending                 // 22655
   *      on the response of that validation.                                                                          // 22656
   *                                                                                                                   // 22657
   * ```js                                                                                                             // 22658
   * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                           // 22659
 *   var value = modelValue || viewValue;                                                                              // 22660
 *   return /[0-9]+/.test(value) &&                                                                                    // 22661
 *          /[a-z]+/.test(value) &&                                                                                    // 22662
 *          /[A-Z]+/.test(value) &&                                                                                    // 22663
 *          /\W+/.test(value);                                                                                         // 22664
 * };                                                                                                                  // 22665
   * ```                                                                                                               // 22666
   *                                                                                                                   // 22667
   * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to           // 22668
   *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided           // 22669
   *      is expected to return a promise when it is run during the model validation process. Once the promise         // 22670
   *      is delivered then the validation status will be set to true when fulfilled and false when rejected.          // 22671
   *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model    // 22672
   *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator     // 22673
   *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
   *      will only run once all synchronous validators have passed.                                                   // 22675
   *                                                                                                                   // 22676
   * Please note that if $http is used then it is important that the server returns a success HTTP response code       // 22677
   * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                 // 22678
   *                                                                                                                   // 22679
   * ```js                                                                                                             // 22680
   * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                       // 22681
 *   var value = modelValue || viewValue;                                                                              // 22682
 *                                                                                                                     // 22683
 *   // Lookup user by username                                                                                        // 22684
 *   return $http.get('/api/users/' + value).                                                                          // 22685
 *      then(function resolved() {                                                                                     // 22686
 *        //username exists, this means validation fails                                                               // 22687
 *        return $q.reject('exists');                                                                                  // 22688
 *      }, function rejected() {                                                                                       // 22689
 *        //username does not exist, therefore this validation passes                                                  // 22690
 *        return true;                                                                                                 // 22691
 *      });                                                                                                            // 22692
 * };                                                                                                                  // 22693
   * ```                                                                                                               // 22694
   *                                                                                                                   // 22695
   * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                      // 22696
   *     view value has changed. It is called with no arguments, and its return value is ignored.                      // 22697
   *     This can be used in place of additional $watches against the model value.                                     // 22698
   *                                                                                                                   // 22699
   * @property {Object} $error An object hash with all failing validator ids as keys.                                  // 22700
   * @property {Object} $pending An object hash with all pending validator ids as keys.                                // 22701
   *                                                                                                                   // 22702
   * @property {boolean} $untouched True if control has not lost focus yet.                                            // 22703
   * @property {boolean} $touched True if control has lost focus.                                                      // 22704
   * @property {boolean} $pristine True if user has not interacted with the control yet.                               // 22705
   * @property {boolean} $dirty True if user has already interacted with the control.                                  // 22706
   * @property {boolean} $valid True if there is no error.                                                             // 22707
   * @property {boolean} $invalid True if at least one error on the control.                                           // 22708
   * @property {string} $name The name attribute of the control.                                                       // 22709
   *                                                                                                                   // 22710
   * @description                                                                                                      // 22711
   *                                                                                                                   // 22712
   * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                     // 22713
   * The controller contains services for data-binding, validation, CSS updates, and value formatting                  // 22714
   * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                         // 22715
   * listening to DOM events.                                                                                          // 22716
   * Such DOM related logic should be provided by other directives which make use of                                   // 22717
   * `NgModelController` for data-binding to control elements.                                                         // 22718
   * Angular provides this DOM logic for most {@link input `input`} elements.                                          // 22719
   * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                    // 22720
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 22721
   *                                                                                                                   // 22722
   * @example                                                                                                          // 22723
   * ### Custom Control Example                                                                                        // 22724
   * This example shows how to use `NgModelController` with a custom control to achieve                                // 22725
   * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                     // 22726
   * collaborate together to achieve the desired result.                                                               // 22727
   *                                                                                                                   // 22728
   * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                               // 22729
   * contents be edited in place by the user.                                                                          // 22730
   *                                                                                                                   // 22731
   * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}           // 22732
   * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).            // 22733
   * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                  // 22734
   * that content using the `$sce` service.                                                                            // 22735
   *                                                                                                                   // 22736
   * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">                              // 22737
   <file name="style.css">                                                                                             // 22738
   [contenteditable] {                                                                                                 // 22739
        border: 1px solid black;                                                                                       // 22740
        background-color: white;                                                                                       // 22741
        min-height: 20px;                                                                                              // 22742
      }                                                                                                                // 22743
                                                                                                                       // 22744
   .ng-invalid {                                                                                                       // 22745
        border: 1px solid red;                                                                                         // 22746
      }                                                                                                                // 22747
                                                                                                                       // 22748
   </file>                                                                                                             // 22749
   <file name="script.js">                                                                                             // 22750
   angular.module('customControl', ['ngSanitize']).                                                                    // 22751
   directive('contenteditable', ['$sce', function($sce) {                                                              // 22752
          return {                                                                                                     // 22753
            restrict: 'A', // only activate on element attribute                                                       // 22754
            require: '?ngModel', // get a hold of NgModelController                                                    // 22755
            link: function(scope, element, attrs, ngModel) {                                                           // 22756
              if (!ngModel) return; // do nothing if no ng-model                                                       // 22757
                                                                                                                       // 22758
              // Specify how UI should be updated                                                                      // 22759
              ngModel.$render = function() {                                                                           // 22760
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 22761
              };                                                                                                       // 22762
                                                                                                                       // 22763
              // Listen for change events to enable binding                                                            // 22764
              element.on('blur keyup change', function() {                                                             // 22765
                scope.$evalAsync(read);                                                                                // 22766
              });                                                                                                      // 22767
              read(); // initialize                                                                                    // 22768
                                                                                                                       // 22769
              // Write data to the model                                                                               // 22770
              function read() {                                                                                        // 22771
                var html = element.html();                                                                             // 22772
                // When we clear the content editable the browser leaves a <br> behind                                 // 22773
                // If strip-br attribute is provided then we strip this out                                            // 22774
                if ( attrs.stripBr && html == '<br>' ) {                                                               // 22775
                  html = '';                                                                                           // 22776
                }                                                                                                      // 22777
                ngModel.$setViewValue(html);                                                                           // 22778
              }                                                                                                        // 22779
            }                                                                                                          // 22780
          };                                                                                                           // 22781
        }]);                                                                                                           // 22782
   </file>                                                                                                             // 22783
   <file name="index.html">                                                                                            // 22784
   <form name="myForm">                                                                                                // 22785
   <div contenteditable                                                                                                // 22786
   name="myWidget" ng-model="userContent"                                                                              // 22787
   strip-br="true"                                                                                                     // 22788
   required>Change me!</div>                                                                                           // 22789
   <span ng-show="myForm.myWidget.$error.required">Required!</span>                                                    // 22790
   <hr>                                                                                                                // 22791
   <textarea ng-model="userContent"></textarea>                                                                        // 22792
   </form>                                                                                                             // 22793
   </file>                                                                                                             // 22794
   <file name="protractor.js" type="protractor">                                                                       // 22795
   it('should data-bind and become invalid', function() {                                                              // 22796
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 22797
        // SafariDriver can't handle contenteditable                                                                   // 22798
        // and Firefox driver can't clear contenteditables very well                                                   // 22799
        return;                                                                                                        // 22800
      }                                                                                                                // 22801
      var contentEditable = element(by.css('[contenteditable]'));                                                      // 22802
      var content = 'Change me!';                                                                                      // 22803
                                                                                                                       // 22804
      expect(contentEditable.getText()).toEqual(content);                                                              // 22805
                                                                                                                       // 22806
      contentEditable.clear();                                                                                         // 22807
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 22808
      expect(contentEditable.getText()).toEqual('');                                                                   // 22809
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 22810
    });                                                                                                                // 22811
   </file>                                                                                                             // 22812
   * </example>                                                                                                        // 22813
   *                                                                                                                   // 22814
   *                                                                                                                   // 22815
   */                                                                                                                  // 22816
  var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 22818
      this.$viewValue = Number.NaN;                                                                                    // 22819
      this.$modelValue = Number.NaN;                                                                                   // 22820
      this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity. // 22821
      this.$validators = {};                                                                                           // 22822
      this.$asyncValidators = {};                                                                                      // 22823
      this.$parsers = [];                                                                                              // 22824
      this.$formatters = [];                                                                                           // 22825
      this.$viewChangeListeners = [];                                                                                  // 22826
      this.$untouched = true;                                                                                          // 22827
      this.$touched = false;                                                                                           // 22828
      this.$pristine = true;                                                                                           // 22829
      this.$dirty = false;                                                                                             // 22830
      this.$valid = true;                                                                                              // 22831
      this.$invalid = false;                                                                                           // 22832
      this.$error = {}; // keep invalid keys here                                                                      // 22833
      this.$$success = {}; // keep valid keys here                                                                     // 22834
      this.$pending = undefined; // keep pending keys here                                                             // 22835
      this.$name = $interpolate($attr.name || '', false)($scope);                                                      // 22836
                                                                                                                       // 22837
                                                                                                                       // 22838
      var parsedNgModel = $parse($attr.ngModel),                                                                       // 22839
        parsedNgModelAssign = parsedNgModel.assign,                                                                    // 22840
        ngModelGet = parsedNgModel,                                                                                    // 22841
        ngModelSet = parsedNgModelAssign,                                                                              // 22842
        pendingDebounce = null,                                                                                        // 22843
        parserValid,                                                                                                   // 22844
        ctrl = this;                                                                                                   // 22845
                                                                                                                       // 22846
      this.$$setOptions = function(options) {                                                                          // 22847
        ctrl.$options = options;                                                                                       // 22848
        if (options && options.getterSetter) {                                                                         // 22849
          var invokeModelGetter = $parse($attr.ngModel + '()'),                                                        // 22850
            invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                      // 22851
                                                                                                                       // 22852
          ngModelGet = function($scope) {                                                                              // 22853
            var modelValue = parsedNgModel($scope);                                                                    // 22854
            if (isFunction(modelValue)) {                                                                              // 22855
              modelValue = invokeModelGetter($scope);                                                                  // 22856
            }                                                                                                          // 22857
            return modelValue;                                                                                         // 22858
          };                                                                                                           // 22859
          ngModelSet = function($scope, newValue) {                                                                    // 22860
            if (isFunction(parsedNgModel($scope))) {                                                                   // 22861
              invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                     // 22862
            } else {                                                                                                   // 22863
              parsedNgModelAssign($scope, ctrl.$modelValue);                                                           // 22864
            }                                                                                                          // 22865
          };                                                                                                           // 22866
        } else if (!parsedNgModel.assign) {                                                                            // 22867
          throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",                        // 22868
            $attr.ngModel, startingTag($element));                                                                     // 22869
        }                                                                                                              // 22870
      };                                                                                                               // 22871
                                                                                                                       // 22872
      /**                                                                                                              // 22873
       * @ngdoc method                                                                                                 // 22874
       * @name ngModel.NgModelController#$render                                                                       // 22875
       *                                                                                                               // 22876
       * @description                                                                                                  // 22877
       * Called when the view needs to be updated. It is expected that the user of the ng-model                        // 22878
       * directive will implement this method.                                                                         // 22879
       *                                                                                                               // 22880
       * The `$render()` method is invoked in the following situations:                                                // 22881
       *                                                                                                               // 22882
       * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                        // 22883
       *   committed value then `$render()` is called to update the input control.                                     // 22884
       * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and               // 22885
       *   the `$viewValue` are different to last time.                                                                // 22886
       *                                                                                                               // 22887
       * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                       // 22888
       * `$modelValue` and `$viewValue` are actually different to their previous value. If `$modelValue`               // 22889
       * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                     // 22890
       * invoked if you only change a property on the objects.                                                         // 22891
       */                                                                                                              // 22892
      this.$render = noop;                                                                                             // 22893
                                                                                                                       // 22894
      /**                                                                                                              // 22895
       * @ngdoc method                                                                                                 // 22896
       * @name ngModel.NgModelController#$isEmpty                                                                      // 22897
       *                                                                                                               // 22898
       * @description                                                                                                  // 22899
       * This is called when we need to determine if the value of an input is empty.                                   // 22900
       *                                                                                                               // 22901
       * For instance, the required directive does this to work out if the input has data or not.                      // 22902
       *                                                                                                               // 22903
       * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.               // 22904
       *                                                                                                               // 22905
       * You can override this for input directives whose concept of being empty is different to the                   // 22906
       * default. The `checkboxInputType` directive does this because in its case a value of `false`                   // 22907
       * implies empty.                                                                                                // 22908
       *                                                                                                               // 22909
       * @param {*} value The value of the input to check for emptiness.                                               // 22910
       * @returns {boolean} True if `value` is "empty".                                                                // 22911
       */                                                                                                              // 22912
      this.$isEmpty = function(value) {                                                                                // 22913
        return isUndefined(value) || value === '' || value === null || value !== value;                                // 22914
      };                                                                                                               // 22915
                                                                                                                       // 22916
      var parentForm = $element.inheritedData('$formController') || nullFormCtrl,                                      // 22917
        currentValidationRunId = 0;                                                                                    // 22918
                                                                                                                       // 22919
      /**                                                                                                              // 22920
       * @ngdoc method                                                                                                 // 22921
       * @name ngModel.NgModelController#$setValidity                                                                  // 22922
       *                                                                                                               // 22923
       * @description                                                                                                  // 22924
       * Change the validity state, and notify the form.                                                               // 22925
       *                                                                                                               // 22926
       * This method can be called within $parsers/$formatters or a custom validation implementation.                  // 22927
       * However, in most cases it should be sufficient to use the `ngModel.$validators` and                           // 22928
       * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                          // 22929
       *                                                                                                               // 22930
       * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned           // 22931
       *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                               // 22932
       *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                        // 22933
       *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                  // 22934
       *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`        // 22935
       *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                              // 22936
       * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),     // 22937
       *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.               // 22938
       *                          Skipped is used by Angular when validators do not run because of parse errors and    // 22939
       *                          when `$asyncValidators` do not run because any of the `$validators` failed.          // 22940
       */                                                                                                              // 22941
      addSetValidityMethod({                                                                                           // 22942
        ctrl: this,                                                                                                    // 22943
        $element: $element,                                                                                            // 22944
        set: function(object, property) {                                                                              // 22945
          object[property] = true;                                                                                     // 22946
        },                                                                                                             // 22947
        unset: function(object, property) {                                                                            // 22948
          delete object[property];                                                                                     // 22949
        },                                                                                                             // 22950
        parentForm: parentForm,                                                                                        // 22951
        $animate: $animate                                                                                             // 22952
      });                                                                                                              // 22953
                                                                                                                       // 22954
      /**                                                                                                              // 22955
       * @ngdoc method                                                                                                 // 22956
       * @name ngModel.NgModelController#$setPristine                                                                  // 22957
       *                                                                                                               // 22958
       * @description                                                                                                  // 22959
       * Sets the control to its pristine state.                                                                       // 22960
       *                                                                                                               // 22961
       * This method can be called to remove the `ng-dirty` class and set the control to its pristine                  // 22962
       * state (`ng-pristine` class). A model is considered to be pristine when the control                            // 22963
       * has not been changed from when first compiled.                                                                // 22964
       */                                                                                                              // 22965
      this.$setPristine = function() {                                                                                 // 22966
        ctrl.$dirty = false;                                                                                           // 22967
        ctrl.$pristine = true;                                                                                         // 22968
        $animate.removeClass($element, DIRTY_CLASS);                                                                   // 22969
        $animate.addClass($element, PRISTINE_CLASS);                                                                   // 22970
      };                                                                                                               // 22971
                                                                                                                       // 22972
      /**                                                                                                              // 22973
       * @ngdoc method                                                                                                 // 22974
       * @name ngModel.NgModelController#$setDirty                                                                     // 22975
       *                                                                                                               // 22976
       * @description                                                                                                  // 22977
       * Sets the control to its dirty state.                                                                          // 22978
       *                                                                                                               // 22979
       * This method can be called to remove the `ng-pristine` class and set the control to its dirty                  // 22980
       * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                 // 22981
       * from when first compiled.                                                                                     // 22982
       */                                                                                                              // 22983
      this.$setDirty = function() {                                                                                    // 22984
        ctrl.$dirty = true;                                                                                            // 22985
        ctrl.$pristine = false;                                                                                        // 22986
        $animate.removeClass($element, PRISTINE_CLASS);                                                                // 22987
        $animate.addClass($element, DIRTY_CLASS);                                                                      // 22988
        parentForm.$setDirty();                                                                                        // 22989
      };                                                                                                               // 22990
                                                                                                                       // 22991
      /**                                                                                                              // 22992
       * @ngdoc method                                                                                                 // 22993
       * @name ngModel.NgModelController#$setUntouched                                                                 // 22994
       *                                                                                                               // 22995
       * @description                                                                                                  // 22996
       * Sets the control to its untouched state.                                                                      // 22997
       *                                                                                                               // 22998
       * This method can be called to remove the `ng-touched` class and set the control to its                         // 22999
       * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                         // 23000
       * by default, however this function can be used to restore that state if the model has                          // 23001
       * already been touched by the user.                                                                             // 23002
       */                                                                                                              // 23003
      this.$setUntouched = function() {                                                                                // 23004
        ctrl.$touched = false;                                                                                         // 23005
        ctrl.$untouched = true;                                                                                        // 23006
        $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                   // 23007
      };                                                                                                               // 23008
                                                                                                                       // 23009
      /**                                                                                                              // 23010
       * @ngdoc method                                                                                                 // 23011
       * @name ngModel.NgModelController#$setTouched                                                                   // 23012
       *                                                                                                               // 23013
       * @description                                                                                                  // 23014
       * Sets the control to its touched state.                                                                        // 23015
       *                                                                                                               // 23016
       * This method can be called to remove the `ng-untouched` class and set the control to its                       // 23017
       * touched state (`ng-touched` class). A model is considered to be touched when the user has                     // 23018
       * first focused the control element and then shifted focus away from the control (blur event).                  // 23019
       */                                                                                                              // 23020
      this.$setTouched = function() {                                                                                  // 23021
        ctrl.$touched = true;                                                                                          // 23022
        ctrl.$untouched = false;                                                                                       // 23023
        $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                   // 23024
      };                                                                                                               // 23025
                                                                                                                       // 23026
      /**                                                                                                              // 23027
       * @ngdoc method                                                                                                 // 23028
       * @name ngModel.NgModelController#$rollbackViewValue                                                            // 23029
       *                                                                                                               // 23030
       * @description                                                                                                  // 23031
       * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,               // 23032
       * which may be caused by a pending debounced event or because the input is waiting for a some                   // 23033
       * future event.                                                                                                 // 23034
       *                                                                                                               // 23035
       * If you have an input that uses `ng-model-options` to set up debounced events or events such                   // 23036
       * as blur you can have a situation where there is a period when the `$viewValue`                                // 23037
       * is out of synch with the ngModel's `$modelValue`.                                                             // 23038
       *                                                                                                               // 23039
       * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                  // 23040
       * programmatically before these debounced/future events have resolved/occurred, because Angular's               // 23041
       * dirty checking mechanism is not able to tell whether the model has actually changed or not.                   // 23042
       *                                                                                                               // 23043
       * The `$rollbackViewValue()` method should be called before programmatically changing the model of an           // 23044
       * input which may have such events pending. This is important in order to make sure that the                    // 23045
       * input field will be updated with the new model value and any pending operations are cancelled.                // 23046
       *                                                                                                               // 23047
       * <example name="ng-model-cancel-update" module="cancel-update-example">                                        // 23048
       *   <file name="app.js">                                                                                        // 23049
       *     angular.module('cancel-update-example', [])                                                               // 23050
       *                                                                                                               // 23051
       *     .controller('CancelUpdateController', ['$scope', function($scope) {                                       // 23052
   *       $scope.resetWithCancel = function(e) {                                                                      // 23053
   *         if (e.keyCode == 27) {                                                                                    // 23054
   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 23055
   *           $scope.myValue = '';                                                                                    // 23056
   *         }                                                                                                         // 23057
   *       };                                                                                                          // 23058
   *       $scope.resetWithoutCancel = function(e) {                                                                   // 23059
   *         if (e.keyCode == 27) {                                                                                    // 23060
   *           $scope.myValue = '';                                                                                    // 23061
   *         }                                                                                                         // 23062
   *       };                                                                                                          // 23063
   *     }]);                                                                                                          // 23064
       *   </file>                                                                                                     // 23065
       *   <file name="index.html">                                                                                    // 23066
       *     <div ng-controller="CancelUpdateController">                                                              // 23067
       *       <p>Try typing something in each input.  See that the model only updates when you                        // 23068
       *          blur off the input.                                                                                  // 23069
       *        </p>                                                                                                   // 23070
       *        <p>Now see what happens if you start typing then press the Escape key</p>                              // 23071
       *                                                                                                               // 23072
       *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">                                            // 23073
       *         <p>With $rollbackViewValue()</p>                                                                      // 23074
       *         <input name="myInput1" ng-model="myValue" ng-keydown="resetWithCancel($event)"><br/>                  // 23075
       *         myValue: "{{ myValue }}"                                                                              // 23076
       *                                                                                                               // 23077
       *         <p>Without $rollbackViewValue()</p>                                                                   // 23078
       *         <input name="myInput2" ng-model="myValue" ng-keydown="resetWithoutCancel($event)"><br/>               // 23079
       *         myValue: "{{ myValue }}"                                                                              // 23080
       *       </form>                                                                                                 // 23081
       *     </div>                                                                                                    // 23082
       *   </file>                                                                                                     // 23083
       * </example>                                                                                                    // 23084
       */                                                                                                              // 23085
      this.$rollbackViewValue = function() {                                                                           // 23086
        $timeout.cancel(pendingDebounce);                                                                              // 23087
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                               // 23088
        ctrl.$render();                                                                                                // 23089
      };                                                                                                               // 23090
                                                                                                                       // 23091
      /**                                                                                                              // 23092
       * @ngdoc method                                                                                                 // 23093
       * @name ngModel.NgModelController#$validate                                                                     // 23094
       *                                                                                                               // 23095
       * @description                                                                                                  // 23096
       * Runs each of the registered validators (first synchronous validators and then                                 // 23097
       * asynchronous validators).                                                                                     // 23098
       * If the validity changes to invalid, the model will be set to `undefined`,                                     // 23099
       * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                        // 23100
       * If the validity changes to valid, it will set the model to the last available valid                           // 23101
       * modelValue, i.e. either the last parsed value or the last value set from the scope.                           // 23102
       */                                                                                                              // 23103
      this.$validate = function() {                                                                                    // 23104
        // ignore $validate before model is initialized                                                                // 23105
        if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                   // 23106
          return;                                                                                                      // 23107
        }                                                                                                              // 23108
                                                                                                                       // 23109
        var viewValue = ctrl.$$lastCommittedViewValue;                                                                 // 23110
        // Note: we use the $$rawModelValue as $modelValue might have been                                             // 23111
        // set to undefined during a view -> model update that found validation                                        // 23112
        // errors. We can't parse the view here, since that could change                                               // 23113
        // the model although neither viewValue nor the model on the scope changed                                     // 23114
        var modelValue = ctrl.$$rawModelValue;                                                                         // 23115
                                                                                                                       // 23116
        var prevValid = ctrl.$valid;                                                                                   // 23117
        var prevModelValue = ctrl.$modelValue;                                                                         // 23118
                                                                                                                       // 23119
        var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                // 23120
                                                                                                                       // 23121
        ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                               // 23122
          // If there was no change in validity, don't update the model                                                // 23123
          // This prevents changing an invalid modelValue to undefined                                                 // 23124
          if (!allowInvalid && prevValid !== allValid) {                                                               // 23125
            // Note: Don't check ctrl.$valid here, as we could have                                                    // 23126
            // external validators (e.g. calculated on the server),                                                    // 23127
            // that just call $setValidity and need the model value                                                    // 23128
            // to calculate their validity.                                                                            // 23129
            ctrl.$modelValue = allValid ? modelValue : undefined;                                                      // 23130
                                                                                                                       // 23131
            if (ctrl.$modelValue !== prevModelValue) {                                                                 // 23132
              ctrl.$$writeModelToScope();                                                                              // 23133
            }                                                                                                          // 23134
          }                                                                                                            // 23135
        });                                                                                                            // 23136
                                                                                                                       // 23137
      };                                                                                                               // 23138
                                                                                                                       // 23139
      this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                           // 23140
        currentValidationRunId++;                                                                                      // 23141
        var localValidationRunId = currentValidationRunId;                                                             // 23142
                                                                                                                       // 23143
        // check parser error                                                                                          // 23144
        if (!processParseErrors()) {                                                                                   // 23145
          validationDone(false);                                                                                       // 23146
          return;                                                                                                      // 23147
        }                                                                                                              // 23148
        if (!processSyncValidators()) {                                                                                // 23149
          validationDone(false);                                                                                       // 23150
          return;                                                                                                      // 23151
        }                                                                                                              // 23152
        processAsyncValidators();                                                                                      // 23153
                                                                                                                       // 23154
        function processParseErrors() {                                                                                // 23155
          var errorKey = ctrl.$$parserName || 'parse';                                                                 // 23156
          if (parserValid === undefined) {                                                                             // 23157
            setValidity(errorKey, null);                                                                               // 23158
          } else {                                                                                                     // 23159
            if (!parserValid) {                                                                                        // 23160
              forEach(ctrl.$validators, function(v, name) {                                                            // 23161
                setValidity(name, null);                                                                               // 23162
              });                                                                                                      // 23163
              forEach(ctrl.$asyncValidators, function(v, name) {                                                       // 23164
                setValidity(name, null);                                                                               // 23165
              });                                                                                                      // 23166
            }                                                                                                          // 23167
            // Set the parse error last, to prevent unsetting it, should a $validators key == parserName               // 23168
            setValidity(errorKey, parserValid);                                                                        // 23169
            return parserValid;                                                                                        // 23170
          }                                                                                                            // 23171
          return true;                                                                                                 // 23172
        }                                                                                                              // 23173
                                                                                                                       // 23174
        function processSyncValidators() {                                                                             // 23175
          var syncValidatorsValid = true;                                                                              // 23176
          forEach(ctrl.$validators, function(validator, name) {                                                        // 23177
            var result = validator(modelValue, viewValue);                                                             // 23178
            syncValidatorsValid = syncValidatorsValid && result;                                                       // 23179
            setValidity(name, result);                                                                                 // 23180
          });                                                                                                          // 23181
          if (!syncValidatorsValid) {                                                                                  // 23182
            forEach(ctrl.$asyncValidators, function(v, name) {                                                         // 23183
              setValidity(name, null);                                                                                 // 23184
            });                                                                                                        // 23185
            return false;                                                                                              // 23186
          }                                                                                                            // 23187
          return true;                                                                                                 // 23188
        }                                                                                                              // 23189
                                                                                                                       // 23190
        function processAsyncValidators() {                                                                            // 23191
          var validatorPromises = [];                                                                                  // 23192
          var allValid = true;                                                                                         // 23193
          forEach(ctrl.$asyncValidators, function(validator, name) {                                                   // 23194
            var promise = validator(modelValue, viewValue);                                                            // 23195
            if (!isPromiseLike(promise)) {                                                                             // 23196
              throw $ngModelMinErr("$asyncValidators",                                                                 // 23197
                "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);                // 23198
            }                                                                                                          // 23199
            setValidity(name, undefined);                                                                              // 23200
            validatorPromises.push(promise.then(function() {                                                           // 23201
              setValidity(name, true);                                                                                 // 23202
            }, function(error) {                                                                                       // 23203
              allValid = false;                                                                                        // 23204
              setValidity(name, false);                                                                                // 23205
            }));                                                                                                       // 23206
          });                                                                                                          // 23207
          if (!validatorPromises.length) {                                                                             // 23208
            validationDone(true);                                                                                      // 23209
          } else {                                                                                                     // 23210
            $q.all(validatorPromises).then(function() {                                                                // 23211
              validationDone(allValid);                                                                                // 23212
            }, noop);                                                                                                  // 23213
          }                                                                                                            // 23214
        }                                                                                                              // 23215
                                                                                                                       // 23216
        function setValidity(name, isValid) {                                                                          // 23217
          if (localValidationRunId === currentValidationRunId) {                                                       // 23218
            ctrl.$setValidity(name, isValid);                                                                          // 23219
          }                                                                                                            // 23220
        }                                                                                                              // 23221
                                                                                                                       // 23222
        function validationDone(allValid) {                                                                            // 23223
          if (localValidationRunId === currentValidationRunId) {                                                       // 23224
                                                                                                                       // 23225
            doneCallback(allValid);                                                                                    // 23226
          }                                                                                                            // 23227
        }                                                                                                              // 23228
      };                                                                                                               // 23229
                                                                                                                       // 23230
      /**                                                                                                              // 23231
       * @ngdoc method                                                                                                 // 23232
       * @name ngModel.NgModelController#$commitViewValue                                                              // 23233
       *                                                                                                               // 23234
       * @description                                                                                                  // 23235
       * Commit a pending update to the `$modelValue`.                                                                 // 23236
       *                                                                                                               // 23237
       * Updates may be pending by a debounced event or because the input is waiting for a some future                 // 23238
       * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                      // 23239
       * usually handles calling this in response to input events.                                                     // 23240
       */                                                                                                              // 23241
      this.$commitViewValue = function() {                                                                             // 23242
        var viewValue = ctrl.$viewValue;                                                                               // 23243
                                                                                                                       // 23244
        $timeout.cancel(pendingDebounce);                                                                              // 23245
                                                                                                                       // 23246
        // If the view value has not changed then we should just exit, except in the case where there is               // 23247
        // a native validator on the element. In this case the validation state may have changed even though           // 23248
        // the viewValue has stayed empty.                                                                             // 23249
        if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {        // 23250
          return;                                                                                                      // 23251
        }                                                                                                              // 23252
        ctrl.$$lastCommittedViewValue = viewValue;                                                                     // 23253
                                                                                                                       // 23254
        // change to dirty                                                                                             // 23255
        if (ctrl.$pristine) {                                                                                          // 23256
          this.$setDirty();                                                                                            // 23257
        }                                                                                                              // 23258
        this.$$parseAndValidate();                                                                                     // 23259
      };                                                                                                               // 23260
                                                                                                                       // 23261
      this.$$parseAndValidate = function() {                                                                           // 23262
        var viewValue = ctrl.$$lastCommittedViewValue;                                                                 // 23263
        var modelValue = viewValue;                                                                                    // 23264
        parserValid = isUndefined(modelValue) ? undefined : true;                                                      // 23265
                                                                                                                       // 23266
        if (parserValid) {                                                                                             // 23267
          for (var i = 0; i < ctrl.$parsers.length; i++) {                                                             // 23268
            modelValue = ctrl.$parsers[i](modelValue);                                                                 // 23269
            if (isUndefined(modelValue)) {                                                                             // 23270
              parserValid = false;                                                                                     // 23271
              break;                                                                                                   // 23272
            }                                                                                                          // 23273
          }                                                                                                            // 23274
        }                                                                                                              // 23275
        if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                   // 23276
          // ctrl.$modelValue has not been touched yet...                                                              // 23277
          ctrl.$modelValue = ngModelGet($scope);                                                                       // 23278
        }                                                                                                              // 23279
        var prevModelValue = ctrl.$modelValue;                                                                         // 23280
        var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                // 23281
        ctrl.$$rawModelValue = modelValue;                                                                             // 23282
                                                                                                                       // 23283
        if (allowInvalid) {                                                                                            // 23284
          ctrl.$modelValue = modelValue;                                                                               // 23285
          writeToModelIfNeeded();                                                                                      // 23286
        }                                                                                                              // 23287
                                                                                                                       // 23288
        // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                  // 23289
        // This can happen if e.g. $setViewValue is called from inside a parser                                        // 23290
        ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                           // 23291
          if (!allowInvalid) {                                                                                         // 23292
            // Note: Don't check ctrl.$valid here, as we could have                                                    // 23293
            // external validators (e.g. calculated on the server),                                                    // 23294
            // that just call $setValidity and need the model value                                                    // 23295
            // to calculate their validity.                                                                            // 23296
            ctrl.$modelValue = allValid ? modelValue : undefined;                                                      // 23297
            writeToModelIfNeeded();                                                                                    // 23298
          }                                                                                                            // 23299
        });                                                                                                            // 23300
                                                                                                                       // 23301
        function writeToModelIfNeeded() {                                                                              // 23302
          if (ctrl.$modelValue !== prevModelValue) {                                                                   // 23303
            ctrl.$$writeModelToScope();                                                                                // 23304
          }                                                                                                            // 23305
        }                                                                                                              // 23306
      };                                                                                                               // 23307
                                                                                                                       // 23308
      this.$$writeModelToScope = function() {                                                                          // 23309
        ngModelSet($scope, ctrl.$modelValue);                                                                          // 23310
        forEach(ctrl.$viewChangeListeners, function(listener) {                                                        // 23311
          try {                                                                                                        // 23312
            listener();                                                                                                // 23313
          } catch (e) {                                                                                                // 23314
            $exceptionHandler(e);                                                                                      // 23315
          }                                                                                                            // 23316
        });                                                                                                            // 23317
      };                                                                                                               // 23318
                                                                                                                       // 23319
      /**                                                                                                              // 23320
       * @ngdoc method                                                                                                 // 23321
       * @name ngModel.NgModelController#$setViewValue                                                                 // 23322
       *                                                                                                               // 23323
       * @description                                                                                                  // 23324
       * Update the view value.                                                                                        // 23325
       *                                                                                                               // 23326
       * This method should be called when an input directive want to change the view value; typically,                // 23327
       * this is done from within a DOM event handler.                                                                 // 23328
       *                                                                                                               // 23329
       * For example {@link ng.directive:input input} calls it when the value of the input changes and                 // 23330
       * {@link ng.directive:select select} calls it when an option is selected.                                       // 23331
       *                                                                                                               // 23332
       * If the new `value` is an object (rather than a string or a number), we should make a copy of the              // 23333
       * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep               // 23334
       * watch of objects, it only looks for a change of identity. If you only change the property of                  // 23335
       * the object then ngModel will not realise that the object has changed and will not invoke the                  // 23336
       * `$parsers` and `$validators` pipelines.                                                                       // 23337
       *                                                                                                               // 23338
       * For this reason, you should not change properties of the copy once it has been passed to                      // 23339
       * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.                  // 23340
       *                                                                                                               // 23341
       * When this method is called, the new `value` will be staged for committing through the `$parsers`              // 23342
       * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged         // 23343
       * value sent directly for processing, finally to be applied to `$modelValue` and then the                       // 23344
       * **expression** specified in the `ng-model` attribute.                                                         // 23345
       *                                                                                                               // 23346
       * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.                  // 23347
       *                                                                                                               // 23348
       * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`              // 23349
       * and the `default` trigger is not listed, all those actions will remain pending until one of the               // 23350
       * `updateOn` events is triggered on the DOM element.                                                            // 23351
       * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                 // 23352
       * directive is used with a custom debounce for this particular event.                                           // 23353
       *                                                                                                               // 23354
       * Note that calling this function does not trigger a `$digest`.                                                 // 23355
       *                                                                                                               // 23356
       * @param {string} value Value from the view.                                                                    // 23357
       * @param {string} trigger Event that triggered the update.                                                      // 23358
       */                                                                                                              // 23359
      this.$setViewValue = function(value, trigger) {                                                                  // 23360
        ctrl.$viewValue = value;                                                                                       // 23361
        if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                         // 23362
          ctrl.$$debounceViewValueCommit(trigger);                                                                     // 23363
        }                                                                                                              // 23364
      };                                                                                                               // 23365
                                                                                                                       // 23366
      this.$$debounceViewValueCommit = function(trigger) {                                                             // 23367
        var debounceDelay = 0,                                                                                         // 23368
          options = ctrl.$options,                                                                                     // 23369
          debounce;                                                                                                    // 23370
                                                                                                                       // 23371
        if (options && isDefined(options.debounce)) {                                                                  // 23372
          debounce = options.debounce;                                                                                 // 23373
          if (isNumber(debounce)) {                                                                                    // 23374
            debounceDelay = debounce;                                                                                  // 23375
          } else if (isNumber(debounce[trigger])) {                                                                    // 23376
            debounceDelay = debounce[trigger];                                                                         // 23377
          } else if (isNumber(debounce['default'])) {                                                                  // 23378
            debounceDelay = debounce['default'];                                                                       // 23379
          }                                                                                                            // 23380
        }                                                                                                              // 23381
                                                                                                                       // 23382
        $timeout.cancel(pendingDebounce);                                                                              // 23383
        if (debounceDelay) {                                                                                           // 23384
          pendingDebounce = $timeout(function() {                                                                      // 23385
            ctrl.$commitViewValue();                                                                                   // 23386
          }, debounceDelay);                                                                                           // 23387
        } else if ($rootScope.$$phase) {                                                                               // 23388
          ctrl.$commitViewValue();                                                                                     // 23389
        } else {                                                                                                       // 23390
          $scope.$apply(function() {                                                                                   // 23391
            ctrl.$commitViewValue();                                                                                   // 23392
          });                                                                                                          // 23393
        }                                                                                                              // 23394
      };                                                                                                               // 23395
                                                                                                                       // 23396
      // model -> value                                                                                                // 23397
      // Note: we cannot use a normal scope.$watch as we want to detect the following:                                 // 23398
      // 1. scope value is 'a'                                                                                         // 23399
      // 2. user enters 'b'                                                                                            // 23400
      // 3. ng-change kicks in and reverts scope value to 'a'                                                          // 23401
      //    -> scope value did not change since the last digest as                                                     // 23402
      //       ng-change executes in apply phase                                                                       // 23403
      // 4. view should be changed back to 'a'                                                                         // 23404
      $scope.$watch(function ngModelWatch() {                                                                          // 23405
        var modelValue = ngModelGet($scope);                                                                           // 23406
                                                                                                                       // 23407
        // if scope model value and ngModel value are out of sync                                                      // 23408
        // TODO(perf): why not move this to the action fn?                                                             // 23409
        if (modelValue !== ctrl.$modelValue) {                                                                         // 23410
          ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                        // 23411
          parserValid = undefined;                                                                                     // 23412
                                                                                                                       // 23413
          var formatters = ctrl.$formatters,                                                                           // 23414
            idx = formatters.length;                                                                                   // 23415
                                                                                                                       // 23416
          var viewValue = modelValue;                                                                                  // 23417
          while (idx--) {                                                                                              // 23418
            viewValue = formatters[idx](viewValue);                                                                    // 23419
          }                                                                                                            // 23420
          if (ctrl.$viewValue !== viewValue) {                                                                         // 23421
            ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                               // 23422
            ctrl.$render();                                                                                            // 23423
                                                                                                                       // 23424
            ctrl.$$runValidators(modelValue, viewValue, noop);                                                         // 23425
          }                                                                                                            // 23426
        }                                                                                                              // 23427
                                                                                                                       // 23428
        return modelValue;                                                                                             // 23429
      });                                                                                                              // 23430
    }];                                                                                                                // 23431
                                                                                                                       // 23432
                                                                                                                       // 23433
  /**                                                                                                                  // 23434
   * @ngdoc directive                                                                                                  // 23435
   * @name ngModel                                                                                                     // 23436
   *                                                                                                                   // 23437
   * @element input                                                                                                    // 23438
   * @priority 1                                                                                                       // 23439
   *                                                                                                                   // 23440
   * @description                                                                                                      // 23441
   * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                       // 23442
   * property on the scope using {@link ngModel.NgModelController NgModelController},                                  // 23443
   * which is created and exposed by this directive.                                                                   // 23444
   *                                                                                                                   // 23445
   * `ngModel` is responsible for:                                                                                     // 23446
   *                                                                                                                   // 23447
   * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                 // 23448
   *   require.                                                                                                        // 23449
   * - Providing validation behavior (i.e. required, number, email, url).                                              // 23450
   * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).         // 23451
   * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
   * - Registering the control with its parent {@link ng.directive:form form}.                                         // 23453
   *                                                                                                                   // 23454
   * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                        // 23455
   * current scope. If the property doesn't already exist on this scope, it will be created                            // 23456
   * implicitly and added to the scope.                                                                                // 23457
   *                                                                                                                   // 23458
   * For best practices on using `ngModel`, see:                                                                       // 23459
   *                                                                                                                   // 23460
   *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                        // 23461
   *                                                                                                                   // 23462
   * For basic examples, how to use `ngModel`, see:                                                                    // 23463
   *                                                                                                                   // 23464
   *  - {@link ng.directive:input input}                                                                               // 23465
   *    - {@link input[text] text}                                                                                     // 23466
   *    - {@link input[checkbox] checkbox}                                                                             // 23467
   *    - {@link input[radio] radio}                                                                                   // 23468
   *    - {@link input[number] number}                                                                                 // 23469
   *    - {@link input[email] email}                                                                                   // 23470
   *    - {@link input[url] url}                                                                                       // 23471
   *    - {@link input[date] date}                                                                                     // 23472
   *    - {@link input[datetime-local] datetime-local}                                                                 // 23473
   *    - {@link input[time] time}                                                                                     // 23474
   *    - {@link input[month] month}                                                                                   // 23475
   *    - {@link input[week] week}                                                                                     // 23476
   *  - {@link ng.directive:select select}                                                                             // 23477
   *  - {@link ng.directive:textarea textarea}                                                                         // 23478
   *                                                                                                                   // 23479
   * # CSS classes                                                                                                     // 23480
   * The following CSS classes are added and removed on the associated input/select/textarea element                   // 23481
   * depending on the validity of the model.                                                                           // 23482
   *                                                                                                                   // 23483
   *  - `ng-valid`: the model is valid                                                                                 // 23484
   *  - `ng-invalid`: the model is invalid                                                                             // 23485
   *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                   // 23486
   *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                               // 23487
   *  - `ng-pristine`: the control hasn't been interacted with yet                                                     // 23488
   *  - `ng-dirty`: the control has been interacted with                                                               // 23489
   *  - `ng-touched`: the control has been blurred                                                                     // 23490
   *  - `ng-untouched`: the control hasn't been blurred                                                                // 23491
   *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                           // 23492
   *                                                                                                                   // 23493
   * Keep in mind that ngAnimate can detect each of these classes when added and removed.                              // 23494
   *                                                                                                                   // 23495
   * ## Animation Hooks                                                                                                // 23496
   *                                                                                                                   // 23497
   * Animations within models are triggered when any of the associated CSS classes are added and removed               // 23498
   * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,              // 23499
   * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.            // 23500
   * The animations that are triggered within ngModel are similar to how they work in ngClass and                      // 23501
   * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                          // 23502
   *                                                                                                                   // 23503
   * The following example shows a simple way to utilize CSS transitions to style an input element                     // 23504
   * that has been rendered as invalid after it has been validated:                                                    // 23505
   *                                                                                                                   // 23506
   * <pre>                                                                                                             // 23507
   * //be sure to include ngAnimate as a module to hook into more                                                      // 23508
   * //advanced animations                                                                                             // 23509
   * .my-input {                                                                                                       // 23510
 *   transition:0.5s linear all;                                                                                       // 23511
 *   background: white;                                                                                                // 23512
 * }                                                                                                                   // 23513
   * .my-input.ng-invalid {                                                                                            // 23514
 *   background: red;                                                                                                  // 23515
 *   color:white;                                                                                                      // 23516
 * }                                                                                                                   // 23517
   * </pre>                                                                                                            // 23518
   *                                                                                                                   // 23519
   * @example                                                                                                          // 23520
   * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">                        // 23521
   <file name="index.html">                                                                                            // 23522
   <script>                                                                                                            // 23523
   angular.module('inputExample', [])                                                                                  // 23524
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 23525
            $scope.val = '1';                                                                                          // 23526
          }]);                                                                                                         // 23527
   </script>                                                                                                           // 23528
   <style>                                                                                                             // 23529
   .my-input {                                                                                                         // 23530
           -webkit-transition:all linear 0.5s;                                                                         // 23531
           transition:all linear 0.5s;                                                                                 // 23532
           background: transparent;                                                                                    // 23533
         }                                                                                                             // 23534
   .my-input.ng-invalid {                                                                                              // 23535
           color:white;                                                                                                // 23536
           background: red;                                                                                            // 23537
         }                                                                                                             // 23538
   </style>                                                                                                            // 23539
   Update input to see transitions when valid/invalid.                                                                 // 23540
   Integer is a valid value.                                                                                           // 23541
   <form name="testForm" ng-controller="ExampleController">                                                            // 23542
   <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />                                          // 23543
   </form>                                                                                                             // 23544
   </file>                                                                                                             // 23545
   * </example>                                                                                                        // 23546
   *                                                                                                                   // 23547
   * ## Binding to a getter/setter                                                                                     // 23548
   *                                                                                                                   // 23549
   * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                       // 23550
   * function that returns a representation of the model when called with zero arguments, and sets                     // 23551
   * the internal state of a model when called with an argument. It's sometimes useful to use this                     // 23552
   * for models that have an internal representation that's different than what the model exposes                      // 23553
   * to the view.                                                                                                      // 23554
   *                                                                                                                   // 23555
   * <div class="alert alert-success">                                                                                 // 23556
   * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                     // 23557
   * frequently than other parts of your code.                                                                         // 23558
   * </div>                                                                                                            // 23559
   *                                                                                                                   // 23560
   * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that                    // 23561
   * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to                    // 23562
   * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                     // 23563
   * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                    // 23564
   *                                                                                                                   // 23565
   * The following example shows how to use `ngModel` with a getter/setter:                                            // 23566
   *                                                                                                                   // 23567
   * @example                                                                                                          // 23568
   * <example name="ngModel-getter-setter" module="getterSetterExample">                                               // 23569
   <file name="index.html">                                                                                            // 23570
   <div ng-controller="ExampleController">                                                                             // 23571
   <form name="userForm">                                                                                              // 23572
   Name:                                                                                                               // 23573
   <input type="text" name="userName"                                                                                  // 23574
   ng-model="user.name"                                                                                                // 23575
   ng-model-options="{ getterSetter: true }" />                                                                        // 23576
   </form>                                                                                                             // 23577
   <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                          // 23578
   </div>                                                                                                              // 23579
   </file>                                                                                                             // 23580
   <file name="app.js">                                                                                                // 23581
   angular.module('getterSetterExample', [])                                                                           // 23582
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 23583
           var _name = 'Brian';                                                                                        // 23584
           $scope.user = {                                                                                             // 23585
             name: function(newName) {                                                                                 // 23586
               if (angular.isDefined(newName)) {                                                                       // 23587
                 _name = newName;                                                                                      // 23588
               }                                                                                                       // 23589
               return _name;                                                                                           // 23590
             }                                                                                                         // 23591
           };                                                                                                          // 23592
         }]);                                                                                                          // 23593
   </file>                                                                                                             // 23594
   * </example>                                                                                                        // 23595
   */                                                                                                                  // 23596
  var ngModelDirective = ['$rootScope', function($rootScope) {                                                         // 23597
    return {                                                                                                           // 23598
      restrict: 'A',                                                                                                   // 23599
      require: ['ngModel', '^?form', '^?ngModelOptions'],                                                              // 23600
      controller: NgModelController,                                                                                   // 23601
      // Prelink needs to run before any input directive                                                               // 23602
      // so that we can set the NgModelOptions in NgModelController                                                    // 23603
      // before anyone else uses it.                                                                                   // 23604
      priority: 1,                                                                                                     // 23605
      compile: function ngModelCompile(element) {                                                                      // 23606
        // Setup initial state of the control                                                                          // 23607
        element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                              // 23608
                                                                                                                       // 23609
        return {                                                                                                       // 23610
          pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                  // 23611
            var modelCtrl = ctrls[0],                                                                                  // 23612
              formCtrl = ctrls[1] || nullFormCtrl;                                                                     // 23613
                                                                                                                       // 23614
            modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                     // 23615
                                                                                                                       // 23616
            // notify others, especially parent forms                                                                  // 23617
            formCtrl.$addControl(modelCtrl);                                                                           // 23618
                                                                                                                       // 23619
            attr.$observe('name', function(newValue) {                                                                 // 23620
              if (modelCtrl.$name !== newValue) {                                                                      // 23621
                formCtrl.$$renameControl(modelCtrl, newValue);                                                         // 23622
              }                                                                                                        // 23623
            });                                                                                                        // 23624
                                                                                                                       // 23625
            scope.$on('$destroy', function() {                                                                         // 23626
              formCtrl.$removeControl(modelCtrl);                                                                      // 23627
            });                                                                                                        // 23628
          },                                                                                                           // 23629
          post: function ngModelPostLink(scope, element, attr, ctrls) {                                                // 23630
            var modelCtrl = ctrls[0];                                                                                  // 23631
            if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                   // 23632
              element.on(modelCtrl.$options.updateOn, function(ev) {                                                   // 23633
                modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                    // 23634
              });                                                                                                      // 23635
            }                                                                                                          // 23636
                                                                                                                       // 23637
            element.on('blur', function(ev) {                                                                          // 23638
              if (modelCtrl.$touched) return;                                                                          // 23639
                                                                                                                       // 23640
              if ($rootScope.$$phase) {                                                                                // 23641
                scope.$evalAsync(modelCtrl.$setTouched);                                                               // 23642
              } else {                                                                                                 // 23643
                scope.$apply(modelCtrl.$setTouched);                                                                   // 23644
              }                                                                                                        // 23645
            });                                                                                                        // 23646
          }                                                                                                            // 23647
        };                                                                                                             // 23648
      }                                                                                                                // 23649
    };                                                                                                                 // 23650
  }];                                                                                                                  // 23651
                                                                                                                       // 23652
  var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;                                                                        // 23653
                                                                                                                       // 23654
  /**                                                                                                                  // 23655
   * @ngdoc directive                                                                                                  // 23656
   * @name ngModelOptions                                                                                              // 23657
   *                                                                                                                   // 23658
   * @description                                                                                                      // 23659
   * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                 // 23660
   * events that will trigger a model update and/or a debouncing delay so that the actual update only                  // 23661
   * takes place when a timer expires; this timer will be reset after another change takes place.                      // 23662
   *                                                                                                                   // 23663
   * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                   // 23664
   * be different than the value in the actual model. This means that if you update the model you                      // 23665
   * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in          // 23666
   * order to make sure it is synchronized with the model and that any debounced action is canceled.                   // 23667
   *                                                                                                                   // 23668
   * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                 // 23669
   * method is by making sure the input is placed inside a form that has a `name` attribute. This is                   // 23670
   * important because `form` controllers are published to the related scope under the name in their                   // 23671
   * `name` attribute.                                                                                                 // 23672
   *                                                                                                                   // 23673
   * Any pending changes will take place immediately when an enclosing form is submitted via the                       // 23674
   * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                 // 23675
   * to have access to the updated model.                                                                              // 23676
   *                                                                                                                   // 23677
   * `ngModelOptions` has an effect on the element it's declared on and its descendants.                               // 23678
   *                                                                                                                   // 23679
   * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                             // 23680
   *   - `updateOn`: string specifying which event should the input be bound to. You can set several                   // 23681
   *     events using an space delimited list. There is a special event called `default` that                          // 23682
   *     matches the default events belonging of the control.                                                          // 23683
   *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                   // 23684
   *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                  // 23685
   *     custom value for each event. For example:                                                                     // 23686
   *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`                      // 23687
   *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                  // 23688
   *     not validate correctly instead of the default behavior of setting the model to undefined.                     // 23689
   *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                     // 23690
   `ngModel` as getters/setters.                                                                                       // 23691
   *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                // 23692
   *     `<input type="date">`, `<input type="time">`, ... . Right now, the only supported value is `'UTC'`,           // 23693
   *     otherwise the default timezone of the browser will be used.                                                   // 23694
   *                                                                                                                   // 23695
   * @example                                                                                                          // 23696
                                                                                                                       // 23697
   The following example shows how to override immediate updates. Changes on the inputs within the                     // 23698
   form will update the model only when the control loses focus (blur event). If `escape` key is                       // 23699
   pressed while the input field is focused, the value is reset to the value in the current model.                     // 23700
                                                                                                                       // 23701
   <example name="ngModelOptions-directive-blur" module="optionsExample">                                              // 23702
   <file name="index.html">                                                                                            // 23703
   <div ng-controller="ExampleController">                                                                             // 23704
   <form name="userForm">                                                                                              // 23705
   Name:                                                                                                               // 23706
   <input type="text" name="userName"                                                                                  // 23707
   ng-model="user.name"                                                                                                // 23708
   ng-model-options="{ updateOn: 'blur' }"                                                                             // 23709
   ng-keyup="cancel($event)" /><br />                                                                                  // 23710
                                                                                                                       // 23711
   Other data:                                                                                                         // 23712
   <input type="text" ng-model="user.data" /><br />                                                                    // 23713
   </form>                                                                                                             // 23714
   <pre>user.name = <span ng-bind="user.name"></span></pre>                                                            // 23715
   </div>                                                                                                              // 23716
   </file>                                                                                                             // 23717
   <file name="app.js">                                                                                                // 23718
   angular.module('optionsExample', [])                                                                                // 23719
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 23720
          $scope.user = { name: 'say', data: '' };                                                                     // 23721
                                                                                                                       // 23722
          $scope.cancel = function(e) {                                                                                // 23723
            if (e.keyCode == 27) {                                                                                     // 23724
              $scope.userForm.userName.$rollbackViewValue();                                                           // 23725
            }                                                                                                          // 23726
          };                                                                                                           // 23727
        }]);                                                                                                           // 23728
   </file>                                                                                                             // 23729
   <file name="protractor.js" type="protractor">                                                                       // 23730
   var model = element(by.binding('user.name'));                                                                       // 23731
   var input = element(by.model('user.name'));                                                                         // 23732
   var other = element(by.model('user.data'));                                                                         // 23733
                                                                                                                       // 23734
   it('should allow custom events', function() {                                                                       // 23735
        input.sendKeys(' hello');                                                                                      // 23736
        input.click();                                                                                                 // 23737
        expect(model.getText()).toEqual('say');                                                                        // 23738
        other.click();                                                                                                 // 23739
        expect(model.getText()).toEqual('say hello');                                                                  // 23740
      });                                                                                                              // 23741
                                                                                                                       // 23742
   it('should $rollbackViewValue when model changes', function() {                                                     // 23743
        input.sendKeys(' hello');                                                                                      // 23744
        expect(input.getAttribute('value')).toEqual('say hello');                                                      // 23745
        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 23746
        expect(input.getAttribute('value')).toEqual('say');                                                            // 23747
        other.click();                                                                                                 // 23748
        expect(model.getText()).toEqual('say');                                                                        // 23749
      });                                                                                                              // 23750
   </file>                                                                                                             // 23751
   </example>                                                                                                          // 23752
                                                                                                                       // 23753
   This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                   // 23754
   If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                     // 23755
                                                                                                                       // 23756
   <example name="ngModelOptions-directive-debounce" module="optionsExample">                                          // 23757
   <file name="index.html">                                                                                            // 23758
   <div ng-controller="ExampleController">                                                                             // 23759
   <form name="userForm">                                                                                              // 23760
   Name:                                                                                                               // 23761
   <input type="text" name="userName"                                                                                  // 23762
   ng-model="user.name"                                                                                                // 23763
   ng-model-options="{ debounce: 1000 }" />                                                                            // 23764
   <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />                        // 23765
   </form>                                                                                                             // 23766
   <pre>user.name = <span ng-bind="user.name"></span></pre>                                                            // 23767
   </div>                                                                                                              // 23768
   </file>                                                                                                             // 23769
   <file name="app.js">                                                                                                // 23770
   angular.module('optionsExample', [])                                                                                // 23771
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 23772
          $scope.user = { name: 'say' };                                                                               // 23773
        }]);                                                                                                           // 23774
   </file>                                                                                                             // 23775
   </example>                                                                                                          // 23776
                                                                                                                       // 23777
   This one shows how to bind to getter/setters:                                                                       // 23778
                                                                                                                       // 23779
   <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">                                // 23780
   <file name="index.html">                                                                                            // 23781
   <div ng-controller="ExampleController">                                                                             // 23782
   <form name="userForm">                                                                                              // 23783
   Name:                                                                                                               // 23784
   <input type="text" name="userName"                                                                                  // 23785
   ng-model="user.name"                                                                                                // 23786
   ng-model-options="{ getterSetter: true }" />                                                                        // 23787
   </form>                                                                                                             // 23788
   <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                          // 23789
   </div>                                                                                                              // 23790
   </file>                                                                                                             // 23791
   <file name="app.js">                                                                                                // 23792
   angular.module('getterSetterExample', [])                                                                           // 23793
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 23794
          var _name = 'Brian';                                                                                         // 23795
          $scope.user = {                                                                                              // 23796
            name: function(newName) {                                                                                  // 23797
              return angular.isDefined(newName) ? (_name = newName) : _name;                                           // 23798
            }                                                                                                          // 23799
          };                                                                                                           // 23800
        }]);                                                                                                           // 23801
   </file>                                                                                                             // 23802
   </example>                                                                                                          // 23803
   */                                                                                                                  // 23804
  var ngModelOptionsDirective = function() {                                                                           // 23805
    return {                                                                                                           // 23806
      restrict: 'A',                                                                                                   // 23807
      controller: ['$scope', '$attrs', function($scope, $attrs) {                                                      // 23808
        var that = this;                                                                                               // 23809
        this.$options = $scope.$eval($attrs.ngModelOptions);                                                           // 23810
        // Allow adding/overriding bound events                                                                        // 23811
        if (this.$options.updateOn !== undefined) {                                                                    // 23812
          this.$options.updateOnDefault = false;                                                                       // 23813
          // extract "default" pseudo-event from list of events that can trigger a model update                        // 23814
          this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                    // 23815
            that.$options.updateOnDefault = true;                                                                      // 23816
            return ' ';                                                                                                // 23817
          }));                                                                                                         // 23818
        } else {                                                                                                       // 23819
          this.$options.updateOnDefault = true;                                                                        // 23820
        }                                                                                                              // 23821
      }]                                                                                                               // 23822
    };                                                                                                                 // 23823
  };                                                                                                                   // 23824
                                                                                                                       // 23825
                                                                                                                       // 23826
                                                                                                                       // 23827
// helper methods                                                                                                      // 23828
  function addSetValidityMethod(context) {                                                                             // 23829
    var ctrl = context.ctrl,                                                                                           // 23830
      $element = context.$element,                                                                                     // 23831
      classCache = {},                                                                                                 // 23832
      set = context.set,                                                                                               // 23833
      unset = context.unset,                                                                                           // 23834
      parentForm = context.parentForm,                                                                                 // 23835
      $animate = context.$animate;                                                                                     // 23836
                                                                                                                       // 23837
    classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                           // 23838
                                                                                                                       // 23839
    ctrl.$setValidity = setValidity;                                                                                   // 23840
                                                                                                                       // 23841
    function setValidity(validationErrorKey, state, controller) {                                                      // 23842
      if (state === undefined) {                                                                                       // 23843
        createAndSet('$pending', validationErrorKey, controller);                                                      // 23844
      } else {                                                                                                         // 23845
        unsetAndCleanup('$pending', validationErrorKey, controller);                                                   // 23846
      }                                                                                                                // 23847
      if (!isBoolean(state)) {                                                                                         // 23848
        unset(ctrl.$error, validationErrorKey, controller);                                                            // 23849
        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 23850
      } else {                                                                                                         // 23851
        if (state) {                                                                                                   // 23852
          unset(ctrl.$error, validationErrorKey, controller);                                                          // 23853
          set(ctrl.$$success, validationErrorKey, controller);                                                         // 23854
        } else {                                                                                                       // 23855
          set(ctrl.$error, validationErrorKey, controller);                                                            // 23856
          unset(ctrl.$$success, validationErrorKey, controller);                                                       // 23857
        }                                                                                                              // 23858
      }                                                                                                                // 23859
      if (ctrl.$pending) {                                                                                             // 23860
        cachedToggleClass(PENDING_CLASS, true);                                                                        // 23861
        ctrl.$valid = ctrl.$invalid = undefined;                                                                       // 23862
        toggleValidationCss('', null);                                                                                 // 23863
      } else {                                                                                                         // 23864
        cachedToggleClass(PENDING_CLASS, false);                                                                       // 23865
        ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                      // 23866
        ctrl.$invalid = !ctrl.$valid;                                                                                  // 23867
        toggleValidationCss('', ctrl.$valid);                                                                          // 23868
      }                                                                                                                // 23869
                                                                                                                       // 23870
      // re-read the state as the set/unset methods could have                                                         // 23871
      // combined state in ctrl.$error[validationError] (used for forms),                                              // 23872
      // where setting/unsetting only increments/decrements the value,                                                 // 23873
      // and does not replace it.                                                                                      // 23874
      var combinedState;                                                                                               // 23875
      if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                        // 23876
        combinedState = undefined;                                                                                     // 23877
      } else if (ctrl.$error[validationErrorKey]) {                                                                    // 23878
        combinedState = false;                                                                                         // 23879
      } else if (ctrl.$$success[validationErrorKey]) {                                                                 // 23880
        combinedState = true;                                                                                          // 23881
      } else {                                                                                                         // 23882
        combinedState = null;                                                                                          // 23883
      }                                                                                                                // 23884
                                                                                                                       // 23885
      toggleValidationCss(validationErrorKey, combinedState);                                                          // 23886
      parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                                // 23887
    }                                                                                                                  // 23888
                                                                                                                       // 23889
    function createAndSet(name, value, controller) {                                                                   // 23890
      if (!ctrl[name]) {                                                                                               // 23891
        ctrl[name] = {};                                                                                               // 23892
      }                                                                                                                // 23893
      set(ctrl[name], value, controller);                                                                              // 23894
    }                                                                                                                  // 23895
                                                                                                                       // 23896
    function unsetAndCleanup(name, value, controller) {                                                                // 23897
      if (ctrl[name]) {                                                                                                // 23898
        unset(ctrl[name], value, controller);                                                                          // 23899
      }                                                                                                                // 23900
      if (isObjectEmpty(ctrl[name])) {                                                                                 // 23901
        ctrl[name] = undefined;                                                                                        // 23902
      }                                                                                                                // 23903
    }                                                                                                                  // 23904
                                                                                                                       // 23905
    function cachedToggleClass(className, switchValue) {                                                               // 23906
      if (switchValue && !classCache[className]) {                                                                     // 23907
        $animate.addClass($element, className);                                                                        // 23908
        classCache[className] = true;                                                                                  // 23909
      } else if (!switchValue && classCache[className]) {                                                              // 23910
        $animate.removeClass($element, className);                                                                     // 23911
        classCache[className] = false;                                                                                 // 23912
      }                                                                                                                // 23913
    }                                                                                                                  // 23914
                                                                                                                       // 23915
    function toggleValidationCss(validationErrorKey, isValid) {                                                        // 23916
      validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                        // 23917
                                                                                                                       // 23918
      cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                           // 23919
      cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                        // 23920
    }                                                                                                                  // 23921
  }                                                                                                                    // 23922
                                                                                                                       // 23923
  function isObjectEmpty(obj) {                                                                                        // 23924
    if (obj) {                                                                                                         // 23925
      for (var prop in obj) {                                                                                          // 23926
        return false;                                                                                                  // 23927
      }                                                                                                                // 23928
    }                                                                                                                  // 23929
    return true;                                                                                                       // 23930
  }                                                                                                                    // 23931
                                                                                                                       // 23932
  /**                                                                                                                  // 23933
   * @ngdoc directive                                                                                                  // 23934
   * @name ngNonBindable                                                                                               // 23935
   * @restrict AC                                                                                                      // 23936
   * @priority 1000                                                                                                    // 23937
   *                                                                                                                   // 23938
   * @description                                                                                                      // 23939
   * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                    // 23940
   * DOM element. This is useful if the element contains what appears to be Angular directives and                     // 23941
   * bindings but which should be ignored by Angular. This could be the case if you have a site that                   // 23942
   * displays snippets of code, for instance.                                                                          // 23943
   *                                                                                                                   // 23944
   * @element ANY                                                                                                      // 23945
   *                                                                                                                   // 23946
   * @example                                                                                                          // 23947
   * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                 // 23948
   * but the one wrapped in `ngNonBindable` is left alone.                                                             // 23949
   *                                                                                                                   // 23950
   * @example                                                                                                          // 23951
   <example>                                                                                                           // 23952
   <file name="index.html">                                                                                            // 23953
   <div>Normal: {{1 + 2}}</div>                                                                                        // 23954
   <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                       // 23955
   </file>                                                                                                             // 23956
   <file name="protractor.js" type="protractor">                                                                       // 23957
   it('should check ng-non-bindable', function() {                                                                     // 23958
         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 23959
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);                                        // 23960
       });                                                                                                             // 23961
   </file>                                                                                                             // 23962
   </example>                                                                                                          // 23963
   */                                                                                                                  // 23964
  var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                        // 23965
                                                                                                                       // 23966
  /**                                                                                                                  // 23967
   * @ngdoc directive                                                                                                  // 23968
   * @name ngPluralize                                                                                                 // 23969
   * @restrict EA                                                                                                      // 23970
   *                                                                                                                   // 23971
   * @description                                                                                                      // 23972
   * `ngPluralize` is a directive that displays messages according to en-US localization rules.                        // 23973
   * These rules are bundled with angular.js, but can be overridden                                                    // 23974
   * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                              // 23975
   * by specifying the mappings between                                                                                // 23976
   * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)         // 23977
   * and the strings to be displayed.                                                                                  // 23978
   *                                                                                                                   // 23979
   * # Plural categories and explicit number rules                                                                     // 23980
   * There are two                                                                                                     // 23981
   * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)         // 23982
   * in Angular's default en-US locale: "one" and "other".                                                             // 23983
   *                                                                                                                   // 23984
   * While a plural category may match many numbers (for example, in en-US locale, "other" can match                   // 23985
   * any number that is not 1), an explicit number rule can only match one number. For example, the                    // 23986
   * explicit number rule for "3" matches the number 3. There are examples of plural categories                        // 23987
   * and explicit number rules throughout the rest of this documentation.                                              // 23988
   *                                                                                                                   // 23989
   * # Configuring ngPluralize                                                                                         // 23990
   * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                          // 23991
   * You can also provide an optional attribute, `offset`.                                                             // 23992
   *                                                                                                                   // 23993
   * The value of the `count` attribute can be either a string or an {@link guide/expression                           // 23994
 * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 23995
   *                                                                                                                   // 23996
   * The `when` attribute specifies the mappings between plural categories and the actual                              // 23997
   * string to be displayed. The value of the attribute should be a JSON object.                                       // 23998
   *                                                                                                                   // 23999
   * The following example shows how to configure ngPluralize:                                                         // 24000
   *                                                                                                                   // 24001
   * ```html                                                                                                           // 24002
   * <ng-pluralize count="personCount"                                                                                 // 24003
   when="{'0': 'Nobody is viewing.',                                                                                   // 24004
 *                      'one': '1 person is viewing.',                                                                 // 24005
 *                      'other': '{} people are viewing.'}">                                                           // 24006
   * </ng-pluralize>                                                                                                   // 24007
   *```                                                                                                                // 24008
   *                                                                                                                   // 24009
   * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not                              // 24010
   * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"                          // 24011
   * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for                        // 24012
   * other numbers, for example 12, so that instead of showing "12 people are viewing", you can                        // 24013
   * show "a dozen people are viewing".                                                                                // 24014
   *                                                                                                                   // 24015
   * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted               // 24016
   * into pluralized strings. In the previous example, Angular will replace `{}` with                                  // 24017
   * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                           // 24018
   * for <span ng-non-bindable>{{numberExpression}}</span>.                                                            // 24019
   *                                                                                                                   // 24020
   * # Configuring ngPluralize with offset                                                                             // 24021
   * The `offset` attribute allows further customization of pluralized text, which can result in                       // 24022
   * a better user experience. For example, instead of the message "4 people are viewing this document",               // 24023
   * you might display "John, Kate and 2 others are viewing this document".                                            // 24024
   * The offset attribute allows you to offset a number by any desired value.                                          // 24025
   * Let's take a look at an example:                                                                                  // 24026
   *                                                                                                                   // 24027
   * ```html                                                                                                           // 24028
   * <ng-pluralize count="personCount" offset=2                                                                        // 24029
   *               when="{'0': 'Nobody is viewing.',                                                                   // 24030
 *                      '1': '{{person1}} is viewing.',                                                                // 24031
 *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 24032
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 24033
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                        // 24034
   * </ng-pluralize>                                                                                                   // 24035
   * ```                                                                                                               // 24036
   *                                                                                                                   // 24037
   * Notice that we are still using two plural categories(one, other), but we added                                    // 24038
   * three explicit number rules 0, 1 and 2.                                                                           // 24039
   * When one person, perhaps John, views the document, "John is viewing" will be shown.                               // 24040
   * When three people view the document, no explicit number rule is found, so                                         // 24041
   * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                  // 24042
   * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"                  // 24043
   * is shown.                                                                                                         // 24044
   *                                                                                                                   // 24045
   * Note that when you specify offsets, you must provide explicit number rules for                                    // 24046
   * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                            // 24047
   * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                // 24048
   * plural categories "one" and "other".                                                                              // 24049
   *                                                                                                                   // 24050
   * @param {string|expression} count The variable to be bound to.                                                     // 24051
   * @param {string} when The mapping between plural category to its corresponding strings.                            // 24052
   * @param {number=} offset Offset to deduct from the total number.                                                   // 24053
   *                                                                                                                   // 24054
   * @example                                                                                                          // 24055
   <example module="pluralizeExample">                                                                                 // 24056
   <file name="index.html">                                                                                            // 24057
   <script>                                                                                                            // 24058
   angular.module('pluralizeExample', [])                                                                              // 24059
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 24060
              $scope.person1 = 'Igor';                                                                                 // 24061
              $scope.person2 = 'Misko';                                                                                // 24062
              $scope.personCount = 1;                                                                                  // 24063
            }]);                                                                                                       // 24064
   </script>                                                                                                           // 24065
   <div ng-controller="ExampleController">                                                                             // 24066
   Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>                                                 // 24067
   Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>                                                // 24068
   Number of People:<input type="text" ng-model="personCount" value="1" /><br/>                                        // 24069
                                                                                                                       // 24070
   <!--- Example with simple pluralization rules for en locale --->                                                    // 24071
   Without Offset:                                                                                                     // 24072
   <ng-pluralize count="personCount"                                                                                   // 24073
   when="{'0': 'Nobody is viewing.',                                                                                   // 24074
                               'one': '1 person is viewing.',                                                          // 24075
                               'other': '{} people are viewing.'}">                                                    // 24076
   </ng-pluralize><br>                                                                                                 // 24077
                                                                                                                       // 24078
   <!--- Example with offset --->                                                                                      // 24079
   With Offset(2):                                                                                                     // 24080
   <ng-pluralize count="personCount" offset=2                                                                          // 24081
   when="{'0': 'Nobody is viewing.',                                                                                   // 24082
                               '1': '{{person1}} is viewing.',                                                         // 24083
                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 24084
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 24085
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                 // 24086
   </ng-pluralize>                                                                                                     // 24087
   </div>                                                                                                              // 24088
   </file>                                                                                                             // 24089
   <file name="protractor.js" type="protractor">                                                                       // 24090
   it('should show correct pluralized string', function() {                                                            // 24091
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 24092
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 24093
          var countInput = element(by.model('personCount'));                                                           // 24094
                                                                                                                       // 24095
          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 24096
          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 24097
                                                                                                                       // 24098
          countInput.clear();                                                                                          // 24099
          countInput.sendKeys('0');                                                                                    // 24100
                                                                                                                       // 24101
          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 24102
          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 24103
                                                                                                                       // 24104
          countInput.clear();                                                                                          // 24105
          countInput.sendKeys('2');                                                                                    // 24106
                                                                                                                       // 24107
          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 24108
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 24109
                                                                                                                       // 24110
          countInput.clear();                                                                                          // 24111
          countInput.sendKeys('3');                                                                                    // 24112
                                                                                                                       // 24113
          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 24114
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 24115
                                                                                                                       // 24116
          countInput.clear();                                                                                          // 24117
          countInput.sendKeys('4');                                                                                    // 24118
                                                                                                                       // 24119
          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 24120
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 24121
        });                                                                                                            // 24122
   it('should show data-bound names', function() {                                                                     // 24123
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 24124
          var personCount = element(by.model('personCount'));                                                          // 24125
          var person1 = element(by.model('person1'));                                                                  // 24126
          var person2 = element(by.model('person2'));                                                                  // 24127
          personCount.clear();                                                                                         // 24128
          personCount.sendKeys('4');                                                                                   // 24129
          person1.clear();                                                                                             // 24130
          person1.sendKeys('Di');                                                                                      // 24131
          person2.clear();                                                                                             // 24132
          person2.sendKeys('Vojta');                                                                                   // 24133
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 24134
        });                                                                                                            // 24135
   </file>                                                                                                             // 24136
   </example>                                                                                                          // 24137
   */                                                                                                                  // 24138
  var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {                             // 24139
    var BRACE = /{}/g,                                                                                                 // 24140
      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 24141
                                                                                                                       // 24142
    return {                                                                                                           // 24143
      restrict: 'EA',                                                                                                  // 24144
      link: function(scope, element, attr) {                                                                           // 24145
        var numberExp = attr.count,                                                                                    // 24146
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 24147
          offset = attr.offset || 0,                                                                                   // 24148
          whens = scope.$eval(whenExp) || {},                                                                          // 24149
          whensExpFns = {},                                                                                            // 24150
          startSymbol = $interpolate.startSymbol(),                                                                    // 24151
          endSymbol = $interpolate.endSymbol(),                                                                        // 24152
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 24153
          watchRemover = angular.noop,                                                                                 // 24154
          lastCount;                                                                                                   // 24155
                                                                                                                       // 24156
        forEach(attr, function(expression, attributeName) {                                                            // 24157
          var tmpMatch = IS_WHEN.exec(attributeName);                                                                  // 24158
          if (tmpMatch) {                                                                                              // 24159
            var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                           // 24160
            whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                  // 24161
          }                                                                                                            // 24162
        });                                                                                                            // 24163
        forEach(whens, function(expression, key) {                                                                     // 24164
          whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                // 24165
                                                                                                                       // 24166
        });                                                                                                            // 24167
                                                                                                                       // 24168
        scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                              // 24169
          var count = parseFloat(newVal);                                                                              // 24170
          var countIsNaN = isNaN(count);                                                                               // 24171
                                                                                                                       // 24172
          if (!countIsNaN && !(count in whens)) {                                                                      // 24173
            // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                  // 24174
            // Otherwise, check it against pluralization rules in $locale service.                                     // 24175
            count = $locale.pluralCat(count - offset);                                                                 // 24176
          }                                                                                                            // 24177
                                                                                                                       // 24178
          // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                            // 24179
          // In JS `NaN !== NaN`, so we have to exlicitly check.                                                       // 24180
          if ((count !== lastCount) && !(countIsNaN && isNaN(lastCount))) {                                            // 24181
            watchRemover();                                                                                            // 24182
            watchRemover = scope.$watch(whensExpFns[count], updateElementText);                                        // 24183
            lastCount = count;                                                                                         // 24184
          }                                                                                                            // 24185
        });                                                                                                            // 24186
                                                                                                                       // 24187
        function updateElementText(newText) {                                                                          // 24188
          element.text(newText || '');                                                                                 // 24189
        }                                                                                                              // 24190
      }                                                                                                                // 24191
    };                                                                                                                 // 24192
  }];                                                                                                                  // 24193
                                                                                                                       // 24194
  /**                                                                                                                  // 24195
   * @ngdoc directive                                                                                                  // 24196
   * @name ngRepeat                                                                                                    // 24197
   *                                                                                                                   // 24198
   * @description                                                                                                      // 24199
   * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                   // 24200
   * instance gets its own scope, where the given loop variable is set to the current collection item,                 // 24201
   * and `$index` is set to the item index or key.                                                                     // 24202
   *                                                                                                                   // 24203
   * Special properties are exposed on the local scope of each template instance, including:                           // 24204
   *                                                                                                                   // 24205
   * | Variable  | Type            | Details                                                                     |     // 24206
   * |-----------|-----------------|-----------------------------------------------------------------------------|     // 24207
   * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |     // 24208
   * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |     // 24209
   * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |     // 24210
   * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |     // 24211
   * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |     // 24212
   * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |     // 24213
   *                                                                                                                   // 24214
   * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                      // 24215
   * This may be useful when, for instance, nesting ngRepeats.                                                         // 24216
   *                                                                                                                   // 24217
   * # Iterating over object properties                                                                                // 24218
   *                                                                                                                   // 24219
   * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                  // 24220
   * syntax:                                                                                                           // 24221
   *                                                                                                                   // 24222
   * ```js                                                                                                             // 24223
   * <div ng-repeat="(key, value) in myObj"> ... </div>                                                                // 24224
   * ```                                                                                                               // 24225
   *                                                                                                                   // 24226
   * You need to be aware that the JavaScript specification does not define what order                                 // 24227
   * it will return the keys for an object. In order to have a guaranteed deterministic order                          // 24228
   * for the keys, Angular versions up to and including 1.3 **sort the keys alphabetically**.                          // 24229
   *                                                                                                                   // 24230
   * If this is not desired, the recommended workaround is to convert your object into an array                        // 24231
   * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                       // 24232
   * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                 // 24233
   * or implement a `$watch` on the object yourself.                                                                   // 24234
   *                                                                                                                   // 24235
   * In version 1.4 we will remove the sorting, since it seems that browsers generally follow the                      // 24236
   * strategy of providing keys in the order in which they were defined, although there are exceptions                 // 24237
   * when keys are deleted and reinstated.                                                                             // 24238
   *                                                                                                                   // 24239
   *                                                                                                                   // 24240
   * # Tracking and Duplicates                                                                                         // 24241
   *                                                                                                                   // 24242
   * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:                // 24243
   *                                                                                                                   // 24244
   * * When an item is added, a new instance of the template is added to the DOM.                                      // 24245
   * * When an item is removed, its template instance is removed from the DOM.                                         // 24246
   * * When items are reordered, their respective templates are reordered in the DOM.                                  // 24247
   *                                                                                                                   // 24248
   * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when                             // 24249
   * there are duplicates, it is not possible to maintain a one-to-one mapping between collection                      // 24250
   * items and DOM elements.                                                                                           // 24251
   *                                                                                                                   // 24252
   * If you do need to repeat duplicate items, you can substitute the default tracking behavior                        // 24253
   * with your own using the `track by` expression.                                                                    // 24254
   *                                                                                                                   // 24255
   * For example, you may track items by the index of each item in the collection, using the                           // 24256
   * special scope property `$index`:                                                                                  // 24257
   * ```html                                                                                                           // 24258
   *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">                                                        // 24259
   *      {{n}}                                                                                                        // 24260
   *    </div>                                                                                                         // 24261
   * ```                                                                                                               // 24262
   *                                                                                                                   // 24263
   * You may use arbitrary expressions in `track by`, including references to custom functions                         // 24264
   * on the scope:                                                                                                     // 24265
   * ```html                                                                                                           // 24266
   *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">                                         // 24267
   *      {{n}}                                                                                                        // 24268
   *    </div>                                                                                                         // 24269
   * ```                                                                                                               // 24270
   *                                                                                                                   // 24271
   * If you are working with objects that have an identifier property, you can track                                   // 24272
   * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                      // 24273
   * will not have to rebuild the DOM elements for items it has already rendered, even if the                          // 24274
   * JavaScript objects in the collection have been substituted for new ones:                                          // 24275
   * ```html                                                                                                           // 24276
   *    <div ng-repeat="model in collection track by model.id">                                                        // 24277
   *      {{model.name}}                                                                                               // 24278
   *    </div>                                                                                                         // 24279
   * ```                                                                                                               // 24280
   *                                                                                                                   // 24281
   * When no `track by` expression is provided, it is equivalent to tracking by the built-in                           // 24282
   * `$id` function, which tracks items by their identity:                                                             // 24283
   * ```html                                                                                                           // 24284
   *    <div ng-repeat="obj in collection track by $id(obj)">                                                          // 24285
   *      {{obj.prop}}                                                                                                 // 24286
   *    </div>                                                                                                         // 24287
   * ```                                                                                                               // 24288
   *                                                                                                                   // 24289
   * # Special repeat start and end points                                                                             // 24290
   * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
   * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
   * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
   * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                        // 24294
   *                                                                                                                   // 24295
   * The example below makes use of this feature:                                                                      // 24296
   * ```html                                                                                                           // 24297
   *   <header ng-repeat-start="item in items">                                                                        // 24298
   *     Header {{ item }}                                                                                             // 24299
   *   </header>                                                                                                       // 24300
   *   <div class="body">                                                                                              // 24301
   *     Body {{ item }}                                                                                               // 24302
   *   </div>                                                                                                          // 24303
   *   <footer ng-repeat-end>                                                                                          // 24304
   *     Footer {{ item }}                                                                                             // 24305
   *   </footer>                                                                                                       // 24306
   * ```                                                                                                               // 24307
   *                                                                                                                   // 24308
   * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:  // 24309
   * ```html                                                                                                           // 24310
   *   <header>                                                                                                        // 24311
   *     Header A                                                                                                      // 24312
   *   </header>                                                                                                       // 24313
   *   <div class="body">                                                                                              // 24314
   *     Body A                                                                                                        // 24315
   *   </div>                                                                                                          // 24316
   *   <footer>                                                                                                        // 24317
   *     Footer A                                                                                                      // 24318
   *   </footer>                                                                                                       // 24319
   *   <header>                                                                                                        // 24320
   *     Header B                                                                                                      // 24321
   *   </header>                                                                                                       // 24322
   *   <div class="body">                                                                                              // 24323
   *     Body B                                                                                                        // 24324
   *   </div>                                                                                                          // 24325
   *   <footer>                                                                                                        // 24326
   *     Footer B                                                                                                      // 24327
   *   </footer>                                                                                                       // 24328
   * ```                                                                                                               // 24329
   *                                                                                                                   // 24330
   * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
   * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                      // 24332
   *                                                                                                                   // 24333
   * @animations                                                                                                       // 24334
   * **.enter** - when a new item is added to the list or when an item is revealed after a filter                      // 24335
   *                                                                                                                   // 24336
   * **.leave** - when an item is removed from the list or when an item is filtered out                                // 24337
   *                                                                                                                   // 24338
   * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered       // 24339
   *                                                                                                                   // 24340
   * @element ANY                                                                                                      // 24341
   * @scope                                                                                                            // 24342
   * @priority 1000                                                                                                    // 24343
   * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                // 24344
   *   formats are currently supported:                                                                                // 24345
   *                                                                                                                   // 24346
   *   * `variable in expression` ג€“ where variable is the user defined loop variable and `expression`                // 24347
   *     is a scope expression giving the collection to enumerate.                                                     // 24348
   *                                                                                                                   // 24349
   *     For example: `album in artist.albums`.                                                                        // 24350
   *                                                                                                                   // 24351
   *   * `(key, value) in expression` ג€“ where `key` and `value` can be any user defined identifiers,                 // 24352
   *     and `expression` is the scope expression giving the collection to enumerate.                                  // 24353
   *                                                                                                                   // 24354
   *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                       // 24355
   *                                                                                                                   // 24356
   *   * `variable in expression track by tracking_expression` ג€“ You can also provide an optional tracking expression
   *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression // 24358
   *     is specified, ng-repeat associates elements by identity. It is an error to have                               // 24359
   *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
   *     mapped to the same DOM element, which is not possible.)  If filters are used in the expression, they should be
   *     applied before the tracking expression.                                                                       // 24362
   *                                                                                                                   // 24363
   *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
   *     will be associated by item identity in the array.                                                             // 24365
   *                                                                                                                   // 24366
   *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique   // 24367
   *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
   *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM      // 24369
   *     element in the same way in the DOM.                                                                           // 24370
   *                                                                                                                   // 24371
   *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
   *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`         // 24373
   *     property is same.                                                                                             // 24374
   *                                                                                                                   // 24375
   *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
   *     to items in conjunction with a tracking expression.                                                           // 24377
   *                                                                                                                   // 24378
   *   * `variable in expression as alias_expression` ג€“ You can also provide an optional alias expression which will then store the
   *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
   *     when a filter is active on the repeater, but the filtered result set is empty.                                // 24381
   *                                                                                                                   // 24382
   *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
   *     the items have been processed through the filter.                                                             // 24384
   *                                                                                                                   // 24385
   * @example                                                                                                          // 24386
   * This example initializes the scope to a list of names and                                                         // 24387
   * then uses `ngRepeat` to display every person:                                                                     // 24388
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 24389
   <file name="index.html">                                                                                            // 24390
   <div ng-init="friends = [                                                                                           // 24391
   {name:'John', age:25, gender:'boy'},                                                                                // 24392
   {name:'Jessie', age:30, gender:'girl'},                                                                             // 24393
   {name:'Johanna', age:28, gender:'girl'},                                                                            // 24394
   {name:'Joy', age:15, gender:'girl'},                                                                                // 24395
   {name:'Mary', age:28, gender:'girl'},                                                                               // 24396
   {name:'Peter', age:95, gender:'boy'},                                                                               // 24397
   {name:'Sebastian', age:50, gender:'boy'},                                                                           // 24398
   {name:'Erika', age:27, gender:'girl'},                                                                              // 24399
   {name:'Patrick', age:40, gender:'boy'},                                                                             // 24400
   {name:'Samantha', age:60, gender:'girl'}                                                                            // 24401
   ]">                                                                                                                 // 24402
   I have {{friends.length}} friends. They are:                                                                        // 24403
   <input type="search" ng-model="q" placeholder="filter friends..." />                                                // 24404
   <ul class="example-animate-container">                                                                              // 24405
   <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">                                     // 24406
   [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                                   // 24407
   </li>                                                                                                               // 24408
   <li class="animate-repeat" ng-if="results.length == 0">                                                             // 24409
   <strong>No results found...</strong>                                                                                // 24410
   </li>                                                                                                               // 24411
   </ul>                                                                                                               // 24412
   </div>                                                                                                              // 24413
   </file>                                                                                                             // 24414
   <file name="animations.css">                                                                                        // 24415
   .example-animate-container {                                                                                        // 24416
        background:white;                                                                                              // 24417
        border:1px solid black;                                                                                        // 24418
        list-style:none;                                                                                               // 24419
        margin:0;                                                                                                      // 24420
        padding:0 10px;                                                                                                // 24421
      }                                                                                                                // 24422
                                                                                                                       // 24423
   .animate-repeat {                                                                                                   // 24424
        line-height:40px;                                                                                              // 24425
        list-style:none;                                                                                               // 24426
        box-sizing:border-box;                                                                                         // 24427
      }                                                                                                                // 24428
                                                                                                                       // 24429
   .animate-repeat.ng-move,                                                                                            // 24430
   .animate-repeat.ng-enter,                                                                                           // 24431
   .animate-repeat.ng-leave {                                                                                          // 24432
        -webkit-transition:all linear 0.5s;                                                                            // 24433
        transition:all linear 0.5s;                                                                                    // 24434
      }                                                                                                                // 24435
                                                                                                                       // 24436
   .animate-repeat.ng-leave.ng-leave-active,                                                                           // 24437
   .animate-repeat.ng-move,                                                                                            // 24438
   .animate-repeat.ng-enter {                                                                                          // 24439
        opacity:0;                                                                                                     // 24440
        max-height:0;                                                                                                  // 24441
      }                                                                                                                // 24442
                                                                                                                       // 24443
   .animate-repeat.ng-leave,                                                                                           // 24444
   .animate-repeat.ng-move.ng-move-active,                                                                             // 24445
   .animate-repeat.ng-enter.ng-enter-active {                                                                          // 24446
        opacity:1;                                                                                                     // 24447
        max-height:40px;                                                                                               // 24448
      }                                                                                                                // 24449
   </file>                                                                                                             // 24450
   <file name="protractor.js" type="protractor">                                                                       // 24451
   var friends = element.all(by.repeater('friend in friends'));                                                        // 24452
                                                                                                                       // 24453
   it('should render initial data set', function() {                                                                   // 24454
        expect(friends.count()).toBe(10);                                                                              // 24455
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 24456
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 24457
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 24458
        expect(element(by.binding('friends.length')).getText())                                                        // 24459
            .toMatch("I have 10 friends. They are:");                                                                  // 24460
      });                                                                                                              // 24461
                                                                                                                       // 24462
   it('should update repeater when filter predicate changes', function() {                                             // 24463
         expect(friends.count()).toBe(10);                                                                             // 24464
                                                                                                                       // 24465
         element(by.model('q')).sendKeys('ma');                                                                        // 24466
                                                                                                                       // 24467
         expect(friends.count()).toBe(2);                                                                              // 24468
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 24469
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 24470
       });                                                                                                             // 24471
   </file>                                                                                                             // 24472
   </example>                                                                                                          // 24473
   */                                                                                                                  // 24474
  var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                          // 24475
    var NG_REMOVED = '$$NG_REMOVED';                                                                                   // 24476
    var ngRepeatMinErr = minErr('ngRepeat');                                                                           // 24477
                                                                                                                       // 24478
    var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                // 24479
      // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                     // 24480
      scope[valueIdentifier] = value;                                                                                  // 24481
      if (keyIdentifier) scope[keyIdentifier] = key;                                                                   // 24482
      scope.$index = index;                                                                                            // 24483
      scope.$first = (index === 0);                                                                                    // 24484
      scope.$last = (index === (arrayLength - 1));                                                                     // 24485
      scope.$middle = !(scope.$first || scope.$last);                                                                  // 24486
      // jshint bitwise: false                                                                                         // 24487
      scope.$odd = !(scope.$even = (index&1) === 0);                                                                   // 24488
      // jshint bitwise: true                                                                                          // 24489
    };                                                                                                                 // 24490
                                                                                                                       // 24491
    var getBlockStart = function(block) {                                                                              // 24492
      return block.clone[0];                                                                                           // 24493
    };                                                                                                                 // 24494
                                                                                                                       // 24495
    var getBlockEnd = function(block) {                                                                                // 24496
      return block.clone[block.clone.length - 1];                                                                      // 24497
    };                                                                                                                 // 24498
                                                                                                                       // 24499
                                                                                                                       // 24500
    return {                                                                                                           // 24501
      restrict: 'A',                                                                                                   // 24502
      multiElement: true,                                                                                              // 24503
      transclude: 'element',                                                                                           // 24504
      priority: 1000,                                                                                                  // 24505
      terminal: true,                                                                                                  // 24506
      $$tlb: true,                                                                                                     // 24507
      compile: function ngRepeatCompile($element, $attr) {                                                             // 24508
        var expression = $attr.ngRepeat;                                                                               // 24509
        var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                         // 24510
                                                                                                                       // 24511
        var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                                                                                                                       // 24513
        if (!match) {                                                                                                  // 24514
          throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);                                                                                               // 24516
        }                                                                                                              // 24517
                                                                                                                       // 24518
        var lhs = match[1];                                                                                            // 24519
        var rhs = match[2];                                                                                            // 24520
        var aliasAs = match[3];                                                                                        // 24521
        var trackByExp = match[4];                                                                                     // 24522
                                                                                                                       // 24523
        match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);                                   // 24524
                                                                                                                       // 24525
        if (!match) {                                                                                                  // 24526
          throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);                                                                                                      // 24528
        }                                                                                                              // 24529
        var valueIdentifier = match[3] || match[1];                                                                    // 24530
        var keyIdentifier = match[2];                                                                                  // 24531
                                                                                                                       // 24532
        if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                 // 24533
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
          throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
            aliasAs);                                                                                                  // 24536
        }                                                                                                              // 24537
                                                                                                                       // 24538
        var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                        // 24539
        var hashFnLocals = {$id: hashKey};                                                                             // 24540
                                                                                                                       // 24541
        if (trackByExp) {                                                                                              // 24542
          trackByExpGetter = $parse(trackByExp);                                                                       // 24543
        } else {                                                                                                       // 24544
          trackByIdArrayFn = function(key, value) {                                                                    // 24545
            return hashKey(value);                                                                                     // 24546
          };                                                                                                           // 24547
          trackByIdObjFn = function(key) {                                                                             // 24548
            return key;                                                                                                // 24549
          };                                                                                                           // 24550
        }                                                                                                              // 24551
                                                                                                                       // 24552
        return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                     // 24553
                                                                                                                       // 24554
          if (trackByExpGetter) {                                                                                      // 24555
            trackByIdExpFn = function(key, value, index) {                                                             // 24556
              // assign key, value, and $index to the locals so that they can be used in hash functions                // 24557
              if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                    // 24558
              hashFnLocals[valueIdentifier] = value;                                                                   // 24559
              hashFnLocals.$index = index;                                                                             // 24560
              return trackByExpGetter($scope, hashFnLocals);                                                           // 24561
            };                                                                                                         // 24562
          }                                                                                                            // 24563
                                                                                                                       // 24564
          // Store a list of elements from previous run. This is a hash where key is the item from the                 // 24565
          // iterator, and the value is objects with following properties.                                             // 24566
          //   - scope: bound scope                                                                                    // 24567
          //   - element: previous element.                                                                            // 24568
          //   - index: position                                                                                       // 24569
          //                                                                                                           // 24570
          // We are using no-proto object so that we don't need to guard against inherited props via                   // 24571
          // hasOwnProperty.                                                                                           // 24572
          var lastBlockMap = createMap();                                                                              // 24573
                                                                                                                       // 24574
          //watch props                                                                                                // 24575
          $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                           // 24576
            var index, length,                                                                                         // 24577
              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 24578
                                              // initialized to the comment node anchor                                // 24579
              nextNode,                                                                                                // 24580
            // Same as lastBlockMap but it has the current state. It will become the                                   // 24581
            // lastBlockMap on the next iteration.                                                                     // 24582
              nextBlockMap = createMap(),                                                                              // 24583
              collectionLength,                                                                                        // 24584
              key, value, // key/value of iteration                                                                    // 24585
              trackById,                                                                                               // 24586
              trackByIdFn,                                                                                             // 24587
              collectionKeys,                                                                                          // 24588
              block,       // last object information {scope, element, id}                                             // 24589
              nextBlockOrder,                                                                                          // 24590
              elementsToRemove;                                                                                        // 24591
                                                                                                                       // 24592
            if (aliasAs) {                                                                                             // 24593
              $scope[aliasAs] = collection;                                                                            // 24594
            }                                                                                                          // 24595
                                                                                                                       // 24596
            if (isArrayLike(collection)) {                                                                             // 24597
              collectionKeys = collection;                                                                             // 24598
              trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                        // 24599
            } else {                                                                                                   // 24600
              trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                          // 24601
              // if object, extract keys, sort them and use to determine order of iteration over obj props             // 24602
              collectionKeys = [];                                                                                     // 24603
              for (var itemKey in collection) {                                                                        // 24604
                if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {                                  // 24605
                  collectionKeys.push(itemKey);                                                                        // 24606
                }                                                                                                      // 24607
              }                                                                                                        // 24608
              collectionKeys.sort();                                                                                   // 24609
            }                                                                                                          // 24610
                                                                                                                       // 24611
            collectionLength = collectionKeys.length;                                                                  // 24612
            nextBlockOrder = new Array(collectionLength);                                                              // 24613
                                                                                                                       // 24614
            // locate existing items                                                                                   // 24615
            for (index = 0; index < collectionLength; index++) {                                                       // 24616
              key = (collection === collectionKeys) ? index : collectionKeys[index];                                   // 24617
              value = collection[key];                                                                                 // 24618
              trackById = trackByIdFn(key, value, index);                                                              // 24619
              if (lastBlockMap[trackById]) {                                                                           // 24620
                // found previously seen block                                                                         // 24621
                block = lastBlockMap[trackById];                                                                       // 24622
                delete lastBlockMap[trackById];                                                                        // 24623
                nextBlockMap[trackById] = block;                                                                       // 24624
                nextBlockOrder[index] = block;                                                                         // 24625
              } else if (nextBlockMap[trackById]) {                                                                    // 24626
                // if collision detected. restore lastBlockMap and throw an error                                      // 24627
                forEach(nextBlockOrder, function(block) {                                                              // 24628
                  if (block && block.scope) lastBlockMap[block.id] = block;                                            // 24629
                });                                                                                                    // 24630
                throw ngRepeatMinErr('dupes',                                                                          // 24631
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);                                                                       // 24633
              } else {                                                                                                 // 24634
                // new never before seen block                                                                         // 24635
                nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                           // 24636
                nextBlockMap[trackById] = true;                                                                        // 24637
              }                                                                                                        // 24638
            }                                                                                                          // 24639
                                                                                                                       // 24640
            // remove leftover items                                                                                   // 24641
            for (var blockKey in lastBlockMap) {                                                                       // 24642
              block = lastBlockMap[blockKey];                                                                          // 24643
              elementsToRemove = getBlockNodes(block.clone);                                                           // 24644
              $animate.leave(elementsToRemove);                                                                        // 24645
              if (elementsToRemove[0].parentNode) {                                                                    // 24646
                // if the element was not removed yet because of pending animation, mark it as deleted                 // 24647
                // so that we can ignore it later                                                                      // 24648
                for (index = 0, length = elementsToRemove.length; index < length; index++) {                           // 24649
                  elementsToRemove[index][NG_REMOVED] = true;                                                          // 24650
                }                                                                                                      // 24651
              }                                                                                                        // 24652
              block.scope.$destroy();                                                                                  // 24653
            }                                                                                                          // 24654
                                                                                                                       // 24655
            // we are not using forEach for perf reasons (trying to avoid #call)                                       // 24656
            for (index = 0; index < collectionLength; index++) {                                                       // 24657
              key = (collection === collectionKeys) ? index : collectionKeys[index];                                   // 24658
              value = collection[key];                                                                                 // 24659
              block = nextBlockOrder[index];                                                                           // 24660
                                                                                                                       // 24661
              if (block.scope) {                                                                                       // 24662
                // if we have already seen this object, then we need to reuse the                                      // 24663
                // associated scope/element                                                                            // 24664
                                                                                                                       // 24665
                nextNode = previousNode;                                                                               // 24666
                                                                                                                       // 24667
                // skip nodes that are already pending removal via leave animation                                     // 24668
                do {                                                                                                   // 24669
                  nextNode = nextNode.nextSibling;                                                                     // 24670
                } while (nextNode && nextNode[NG_REMOVED]);                                                            // 24671
                                                                                                                       // 24672
                if (getBlockStart(block) != nextNode) {                                                                // 24673
                  // existing item which got moved                                                                     // 24674
                  $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                               // 24675
                }                                                                                                      // 24676
                previousNode = getBlockEnd(block);                                                                     // 24677
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 24678
              } else {                                                                                                 // 24679
                // new item which we don't know about                                                                  // 24680
                $transclude(function ngRepeatTransclude(clone, scope) {                                                // 24681
                  block.scope = scope;                                                                                 // 24682
                  // http://jsperf.com/clone-vs-createcomment                                                          // 24683
                  var endNode = ngRepeatEndComment.cloneNode(false);                                                   // 24684
                  clone[clone.length++] = endNode;                                                                     // 24685
                                                                                                                       // 24686
                  // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?            // 24687
                  $animate.enter(clone, null, jqLite(previousNode));                                                   // 24688
                  previousNode = endNode;                                                                              // 24689
                  // Note: We only need the first/last node of the cloned nodes.                                       // 24690
                  // However, we need to keep the reference to the jqlite wrapper as it might be changed later         // 24691
                  // by a directive with templateUrl when its template arrives.                                        // 24692
                  block.clone = clone;                                                                                 // 24693
                  nextBlockMap[block.id] = block;                                                                      // 24694
                  updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);       // 24695
                });                                                                                                    // 24696
              }                                                                                                        // 24697
            }                                                                                                          // 24698
            lastBlockMap = nextBlockMap;                                                                               // 24699
          });                                                                                                          // 24700
        };                                                                                                             // 24701
      }                                                                                                                // 24702
    };                                                                                                                 // 24703
  }];                                                                                                                  // 24704
                                                                                                                       // 24705
  var NG_HIDE_CLASS = 'ng-hide';                                                                                       // 24706
  var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                   // 24707
  /**                                                                                                                  // 24708
   * @ngdoc directive                                                                                                  // 24709
   * @name ngShow                                                                                                      // 24710
   *                                                                                                                   // 24711
   * @description                                                                                                      // 24712
   * The `ngShow` directive shows or hides the given HTML element based on the expression                              // 24713
   * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                          // 24714
   * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                 // 24715
   * in AngularJS and sets the display style to none (using an !important flag).                                       // 24716
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).               // 24717
   *                                                                                                                   // 24718
   * ```html                                                                                                           // 24719
   * <!-- when $scope.myValue is truthy (element is visible) -->                                                       // 24720
   * <div ng-show="myValue"></div>                                                                                     // 24721
   *                                                                                                                   // 24722
   * <!-- when $scope.myValue is falsy (element is hidden) -->                                                         // 24723
   * <div ng-show="myValue" class="ng-hide"></div>                                                                     // 24724
   * ```                                                                                                               // 24725
   *                                                                                                                   // 24726
   * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class       // 24727
   * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed            // 24728
   * from the element causing the element not to appear hidden.                                                        // 24729
   *                                                                                                                   // 24730
   * ## Why is !important used?                                                                                        // 24731
   *                                                                                                                   // 24732
   * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector // 24733
   * can be easily overridden by heavier selectors. For example, something as simple                                   // 24734
   * as changing the display style on a HTML list item would make hidden elements appear visible.                      // 24735
   * This also becomes a bigger issue when dealing with CSS frameworks.                                                // 24736
   *                                                                                                                   // 24737
   * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector      // 24738
   * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the      // 24739
   * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.      // 24740
   *                                                                                                                   // 24741
   * ### Overriding `.ng-hide`                                                                                         // 24742
   *                                                                                                                   // 24743
   * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change     // 24744
   * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`         // 24745
   * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope      // 24746
   * with extra animation classes that can be added.                                                                   // 24747
   *                                                                                                                   // 24748
   * ```css                                                                                                            // 24749
   * .ng-hide:not(.ng-hide-animate) {                                                                                  // 24750
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 24751
 *   display: block!important;                                                                                         // 24752
 *   position: absolute;                                                                                               // 24753
 *   top: -9999px;                                                                                                     // 24754
 *   left: -9999px;                                                                                                    // 24755
 * }                                                                                                                   // 24756
   * ```                                                                                                               // 24757
   *                                                                                                                   // 24758
   * By default you don't need to override in CSS anything and the animations will work around the display style.      // 24759
   *                                                                                                                   // 24760
   * ## A note about animations with `ngShow`                                                                          // 24761
   *                                                                                                                   // 24762
   * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression   // 24763
   * is true and false. This system works like the animation system present with ngClass except that                   // 24764
   * you must also include the !important flag to override the display property                                        // 24765
   * so that you can perform an animation when the element is hidden during the time of the animation.                 // 24766
   *                                                                                                                   // 24767
   * ```css                                                                                                            // 24768
   * //                                                                                                                // 24769
   * //a working example can be found at the bottom of this page                                                       // 24770
   * //                                                                                                                // 24771
   * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                             // 24772
 *   /&#42; this is required as of 1.3x to properly                                                                    // 24773
 *      apply all styling in a show/hide animation &#42;/                                                              // 24774
 *   transition: 0s linear all;                                                                                        // 24775
 * }                                                                                                                   // 24776
   *                                                                                                                   // 24777
   * .my-element.ng-hide-add-active,                                                                                   // 24778
   * .my-element.ng-hide-remove-active {                                                                               // 24779
 *   /&#42; the transition is defined in the active class &#42;/                                                       // 24780
 *   transition: 1s linear all;                                                                                        // 24781
 * }                                                                                                                   // 24782
   *                                                                                                                   // 24783
   * .my-element.ng-hide-add { ... }                                                                                   // 24784
   * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                // 24785
   * .my-element.ng-hide-remove { ... }                                                                                // 24786
   * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                          // 24787
   * ```                                                                                                               // 24788
   *                                                                                                                   // 24789
   * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                  // 24790
   * property to block during animation states--ngAnimate will handle the style toggling automatically for you.        // 24791
   *                                                                                                                   // 24792
   * @animations                                                                                                       // 24793
   * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
   * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
   *                                                                                                                   // 24796
   * @element ANY                                                                                                      // 24797
   * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                   // 24798
   *     then the element is shown or hidden respectively.                                                             // 24799
   *                                                                                                                   // 24800
   * @example                                                                                                          // 24801
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 24802
   <file name="index.html">                                                                                            // 24803
   Click me: <input type="checkbox" ng-model="checked"><br/>                                                           // 24804
   <div>                                                                                                               // 24805
   Show:                                                                                                               // 24806
   <div class="check-element animate-show" ng-show="checked">                                                          // 24807
   <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                        // 24808
   </div>                                                                                                              // 24809
   </div>                                                                                                              // 24810
   <div>                                                                                                               // 24811
   Hide:                                                                                                               // 24812
   <div class="check-element animate-show" ng-hide="checked">                                                          // 24813
   <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                         // 24814
   </div>                                                                                                              // 24815
   </div>                                                                                                              // 24816
   </file>                                                                                                             // 24817
   <file name="glyphicons.css">                                                                                        // 24818
   @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                    // 24819
   </file>                                                                                                             // 24820
   <file name="animations.css">                                                                                        // 24821
   .animate-show {                                                                                                     // 24822
        line-height: 20px;                                                                                             // 24823
        opacity: 1;                                                                                                    // 24824
        padding: 10px;                                                                                                 // 24825
        border: 1px solid black;                                                                                       // 24826
        background: white;                                                                                             // 24827
      }                                                                                                                // 24828
                                                                                                                       // 24829
   .animate-show.ng-hide-add.ng-hide-add-active,                                                                       // 24830
   .animate-show.ng-hide-remove.ng-hide-remove-active {                                                                // 24831
        -webkit-transition: all linear 0.5s;                                                                           // 24832
        transition: all linear 0.5s;                                                                                   // 24833
      }                                                                                                                // 24834
                                                                                                                       // 24835
   .animate-show.ng-hide {                                                                                             // 24836
        line-height: 0;                                                                                                // 24837
        opacity: 0;                                                                                                    // 24838
        padding: 0 10px;                                                                                               // 24839
      }                                                                                                                // 24840
                                                                                                                       // 24841
   .check-element {                                                                                                    // 24842
        padding: 10px;                                                                                                 // 24843
        border: 1px solid black;                                                                                       // 24844
        background: white;                                                                                             // 24845
      }                                                                                                                // 24846
   </file>                                                                                                             // 24847
   <file name="protractor.js" type="protractor">                                                                       // 24848
   var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                         // 24849
   var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                     // 24850
                                                                                                                       // 24851
   it('should check ng-show / ng-hide', function() {                                                                   // 24852
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 24853
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 24854
                                                                                                                       // 24855
        element(by.model('checked')).click();                                                                          // 24856
                                                                                                                       // 24857
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 24858
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 24859
      });                                                                                                              // 24860
   </file>                                                                                                             // 24861
   </example>                                                                                                          // 24862
   */                                                                                                                  // 24863
  var ngShowDirective = ['$animate', function($animate) {                                                              // 24864
    return {                                                                                                           // 24865
      restrict: 'A',                                                                                                   // 24866
      multiElement: true,                                                                                              // 24867
      link: function(scope, element, attr) {                                                                           // 24868
        scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                  // 24869
          // we're adding a temporary, animation-specific class for ng-hide since this way                             // 24870
          // we can control when the element is actually displayed on screen without having                            // 24871
          // to have a global/greedy CSS selector that breaks when other animations are run.                           // 24872
          // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                             // 24873
          $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                       // 24874
            tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                     // 24875
          });                                                                                                          // 24876
        });                                                                                                            // 24877
      }                                                                                                                // 24878
    };                                                                                                                 // 24879
  }];                                                                                                                  // 24880
                                                                                                                       // 24881
                                                                                                                       // 24882
  /**                                                                                                                  // 24883
   * @ngdoc directive                                                                                                  // 24884
   * @name ngHide                                                                                                      // 24885
   *                                                                                                                   // 24886
   * @description                                                                                                      // 24887
   * The `ngHide` directive shows or hides the given HTML element based on the expression                              // 24888
   * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                          // 24889
   * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                  // 24890
   * in AngularJS and sets the display style to none (using an !important flag).                                       // 24891
   * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).               // 24892
   *                                                                                                                   // 24893
   * ```html                                                                                                           // 24894
   * <!-- when $scope.myValue is truthy (element is hidden) -->                                                        // 24895
   * <div ng-hide="myValue" class="ng-hide"></div>                                                                     // 24896
   *                                                                                                                   // 24897
   * <!-- when $scope.myValue is falsy (element is visible) -->                                                        // 24898
   * <div ng-hide="myValue"></div>                                                                                     // 24899
   * ```                                                                                                               // 24900
   *                                                                                                                   // 24901
   * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class      // 24902
   * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed             // 24903
   * from the element causing the element not to appear hidden.                                                        // 24904
   *                                                                                                                   // 24905
   * ## Why is !important used?                                                                                        // 24906
   *                                                                                                                   // 24907
   * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector // 24908
   * can be easily overridden by heavier selectors. For example, something as simple                                   // 24909
   * as changing the display style on a HTML list item would make hidden elements appear visible.                      // 24910
   * This also becomes a bigger issue when dealing with CSS frameworks.                                                // 24911
   *                                                                                                                   // 24912
   * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector      // 24913
   * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the      // 24914
   * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.      // 24915
   *                                                                                                                   // 24916
   * ### Overriding `.ng-hide`                                                                                         // 24917
   *                                                                                                                   // 24918
   * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change     // 24919
   * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`         // 24920
   * class in CSS:                                                                                                     // 24921
   *                                                                                                                   // 24922
   * ```css                                                                                                            // 24923
   * .ng-hide {                                                                                                        // 24924
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 24925
 *   display: block!important;                                                                                         // 24926
 *   position: absolute;                                                                                               // 24927
 *   top: -9999px;                                                                                                     // 24928
 *   left: -9999px;                                                                                                    // 24929
 * }                                                                                                                   // 24930
   * ```                                                                                                               // 24931
   *                                                                                                                   // 24932
   * By default you don't need to override in CSS anything and the animations will work around the display style.      // 24933
   *                                                                                                                   // 24934
   * ## A note about animations with `ngHide`                                                                          // 24935
   *                                                                                                                   // 24936
   * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression   // 24937
   * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`   // 24938
   * CSS class is added and removed for you instead of your own CSS class.                                             // 24939
   *                                                                                                                   // 24940
   * ```css                                                                                                            // 24941
   * //                                                                                                                // 24942
   * //a working example can be found at the bottom of this page                                                       // 24943
   * //                                                                                                                // 24944
   * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                             // 24945
 *   transition: 0.5s linear all;                                                                                      // 24946
 * }                                                                                                                   // 24947
   *                                                                                                                   // 24948
   * .my-element.ng-hide-add { ... }                                                                                   // 24949
   * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                // 24950
   * .my-element.ng-hide-remove { ... }                                                                                // 24951
   * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                          // 24952
   * ```                                                                                                               // 24953
   *                                                                                                                   // 24954
   * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                  // 24955
   * property to block during animation states--ngAnimate will handle the style toggling automatically for you.        // 24956
   *                                                                                                                   // 24957
   * @animations                                                                                                       // 24958
   * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
   * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
   *                                                                                                                   // 24961
   * @element ANY                                                                                                      // 24962
   * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                              // 24963
   *     the element is shown or hidden respectively.                                                                  // 24964
   *                                                                                                                   // 24965
   * @example                                                                                                          // 24966
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 24967
   <file name="index.html">                                                                                            // 24968
   Click me: <input type="checkbox" ng-model="checked"><br/>                                                           // 24969
   <div>                                                                                                               // 24970
   Show:                                                                                                               // 24971
   <div class="check-element animate-hide" ng-show="checked">                                                          // 24972
   <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                        // 24973
   </div>                                                                                                              // 24974
   </div>                                                                                                              // 24975
   <div>                                                                                                               // 24976
   Hide:                                                                                                               // 24977
   <div class="check-element animate-hide" ng-hide="checked">                                                          // 24978
   <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                         // 24979
   </div>                                                                                                              // 24980
   </div>                                                                                                              // 24981
   </file>                                                                                                             // 24982
   <file name="glyphicons.css">                                                                                        // 24983
   @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                    // 24984
   </file>                                                                                                             // 24985
   <file name="animations.css">                                                                                        // 24986
   .animate-hide {                                                                                                     // 24987
        -webkit-transition: all linear 0.5s;                                                                           // 24988
        transition: all linear 0.5s;                                                                                   // 24989
        line-height: 20px;                                                                                             // 24990
        opacity: 1;                                                                                                    // 24991
        padding: 10px;                                                                                                 // 24992
        border: 1px solid black;                                                                                       // 24993
        background: white;                                                                                             // 24994
      }                                                                                                                // 24995
                                                                                                                       // 24996
   .animate-hide.ng-hide {                                                                                             // 24997
        line-height: 0;                                                                                                // 24998
        opacity: 0;                                                                                                    // 24999
        padding: 0 10px;                                                                                               // 25000
      }                                                                                                                // 25001
                                                                                                                       // 25002
   .check-element {                                                                                                    // 25003
        padding: 10px;                                                                                                 // 25004
        border: 1px solid black;                                                                                       // 25005
        background: white;                                                                                             // 25006
      }                                                                                                                // 25007
   </file>                                                                                                             // 25008
   <file name="protractor.js" type="protractor">                                                                       // 25009
   var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                         // 25010
   var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                     // 25011
                                                                                                                       // 25012
   it('should check ng-show / ng-hide', function() {                                                                   // 25013
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 25014
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 25015
                                                                                                                       // 25016
        element(by.model('checked')).click();                                                                          // 25017
                                                                                                                       // 25018
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 25019
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 25020
      });                                                                                                              // 25021
   </file>                                                                                                             // 25022
   </example>                                                                                                          // 25023
   */                                                                                                                  // 25024
  var ngHideDirective = ['$animate', function($animate) {                                                              // 25025
    return {                                                                                                           // 25026
      restrict: 'A',                                                                                                   // 25027
      multiElement: true,                                                                                              // 25028
      link: function(scope, element, attr) {                                                                           // 25029
        scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                  // 25030
          // The comment inside of the ngShowDirective explains why we add and                                         // 25031
          // remove a temporary class for the show/hide animation                                                      // 25032
          $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                        // 25033
            tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                     // 25034
          });                                                                                                          // 25035
        });                                                                                                            // 25036
      }                                                                                                                // 25037
    };                                                                                                                 // 25038
  }];                                                                                                                  // 25039
                                                                                                                       // 25040
  /**                                                                                                                  // 25041
   * @ngdoc directive                                                                                                  // 25042
   * @name ngStyle                                                                                                     // 25043
   * @restrict AC                                                                                                      // 25044
   *                                                                                                                   // 25045
   * @description                                                                                                      // 25046
   * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                             // 25047
   *                                                                                                                   // 25048
   * @element ANY                                                                                                      // 25049
   * @param {expression} ngStyle                                                                                       // 25050
   *                                                                                                                   // 25051
   * {@link guide/expression Expression} which evals to an                                                             // 25052
   * object whose keys are CSS style names and values are corresponding values for those CSS                           // 25053
   * keys.                                                                                                             // 25054
   *                                                                                                                   // 25055
   * Since some CSS style names are not valid keys for an object, they must be quoted.                                 // 25056
   * See the 'background-color' style in the example below.                                                            // 25057
   *                                                                                                                   // 25058
   * @example                                                                                                          // 25059
   <example>                                                                                                           // 25060
   <file name="index.html">                                                                                            // 25061
   <input type="button" value="set color" ng-click="myStyle={color:'red'}">                                            // 25062
   <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">                         // 25063
   <input type="button" value="clear" ng-click="myStyle={}">                                                           // 25064
   <br/>                                                                                                               // 25065
   <span ng-style="myStyle">Sample Text</span>                                                                         // 25066
   <pre>myStyle={{myStyle}}</pre>                                                                                      // 25067
   </file>                                                                                                             // 25068
   <file name="style.css">                                                                                             // 25069
   span {                                                                                                              // 25070
         color: black;                                                                                                 // 25071
       }                                                                                                               // 25072
   </file>                                                                                                             // 25073
   <file name="protractor.js" type="protractor">                                                                       // 25074
   var colorSpan = element(by.css('span'));                                                                            // 25075
                                                                                                                       // 25076
   it('should check ng-style', function() {                                                                            // 25077
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 25078
         element(by.css('input[value=\'set color\']')).click();                                                        // 25079
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 25080
         element(by.css('input[value=clear]')).click();                                                                // 25081
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 25082
       });                                                                                                             // 25083
   </file>                                                                                                             // 25084
   </example>                                                                                                          // 25085
   */                                                                                                                  // 25086
  var ngStyleDirective = ngDirective(function(scope, element, attr) {                                                  // 25087
    scope.$watchCollection(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                           // 25088
      if (oldStyles && (newStyles !== oldStyles)) {                                                                    // 25089
        forEach(oldStyles, function(val, style) { element.css(style, '');});                                           // 25090
      }                                                                                                                // 25091
      if (newStyles) element.css(newStyles);                                                                           // 25092
    });                                                                                                                // 25093
  });                                                                                                                  // 25094
                                                                                                                       // 25095
  /**                                                                                                                  // 25096
   * @ngdoc directive                                                                                                  // 25097
   * @name ngSwitch                                                                                                    // 25098
   * @restrict EA                                                                                                      // 25099
   *                                                                                                                   // 25100
   * @description                                                                                                      // 25101
   * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
   * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
   * as specified in the template.                                                                                     // 25104
   *                                                                                                                   // 25105
   * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it     // 25106
   * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
   * matches the value obtained from the evaluated expression. In other words, you define a container element          // 25108
   * (where you place the directive), place an expression on the **`on="..."` attribute**                              // 25109
   * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place             // 25110
   * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on  // 25111
   * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
   * attribute is displayed.                                                                                           // 25113
   *                                                                                                                   // 25114
   * <div class="alert alert-info">                                                                                    // 25115
   * Be aware that the attribute values to match against cannot be expressions. They are interpreted                   // 25116
   * as literal string values to match against.                                                                        // 25117
   * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the             // 25118
   * value of the expression `$scope.someVal`.                                                                         // 25119
   * </div>                                                                                                            // 25120
                                                                                                                       // 25121
   * @animations                                                                                                       // 25122
   * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container   // 25123
   * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
   *                                                                                                                   // 25125
   * @usage                                                                                                            // 25126
   *                                                                                                                   // 25127
   * ```                                                                                                               // 25128
   * <ANY ng-switch="expression">                                                                                      // 25129
   *   <ANY ng-switch-when="matchValue1">...</ANY>                                                                     // 25130
   *   <ANY ng-switch-when="matchValue2">...</ANY>                                                                     // 25131
   *   <ANY ng-switch-default>...</ANY>                                                                                // 25132
   * </ANY>                                                                                                            // 25133
   * ```                                                                                                               // 25134
   *                                                                                                                   // 25135
   *                                                                                                                   // 25136
   * @scope                                                                                                            // 25137
   * @priority 1200                                                                                                    // 25138
   * @param {*} ngSwitch|on expression to match against <tt>ng-switch-when</tt>.                                       // 25139
   * On child elements add:                                                                                            // 25140
   *                                                                                                                   // 25141
   * * `ngSwitchWhen`: the case statement to match against. If match then this                                         // 25142
   *   case will be displayed. If the same match appears multiple times, all the                                       // 25143
   *   elements will be displayed.                                                                                     // 25144
   * * `ngSwitchDefault`: the default case when no other case match. If there                                          // 25145
   *   are multiple default cases, all of them will be displayed when no other                                         // 25146
   *   case match.                                                                                                     // 25147
   *                                                                                                                   // 25148
   *                                                                                                                   // 25149
   * @example                                                                                                          // 25150
   <example module="switchExample" deps="angular-animate.js" animations="true">                                        // 25151
   <file name="index.html">                                                                                            // 25152
   <div ng-controller="ExampleController">                                                                             // 25153
   <select ng-model="selection" ng-options="item for item in items">                                                   // 25154
   </select>                                                                                                           // 25155
   <tt>selection={{selection}}</tt>                                                                                    // 25156
   <hr/>                                                                                                               // 25157
   <div class="animate-switch-container"                                                                               // 25158
   ng-switch on="selection">                                                                                           // 25159
   <div class="animate-switch" ng-switch-when="settings">Settings Div</div>                                            // 25160
   <div class="animate-switch" ng-switch-when="home">Home Span</div>                                                   // 25161
   <div class="animate-switch" ng-switch-default>default</div>                                                         // 25162
   </div>                                                                                                              // 25163
   </div>                                                                                                              // 25164
   </file>                                                                                                             // 25165
   <file name="script.js">                                                                                             // 25166
   angular.module('switchExample', ['ngAnimate'])                                                                      // 25167
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 25168
          $scope.items = ['settings', 'home', 'other'];                                                                // 25169
          $scope.selection = $scope.items[0];                                                                          // 25170
        }]);                                                                                                           // 25171
   </file>                                                                                                             // 25172
   <file name="animations.css">                                                                                        // 25173
   .animate-switch-container {                                                                                         // 25174
        position:relative;                                                                                             // 25175
        background:white;                                                                                              // 25176
        border:1px solid black;                                                                                        // 25177
        height:40px;                                                                                                   // 25178
        overflow:hidden;                                                                                               // 25179
      }                                                                                                                // 25180
                                                                                                                       // 25181
   .animate-switch {                                                                                                   // 25182
        padding:10px;                                                                                                  // 25183
      }                                                                                                                // 25184
                                                                                                                       // 25185
   .animate-switch.ng-animate {                                                                                        // 25186
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                          // 25187
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 25188
                                                                                                                       // 25189
        position:absolute;                                                                                             // 25190
        top:0;                                                                                                         // 25191
        left:0;                                                                                                        // 25192
        right:0;                                                                                                       // 25193
        bottom:0;                                                                                                      // 25194
      }                                                                                                                // 25195
                                                                                                                       // 25196
   .animate-switch.ng-leave.ng-leave-active,                                                                           // 25197
   .animate-switch.ng-enter {                                                                                          // 25198
        top:-50px;                                                                                                     // 25199
      }                                                                                                                // 25200
   .animate-switch.ng-leave,                                                                                           // 25201
   .animate-switch.ng-enter.ng-enter-active {                                                                          // 25202
        top:0;                                                                                                         // 25203
      }                                                                                                                // 25204
   </file>                                                                                                             // 25205
   <file name="protractor.js" type="protractor">                                                                       // 25206
   var switchElem = element(by.css('[ng-switch]'));                                                                    // 25207
   var select = element(by.model('selection'));                                                                        // 25208
                                                                                                                       // 25209
   it('should start in settings', function() {                                                                         // 25210
        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 25211
      });                                                                                                              // 25212
   it('should change to home', function() {                                                                            // 25213
        select.all(by.css('option')).get(1).click();                                                                   // 25214
        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 25215
      });                                                                                                              // 25216
   it('should select default', function() {                                                                            // 25217
        select.all(by.css('option')).get(2).click();                                                                   // 25218
        expect(switchElem.getText()).toMatch(/default/);                                                               // 25219
      });                                                                                                              // 25220
   </file>                                                                                                             // 25221
   </example>                                                                                                          // 25222
   */                                                                                                                  // 25223
  var ngSwitchDirective = ['$animate', function($animate) {                                                            // 25224
    return {                                                                                                           // 25225
      restrict: 'EA',                                                                                                  // 25226
      require: 'ngSwitch',                                                                                             // 25227
                                                                                                                       // 25228
      // asks for $scope to fool the BC controller module                                                              // 25229
      controller: ['$scope', function ngSwitchController() {                                                           // 25230
        this.cases = {};                                                                                               // 25231
      }],                                                                                                              // 25232
      link: function(scope, element, attr, ngSwitchController) {                                                       // 25233
        var watchExpr = attr.ngSwitch || attr.on,                                                                      // 25234
          selectedTranscludes = [],                                                                                    // 25235
          selectedElements = [],                                                                                       // 25236
          previousLeaveAnimations = [],                                                                                // 25237
          selectedScopes = [];                                                                                         // 25238
                                                                                                                       // 25239
        var spliceFactory = function(array, index) {                                                                   // 25240
          return function() { array.splice(index, 1); };                                                               // 25241
        };                                                                                                             // 25242
                                                                                                                       // 25243
        scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                  // 25244
          var i, ii;                                                                                                   // 25245
          for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                              // 25246
            $animate.cancel(previousLeaveAnimations[i]);                                                               // 25247
          }                                                                                                            // 25248
          previousLeaveAnimations.length = 0;                                                                          // 25249
                                                                                                                       // 25250
          for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                       // 25251
            var selected = getBlockNodes(selectedElements[i].clone);                                                   // 25252
            selectedScopes[i].$destroy();                                                                              // 25253
            var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                       // 25254
            promise.then(spliceFactory(previousLeaveAnimations, i));                                                   // 25255
          }                                                                                                            // 25256
                                                                                                                       // 25257
          selectedElements.length = 0;                                                                                 // 25258
          selectedScopes.length = 0;                                                                                   // 25259
                                                                                                                       // 25260
          if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {        // 25261
            forEach(selectedTranscludes, function(selectedTransclude) {                                                // 25262
              selectedTransclude.transclude(function(caseElement, selectedScope) {                                     // 25263
                selectedScopes.push(selectedScope);                                                                    // 25264
                var anchor = selectedTransclude.element;                                                               // 25265
                caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                     // 25266
                var block = { clone: caseElement };                                                                    // 25267
                                                                                                                       // 25268
                selectedElements.push(block);                                                                          // 25269
                $animate.enter(caseElement, anchor.parent(), anchor);                                                  // 25270
              });                                                                                                      // 25271
            });                                                                                                        // 25272
          }                                                                                                            // 25273
        });                                                                                                            // 25274
      }                                                                                                                // 25275
    };                                                                                                                 // 25276
  }];                                                                                                                  // 25277
                                                                                                                       // 25278
  var ngSwitchWhenDirective = ngDirective({                                                                            // 25279
    transclude: 'element',                                                                                             // 25280
    priority: 1200,                                                                                                    // 25281
    require: '^ngSwitch',                                                                                              // 25282
    multiElement: true,                                                                                                // 25283
    link: function(scope, element, attrs, ctrl, $transclude) {                                                         // 25284
      ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                             // 25285
      ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                        // 25286
    }                                                                                                                  // 25287
  });                                                                                                                  // 25288
                                                                                                                       // 25289
  var ngSwitchDefaultDirective = ngDirective({                                                                         // 25290
    transclude: 'element',                                                                                             // 25291
    priority: 1200,                                                                                                    // 25292
    require: '^ngSwitch',                                                                                              // 25293
    multiElement: true,                                                                                                // 25294
    link: function(scope, element, attr, ctrl, $transclude) {                                                          // 25295
      ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                       // 25296
      ctrl.cases['?'].push({ transclude: $transclude, element: element });                                             // 25297
    }                                                                                                                  // 25298
  });                                                                                                                  // 25299
                                                                                                                       // 25300
  /**                                                                                                                  // 25301
   * @ngdoc directive                                                                                                  // 25302
   * @name ngTransclude                                                                                                // 25303
   * @restrict EAC                                                                                                     // 25304
   *                                                                                                                   // 25305
   * @description                                                                                                      // 25306
   * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
   *                                                                                                                   // 25308
   * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
   *                                                                                                                   // 25310
   * @element ANY                                                                                                      // 25311
   *                                                                                                                   // 25312
   * @example                                                                                                          // 25313
   <example module="transcludeExample">                                                                                // 25314
   <file name="index.html">                                                                                            // 25315
   <script>                                                                                                            // 25316
   angular.module('transcludeExample', [])                                                                             // 25317
   .directive('pane', function(){                                                                                      // 25318
             return {                                                                                                  // 25319
               restrict: 'E',                                                                                          // 25320
               transclude: true,                                                                                       // 25321
               scope: { title:'@' },                                                                                   // 25322
   template: '<div style="border: 1px solid black;">' +                                                                // 25323
   '<div style="background-color: gray">{{title}}</div>' +                                                             // 25324
   '<ng-transclude></ng-transclude>' +                                                                                 // 25325
   '</div>'                                                                                                            // 25326
   };                                                                                                                  // 25327
   })                                                                                                                  // 25328
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 25329
           $scope.title = 'Lorem Ipsum';                                                                               // 25330
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 25331
         }]);                                                                                                          // 25332
   </script>                                                                                                           // 25333
   <div ng-controller="ExampleController">                                                                             // 25334
   <input ng-model="title"> <br/>                                                                                      // 25335
   <textarea ng-model="text"></textarea> <br/>                                                                         // 25336
   <pane title="{{title}}">{{text}}</pane>                                                                             // 25337
   </div>                                                                                                              // 25338
   </file>                                                                                                             // 25339
   <file name="protractor.js" type="protractor">                                                                       // 25340
   it('should have transcluded', function() {                                                                          // 25341
          var titleElement = element(by.model('title'));                                                               // 25342
          titleElement.clear();                                                                                        // 25343
          titleElement.sendKeys('TITLE');                                                                              // 25344
          var textElement = element(by.model('text'));                                                                 // 25345
          textElement.clear();                                                                                         // 25346
          textElement.sendKeys('TEXT');                                                                                // 25347
          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 25348
          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 25349
        });                                                                                                            // 25350
   </file>                                                                                                             // 25351
   </example>                                                                                                          // 25352
   *                                                                                                                   // 25353
   */                                                                                                                  // 25354
  var ngTranscludeDirective = ngDirective({                                                                            // 25355
    restrict: 'EAC',                                                                                                   // 25356
    link: function($scope, $element, $attrs, controller, $transclude) {                                                // 25357
      if (!$transclude) {                                                                                              // 25358
        throw minErr('ngTransclude')('orphan',                                                                         // 25359
          'Illegal use of ngTransclude directive in the template! ' +                                                  // 25360
          'No parent directive that requires a transclusion found. ' +                                                 // 25361
          'Element: {0}',                                                                                              // 25362
          startingTag($element));                                                                                      // 25363
      }                                                                                                                // 25364
                                                                                                                       // 25365
      $transclude(function(clone) {                                                                                    // 25366
        $element.empty();                                                                                              // 25367
        $element.append(clone);                                                                                        // 25368
      });                                                                                                              // 25369
    }                                                                                                                  // 25370
  });                                                                                                                  // 25371
                                                                                                                       // 25372
  /**                                                                                                                  // 25373
   * @ngdoc directive                                                                                                  // 25374
   * @name script                                                                                                      // 25375
   * @restrict E                                                                                                       // 25376
   *                                                                                                                   // 25377
   * @description                                                                                                      // 25378
   * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the             // 25379
   * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                               // 25380
   * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                 // 25381
   * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be             // 25382
   * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                       // 25383
   *                                                                                                                   // 25384
   * @param {string} type Must be set to `'text/ng-template'`.                                                         // 25385
   * @param {string} id Cache name of the template.                                                                    // 25386
   *                                                                                                                   // 25387
   * @example                                                                                                          // 25388
   <example>                                                                                                           // 25389
   <file name="index.html">                                                                                            // 25390
   <script type="text/ng-template" id="/tpl.html">                                                                     // 25391
   Content of the template.                                                                                            // 25392
   </script>                                                                                                           // 25393
                                                                                                                       // 25394
   <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>                                        // 25395
   <div id="tpl-content" ng-include src="currentTpl"></div>                                                            // 25396
   </file>                                                                                                             // 25397
   <file name="protractor.js" type="protractor">                                                                       // 25398
   it('should load template defined inside script tag', function() {                                                   // 25399
        element(by.css('#tpl-link')).click();                                                                          // 25400
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 25401
      });                                                                                                              // 25402
   </file>                                                                                                             // 25403
   </example>                                                                                                          // 25404
   */                                                                                                                  // 25405
  var scriptDirective = ['$templateCache', function($templateCache) {                                                  // 25406
    return {                                                                                                           // 25407
      restrict: 'E',                                                                                                   // 25408
      terminal: true,                                                                                                  // 25409
      compile: function(element, attr) {                                                                               // 25410
        if (attr.type == 'text/ng-template') {                                                                         // 25411
          var templateUrl = attr.id,                                                                                   // 25412
            text = element[0].text;                                                                                    // 25413
                                                                                                                       // 25414
          $templateCache.put(templateUrl, text);                                                                       // 25415
        }                                                                                                              // 25416
      }                                                                                                                // 25417
    };                                                                                                                 // 25418
  }];                                                                                                                  // 25419
                                                                                                                       // 25420
  var ngOptionsMinErr = minErr('ngOptions');                                                                           // 25421
  /**                                                                                                                  // 25422
   * @ngdoc directive                                                                                                  // 25423
   * @name select                                                                                                      // 25424
   * @restrict E                                                                                                       // 25425
   *                                                                                                                   // 25426
   * @description                                                                                                      // 25427
   * HTML `SELECT` element with angular data-binding.                                                                  // 25428
   *                                                                                                                   // 25429
   * # `ngOptions`                                                                                                     // 25430
   *                                                                                                                   // 25431
   * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                // 25432
   * elements for the `<select>` element using the array or object obtained by evaluating the                          // 25433
   * `ngOptions` comprehension expression.                                                                             // 25434
   *                                                                                                                   // 25435
   * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                  // 25436
   * similar result. However, `ngOptions` provides some benefits such as reducing memory and                           // 25437
   * increasing speed by not creating a new scope for each repeated instance, as well as providing                     // 25438
   * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                  // 25439
   * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                  // 25440
   *  to a non-string value. This is because an option element can only be bound to string values at                   // 25441
   * present.                                                                                                          // 25442
   *                                                                                                                   // 25443
   * When an item in the `<select>` menu is selected, the array element or object property                             // 25444
   * represented by the selected option will be bound to the model identified by the `ngModel`                         // 25445
   * directive.                                                                                                        // 25446
   *                                                                                                                   // 25447
   * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                    // 25448
   * be nested into the `<select>` element. This element will then represent the `null` or "not selected"              // 25449
   * option. See example below for demonstration.                                                                      // 25450
   *                                                                                                                   // 25451
   * <div class="alert alert-warning">                                                                                 // 25452
   * **Note:** `ngModel` compares by reference, not value. This is important when binding to an                        // 25453
   * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).                                  // 25454
   * </div>                                                                                                            // 25455
   *                                                                                                                   // 25456
   * ## `select` **`as`**                                                                                              // 25457
   *                                                                                                                   // 25458
   * Using `select` **`as`** will bind the result of the `select` expression to the model, but                         // 25459
   * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)        // 25460
   * or property name (for object data sources) of the value within the collection. If a **`track by`** expression     // 25461
   * is used, the result of that expression will be set as the value of the `option` and `select` elements.            // 25462
   *                                                                                                                   // 25463
   *                                                                                                                   // 25464
   * ### `select` **`as`** and **`track by`**                                                                          // 25465
   *                                                                                                                   // 25466
   * <div class="alert alert-warning">                                                                                 // 25467
   * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.   // 25468
   * </div>                                                                                                            // 25469
   *                                                                                                                   // 25470
   * Consider the following example:                                                                                   // 25471
   *                                                                                                                   // 25472
   * ```html                                                                                                           // 25473
   * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">          // 25474
   * ```                                                                                                               // 25475
   *                                                                                                                   // 25476
   * ```js                                                                                                             // 25477
   * $scope.values = [{                                                                                                // 25478
 *   id: 1,                                                                                                            // 25479
 *   label: 'aLabel',                                                                                                  // 25480
 *   subItem: { name: 'aSubItem' }                                                                                     // 25481
 * }, {                                                                                                                // 25482
 *   id: 2,                                                                                                            // 25483
 *   label: 'bLabel',                                                                                                  // 25484
 *   subItem: { name: 'bSubItem' }                                                                                     // 25485
 * }];                                                                                                                 // 25486
   *                                                                                                                   // 25487
   * $scope.selected = { name: 'aSubItem' };                                                                           // 25488
   * ```                                                                                                               // 25489
   *                                                                                                                   // 25490
   * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element      // 25491
   * of the data source (to `item` in this example). To calculate whether an element is selected, we do the            // 25492
   * following:                                                                                                        // 25493
   *                                                                                                                   // 25494
   * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`                                    // 25495
   * 2. Apply **`track by`** to the already selected value in `ngModel`.                                               // 25496
   *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected                   // 25497
   *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to                   // 25498
   *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not                    // 25499
   *    selected" option.                                                                                              // 25500
   *                                                                                                                   // 25501
   *                                                                                                                   // 25502
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 25503
   * @param {string=} name Property name of the form under which the control is published.                             // 25504
   * @param {string=} required The control is considered valid only if value is entered.                               // 25505
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 25506
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 25507
   *    `required` when you want to data-bind to the `required` attribute.                                             // 25508
   * @param {comprehension_expression=} ngOptions in one of the following forms:                                       // 25509
   *                                                                                                                   // 25510
   *   * for array data sources:                                                                                       // 25511
   *     * `label` **`for`** `value` **`in`** `array`                                                                  // 25512
   *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                // 25513
   *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                           // 25514
   *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                // 25515
   *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                 // 25516
   *        (for including a filter with `track by`)                                                                   // 25517
   *   * for object data sources:                                                                                      // 25518
   *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                 // 25519
   *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                               // 25520
   *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                           // 25521
   *     * `select` **`as`** `label` **`group by`** `group`                                                            // 25522
   *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                      // 25523
   *                                                                                                                   // 25524
   * Where:                                                                                                            // 25525
   *                                                                                                                   // 25526
   *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                       // 25527
   *   * `value`: local variable which will refer to each item in the `array` or each property value                   // 25528
   *      of `object` during iteration.                                                                                // 25529
   *   * `key`: local variable which will refer to a property name in `object` during iteration.                       // 25530
   *   * `label`: The result of this expression will be the label for `<option>` element. The                          // 25531
   *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                      // 25532
   *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                   // 25533
   *      element. If not specified, `select` expression will default to `value`.                                      // 25534
   *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                   // 25535
   *      DOM element.                                                                                                 // 25536
   *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                // 25537
   *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                     // 25538
   *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                            // 25539
   *      even when the options are recreated (e.g. reloaded from the server).                                         // 25540
   *                                                                                                                   // 25541
   * @example                                                                                                          // 25542
   <example module="selectExample">                                                                                    // 25543
   <file name="index.html">                                                                                            // 25544
   <script>                                                                                                            // 25545
   angular.module('selectExample', [])                                                                                 // 25546
   .controller('ExampleController', ['$scope', function($scope) {                                                      // 25547
            $scope.colors = [                                                                                          // 25548
              {name:'black', shade:'dark'},                                                                            // 25549
              {name:'white', shade:'light'},                                                                           // 25550
              {name:'red', shade:'dark'},                                                                              // 25551
              {name:'blue', shade:'dark'},                                                                             // 25552
              {name:'yellow', shade:'light'}                                                                           // 25553
            ];                                                                                                         // 25554
            $scope.myColor = $scope.colors[2]; // red                                                                  // 25555
          }]);                                                                                                         // 25556
   </script>                                                                                                           // 25557
   <div ng-controller="ExampleController">                                                                             // 25558
   <ul>                                                                                                                // 25559
   <li ng-repeat="color in colors">                                                                                    // 25560
   Name: <input ng-model="color.name">                                                                                 // 25561
   [<a href ng-click="colors.splice($index, 1)">X</a>]                                                                 // 25562
   </li>                                                                                                               // 25563
   <li>                                                                                                                // 25564
   [<a href ng-click="colors.push({})">add</a>]                                                                        // 25565
   </li>                                                                                                               // 25566
   </ul>                                                                                                               // 25567
   <hr/>                                                                                                               // 25568
   Color (null not allowed):                                                                                           // 25569
   <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>                                // 25570
                                                                                                                       // 25571
   Color (null allowed):                                                                                               // 25572
   <span  class="nullable">                                                                                            // 25573
   <select ng-model="myColor" ng-options="color.name for color in colors">                                             // 25574
   <option value="">-- choose color --</option>                                                                        // 25575
   </select>                                                                                                           // 25576
   </span><br/>                                                                                                        // 25577
                                                                                                                       // 25578
   Color grouped by shade:                                                                                             // 25579
   <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">                        // 25580
   </select><br/>                                                                                                      // 25581
                                                                                                                       // 25582
                                                                                                                       // 25583
   Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>                           // 25584
   <hr/>                                                                                                               // 25585
   Currently selected: {{ {selected_color:myColor} }}                                                                  // 25586
   <div style="border:solid 1px black; height:20px"                                                                    // 25587
   ng-style="{'background-color':myColor.name}">                                                                       // 25588
   </div>                                                                                                              // 25589
   </div>                                                                                                              // 25590
   </file>                                                                                                             // 25591
   <file name="protractor.js" type="protractor">                                                                       // 25592
   it('should check ng-options', function() {                                                                          // 25593
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 25594
           element.all(by.model('myColor')).first().click();                                                           // 25595
           element.all(by.css('select[ng-model="myColor"] option')).first().click();                                   // 25596
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 25597
           element(by.css('.nullable select[ng-model="myColor"]')).click();                                            // 25598
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();                         // 25599
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 25600
         });                                                                                                           // 25601
   </file>                                                                                                             // 25602
   </example>                                                                                                          // 25603
   */                                                                                                                  // 25604
                                                                                                                       // 25605
  var ngOptionsDirective = valueFn({                                                                                   // 25606
    restrict: 'A',                                                                                                     // 25607
    terminal: true                                                                                                     // 25608
  });                                                                                                                  // 25609
                                                                                                                       // 25610
// jshint maxlen: false                                                                                                // 25611
  var selectDirective = ['$compile', '$parse', function($compile,   $parse) {                                          // 25612
    //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
    var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nullModelCtrl = {$setViewValue: noop};                                                                           // 25615
// jshint maxlen: 100                                                                                                  // 25616
                                                                                                                       // 25617
    return {                                                                                                           // 25618
      restrict: 'E',                                                                                                   // 25619
      require: ['select', '?ngModel'],                                                                                 // 25620
      controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                // 25621
        var self = this,                                                                                               // 25622
          optionsMap = {},                                                                                             // 25623
          ngModelCtrl = nullModelCtrl,                                                                                 // 25624
          nullOption,                                                                                                  // 25625
          unknownOption;                                                                                               // 25626
                                                                                                                       // 25627
                                                                                                                       // 25628
        self.databound = $attrs.ngModel;                                                                               // 25629
                                                                                                                       // 25630
                                                                                                                       // 25631
        self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {                                              // 25632
          ngModelCtrl = ngModelCtrl_;                                                                                  // 25633
          nullOption = nullOption_;                                                                                    // 25634
          unknownOption = unknownOption_;                                                                              // 25635
        };                                                                                                             // 25636
                                                                                                                       // 25637
                                                                                                                       // 25638
        self.addOption = function(value, element) {                                                                    // 25639
          assertNotHasOwnProperty(value, '"option value"');                                                            // 25640
          optionsMap[value] = true;                                                                                    // 25641
                                                                                                                       // 25642
          if (ngModelCtrl.$viewValue == value) {                                                                       // 25643
            $element.val(value);                                                                                       // 25644
            if (unknownOption.parent()) unknownOption.remove();                                                        // 25645
          }                                                                                                            // 25646
          // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                 // 25647
          // Adding an <option selected="selected"> element to a <select required="required"> should                   // 25648
          // automatically select the new element                                                                      // 25649
          if (element && element[0].hasAttribute('selected')) {                                                        // 25650
            element[0].selected = true;                                                                                // 25651
          }                                                                                                            // 25652
        };                                                                                                             // 25653
                                                                                                                       // 25654
                                                                                                                       // 25655
        self.removeOption = function(value) {                                                                          // 25656
          if (this.hasOption(value)) {                                                                                 // 25657
            delete optionsMap[value];                                                                                  // 25658
            if (ngModelCtrl.$viewValue === value) {                                                                    // 25659
              this.renderUnknownOption(value);                                                                         // 25660
            }                                                                                                          // 25661
          }                                                                                                            // 25662
        };                                                                                                             // 25663
                                                                                                                       // 25664
                                                                                                                       // 25665
        self.renderUnknownOption = function(val) {                                                                     // 25666
          var unknownVal = '? ' + hashKey(val) + ' ?';                                                                 // 25667
          unknownOption.val(unknownVal);                                                                               // 25668
          $element.prepend(unknownOption);                                                                             // 25669
          $element.val(unknownVal);                                                                                    // 25670
          unknownOption.prop('selected', true); // needed for IE                                                       // 25671
        };                                                                                                             // 25672
                                                                                                                       // 25673
                                                                                                                       // 25674
        self.hasOption = function(value) {                                                                             // 25675
          return optionsMap.hasOwnProperty(value);                                                                     // 25676
        };                                                                                                             // 25677
                                                                                                                       // 25678
        $scope.$on('$destroy', function() {                                                                            // 25679
          // disable unknown option so that we don't do work when the whole select is being destroyed                  // 25680
          self.renderUnknownOption = noop;                                                                             // 25681
        });                                                                                                            // 25682
      }],                                                                                                              // 25683
                                                                                                                       // 25684
      link: function(scope, element, attr, ctrls) {                                                                    // 25685
        // if ngModel is not defined, we don't need to do anything                                                     // 25686
        if (!ctrls[1]) return;                                                                                         // 25687
                                                                                                                       // 25688
        var selectCtrl = ctrls[0],                                                                                     // 25689
          ngModelCtrl = ctrls[1],                                                                                      // 25690
          multiple = attr.multiple,                                                                                    // 25691
          optionsExp = attr.ngOptions,                                                                                 // 25692
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)                      // 25693
          emptyOption,                                                                                                 // 25694
          renderScheduled = false,                                                                                     // 25695
        // we can't just jqLite('<option>') since jqLite is not smart enough                                           // 25696
        // to create it in <select> and IE barfs otherwise.                                                            // 25697
          optionTemplate = jqLite(document.createElement('option')),                                                   // 25698
          optGroupTemplate =jqLite(document.createElement('optgroup')),                                                // 25699
          unknownOption = optionTemplate.clone();                                                                      // 25700
                                                                                                                       // 25701
        // find "null" option                                                                                          // 25702
        for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {                            // 25703
          if (children[i].value === '') {                                                                              // 25704
            emptyOption = nullOption = children.eq(i);                                                                 // 25705
            break;                                                                                                     // 25706
          }                                                                                                            // 25707
        }                                                                                                              // 25708
                                                                                                                       // 25709
        selectCtrl.init(ngModelCtrl, nullOption, unknownOption);                                                       // 25710
                                                                                                                       // 25711
        // required validator                                                                                          // 25712
        if (multiple) {                                                                                                // 25713
          ngModelCtrl.$isEmpty = function(value) {                                                                     // 25714
            return !value || value.length === 0;                                                                       // 25715
          };                                                                                                           // 25716
        }                                                                                                              // 25717
                                                                                                                       // 25718
        if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);                                                   // 25719
        else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);                                               // 25720
        else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);                                                   // 25721
                                                                                                                       // 25722
                                                                                                                       // 25723
        ////////////////////////////                                                                                   // 25724
                                                                                                                       // 25725
                                                                                                                       // 25726
                                                                                                                       // 25727
        function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {                                        // 25728
          ngModelCtrl.$render = function() {                                                                           // 25729
            var viewValue = ngModelCtrl.$viewValue;                                                                    // 25730
                                                                                                                       // 25731
            if (selectCtrl.hasOption(viewValue)) {                                                                     // 25732
              if (unknownOption.parent()) unknownOption.remove();                                                      // 25733
              selectElement.val(viewValue);                                                                            // 25734
              if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy                           // 25735
            } else {                                                                                                   // 25736
              if (isUndefined(viewValue) && emptyOption) {                                                             // 25737
                selectElement.val('');                                                                                 // 25738
              } else {                                                                                                 // 25739
                selectCtrl.renderUnknownOption(viewValue);                                                             // 25740
              }                                                                                                        // 25741
            }                                                                                                          // 25742
          };                                                                                                           // 25743
                                                                                                                       // 25744
          selectElement.on('change', function() {                                                                      // 25745
            scope.$apply(function() {                                                                                  // 25746
              if (unknownOption.parent()) unknownOption.remove();                                                      // 25747
              ngModelCtrl.$setViewValue(selectElement.val());                                                          // 25748
            });                                                                                                        // 25749
          });                                                                                                          // 25750
        }                                                                                                              // 25751
                                                                                                                       // 25752
        function setupAsMultiple(scope, selectElement, ctrl) {                                                         // 25753
          var lastView;                                                                                                // 25754
          ctrl.$render = function() {                                                                                  // 25755
            var items = new HashMap(ctrl.$viewValue);                                                                  // 25756
            forEach(selectElement.find('option'), function(option) {                                                   // 25757
              option.selected = isDefined(items.get(option.value));                                                    // 25758
            });                                                                                                        // 25759
          };                                                                                                           // 25760
                                                                                                                       // 25761
          // we have to do it on each watch since ngModel watches reference, but                                       // 25762
          // we need to work of an array, so we need to see if anything was inserted/removed                           // 25763
          scope.$watch(function selectMultipleWatch() {                                                                // 25764
            if (!equals(lastView, ctrl.$viewValue)) {                                                                  // 25765
              lastView = shallowCopy(ctrl.$viewValue);                                                                 // 25766
              ctrl.$render();                                                                                          // 25767
            }                                                                                                          // 25768
          });                                                                                                          // 25769
                                                                                                                       // 25770
          selectElement.on('change', function() {                                                                      // 25771
            scope.$apply(function() {                                                                                  // 25772
              var array = [];                                                                                          // 25773
              forEach(selectElement.find('option'), function(option) {                                                 // 25774
                if (option.selected) {                                                                                 // 25775
                  array.push(option.value);                                                                            // 25776
                }                                                                                                      // 25777
              });                                                                                                      // 25778
              ctrl.$setViewValue(array);                                                                               // 25779
            });                                                                                                        // 25780
          });                                                                                                          // 25781
        }                                                                                                              // 25782
                                                                                                                       // 25783
        function setupAsOptions(scope, selectElement, ctrl) {                                                          // 25784
          var match;                                                                                                   // 25785
                                                                                                                       // 25786
          if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {                                                        // 25787
            throw ngOptionsMinErr('iexp',                                                                              // 25788
              "Expected expression in form of " +                                                                      // 25789
              "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +                                        // 25790
              " but got '{0}'. Element: {1}",                                                                          // 25791
              optionsExp, startingTag(selectElement));                                                                 // 25792
          }                                                                                                            // 25793
                                                                                                                       // 25794
          var displayFn = $parse(match[2] || match[1]),                                                                // 25795
            valueName = match[4] || match[6],                                                                          // 25796
            selectAs = / as /.test(match[0]) && match[1],                                                              // 25797
            selectAsFn = selectAs ? $parse(selectAs) : null,                                                           // 25798
            keyName = match[5],                                                                                        // 25799
            groupByFn = $parse(match[3] || ''),                                                                        // 25800
            valueFn = $parse(match[2] ? match[1] : valueName),                                                         // 25801
            valuesFn = $parse(match[7]),                                                                               // 25802
            track = match[8],                                                                                          // 25803
            trackFn = track ? $parse(match[8]) : null,                                                                 // 25804
            trackKeysCache = {},                                                                                       // 25805
          // This is an array of array of existing option groups in DOM.                                               // 25806
          // We try to reuse these if possible                                                                         // 25807
          // - optionGroupsCache[0] is the options with no option group                                                // 25808
          // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element                            // 25809
            optionGroupsCache = [[{element: selectElement, label:''}]],                                                // 25810
          //re-usable object to represent option's locals                                                              // 25811
            locals = {};                                                                                               // 25812
                                                                                                                       // 25813
          if (nullOption) {                                                                                            // 25814
            // compile the element since there might be bindings in it                                                 // 25815
            $compile(nullOption)(scope);                                                                               // 25816
                                                                                                                       // 25817
            // remove the class, which is added automatically because we recompile the element and it                  // 25818
            // becomes the compilation root                                                                            // 25819
            nullOption.removeClass('ng-scope');                                                                        // 25820
                                                                                                                       // 25821
            // we need to remove it before calling selectElement.empty() because otherwise IE will                     // 25822
            // remove the label from the element. wtf?                                                                 // 25823
            nullOption.remove();                                                                                       // 25824
          }                                                                                                            // 25825
                                                                                                                       // 25826
          // clear contents, we'll add what's needed based on the model                                                // 25827
          selectElement.empty();                                                                                       // 25828
                                                                                                                       // 25829
          selectElement.on('change', selectionChanged);                                                                // 25830
                                                                                                                       // 25831
          ctrl.$render = render;                                                                                       // 25832
                                                                                                                       // 25833
          scope.$watchCollection(valuesFn, scheduleRendering);                                                         // 25834
          scope.$watchCollection(getLabels, scheduleRendering);                                                        // 25835
                                                                                                                       // 25836
          if (multiple) {                                                                                              // 25837
            scope.$watchCollection(function() { return ctrl.$modelValue; }, scheduleRendering);                        // 25838
          }                                                                                                            // 25839
                                                                                                                       // 25840
          // ------------------------------------------------------------------ //                                     // 25841
                                                                                                                       // 25842
          function callExpression(exprFn, key, value) {                                                                // 25843
            locals[valueName] = value;                                                                                 // 25844
            if (keyName) locals[keyName] = key;                                                                        // 25845
            return exprFn(scope, locals);                                                                              // 25846
          }                                                                                                            // 25847
                                                                                                                       // 25848
          function selectionChanged() {                                                                                // 25849
            scope.$apply(function() {                                                                                  // 25850
              var collection = valuesFn(scope) || [];                                                                  // 25851
              var viewValue;                                                                                           // 25852
              if (multiple) {                                                                                          // 25853
                viewValue = [];                                                                                        // 25854
                forEach(selectElement.val(), function(selectedKey) {                                                   // 25855
                  selectedKey = trackFn ? trackKeysCache[selectedKey] : selectedKey;                                   // 25856
                  viewValue.push(getViewValue(selectedKey, collection[selectedKey]));                                  // 25857
                });                                                                                                    // 25858
              } else {                                                                                                 // 25859
                var selectedKey = trackFn ? trackKeysCache[selectElement.val()] : selectElement.val();                 // 25860
                viewValue = getViewValue(selectedKey, collection[selectedKey]);                                        // 25861
              }                                                                                                        // 25862
              ctrl.$setViewValue(viewValue);                                                                           // 25863
              render();                                                                                                // 25864
            });                                                                                                        // 25865
          }                                                                                                            // 25866
                                                                                                                       // 25867
          function getViewValue(key, value) {                                                                          // 25868
            if (key === '?') {                                                                                         // 25869
              return undefined;                                                                                        // 25870
            } else if (key === '') {                                                                                   // 25871
              return null;                                                                                             // 25872
            } else {                                                                                                   // 25873
              var viewValueFn = selectAsFn ? selectAsFn : valueFn;                                                     // 25874
              return callExpression(viewValueFn, key, value);                                                          // 25875
            }                                                                                                          // 25876
          }                                                                                                            // 25877
                                                                                                                       // 25878
          function getLabels() {                                                                                       // 25879
            var values = valuesFn(scope);                                                                              // 25880
            var toDisplay;                                                                                             // 25881
            if (values && isArray(values)) {                                                                           // 25882
              toDisplay = new Array(values.length);                                                                    // 25883
              for (var i = 0, ii = values.length; i < ii; i++) {                                                       // 25884
                toDisplay[i] = callExpression(displayFn, i, values[i]);                                                // 25885
              }                                                                                                        // 25886
              return toDisplay;                                                                                        // 25887
            } else if (values) {                                                                                       // 25888
              // TODO: Add a test for this case                                                                        // 25889
              toDisplay = {};                                                                                          // 25890
              for (var prop in values) {                                                                               // 25891
                if (values.hasOwnProperty(prop)) {                                                                     // 25892
                  toDisplay[prop] = callExpression(displayFn, prop, values[prop]);                                     // 25893
                }                                                                                                      // 25894
              }                                                                                                        // 25895
            }                                                                                                          // 25896
            return toDisplay;                                                                                          // 25897
          }                                                                                                            // 25898
                                                                                                                       // 25899
          function createIsSelectedFn(viewValue) {                                                                     // 25900
            var selectedSet;                                                                                           // 25901
            if (multiple) {                                                                                            // 25902
              if (trackFn && isArray(viewValue)) {                                                                     // 25903
                                                                                                                       // 25904
                selectedSet = new HashMap([]);                                                                         // 25905
                for (var trackIndex = 0; trackIndex < viewValue.length; trackIndex++) {                                // 25906
                  // tracking by key                                                                                   // 25907
                  selectedSet.put(callExpression(trackFn, null, viewValue[trackIndex]), true);                         // 25908
                }                                                                                                      // 25909
              } else {                                                                                                 // 25910
                selectedSet = new HashMap(viewValue);                                                                  // 25911
              }                                                                                                        // 25912
            } else if (trackFn) {                                                                                      // 25913
              viewValue = callExpression(trackFn, null, viewValue);                                                    // 25914
            }                                                                                                          // 25915
                                                                                                                       // 25916
            return function isSelected(key, value) {                                                                   // 25917
              var compareValueFn;                                                                                      // 25918
              if (trackFn) {                                                                                           // 25919
                compareValueFn = trackFn;                                                                              // 25920
              } else if (selectAsFn) {                                                                                 // 25921
                compareValueFn = selectAsFn;                                                                           // 25922
              } else {                                                                                                 // 25923
                compareValueFn = valueFn;                                                                              // 25924
              }                                                                                                        // 25925
                                                                                                                       // 25926
              if (multiple) {                                                                                          // 25927
                return isDefined(selectedSet.remove(callExpression(compareValueFn, key, value)));                      // 25928
              } else {                                                                                                 // 25929
                return viewValue === callExpression(compareValueFn, key, value);                                       // 25930
              }                                                                                                        // 25931
            };                                                                                                         // 25932
          }                                                                                                            // 25933
                                                                                                                       // 25934
          function scheduleRendering() {                                                                               // 25935
            if (!renderScheduled) {                                                                                    // 25936
              scope.$$postDigest(render);                                                                              // 25937
              renderScheduled = true;                                                                                  // 25938
            }                                                                                                          // 25939
          }                                                                                                            // 25940
                                                                                                                       // 25941
          /**                                                                                                          // 25942
           * A new labelMap is created with each render.                                                               // 25943
           * This function is called for each existing option with added=false,                                        // 25944
           * and each new option with added=true.                                                                      // 25945
           * - Labels that are passed to this method twice,                                                            // 25946
           * (once with added=true and once with added=false) will end up with a value of 0, and                       // 25947
           * will cause no change to happen to the corresponding option.                                               // 25948
           * - Labels that are passed to this method only once with added=false will end up with a                     // 25949
           * value of -1 and will eventually be passed to selectCtrl.removeOption()                                    // 25950
           * - Labels that are passed to this method only once with added=true will end up with a                      // 25951
           * value of 1 and will eventually be passed to selectCtrl.addOption()                                        // 25952
           */                                                                                                          // 25953
          function updateLabelMap(labelMap, label, added) {                                                            // 25954
            labelMap[label] = labelMap[label] || 0;                                                                    // 25955
            labelMap[label] += (added ? 1 : -1);                                                                       // 25956
          }                                                                                                            // 25957
                                                                                                                       // 25958
          function render() {                                                                                          // 25959
            renderScheduled = false;                                                                                   // 25960
                                                                                                                       // 25961
            // Temporary location for the option groups before we render them                                          // 25962
            var optionGroups = {'':[]},                                                                                // 25963
              optionGroupNames = [''],                                                                                 // 25964
              optionGroupName,                                                                                         // 25965
              optionGroup,                                                                                             // 25966
              option,                                                                                                  // 25967
              existingParent, existingOptions, existingOption,                                                         // 25968
              viewValue = ctrl.$viewValue,                                                                             // 25969
              values = valuesFn(scope) || [],                                                                          // 25970
              keys = keyName ? sortedKeys(values) : values,                                                            // 25971
              key,                                                                                                     // 25972
              value,                                                                                                   // 25973
              groupLength, length,                                                                                     // 25974
              groupIndex, index,                                                                                       // 25975
              labelMap = {},                                                                                           // 25976
              selected,                                                                                                // 25977
              isSelected = createIsSelectedFn(viewValue),                                                              // 25978
              anySelected = false,                                                                                     // 25979
              lastElement,                                                                                             // 25980
              element,                                                                                                 // 25981
              label,                                                                                                   // 25982
              optionId;                                                                                                // 25983
                                                                                                                       // 25984
            trackKeysCache = {};                                                                                       // 25985
                                                                                                                       // 25986
            // We now build up the list of options we need (we merge later)                                            // 25987
            for (index = 0; length = keys.length, index < length; index++) {                                           // 25988
              key = index;                                                                                             // 25989
              if (keyName) {                                                                                           // 25990
                key = keys[index];                                                                                     // 25991
                if (key.charAt(0) === '$') continue;                                                                   // 25992
              }                                                                                                        // 25993
              value = values[key];                                                                                     // 25994
                                                                                                                       // 25995
              optionGroupName = callExpression(groupByFn, key, value) || '';                                           // 25996
              if (!(optionGroup = optionGroups[optionGroupName])) {                                                    // 25997
                optionGroup = optionGroups[optionGroupName] = [];                                                      // 25998
                optionGroupNames.push(optionGroupName);                                                                // 25999
              }                                                                                                        // 26000
                                                                                                                       // 26001
              selected = isSelected(key, value);                                                                       // 26002
              anySelected = anySelected || selected;                                                                   // 26003
                                                                                                                       // 26004
              label = callExpression(displayFn, key, value); // what will be seen by the user                          // 26005
                                                                                                                       // 26006
              // doing displayFn(scope, locals) || '' overwrites zero values                                           // 26007
              label = isDefined(label) ? label : '';                                                                   // 26008
              optionId = trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index);                           // 26009
              if (trackFn) {                                                                                           // 26010
                trackKeysCache[optionId] = key;                                                                        // 26011
              }                                                                                                        // 26012
                                                                                                                       // 26013
              optionGroup.push({                                                                                       // 26014
                // either the index into array or key from object                                                      // 26015
                id: optionId,                                                                                          // 26016
                label: label,                                                                                          // 26017
                selected: selected                   // determine if we should be selected                             // 26018
              });                                                                                                      // 26019
            }                                                                                                          // 26020
            if (!multiple) {                                                                                           // 26021
              if (nullOption || viewValue === null) {                                                                  // 26022
                // insert null option if we have a placeholder, or the model is null                                   // 26023
                optionGroups[''].unshift({id:'', label:'', selected:!anySelected});                                    // 26024
              } else if (!anySelected) {                                                                               // 26025
                // option could not be found, we have to insert the undefined item                                     // 26026
                optionGroups[''].unshift({id:'?', label:'', selected:true});                                           // 26027
              }                                                                                                        // 26028
            }                                                                                                          // 26029
                                                                                                                       // 26030
            // Now we need to update the list of DOM nodes to match the optionGroups we computed above                 // 26031
            for (groupIndex = 0, groupLength = optionGroupNames.length;                                                // 26032
                 groupIndex < groupLength;                                                                             // 26033
                 groupIndex++) {                                                                                       // 26034
              // current option group name or '' if no group                                                           // 26035
              optionGroupName = optionGroupNames[groupIndex];                                                          // 26036
                                                                                                                       // 26037
              // list of options for that group. (first item has the parent)                                           // 26038
              optionGroup = optionGroups[optionGroupName];                                                             // 26039
                                                                                                                       // 26040
              if (optionGroupsCache.length <= groupIndex) {                                                            // 26041
                // we need to grow the optionGroups                                                                    // 26042
                existingParent = {                                                                                     // 26043
                  element: optGroupTemplate.clone().attr('label', optionGroupName),                                    // 26044
                  label: optionGroup.label                                                                             // 26045
                };                                                                                                     // 26046
                existingOptions = [existingParent];                                                                    // 26047
                optionGroupsCache.push(existingOptions);                                                               // 26048
                selectElement.append(existingParent.element);                                                          // 26049
              } else {                                                                                                 // 26050
                existingOptions = optionGroupsCache[groupIndex];                                                       // 26051
                existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element                  // 26052
                                                                                                                       // 26053
                // update the OPTGROUP label if not the same.                                                          // 26054
                if (existingParent.label != optionGroupName) {                                                         // 26055
                  existingParent.element.attr('label', existingParent.label = optionGroupName);                        // 26056
                }                                                                                                      // 26057
              }                                                                                                        // 26058
                                                                                                                       // 26059
              lastElement = null;  // start at the beginning                                                           // 26060
              for (index = 0, length = optionGroup.length; index < length; index++) {                                  // 26061
                option = optionGroup[index];                                                                           // 26062
                if ((existingOption = existingOptions[index + 1])) {                                                   // 26063
                  // reuse elements                                                                                    // 26064
                  lastElement = existingOption.element;                                                                // 26065
                  if (existingOption.label !== option.label) {                                                         // 26066
                    updateLabelMap(labelMap, existingOption.label, false);                                             // 26067
                    updateLabelMap(labelMap, option.label, true);                                                      // 26068
                    lastElement.text(existingOption.label = option.label);                                             // 26069
                    lastElement.prop('label', existingOption.label);                                                   // 26070
                  }                                                                                                    // 26071
                  if (existingOption.id !== option.id) {                                                               // 26072
                    lastElement.val(existingOption.id = option.id);                                                    // 26073
                  }                                                                                                    // 26074
                  // lastElement.prop('selected') provided by jQuery has side-effects                                  // 26075
                  if (lastElement[0].selected !== option.selected) {                                                   // 26076
                    lastElement.prop('selected', (existingOption.selected = option.selected));                         // 26077
                    if (msie) {                                                                                        // 26078
                      // See #7692                                                                                     // 26079
                      // The selected item wouldn't visually update on IE without this.                                // 26080
                      // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well                       // 26081
                      lastElement.prop('selected', existingOption.selected);                                           // 26082
                    }                                                                                                  // 26083
                  }                                                                                                    // 26084
                } else {                                                                                               // 26085
                  // grow elements                                                                                     // 26086
                                                                                                                       // 26087
                  // if it's a null option                                                                             // 26088
                  if (option.id === '' && nullOption) {                                                                // 26089
                    // put back the pre-compiled element                                                               // 26090
                    element = nullOption;                                                                              // 26091
                  } else {                                                                                             // 26092
                    // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but                            // 26093
                    // in this version of jQuery on some browser the .text() returns a string                          // 26094
                    // rather then the element.                                                                        // 26095
                    (element = optionTemplate.clone())                                                                 // 26096
                      .val(option.id)                                                                                  // 26097
                      .prop('selected', option.selected)                                                               // 26098
                      .attr('selected', option.selected)                                                               // 26099
                      .prop('label', option.label)                                                                     // 26100
                      .text(option.label);                                                                             // 26101
                  }                                                                                                    // 26102
                                                                                                                       // 26103
                  existingOptions.push(existingOption = {                                                              // 26104
                    element: element,                                                                                  // 26105
                    label: option.label,                                                                               // 26106
                    id: option.id,                                                                                     // 26107
                    selected: option.selected                                                                          // 26108
                  });                                                                                                  // 26109
                  updateLabelMap(labelMap, option.label, true);                                                        // 26110
                  if (lastElement) {                                                                                   // 26111
                    lastElement.after(element);                                                                        // 26112
                  } else {                                                                                             // 26113
                    existingParent.element.append(element);                                                            // 26114
                  }                                                                                                    // 26115
                  lastElement = element;                                                                               // 26116
                }                                                                                                      // 26117
              }                                                                                                        // 26118
              // remove any excessive OPTIONs in a group                                                               // 26119
              index++; // increment since the existingOptions[0] is parent element not OPTION                          // 26120
              while (existingOptions.length > index) {                                                                 // 26121
                option = existingOptions.pop();                                                                        // 26122
                updateLabelMap(labelMap, option.label, false);                                                         // 26123
                option.element.remove();                                                                               // 26124
              }                                                                                                        // 26125
            }                                                                                                          // 26126
            // remove any excessive OPTGROUPs from select                                                              // 26127
            while (optionGroupsCache.length > groupIndex) {                                                            // 26128
              // remove all the labels in the option group                                                             // 26129
              optionGroup = optionGroupsCache.pop();                                                                   // 26130
              for (index = 1; index < optionGroup.length; ++index) {                                                   // 26131
                updateLabelMap(labelMap, optionGroup[index].label, false);                                             // 26132
              }                                                                                                        // 26133
              optionGroup[0].element.remove();                                                                         // 26134
            }                                                                                                          // 26135
            forEach(labelMap, function(count, label) {                                                                 // 26136
              if (count > 0) {                                                                                         // 26137
                selectCtrl.addOption(label);                                                                           // 26138
              } else if (count < 0) {                                                                                  // 26139
                selectCtrl.removeOption(label);                                                                        // 26140
              }                                                                                                        // 26141
            });                                                                                                        // 26142
          }                                                                                                            // 26143
        }                                                                                                              // 26144
      }                                                                                                                // 26145
    };                                                                                                                 // 26146
  }];                                                                                                                  // 26147
                                                                                                                       // 26148
  var optionDirective = ['$interpolate', function($interpolate) {                                                      // 26149
    var nullSelectCtrl = {                                                                                             // 26150
      addOption: noop,                                                                                                 // 26151
      removeOption: noop                                                                                               // 26152
    };                                                                                                                 // 26153
                                                                                                                       // 26154
    return {                                                                                                           // 26155
      restrict: 'E',                                                                                                   // 26156
      priority: 100,                                                                                                   // 26157
      compile: function(element, attr) {                                                                               // 26158
        if (isUndefined(attr.value)) {                                                                                 // 26159
          var interpolateFn = $interpolate(element.text(), true);                                                      // 26160
          if (!interpolateFn) {                                                                                        // 26161
            attr.$set('value', element.text());                                                                        // 26162
          }                                                                                                            // 26163
        }                                                                                                              // 26164
                                                                                                                       // 26165
        return function(scope, element, attr) {                                                                        // 26166
          var selectCtrlName = '$selectController',                                                                    // 26167
            parent = element.parent(),                                                                                 // 26168
            selectCtrl = parent.data(selectCtrlName) ||                                                                // 26169
              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 26170
                                                                                                                       // 26171
          if (!selectCtrl || !selectCtrl.databound) {                                                                  // 26172
            selectCtrl = nullSelectCtrl;                                                                               // 26173
          }                                                                                                            // 26174
                                                                                                                       // 26175
          if (interpolateFn) {                                                                                         // 26176
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {                              // 26177
              attr.$set('value', newVal);                                                                              // 26178
              if (oldVal !== newVal) {                                                                                 // 26179
                selectCtrl.removeOption(oldVal);                                                                       // 26180
              }                                                                                                        // 26181
              selectCtrl.addOption(newVal, element);                                                                   // 26182
            });                                                                                                        // 26183
          } else {                                                                                                     // 26184
            selectCtrl.addOption(attr.value, element);                                                                 // 26185
          }                                                                                                            // 26186
                                                                                                                       // 26187
          element.on('$destroy', function() {                                                                          // 26188
            selectCtrl.removeOption(attr.value);                                                                       // 26189
          });                                                                                                          // 26190
        };                                                                                                             // 26191
      }                                                                                                                // 26192
    };                                                                                                                 // 26193
  }];                                                                                                                  // 26194
                                                                                                                       // 26195
  var styleDirective = valueFn({                                                                                       // 26196
    restrict: 'E',                                                                                                     // 26197
    terminal: false                                                                                                    // 26198
  });                                                                                                                  // 26199
                                                                                                                       // 26200
  var requiredDirective = function() {                                                                                 // 26201
    return {                                                                                                           // 26202
      restrict: 'A',                                                                                                   // 26203
      require: '?ngModel',                                                                                             // 26204
      link: function(scope, elm, attr, ctrl) {                                                                         // 26205
        if (!ctrl) return;                                                                                             // 26206
        attr.required = true; // force truthy in case we are on non input element                                      // 26207
                                                                                                                       // 26208
        ctrl.$validators.required = function(modelValue, viewValue) {                                                  // 26209
          return !attr.required || !ctrl.$isEmpty(viewValue);                                                          // 26210
        };                                                                                                             // 26211
                                                                                                                       // 26212
        attr.$observe('required', function() {                                                                         // 26213
          ctrl.$validate();                                                                                            // 26214
        });                                                                                                            // 26215
      }                                                                                                                // 26216
    };                                                                                                                 // 26217
  };                                                                                                                   // 26218
                                                                                                                       // 26219
                                                                                                                       // 26220
  var patternDirective = function() {                                                                                  // 26221
    return {                                                                                                           // 26222
      restrict: 'A',                                                                                                   // 26223
      require: '?ngModel',                                                                                             // 26224
      link: function(scope, elm, attr, ctrl) {                                                                         // 26225
        if (!ctrl) return;                                                                                             // 26226
                                                                                                                       // 26227
        var regexp, patternExp = attr.ngPattern || attr.pattern;                                                       // 26228
        attr.$observe('pattern', function(regex) {                                                                     // 26229
          if (isString(regex) && regex.length > 0) {                                                                   // 26230
            regex = new RegExp('^' + regex + '$');                                                                     // 26231
          }                                                                                                            // 26232
                                                                                                                       // 26233
          if (regex && !regex.test) {                                                                                  // 26234
            throw minErr('ngPattern')('noregexp',                                                                      // 26235
              'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                     // 26236
              regex, startingTag(elm));                                                                                // 26237
          }                                                                                                            // 26238
                                                                                                                       // 26239
          regexp = regex || undefined;                                                                                 // 26240
          ctrl.$validate();                                                                                            // 26241
        });                                                                                                            // 26242
                                                                                                                       // 26243
        ctrl.$validators.pattern = function(value) {                                                                   // 26244
          return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);                                    // 26245
        };                                                                                                             // 26246
      }                                                                                                                // 26247
    };                                                                                                                 // 26248
  };                                                                                                                   // 26249
                                                                                                                       // 26250
                                                                                                                       // 26251
  var maxlengthDirective = function() {                                                                                // 26252
    return {                                                                                                           // 26253
      restrict: 'A',                                                                                                   // 26254
      require: '?ngModel',                                                                                             // 26255
      link: function(scope, elm, attr, ctrl) {                                                                         // 26256
        if (!ctrl) return;                                                                                             // 26257
                                                                                                                       // 26258
        var maxlength = -1;                                                                                            // 26259
        attr.$observe('maxlength', function(value) {                                                                   // 26260
          var intVal = int(value);                                                                                     // 26261
          maxlength = isNaN(intVal) ? -1 : intVal;                                                                     // 26262
          ctrl.$validate();                                                                                            // 26263
        });                                                                                                            // 26264
        ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                 // 26265
          return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                       // 26266
        };                                                                                                             // 26267
      }                                                                                                                // 26268
    };                                                                                                                 // 26269
  };                                                                                                                   // 26270
                                                                                                                       // 26271
  var minlengthDirective = function() {                                                                                // 26272
    return {                                                                                                           // 26273
      restrict: 'A',                                                                                                   // 26274
      require: '?ngModel',                                                                                             // 26275
      link: function(scope, elm, attr, ctrl) {                                                                         // 26276
        if (!ctrl) return;                                                                                             // 26277
                                                                                                                       // 26278
        var minlength = 0;                                                                                             // 26279
        attr.$observe('minlength', function(value) {                                                                   // 26280
          minlength = int(value) || 0;                                                                                 // 26281
          ctrl.$validate();                                                                                            // 26282
        });                                                                                                            // 26283
        ctrl.$validators.minlength = function(modelValue, viewValue) {                                                 // 26284
          return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                            // 26285
        };                                                                                                             // 26286
      }                                                                                                                // 26287
    };                                                                                                                 // 26288
  };                                                                                                                   // 26289
                                                                                                                       // 26290
  if (window.angular.bootstrap) {                                                                                      // 26291
    //AngularJS is already loaded, so we can return here...                                                            // 26292
    console.log('WARNING: Tried to load angular more than once.');                                                     // 26293
    return;                                                                                                            // 26294
  }                                                                                                                    // 26295
                                                                                                                       // 26296
  //try to bind to jquery now so that one can write jqLite(document).ready()                                           // 26297
  //but we will rebind on bootstrap again.                                                                             // 26298
  bindJQuery();                                                                                                        // 26299
                                                                                                                       // 26300
  publishExternalAPI(angular);                                                                                         // 26301
                                                                                                                       // 26302
  jqLite(document).ready(function() {                                                                                  // 26303
    angularInit(document, bootstrap);                                                                                  // 26304
  });                                                                                                                  // 26305
                                                                                                                       // 26306
})(window, document);                                                                                                  // 26307
                                                                                                                       // 26308
!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);

///////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angularjs:angular'] = {};

})();
